bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	27	4	add
2	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	27	4	add
3	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    int  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	27	None	add
4	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	27	4	add
5	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	27	4	add
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	27	4	add
7	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	27	4	add
8	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	109	None	add
9	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	109	None	add
10	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  Long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  Long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    Long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	109	None	add
11	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	109	None	add
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=    STATE_UNSTARTED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	140	1	add
13	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=    STATE_UNSTARTED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	140	1	add
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=    STATE_UNSTARTED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	140	1	add
15	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=    STATE_UNSTARTED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	140	1	add
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=    STATE_UNSTARTED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	140	1	add
17	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=    STATE_UNSTARTED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	140	1	add
18	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  If(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  If(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=    STATE_UNSTARTED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    If(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	non-compiled	[CE]  ';'  expected	140	None	add
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	104	4	add
20	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	104	4	add
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	104	4	add
22	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	104	4	add
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	104	4	add
24	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	104	4	add
25	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	104	4	add
26	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	104	4	add
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    	compilable	  [FE]  AssertionFailedError  	103	5	replace
28	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    	compilable	  [FE]  AssertionFailedError  	103	5	replace
29	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	15	1	add
30	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	15	1	add
31	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	15	1	add
32	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	15	1	add
33	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	15	4	add
34	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	15	4	add
35	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    this.runningState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  possible  loss  of  precision	15	None	add
36	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	15	1	add
37	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	15	1	add
38	[BUG]  [BUGGY]  double  splitState  =  System.currentTimeMillis();  this.splitState  =  splitState;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  double  splitState  =  System.currentTimeMillis();  this.splitState  =  splitState;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	double  splitState  =  System.currentTimeMillis();  this.splitState  =  splitState;	  float    splitState    =    System.currentTimeMillis();    this.splitState    =    splitState;    	non-compiled	[CE]  possible  loss  of  precision	138	None	replace
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_RUNNING;    if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	162	1	replace
40	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_RUNNING;    if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	162	1	replace
41	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_RUNNING;    if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	162	1	replace
42	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_RUNNING;    if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	162	1	replace
43	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_RUNNING;    if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	162	5	replace
44	[BUG]  [BUGGY]  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_RUNNING;    if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	162	5	replace
45	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  stopTime;  this.startTime  =  System.currentTimeMillis()  -  stopTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.startTime    =    System.currentTimeMillis()    -    stopTime;    this.startTime  =  System.currentTimeMillis()  -  stopTime;	  	compilable	  [FE]  AssertionFailedError  	163	4	add
46	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  stopTime;  this.startTime  =  System.currentTimeMillis()  -  stopTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  stopTime;  this.startTime  =  System.currentTimeMillis()  -  stopTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.startTime    =    System.currentTimeMillis()    -    stopTime;    this.startTime  =  System.currentTimeMillis()  -  stopTime;	  	compilable	  [FE]  AssertionFailedError  	163	4	add
47	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  stopTime;  int  startTime  =  System.currentTimeMillis()  -  stopTime;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  stopTime;  int  startTime  =  System.currentTimeMillis()  -  stopTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.startTime    =    System.currentTimeMillis()    -    stopTime;    int  startTime  =  System.currentTimeMillis()  -  stopTime;	  	non-compiled	[CE]  possible  loss  of  precision	163	None	add
48	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  stopTime;  if(this.startTime!=  System.currentTimeMillis()  -  stopTime;  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  stopTime;  if(this.startTime!=  System.currentTimeMillis()  -  stopTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.startTime    =    System.currentTimeMillis()    -    stopTime;    if(this.startTime!=  System.currentTimeMillis()  -  stopTime;	  	non-compiled	[CE]  ')'  expected	163	None	add
49	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  stopTime;  if(this.startTime!=  System.currentTimeMillis()  -  stopTime);  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.startTime    =    System.currentTimeMillis()    -    stopTime;    if(this.startTime!=  System.currentTimeMillis()  -  stopTime);	  	compilable	  [FE]  AssertionFailedError  	163	4	add
50	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  stopTime;  if(this.startTime!=  System.currentTimeMillis()  -  stopTime);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  stopTime;  if(this.startTime!=  System.currentTimeMillis()  -  stopTime);  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.startTime    =    System.currentTimeMillis()    -    stopTime;    if(this.startTime!=  System.currentTimeMillis()  -  stopTime);	  	compilable	  [FE]  AssertionFailedError  	163	4	add
51	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  double  splitState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	double  splitState  =  System.currentTimeMillis();	  int    splitState    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	94	1	replace
52	[BUG]  [BUGGY]  double  splitState  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  double  splitState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	double  splitState  =  System.currentTimeMillis();	  int    splitState    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	94	1	replace
53	[BUG]  [BUGGY]  short  splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  short  splitState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	short  splitState  =  System.currentTimeMillis();	  int    splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	94	None	replace
54	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	56	5	add
55	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	56	5	add
56	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	56	5	add
57	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	56	5	add
58	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }	  	compilable	  [FE]  IllegalStateException  	56	5	add
59	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }	  	compilable	  [FE]  IllegalStateException  	56	5	add
60	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	57	1	replace
61	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	57	1	replace
62	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	57	5	replace
63	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	57	5	replace
64	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;	  	compilable	  [FE]  AssertionFailedError  	61	1	add
65	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;	  	compilable	  [FE]  AssertionFailedError  	61	1	add
66	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	61	1	add
67	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	61	1	add
68	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  if(stopTime!=  null)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  }  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  if(stopTime!=  null)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        this.runningState    =    STATE_RUNNING;    if(stopTime!=  null)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	61	None	add
69	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  int  runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        this.runningState    =    STATE_RUNNING;    int  runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;	  	compilable	  [FE]  AssertionFailedError  	61	1	add
70	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  int  runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  int  runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        this.runningState    =    STATE_RUNNING;    int  runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;	  	compilable	  [FE]  AssertionFailedError  	61	1	add
71	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running..   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running..   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running..   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running..   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running..   ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running..   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	144	None	add
72	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running..   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running..   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running..   ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running..   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running..   ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running..   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	144	None	add
73	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	99	1	add
74	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	99	1	add
75	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE	  	non-compiled	[CE]  ')'  expected	99	None	add
76	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this	  	non-compiled	[CE]  ')'  expected	99	None	add
77	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_	  	non-compiled	[CE]  ')'  expected	99	None	add
78	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >=  STATE  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >=  STATE  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >=  STATE	  	non-compiled	[CE]  ')'  expected	99	None	add
79	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeM  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeM  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeM	          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    startTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  ';'  expected	34	None	replace
80	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }	          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	34	4	replace
81	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }	          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	34	4	replace
82	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.	          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    startTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
83	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_SPLIT;  this.runningState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState    =    STATE_SPLIT;    this.runningState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	54	1	add
84	[BUG]  [BUGGY]  this.runningState  =  STATE_SPLIT;  this.runningState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_SPLIT;  this.runningState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState    =    STATE_SPLIT;    this.runningState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	54	1	add
85	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_SPLIT;  if(this.runningState!=  STATE_SPLIT)  {  this.runningState  =  STATE_SPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState    =    STATE_SPLIT;    if(this.runningState!=  STATE_SPLIT)  {  this.runningState  =  STATE_SPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	54	1	add
86	[BUG]  [BUGGY]  this.runningState  =  STATE_SPLIT;  if(this.runningState!=  STATE_SPLIT)  {  this.runningState  =  STATE_SPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_SPLIT;  if(this.runningState!=  STATE_SPLIT)  {  this.runningState  =  STATE_SPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState    =    STATE_SPLIT;    if(this.runningState!=  STATE_SPLIT)  {  this.runningState  =  STATE_SPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	54	1	add
87	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_SPLIT;  if(this.runningState!=  STATE_SPLIT)  {  this.runningState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState    =    STATE_SPLIT;    if(this.runningState!=  STATE_SPLIT)  {  this.runningState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	54	1	add
88	[BUG]  [BUGGY]  this.runningState  =  STATE_SPLIT;  if(this.runningState!=  STATE_SPLIT)  {  this.runningState  =  STATE_SPLIT;  }  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_SPLIT;  if(this.runningState!=  STATE_SPLIT)  {  this.runningState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState    =    STATE_SPLIT;    if(this.runningState!=  STATE_SPLIT)  {  this.runningState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	54	1	add
89	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_SPLIT;  if(this.runningState!=  STATE_SPLIT)  {  this.runningState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState    =    STATE_SPLIT;    if(this.runningState!=  STATE_SPLIT)  {  this.runningState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	54	4	add
90	[BUG]  [BUGGY]  this.runningState  =  STATE_SPLIT;  if(this.runningState!=  STATE_SPLIT)  {  this.runningState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_SPLIT;  if(this.runningState!=  STATE_SPLIT)  {  this.runningState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState    =    STATE_SPLIT;    if(this.runningState!=  STATE_SPLIT)  {  this.runningState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	54	4	add
91	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            RuntimeException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_SPLIT;  this.runningState  =  STATE_SPLIT;  if(this.runningState!=  STATE_SPLIT)  {  this.runningState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState    =    STATE_SPLIT;    this.runningState  =  STATE_SPLIT;  if(this.runningState!=  STATE_SPLIT)  {  this.runningState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	54	1	add
92	[BUG]  [BUGGY]  this.runningState  =  STATE_SPLIT;  this.runningState  =  STATE_SPLIT;  if(this.runningState!=  STATE_SPLIT)  {  this.runningState  =  STATE_SPLIT;  }  [FE]  AssertionFailedError  [FE]            RuntimeException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_SPLIT;  this.runningState  =  STATE_SPLIT;  if(this.runningState!=  STATE_SPLIT)  {  this.runningState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState    =    STATE_SPLIT;    this.runningState  =  STATE_SPLIT;  if(this.runningState!=  STATE_SPLIT)  {  this.runningState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	54	1	add
93	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long    splitState    =    System.currentTimeMillis()    -    1;    long  splitState  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	90	None	add
94	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  int  splitState  =  System.currentTimeMillis()  -  1;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  int  splitState  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long    splitState    =    System.currentTimeMillis()    -    1;    int  splitState  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	90	None	add
95	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long    splitState    =    System.currentTimeMillis()    -    1;    long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	90	None	add
96	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  Long  splitState  =  System.currentTimeMillis()  -  1;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  Long  splitState  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long    splitState    =    System.currentTimeMillis()    -    1;    Long  splitState  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	90	None	add
97	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long    splitState    =    System.currentTimeMillis()    -    1;    long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	90	None	add
98	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.splitState  =  STATE_STOPPED;	  long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	110	1	replace
99	[BUG]  [BUGGY]  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.splitState  =  STATE_STOPPED;	  long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	110	1	replace
100	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  possible  loss  of  precision	110	None	replace
101	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	110	1	replace
102	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	110	1	replace
103	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime;  long  splitState  =  System.currentTimeMillis()  -  stopTime;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime;  long  splitState  =  System.currentTimeMillis()  -  stopTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long    splitState    =    System.currentTimeMillis()    -    stopTime;    long  splitState  =  System.currentTimeMillis()  -  stopTime;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	112	None	add
104	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime;  Long  splitState  =  System.currentTimeMillis()  -  stopTime;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime;  Long  splitState  =  System.currentTimeMillis()  -  stopTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long    splitState    =    System.currentTimeMillis()    -    stopTime;    Long  splitState  =  System.currentTimeMillis()  -  stopTime;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	112	None	add
105	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime;  int  startTime  =  System.currentTimeMillis()  -  stopTime;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime;  int  startTime  =  System.currentTimeMillis()  -  stopTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long    splitState    =    System.currentTimeMillis()    -    stopTime;    int  startTime  =  System.currentTimeMillis()  -  stopTime;	  	non-compiled	[CE]  possible  loss  of  precision	112	None	add
106	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime;  int  splitState  =  System.currentTimeMillis()  -  stopTime;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime;  int  splitState  =  System.currentTimeMillis()  -  stopTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long    splitState    =    System.currentTimeMillis()    -    stopTime;    int  splitState  =  System.currentTimeMillis()  -  stopTime;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	112	None	add
107	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	16	1	replace
108	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	16	1	replace
109	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  unclosed  string  literal	16	None	replace
110	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	49	4	add
111	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	49	4	add
112	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	49	4	add
113	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	49	4	add
114	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	49	4	add
115	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	49	4	add
116	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	49	4	add
117	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	49	4	add
118	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
119	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	79	1	add
120	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	79	1	add
121	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	non-compiled	[CE]  illegal  start  of  expression	79	None	add
122	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  int  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  int  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    int  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	non-compiled	[CE]  not  a  statement	79	None	add
123	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  }	  	compilable	  [FE]  AssertionFailedError  	79	1	add
124	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  }	  	compilable	  [FE]  AssertionFailedError  	79	1	add
125	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SU  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SU  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SU	  	non-compiled	[CE]  ';'  expected	79	None	add
126	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	17	1	add
127	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	17	1	add
128	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  System.currentTimeMillis()  -  1;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime    =    System.currentTimeMillis()    -    1;    this.runningState  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  possible  loss  of  precision	17	None	add
129	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis()  -  1;  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis()  -  1;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime    =    System.currentTimeMillis()    -    1;    if(this.runningState!=  STATE_RUNNING)  {  System.currentTimeMillis()  -  1;  }	  	non-compiled	[CE]  not  a  statement	17	None	add
130	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  System.currentTimeMillis()  -  1;  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime    =    System.currentTimeMillis()    -    1;    System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  not  a  statement	17	None	add
131	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	stopTime    =    System.currentTimeMillis()    -    1;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	17	1	add
132	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime    =    System.currentTimeMillis()    -    1;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	17	1	add
133	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	82	1	replace
134	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	82	1	replace
135	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	82	4	replace
136	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	82	4	replace
137	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
138	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
139	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
140	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
141	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
142	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
143	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
144	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
145	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeM  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeM  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeM	  	non-compiled	[CE]  ';'  expected	63	None	add
146	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState        =        STATE_SUSPENDED;        if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	151	1	add
147	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	151	1	add
148	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeM  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeM  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeM	  	non-compiled	[CE]  ';'  expected	151	None	add
149	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SU  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SU  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SU	  	non-compiled	[CE]  ';'  expected	151	None	add
150	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this	  	non-compiled	[CE]  not  a  statement	151	None	add
151	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	151	None	add
152	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    	compilable	  [FE]  AssertionFailedError  	168	1	replace
153	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    	compilable	  [FE]  AssertionFailedError  	168	1	replace
154	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SU  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SU  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SU	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    	non-compiled	[CE]  ';'  expected	168	None	replace
155	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    	non-compiled	[CE]  ';'  expected	168	None	replace
156	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeM  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeM  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeM	  	non-compiled	[CE]  ';'  expected	29	None	add
157	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	29	4	add
158	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	29	4	add
159	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeM  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeM  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeM	  	non-compiled	[CE]  ';'  expected	29	None	add
160	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
161	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this	  	non-compiled	[CE]  not  a  statement	29	None	add
162	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	159	1	add
163	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	159	1	add
164	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	159	1	add
165	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	159	1	add
166	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	159	1	add
167	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	159	1	add
168	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  int  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  int  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    int  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	non-compiled	[CE]  not  a  statement	159	None	add
169	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeM  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeM  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeM	  	non-compiled	[CE]  ';'  expected	159	None	add
170	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis()  -  1;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	int  splitState  =  System.currentTimeMillis()  -  1;	  long    splitState    =    System.currentTimeMillis()    -    1;    	non-compiled	[CE]  possible  loss  of  precision	91	None	replace
171	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_RUNNING;    if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	70	1	replace
172	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_RUNNING;    if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	70	1	replace
173	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_RUNNING;    if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	70	1	replace
174	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_RUNNING;    if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	70	1	replace
175	[BUG]  [BUGGY]  short  splitState  =  System.currentTimeMillis();  this.splitState  =  splitState;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  short  splitState  =  System.currentTimeMillis();  this.splitState  =  splitState;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	short  splitState  =  System.currentTimeMillis();  this.splitState  =  splitState;	  int    splitState    =    System.currentTimeMillis();    this.splitState    =    splitState;    	non-compiled	[CE]  possible  loss  of  precision	108	None	replace
176	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	166	5	replace
177	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	166	5	replace
178	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	166	1	replace
179	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	166	1	replace
180	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	147	4	replace
181	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	147	4	replace
182	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	int  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	147	None	replace
183	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING)  {  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	147	1	replace
184	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	147	1	replace
185	[BUG]  [BUGGY]  This.runningState  =  STATE_RUNNING;  [CE]  cannot  find  symbol  This  [FE]        AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  This.runningState  =  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	This.runningState  =  STATE_RUNNING;	  This.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  cannot  find  symbol  This	139	None	replace
186	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	167	1	add
187	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	167	1	add
188	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	167	1	add
189	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	167	1	add
190	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	167	1	add
191	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	167	1	add
192	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	167	1	add
193	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	167	1	add
194	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	167	1	add
195	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	167	1	add
196	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;	  	compilable	  [FE]  AssertionFailedError  	169	4	add
197	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;	  	compilable	  [FE]  AssertionFailedError  	169	4	add
198	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  this.runningState  =  System.currentTimeMillis()  -  startTime;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  this.runningState  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime    =    System.currentTimeMillis()    -    startTime;    this.runningState  =  System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  possible  loss  of  precision	169	None	add
199	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  startTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	stopTime    =    System.currentTimeMillis()    -    startTime;    startTime  =  System.currentTimeMillis()  -  startTime;	  	compilable	  [FE]  AssertionFailedError  	169	4	add
200	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  startTime  =  System.currentTimeMillis()  -  startTime;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  startTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime    =    System.currentTimeMillis()    -    startTime;    startTime  =  System.currentTimeMillis()  -  startTime;	  	compilable	  [FE]  AssertionFailedError  	169	4	add
201	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  long  startTime  =  System.currentTimeMillis()  -  startTime;  [CE]  variable  startTime  might  not  have  been  initialized  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  long  startTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime    =    System.currentTimeMillis()    -    startTime;    long  startTime  =  System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  variable  startTime  might  not  have  been  initialized	169	None	add
202	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  System.currentTimeMillis()  -  startTime;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime    =    System.currentTimeMillis()    -    startTime;    System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  not  a  statement	169	None	add
203	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	95	1	add
204	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	95	1	add
205	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE	  	non-compiled	[CE]  ')'  expected	95	None	add
206	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_	  	non-compiled	[CE]  ')'  expected	95	None	add
207	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this	  	non-compiled	[CE]  ')'  expected	95	None	add
208	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.running  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.running  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.running	  	non-compiled	[CE]  ')'  expected	95	None	add
209	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	86	1	replace
210	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	86	1	replace
211	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  possible  loss  of  precision	86	None	replace
212	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  possible  loss  of  precision	86	None	replace
213	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  AssertionFailedError  	52	1	replace
214	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  AssertionFailedError  	52	1	replace
215	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  unclosed  string  literal	52	None	replace
216	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  AssertionFailedError  	52	1	replace
217	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  AssertionFailedError  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  AssertionFailedError  	52	1	replace
218	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  /  stopTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	long  splitState  =  System.currentTimeMillis()  /  stopTime;	  long    splitState    =    System.currentTimeMillis()    -    stopTime;    	compilable	  [FE]  AssertionFailedError  	113	1	replace
219	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  /  stopTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  /  stopTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long  splitState  =  System.currentTimeMillis()  /  stopTime;	  long    splitState    =    System.currentTimeMillis()    -    stopTime;    	compilable	  [FE]  AssertionFailedError  	113	1	replace
220	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	long  splitState  =  System.currentTimeMillis()  -  this.startTime;	  long    splitState    =    System.currentTimeMillis()    -    stopTime;    	compilable	  [FE]  AssertionFailedError  	113	1	replace
221	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  this.startTime;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long  splitState  =  System.currentTimeMillis()  -  this.startTime;	  long    splitState    =    System.currentTimeMillis()    -    stopTime;    	compilable	  [FE]  AssertionFailedError  	113	1	replace
222	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING)  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	105	4	replace
223	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	105	4	replace
224	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	73	None	add
225	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	73	5	add
226	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	73	5	add
227	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	73	None	add
228	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	73	5	add
229	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	73	5	add
230	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	45	1	add
231	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	45	1	add
232	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	45	1	add
233	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	45	1	add
234	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	45	1	add
235	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	45	1	add
236	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  int  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  int  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    int  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	non-compiled	[CE]  not  a  statement	45	None	add
237	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeM  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeM  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeM	  	non-compiled	[CE]  ';'  expected	45	None	add
238	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_RUNNING;  this.splitState  =  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.splitState    =    STATE_RUNNING;    this.splitState  =  STATE_RUNNING;	  	compilable	  [FE]  AssertionFailedError  	25	1	add
239	[BUG]  [BUGGY]  this.splitState  =  STATE_RUNNING;  this.splitState  =  STATE_RUNNING;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_RUNNING;  this.splitState  =  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.splitState    =    STATE_RUNNING;    this.splitState  =  STATE_RUNNING;	  	compilable	  [FE]  AssertionFailedError  	25	1	add
240	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_RUNNING;  if(this.splitState!=  STATE_RUNNING)  {  this.splitState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.splitState    =    STATE_RUNNING;    if(this.splitState!=  STATE_RUNNING)  {  this.splitState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	25	1	add
241	[BUG]  [BUGGY]  this.splitState  =  STATE_RUNNING;  if(this.splitState!=  STATE_RUNNING)  {  this.splitState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_RUNNING;  if(this.splitState!=  STATE_RUNNING)  {  this.splitState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.splitState    =    STATE_RUNNING;    if(this.splitState!=  STATE_RUNNING)  {  this.splitState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	25	1	add
242	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_RUNNING;  if(this.splitState!=  STATE_RUNNING)  {  this.splitState  =  STATE_RUNNING;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.splitState    =    STATE_RUNNING;    if(this.splitState!=  STATE_RUNNING)  {  this.splitState  =  STATE_RUNNING;  }	  	compilable	  [FE]  AssertionFailedError  	25	1	add
243	[BUG]  [BUGGY]  this.splitState  =  STATE_RUNNING;  if(this.splitState!=  STATE_RUNNING)  {  this.splitState  =  STATE_RUNNING;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_RUNNING;  if(this.splitState!=  STATE_RUNNING)  {  this.splitState  =  STATE_RUNNING;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.splitState    =    STATE_RUNNING;    if(this.splitState!=  STATE_RUNNING)  {  this.splitState  =  STATE_RUNNING;  }	  	compilable	  [FE]  AssertionFailedError  	25	1	add
244	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_RUNNING;  if(this.splitState!=  STATE_RUNNING)  {  this.splitState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.splitState    =    STATE_RUNNING;    if(this.splitState!=  STATE_RUNNING)  {  this.splitState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	25	4	add
245	[BUG]  [BUGGY]  this.splitState  =  STATE_RUNNING;  if(this.splitState!=  STATE_RUNNING)  {  this.splitState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_RUNNING;  if(this.splitState!=  STATE_RUNNING)  {  this.splitState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.splitState    =    STATE_RUNNING;    if(this.splitState!=  STATE_RUNNING)  {  this.splitState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	25	4	add
246	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_RUNNING;  if(this.splitState!=  STATE_RUNNING)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.splitState    =    STATE_RUNNING;    if(this.splitState!=  STATE_RUNNING)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	25	1	add
247	[BUG]  [BUGGY]  this.splitState  =  STATE_RUNNING;  if(this.splitState!=  STATE_RUNNING)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_RUNNING;  if(this.splitState!=  STATE_RUNNING)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.splitState    =    STATE_RUNNING;    if(this.splitState!=  STATE_RUNNING)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	25	1	add
248	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	51	5	add
249	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	51	5	add
250	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	51	5	add
251	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	51	5	add
252	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	51	5	add
253	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	51	5	add
254	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]          IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	51	None	add
255	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	51	5	add
256	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	51	5	add
257	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	130	1	replace
258	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	130	1	replace
259	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	130	4	replace
260	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	130	4	replace
261	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	130	5	replace
262	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	130	5	replace
263	[BUG]  [BUGGY]  this.splitState  =  System.currentTimeMillis()  -  stopTime;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  System.currentTimeMillis()  -  stopTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.splitState  =  System.currentTimeMillis()  -  stopTime;	  this.splitState    =    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  possible  loss  of  precision	111	None	replace
264	[BUG]  [BUGGY]  this.splitState  =  System.currentTimeMillis()  /  startTime;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  System.currentTimeMillis()  /  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.splitState  =  System.currentTimeMillis()  /  startTime;	  this.splitState    =    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  possible  loss  of  precision	111	None	replace
265	[BUG]  [BUGGY]  this.splitState  =  System.currentTimeMillis()  -  STATE_RUNNING;  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  System.currentTimeMillis()  -  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.splitState  =  System.currentTimeMillis()  -  STATE_RUNNING;	  this.splitState    =    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  possible  loss  of  precision	111	None	replace
266	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	142	None	add
267	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	142	None	add
268	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  Long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  Long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    Long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	142	None	add
269	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	12	1	add
270	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	12	1	add
271	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	12	1	add
272	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	12	1	add
273	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	12	4	add
274	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	12	4	add
275	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    this.runningState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  possible  loss  of  precision	12	None	add
276	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	12	1	add
277	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	12	1	add
278	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	136	1	add
279	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	136	1	add
280	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	136	1	add
281	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	136	1	add
282	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	136	1	add
283	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	136	1	add
284	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	136	1	add
285	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	136	1	add
286	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	136	1	add
287	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	136	1	add
288	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    +=    System.currentTimeMillis();    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	83	4	add
289	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    +=    System.currentTimeMillis();    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	83	4	add
290	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    +=    System.currentTimeMillis();    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
291	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeM  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeM  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    +=    System.currentTimeMillis();    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeM	  	non-compiled	[CE]  ';'  expected	83	None	add
292	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    +=    System.currentTimeMillis();    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this	  	non-compiled	[CE]  not  a  statement	83	None	add
293	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SU  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SU  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    +=    System.currentTimeMillis();    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SU	  	non-compiled	[CE]  ';'  expected	83	None	add
294	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    StopWatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	121	1	replace
295	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    StopWatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	121	1	replace
296	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    StopWatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	121	5	replace
297	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    StopWatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	121	5	replace
298	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=    STATE_UNSTARTED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	157	1	add
299	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=    STATE_UNSTARTED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	157	1	add
300	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=    STATE_UNSTARTED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	157	1	add
301	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=    STATE_UNSTARTED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	157	1	add
302	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=    STATE_UNSTARTED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	157	1	add
303	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=    STATE_UNSTARTED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	157	1	add
304	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=    STATE_UNSTARTED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	157	1	add
305	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=    STATE_UNSTARTED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	157	1	add
306	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	106	1	add
307	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	106	1	add
308	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  possible  loss  of  precision	106	None	add
309	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	106	4	add
310	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	106	4	add
311	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  Stopwatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  Stopwatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    Stopwatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  cannot  find  symbol	106	None	add
312	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	106	1	add
313	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	106	1	add
314	[BUG]  [BUGGY]  this.splitState  =  System.currentTimeMillis()  /  1;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  System.currentTimeMillis()  /  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.splitState  =  System.currentTimeMillis()  /  1;	  this.splitState    =    System.currentTimeMillis()    +    1;    	non-compiled	[CE]  possible  loss  of  precision	24	None	replace
315	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  /  stopTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.startTime  =  System.currentTimeMillis()  /  stopTime;	  this.startTime    =    System.currentTimeMillis()    -    stopTime;    	compilable	  [FE]  AssertionFailedError  	164	4	replace
316	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  /  stopTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  /  stopTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.startTime  =  System.currentTimeMillis()  /  stopTime;	  this.startTime    =    System.currentTimeMillis()    -    stopTime;    	compilable	  [FE]  AssertionFailedError  	164	4	replace
317	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.startTime  =  System.currentTimeMillis()  -  startTime;	  this.startTime    =    System.currentTimeMillis()    -    stopTime;    	compilable	  [FE]  AssertionFailedError  	164	4	replace
318	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  startTime;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.startTime  =  System.currentTimeMillis()  -  startTime;	  this.startTime    =    System.currentTimeMillis()    -    stopTime;    	compilable	  [FE]  AssertionFailedError  	164	4	replace
319	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	13	1	replace
320	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	13	1	replace
321	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	13	1	replace
322	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	13	1	replace
323	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	5	5	replace
324	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	5	5	replace
325	[BUG]  [BUGGY]  stopTime  >>  STATE_SPLIT)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  not  a  statement  [FE]          IllegalStateException      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  >>  STATE_SPLIT)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime  >>  STATE_SPLIT)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  stopTime!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  not  a  statement	58	None	replace
326	[BUG]  [BUGGY]  stopTime  >>  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  not  a  statement  [FE]            IllegalStateException      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  >>  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime  >>  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  stopTime!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  not  a  statement	58	None	replace
327	[BUG]  [BUGGY]  stopTime  >>  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  not  a  statement  [FE]              IllegalStateException      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  >>  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime  >>  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  stopTime!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  not  a  statement	58	None	replace
328	[BUG]  [BUGGY]  stopTime!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [CE]  not  a  statement  [FE]                IllegalStateException      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  stopTime!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	non-compiled	[CE]  not  a  statement	58	None	replace
329	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	123	5	replace
330	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	123	5	replace
331	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	65	1	add
332	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	65	1	add
333	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	65	1	add
334	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	65	1	add
335	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	65	1	add
336	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	65	1	add
337	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	65	1	add
338	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	65	1	add
339	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	65	1	add
340	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	65	1	add
341	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	69	4	add
342	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	69	4	add
343	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	69	4	add
344	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	69	4	add
345	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	69	4	add
346	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	69	4	add
347	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	69	4	add
348	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	69	4	add
349	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	69	4	add
350	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	69	4	add
351	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  this.startTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.startTime    =    System.currentTimeMillis()    -    1;    this.startTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	37	4	add
352	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  this.startTime  =  System.currentTimeMillis()  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  this.startTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.startTime    =    System.currentTimeMillis()    -    1;    this.startTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	37	4	add
353	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  if(this.startTime!=  System.currentTimeMillis()  -  1)  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  stopTime  =  System.currentTimeMillis()  -  1;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.startTime    =    System.currentTimeMillis()    -    1;    if(this.startTime!=  System.currentTimeMillis()  -  1)  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  stopTime  =  System.currentTimeMillis()  -  1;  }	  	compilable	  [FE]  AssertionFailedError  	37	4	add
354	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  if(this.startTime!=  System.currentTimeMillis()  -  1)  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  stopTime  =  System.currentTimeMillis()  -  1;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  if(this.startTime!=  System.currentTimeMillis()  -  1)  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  stopTime  =  System.currentTimeMillis()  -  1;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.startTime    =    System.currentTimeMillis()    -    1;    if(this.startTime!=  System.currentTimeMillis()  -  1)  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  stopTime  =  System.currentTimeMillis()  -  1;  }	  	compilable	  [FE]  AssertionFailedError  	37	4	add
355	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  if(this.startTime!=  System.currentTimeMillis()  -  1)  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.startTime    =    System.currentTimeMillis()    -    1;    if(this.startTime!=  System.currentTimeMillis()  -  1)  {  this.startTime  =  System.currentTimeMillis()  -  1;  }	  	compilable	  [FE]  AssertionFailedError  	37	4	add
356	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  if(this.startTime!=  System.currentTimeMillis()  -  1)  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  if(this.startTime!=  System.currentTimeMillis()  -  1)  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.startTime    =    System.currentTimeMillis()    -    1;    if(this.startTime!=  System.currentTimeMillis()  -  1)  {  this.startTime  =  System.currentTimeMillis()  -  1;  }	  	compilable	  [FE]  AssertionFailedError  	37	4	add
357	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  if(this.startTime!=  System.currentTimeMillis()  -  1)  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  startTime  =  System.currentTimeMillis()  -  1;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.startTime    =    System.currentTimeMillis()    -    1;    if(this.startTime!=  System.currentTimeMillis()  -  1)  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  startTime  =  System.currentTimeMillis()  -  1;  }	  	compilable	  [FE]  AssertionFailedError  	37	4	add
358	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  if(this.startTime!=  System.currentTimeMillis()  -  1)  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  startTime  =  System.currentTimeMillis()  -  1;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  if(this.startTime!=  System.currentTimeMillis()  -  1)  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  startTime  =  System.currentTimeMillis()  -  1;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.startTime    =    System.currentTimeMillis()    -    1;    if(this.startTime!=  System.currentTimeMillis()  -  1)  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  startTime  =  System.currentTimeMillis()  -  1;  }	  	compilable	  [FE]  AssertionFailedError  	37	4	add
359	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	135	1	replace
360	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	135	1	replace
361	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	135	1	replace
362	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	135	1	replace
363	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	135	1	replace
364	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	135	1	replace
365	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.splitState  =  STATE_SPLIT;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	compilable	  [FE]  AssertionFailedError  	146	1	replace
366	[BUG]  [BUGGY]  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.splitState  =  STATE_SPLIT;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	compilable	  [FE]  AssertionFailedError  	146	1	replace
367	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	compilable	  [FE]  AssertionFailedError  	146	1	replace
368	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	compilable	  [FE]  AssertionFailedError  	146	1	replace
369	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  possible  loss  of  precision	146	None	replace
370	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  possible  loss  of  precision	146	None	replace
371	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	8	1	add
372	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	8	1	add
373	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	8	None	add
374	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	8	4	add
375	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	8	4	add
376	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  StopWatch.this.runningState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  StopWatch.this.runningState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    StopWatch.this.runningState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	8	None	add
377	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  time  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [CE]  cannot  find  symbol  time  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  time  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    time  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  cannot  find  symbol  time	8	None	add
378	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  long  splitState  =  System.currentTimeMillis()  -  startTime;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  long  splitState  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long    splitState    =    System.currentTimeMillis()    -    startTime;    long  splitState  =  System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	155	None	add
379	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  Long  splitState  =  System.currentTimeMillis()  -  startTime;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  Long  splitState  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long    splitState    =    System.currentTimeMillis()    -    startTime;    Long  splitState  =  System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	155	None	add
380	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  int  startTime  =  System.currentTimeMillis()  -  startTime;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  int  startTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long    splitState    =    System.currentTimeMillis()    -    startTime;    int  startTime  =  System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  possible  loss  of  precision	155	None	add
381	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  long  startTime  =  System.currentTimeMillis()  -  startTime;  [CE]  variable  startTime  might  not  have  been  initialized  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  long  startTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long    splitState    =    System.currentTimeMillis()    -    startTime;    long  startTime  =  System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  variable  startTime  might  not  have  been  initialized	155	None	add
382	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long    stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	114	None	add
383	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long    stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	114	None	add
384	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long    stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	114	None	add
385	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long    stopTime    =    System.currentTimeMillis();    int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  possible  loss  of  precision	114	None	add
386	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long    stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	114	None	add
387	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	stopTime  =  System.currentTimeMillis()  -  this.runningState;	  stopTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	170	1	replace
388	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime  =  System.currentTimeMillis()  -  this.runningState;	  stopTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	170	1	replace
389	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	stopTime  =  System.currentTimeMillis()  /  startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	170	1	replace
390	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  startTime;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime  =  System.currentTimeMillis()  /  startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	170	1	replace
391	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	stopTime  =  System.currentTimeMillis()  -  this.splitState;	  stopTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	170	1	replace
392	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime  =  System.currentTimeMillis()  -  this.splitState;	  stopTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	170	1	replace
393	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	165	None	add
394	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	165	1	add
395	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	165	1	add
396	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	165	None	add
397	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  long  splitState  =  System.currentTimeMillis();  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  long  splitState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    long  splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	165	None	add
398	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	165	1	add
399	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    long  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	165	1	add
400	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.runningState  =  STATE_  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.runningState  =  STATE_  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    this.runningState    =    STATE_UNSTARTED;    }    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.runningState  =  STATE_	  	non-compiled	[CE]  ';'  expected	35	None	add
401	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    this.runningState    =    STATE_UNSTARTED;    }    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	35	4	add
402	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    this.runningState    =    STATE_UNSTARTED;    }    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	35	4	add
403	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.runningState  =  STATE_UNSTARTED;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    this.runningState    =    STATE_UNSTARTED;    }    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.runningState  =  STATE_UNSTARTED;  }	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
404	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    this.runningState    =    STATE_UNSTARTED;    }    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	35	4	add
405	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    this.runningState    =    STATE_UNSTARTED;    }    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	35	4	add
406	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.runningState  =  STATE_SUSPENDED;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    this.runningState    =    STATE_UNSTARTED;    }    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.runningState  =  STATE_SUSPENDED;  }	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
407	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	97	1	add
408	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	97	1	add
409	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE	  	non-compiled	[CE]  ')'  expected	97	None	add
410	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	97	1	add
411	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	97	1	add
412	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this	  	non-compiled	[CE]  ')'  expected	97	None	add
413	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE	  	non-compiled	[CE]  ')'  expected	97	None	add
414	[BUG]  [BUGGY]  while(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  [CE]  illegal  start  of  expression  [FE]          IllegalStateException      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  while(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	while(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;	  while(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
415	[BUG]  [BUGGY]  while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	while(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;	  while(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
416	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }	  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    +=    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	84	1	replace
417	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }	  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    +=    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	84	1	replace
418	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }	  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    +=    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	84	1	replace
419	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }	  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    +=    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	84	1	replace
420	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
421	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
422	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
423	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
424	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	1	1	add
425	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	1	1	add
426	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  possible  loss  of  precision	1	None	add
427	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  possible  loss  of  precision	1	None	add
428	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	122	1	add
429	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	122	1	add
430	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	122	1	add
431	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	122	1	add
432	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	122	1	add
433	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	122	1	add
434	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  possible  loss  of  precision	122	None	add
435	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	122	1	add
436	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	122	1	add
437	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  this.startTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.startTime    =    System.currentTimeMillis()    +    1;    this.startTime  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	39	4	add
438	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  this.startTime  =  System.currentTimeMillis()  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  this.startTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.startTime    =    System.currentTimeMillis()    +    1;    this.startTime  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	39	4	add
439	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  if(this.startTime!=  System.currentTimeMillis()  +  1)  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  else  {  stopTime  =  System.currentTimeMillis()  +  1;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.startTime    =    System.currentTimeMillis()    +    1;    if(this.startTime!=  System.currentTimeMillis()  +  1)  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  else  {  stopTime  =  System.currentTimeMillis()  +  1;  }	  	compilable	  [FE]  AssertionFailedError  	39	4	add
440	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  if(this.startTime!=  System.currentTimeMillis()  +  1)  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  else  {  stopTime  =  System.currentTimeMillis()  +  1;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  if(this.startTime!=  System.currentTimeMillis()  +  1)  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  else  {  stopTime  =  System.currentTimeMillis()  +  1;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.startTime    =    System.currentTimeMillis()    +    1;    if(this.startTime!=  System.currentTimeMillis()  +  1)  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  else  {  stopTime  =  System.currentTimeMillis()  +  1;  }	  	compilable	  [FE]  AssertionFailedError  	39	4	add
441	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  if(this.startTime!=  System.currentTimeMillis()  +  1)  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.startTime    =    System.currentTimeMillis()    +    1;    if(this.startTime!=  System.currentTimeMillis()  +  1)  {  this.startTime  =  System.currentTimeMillis()  +  1;  }	  	compilable	  [FE]  AssertionFailedError  	39	4	add
442	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  if(this.startTime!=  System.currentTimeMillis()  +  1)  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  if(this.startTime!=  System.currentTimeMillis()  +  1)  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.startTime    =    System.currentTimeMillis()    +    1;    if(this.startTime!=  System.currentTimeMillis()  +  1)  {  this.startTime  =  System.currentTimeMillis()  +  1;  }	  	compilable	  [FE]  AssertionFailedError  	39	4	add
443	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  if(this.startTime!=  System.currentTimeMillis()  +  1)  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  else  {  startTime  =  System.currentTimeMillis()  +  1;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.startTime    =    System.currentTimeMillis()    +    1;    if(this.startTime!=  System.currentTimeMillis()  +  1)  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  else  {  startTime  =  System.currentTimeMillis()  +  1;  }	  	compilable	  [FE]  AssertionFailedError  	39	4	add
444	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  if(this.startTime!=  System.currentTimeMillis()  +  1)  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  else  {  startTime  =  System.currentTimeMillis()  +  1;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  if(this.startTime!=  System.currentTimeMillis()  +  1)  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  else  {  startTime  =  System.currentTimeMillis()  +  1;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.startTime    =    System.currentTimeMillis()    +    1;    if(this.startTime!=  System.currentTimeMillis()  +  1)  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  else  {  startTime  =  System.currentTimeMillis()  +  1;  }	  	compilable	  [FE]  AssertionFailedError  	39	4	add
445	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	28	1	replace
446	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	28	1	replace
447	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	28	1	replace
448	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	28	1	replace
449	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	28	4	replace
450	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	28	4	replace
451	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_RUNNING;    if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	160	1	replace
452	[BUG]  [BUGGY]  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_RUNNING;    if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	160	1	replace
453	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_RUNNING;    if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	160	1	replace
454	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_RUNNING;    if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	160	1	replace
455	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    long    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	128	1	replace
456	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    long    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	128	1	replace
457	[BUG]  [BUGGY]  int  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	int  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    long    stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	128	None	replace
458	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    long    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	128	1	replace
459	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    long    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	128	1	replace
460	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	14	None	replace
461	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	14	None	replace
462	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	14	None	replace
463	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  System.currentTimeMillis();  }  [CE]  possible  loss  of  precision  [FE]                    AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	14	None	replace
464	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState        =        STATE_SUSPENDED;        this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	75	1	add
465	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	75	1	add
466	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;  int  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;  int  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        this.runningState    =    STATE_SUSPENDED;    int  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  not  a  statement	75	None	add
467	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState        =        STATE_SUSPENDED;        this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	75	1	add
468	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	75	1	add
469	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;  int  runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState        =        STATE_SUSPENDED;        this.runningState    =    STATE_SUSPENDED;    int  runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	75	1	add
470	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;  int  runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;  int  runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        this.runningState    =    STATE_SUSPENDED;    int  runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	75	1	add
471	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState        =        STATE_SUSPENDED;        this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	75	1	add
472	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	75	1	add
473	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  +  1;  long  splitState  =  System.currentTimeMillis()  +  1;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  +  1;  long  splitState  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long    splitState    =    System.currentTimeMillis()    +    1;    long  splitState  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	92	None	add
474	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  +  1;  long  splitState  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  +  1;  long  splitState  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long    splitState    =    System.currentTimeMillis()    +    1;    long  splitState  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	92	None	add
475	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  +  1;  int  splitState  =  System.currentTimeMillis()  +  1;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  +  1;  int  splitState  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long    splitState    =    System.currentTimeMillis()    +    1;    int  splitState  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	92	None	add
476	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  +  1;  Long  splitState  =  System.currentTimeMillis()  +  1;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  +  1;  Long  splitState  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long    splitState    =    System.currentTimeMillis()    +    1;    Long  splitState  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	92	None	add
477	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  +  1;  long  splitState  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_SUSPENDED;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  +  1;  long  splitState  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long    splitState    =    System.currentTimeMillis()    +    1;    long  splitState  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	92	None	add
478	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	134	1	add
479	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	134	1	add
480	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	134	1	add
481	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	134	1	add
482	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	134	1	add
483	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	134	1	add
484	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  int  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  int  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    int  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	non-compiled	[CE]  not  a  statement	134	None	add
485	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	134	1	add
486	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	134	1	add
487	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	50	4	replace
488	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	50	4	replace
489	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	50	5	replace
490	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	50	5	replace
491	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  if(this.runningState    ==    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	132	1	replace
492	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING  ||  this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  if(this.runningState    ==    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	132	1	replace
493	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	10	1	add
494	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	10	1	add
495	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	10	1	add
496	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	10	1	add
497	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	10	1	add
498	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	10	1	add
499	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	10	4	add
500	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	10	4	add
501	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.runningState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.runningState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  possible  loss  of  precision	10	None	add
502	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState  ==  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState    ==    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	131	1	add
503	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState  ==  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState    ==    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  AssertionFailedError  	131	1	add
504	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState  ==  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState    ==    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	131	5	add
505	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState  ==  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState    ==    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	131	5	add
506	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeM  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeM  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeM	  	non-compiled	[CE]  ';'  expected	33	None	add
507	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	33	4	add
508	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	33	4	add
509	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeM  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeM  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeM	  	non-compiled	[CE]  ';'  expected	33	None	add
510	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
511	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
512	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis()  +  1;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	int  splitState  =  System.currentTimeMillis()  +  1;	  long    splitState    =    System.currentTimeMillis()    +    1;    	non-compiled	[CE]  possible  loss  of  precision	93	None	replace
513	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	125	1	replace
514	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	125	1	replace
515	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.stopTime  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	125	1	replace
516	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.stopTime  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	125	1	replace
517	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	125	5	replace
518	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	125	5	replace
519	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	46	5	replace
520	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	46	5	replace
521	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_RUNNING;    if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	64	1	replace
522	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_RUNNING;    if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	64	1	replace
523	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	          if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(       "Stopwatch    is    not    running.           ");    }    if(this.runningState    ==    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	74	5	replace
524	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState  ==  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	          if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(       "Stopwatch    is    not    running.           ");    }    if(this.runningState    ==    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	74	5	replace
525	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  possible  loss  of  precision	143	None	replace
526	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;	  long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	143	1	replace
527	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;	  long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	143	1	replace
528	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.runningState  =  STATE_SUSPENDED;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.runningState  =  STATE_SUSPENDED;  }	          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    this.runningState    =    STATE_UNSTARTED;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
529	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.runningState  =  STATE_UNSTARTED;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.runningState  =  STATE_UNSTARTED;  }	          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    this.runningState    =    STATE_UNSTARTED;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
530	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  this.running  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  this.running  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  this.running	          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    this.runningState    =    STATE_UNSTARTED;    }    	non-compiled	[CE]  not  a  statement	36	None	replace
531	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  possible  loss  of  precision	171	None	replace
532	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    this.startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	148	4	add
533	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    this.startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	148	4	add
534	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeM  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeM  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    this.startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeM	  	non-compiled	[CE]  ';'  expected	148	None	add
535	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    this.startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	148	4	add
536	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    this.startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	148	4	add
537	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    this.startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  illegal  start  of  expression	148	None	add
538	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.startTime  =  System.currentTimeMillis();  }  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.startTime  =  System.currentTimeMillis();  }  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    this.startTime    =    System.currentTimeMillis();    }    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }	  	non-compiled	[CE]  illegal  start  of  expression	148	None	add
539	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState        =        STATE_SUSPENDED;        if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	153	1	add
540	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	153	1	add
541	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	non-compiled	[CE]  illegal  start  of  expression	153	None	add
542	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  int  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  int  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    int  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	non-compiled	[CE]  not  a  statement	153	None	add
543	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState        =        STATE_SUSPENDED;        if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	153	1	add
544	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	153	1	add
545	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState        =        STATE_SUSPENDED;        if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  }	  	compilable	  [FE]  AssertionFailedError  	153	1	add
546	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  }	  	compilable	  [FE]  AssertionFailedError  	153	1	add
547	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;	  	compilable	  [FE]  AssertionFailedError  	21	4	add
548	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;	  	compilable	  [FE]  AssertionFailedError  	21	4	add
549	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  this.runningState  =  System.currentTimeMillis()  /  1000;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  this.runningState  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime    =    System.currentTimeMillis()    /    1000;    this.runningState  =  System.currentTimeMillis()  /  1000;	  	non-compiled	[CE]  possible  loss  of  precision	21	None	add
550	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  StopWatch.this.runningState  =  System.currentTimeMillis()  /  1000;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  StopWatch.this.runningState  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime    =    System.currentTimeMillis()    /    1000;    StopWatch.this.runningState  =  System.currentTimeMillis()  /  1000;	  	non-compiled	[CE]  possible  loss  of  precision	21	None	add
551	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  startTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	stopTime    =    System.currentTimeMillis()    /    1000;    startTime  =  System.currentTimeMillis()  /  1000;	  	compilable	  [FE]  AssertionFailedError  	21	4	add
552	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  startTime  =  System.currentTimeMillis()  /  1000;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  startTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime    =    System.currentTimeMillis()    /    1000;    startTime  =  System.currentTimeMillis()  /  1000;	  	compilable	  [FE]  AssertionFailedError  	21	4	add
553	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  System.currentTimeMillis()  /  1000;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime    =    System.currentTimeMillis()    /    1000;    System.currentTimeMillis()  /  1000;	  	non-compiled	[CE]  not  a  statement	21	None	add
554	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	4	4	add
555	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	4	4	add
556	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	4	4	add
557	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	4	4	add
558	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	4	4	add
559	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	4	4	add
560	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	4	4	add
561	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	4	4	add
562	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  possible  loss  of  precision	4	None	add
563	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	161	1	add
564	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	161	1	add
565	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	161	1	add
566	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	161	1	add
567	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	161	1	add
568	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	161	1	add
569	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  int  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  int  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    int  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	non-compiled	[CE]  not  a  statement	161	None	add
570	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	161	1	add
571	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	161	1	add
572	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  this.runningState    =    STATE_SUSPENDED;    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	119	1	replace
573	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  this.runningState    =    STATE_SUSPENDED;    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	119	1	replace
574	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  this.runningState    =    STATE_SUSPENDED;    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	119	1	replace
575	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  this.runningState    =    STATE_SUSPENDED;    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	119	1	replace
576	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        long    stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	127	None	add
577	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        long    stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	127	None	add
578	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  Long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  Long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        long    stopTime    =    System.currentTimeMillis();    Long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	127	None	add
579	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        long    stopTime    =    System.currentTimeMillis();    this.runningState  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	127	None	add
580	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        long    stopTime    =    System.currentTimeMillis();    int  startTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	127	None	add
581	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeM  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeM  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeM	          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  ';'  expected	30	None	replace
582	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	30	4	replace
583	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	30	4	replace
584	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.	          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
585	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	102	1	add
586	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	102	1	add
587	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	102	1	add
588	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	102	1	add
589	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	102	1	add
590	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	102	1	add
591	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  If(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  If(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    If(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	non-compiled	[CE]  ';'  expected	102	None	add
592	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }	  	compilable	  [FE]  AssertionFailedError  	67	1	add
593	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }	  	compilable	  [FE]  AssertionFailedError  	67	1	add
594	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	67	1	add
595	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	67	1	add
596	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }	  	compilable	  [FE]  AssertionFailedError  	67	1	add
597	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }	  	compilable	  [FE]  AssertionFailedError  	67	1	add
598	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	67	1	add
599	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	67	1	add
600	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }	  	compilable	  [FE]  AssertionFailedError  	67	1	add
601	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }	  	compilable	  [FE]  AssertionFailedError  	67	1	add
602	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.splitState  =  STATE_SUSPENDED;	  this.splitState    =    STATE_RUNNING;    	compilable	  [FE]  AssertionFailedError  	26	1	replace
603	[BUG]  [BUGGY]  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.splitState  =  STATE_SUSPENDED;	  this.splitState    =    STATE_RUNNING;    	compilable	  [FE]  AssertionFailedError  	26	1	replace
604	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.splitState  =  STATE_UNSTARTED;	  this.splitState    =    STATE_RUNNING;    	compilable	  [FE]  AssertionFailedError  	26	1	replace
605	[BUG]  [BUGGY]  this.splitState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.splitState  =  STATE_UNSTARTED;	  this.splitState    =    STATE_RUNNING;    	compilable	  [FE]  AssertionFailedError  	26	1	replace
606	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  /  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	long  splitState  =  System.currentTimeMillis()  /  startTime;	  long    splitState    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	156	1	replace
607	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  /  startTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  /  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long  splitState  =  System.currentTimeMillis()  /  startTime;	  long    splitState    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	156	1	replace
608	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	long  splitState  =  System.currentTimeMillis()  -  this.runningState;	  long    splitState    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	156	1	replace
609	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  this.runningState;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long  splitState  =  System.currentTimeMillis()  -  this.runningState;	  long    splitState    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	156	1	replace
610	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopTime  =  System.currentTimeMillis();  }  [CE]  cannot  find  symbol  StopTime  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    StopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  cannot  find  symbol  StopTime	126	None	replace
611	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [CE]  cannot  find  symbol  StopTime  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    StopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  cannot  find  symbol  StopTime	126	None	replace
612	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  StopTime  =  System.currentTimeMillis();  }  [CE]  cannot  find  symbol  StopTime  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  StopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  StopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    StopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  cannot  find  symbol  StopTime	126	None	replace
613	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	31	4	add
614	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	31	4	add
615	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
616	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  int  startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  int  startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    int  startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }	  	non-compiled	[CE]  possible  loss  of  precision	31	None	add
617	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime  >=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  if(this.startTime  >=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	31	4	add
618	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime  >=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime  >=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  if(this.startTime  >=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	31	4	add
619	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	31	4	add
620	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	31	4	add
621	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  2;  this.startTime  =  System.currentTimeMillis()  -  2;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.startTime    =    System.currentTimeMillis()    -    2;    this.startTime  =  System.currentTimeMillis()  -  2;	  	compilable	  [FE]  AssertionFailedError  	41	4	add
622	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  2;  this.startTime  =  System.currentTimeMillis()  -  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  2;  this.startTime  =  System.currentTimeMillis()  -  2;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.startTime    =    System.currentTimeMillis()    -    2;    this.startTime  =  System.currentTimeMillis()  -  2;	  	compilable	  [FE]  AssertionFailedError  	41	4	add
623	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  2;  if(this.startTime!=  System.currentTimeMillis()  -  2)  {  this.startTime  =  System.currentTimeMillis()  -  2;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.startTime    =    System.currentTimeMillis()    -    2;    if(this.startTime!=  System.currentTimeMillis()  -  2)  {  this.startTime  =  System.currentTimeMillis()  -  2;  }	  	compilable	  [FE]  AssertionFailedError  	41	4	add
624	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  2;  if(this.startTime!=  System.currentTimeMillis()  -  2)  {  this.startTime  =  System.currentTimeMillis()  -  2;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  2;  if(this.startTime!=  System.currentTimeMillis()  -  2)  {  this.startTime  =  System.currentTimeMillis()  -  2;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.startTime    =    System.currentTimeMillis()    -    2;    if(this.startTime!=  System.currentTimeMillis()  -  2)  {  this.startTime  =  System.currentTimeMillis()  -  2;  }	  	compilable	  [FE]  AssertionFailedError  	41	4	add
625	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  2;  if(this.startTime!=  System.currentTimeMillis()  -  2)  {  this.startTime  =  System.currentTimeMillis()  -  2;  }  else  {  stopTime  =  System.currentTimeMillis()  -  2;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.startTime    =    System.currentTimeMillis()    -    2;    if(this.startTime!=  System.currentTimeMillis()  -  2)  {  this.startTime  =  System.currentTimeMillis()  -  2;  }  else  {  stopTime  =  System.currentTimeMillis()  -  2;  }	  	compilable	  [FE]  AssertionFailedError  	41	4	add
626	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  2;  if(this.startTime!=  System.currentTimeMillis()  -  2)  {  this.startTime  =  System.currentTimeMillis()  -  2;  }  else  {  stopTime  =  System.currentTimeMillis()  -  2;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  2;  if(this.startTime!=  System.currentTimeMillis()  -  2)  {  this.startTime  =  System.currentTimeMillis()  -  2;  }  else  {  stopTime  =  System.currentTimeMillis()  -  2;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.startTime    =    System.currentTimeMillis()    -    2;    if(this.startTime!=  System.currentTimeMillis()  -  2)  {  this.startTime  =  System.currentTimeMillis()  -  2;  }  else  {  stopTime  =  System.currentTimeMillis()  -  2;  }	  	compilable	  [FE]  AssertionFailedError  	41	4	add
627	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  2;  if(this.startTime!=  System.currentTimeMillis()  -  2)  {  this.startTime  =  System.currentTimeMillis()  -  2;  }  else  {  stopTime  =  System.currentTimeMillis()  -  1;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.startTime    =    System.currentTimeMillis()    -    2;    if(this.startTime!=  System.currentTimeMillis()  -  2)  {  this.startTime  =  System.currentTimeMillis()  -  2;  }  else  {  stopTime  =  System.currentTimeMillis()  -  1;  }	  	compilable	  [FE]  AssertionFailedError  	41	4	add
628	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  2;  if(this.startTime!=  System.currentTimeMillis()  -  2)  {  this.startTime  =  System.currentTimeMillis()  -  2;  }  else  {  stopTime  =  System.currentTimeMillis()  -  1;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  2;  if(this.startTime!=  System.currentTimeMillis()  -  2)  {  this.startTime  =  System.currentTimeMillis()  -  2;  }  else  {  stopTime  =  System.currentTimeMillis()  -  1;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.startTime    =    System.currentTimeMillis()    -    2;    if(this.startTime!=  System.currentTimeMillis()  -  2)  {  this.startTime  =  System.currentTimeMillis()  -  2;  }  else  {  stopTime  =  System.currentTimeMillis()  -  1;  }	  	compilable	  [FE]  AssertionFailedError  	41	4	add
629	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  2;  if(this.startTime!=  System.currentTimeMillis()  -  2)  {  this.startTime  =  System.currentTimeMillis()  -  2;  }  else  {  startTime  =  System.currentTimeMillis()  -  2;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.startTime    =    System.currentTimeMillis()    -    2;    if(this.startTime!=  System.currentTimeMillis()  -  2)  {  this.startTime  =  System.currentTimeMillis()  -  2;  }  else  {  startTime  =  System.currentTimeMillis()  -  2;  }	  	compilable	  [FE]  AssertionFailedError  	41	4	add
630	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  2;  if(this.startTime!=  System.currentTimeMillis()  -  2)  {  this.startTime  =  System.currentTimeMillis()  -  2;  }  else  {  startTime  =  System.currentTimeMillis()  -  2;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  2;  if(this.startTime!=  System.currentTimeMillis()  -  2)  {  this.startTime  =  System.currentTimeMillis()  -  2;  }  else  {  startTime  =  System.currentTimeMillis()  -  2;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.startTime    =    System.currentTimeMillis()    -    2;    if(this.startTime!=  System.currentTimeMillis()  -  2)  {  this.startTime  =  System.currentTimeMillis()  -  2;  }  else  {  startTime  =  System.currentTimeMillis()  -  2;  }	  	compilable	  [FE]  AssertionFailedError  	41	4	add
631	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    Stopwatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  possible  loss  of  precision	7	None	replace
632	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	19	1	add
633	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	19	1	add
634	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  System.currentTimeMillis()  +  1;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime    =    System.currentTimeMillis()    +    1;    this.runningState  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  possible  loss  of  precision	19	None	add
635	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  startTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	stopTime    =    System.currentTimeMillis()    +    1;    startTime  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	19	4	add
636	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  startTime  =  System.currentTimeMillis()  +  1;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  startTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime    =    System.currentTimeMillis()    +    1;    startTime  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	19	4	add
637	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  StopWatch.this.runningState  =  System.currentTimeMillis()  +  1;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  StopWatch.this.runningState  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime    =    System.currentTimeMillis()    +    1;    StopWatch.this.runningState  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  possible  loss  of  precision	19	None	add
638	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  System.currentTimeMillis()  +  1;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime    =    System.currentTimeMillis()    +    1;    System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  not  a  statement	19	None	add
639	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	107	1	replace
640	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	107	1	replace
641	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	107	4	replace
642	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	107	4	replace
643	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	107	1	replace
644	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	107	1	replace
645	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }	          if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(       "Stopwatch    is    not    running.           ");    }    if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running..   ");    }    	compilable	  [FE]  IllegalStateException  	145	1	replace
646	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }	          if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(       "Stopwatch    is    not    running.           ");    }    if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running..   ");    }    	compilable	  [FE]  IllegalStateException  	145	1	replace
647	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        StopWatch.this.stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	124	1	add
648	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        StopWatch.this.stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	124	1	add
649	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        StopWatch.this.stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	124	1	add
650	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        StopWatch.this.stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	124	1	add
651	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        StopWatch.this.stopTime    =    System.currentTimeMillis();    this.runningState  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	124	None	add
652	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        StopWatch.this.stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	124	4	add
653	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        StopWatch.this.stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	124	4	add
654	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        StopWatch.this.stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	124	1	add
655	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        StopWatch.this.stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	124	1	add
656	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	71	None	add
657	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	71	5	add
658	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	71	5	add
659	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	71	None	add
660	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  possible  loss  of  precision	88	None	replace
661	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  while(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  while(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	while(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    while(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	172	5	add
662	[BUG]  [BUGGY]  while(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  while(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  while(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  while(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	while(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    while(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	172	5	add
663	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  while(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  while(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	while(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    while(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }	  	compilable	  [FE]  IllegalStateException  	172	5	add
664	[BUG]  [BUGGY]  while(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  while(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  while(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  while(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	while(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    while(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }	  	compilable	  [FE]  IllegalStateException  	172	5	add
665	[BUG]  [BUGGY]  while(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  while(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running. ".);  }  [CE]  <identifier>  expected  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  while(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  while(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running. ".);  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	while(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    while(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running. ".);  }	  	non-compiled	[CE]  <identifier>  expected	172	None	add
666	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }	  	compilable	  [FE]  AssertionFailedError  	116	1	add
667	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }	  	compilable	  [FE]  AssertionFailedError  	116	1	add
668	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	116	1	add
669	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	116	1	add
670	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }	  	compilable	  [FE]  AssertionFailedError  	116	1	add
671	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }	  	compilable	  [FE]  AssertionFailedError  	116	1	add
672	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	116	1	add
673	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	116	1	add
674	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }	  	compilable	  [FE]  AssertionFailedError  	116	1	add
675	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }	  	compilable	  [FE]  AssertionFailedError  	116	1	add
676	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	43	1	add
677	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	43	1	add
678	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	43	1	add
679	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	43	1	add
680	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	43	1	add
681	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	43	1	add
682	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  int  runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    int  runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	43	1	add
683	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  int  runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  int  runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    int  runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	43	1	add
684	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	long  stopTime  =  System.currentTimeMillis()  -  1;	  long    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	115	1	replace
685	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis()  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long  stopTime  =  System.currentTimeMillis()  -  1;	  long    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	115	1	replace
686	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	long  stopTime  =  System.currentTimeMillis()  +  1;	  long    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	115	1	replace
687	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis()  +  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long  stopTime  =  System.currentTimeMillis()  +  1;	  long    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	115	1	replace
688	[BUG]  [BUGGY]  int  stopTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	int  stopTime  =  System.currentTimeMillis();	  long    stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	115	None	replace
689	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	78	1	replace
690	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	78	1	replace
691	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  while(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	while(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  while(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	173	1	replace
692	[BUG]  [BUGGY]  while(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  while(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	while(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  while(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	173	1	replace
693	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  while(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	while(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  while(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	173	5	replace
694	[BUG]  [BUGGY]  while(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  while(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	while(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  while(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	173	5	replace
695	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  while(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	while(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  while(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	173	5	replace
696	[BUG]  [BUGGY]  while(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  while(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	while(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  while(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	173	5	replace
697	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	2	1	replace
698	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	2	1	replace
699	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	stopTime  =  System.currentTimeMillis()  *  1000;	  stopTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	22	1	replace
700	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime  =  System.currentTimeMillis()  *  1000;	  stopTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	22	1	replace
701	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	stopTime  =  System.currentTimeMillis()  /  10000;	  stopTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	22	1	replace
702	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime  =  System.currentTimeMillis()  /  10000;	  stopTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	22	1	replace
703	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }	          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    If(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    	compilable	  [FE]  AssertionFailedError  	133	5	replace
704	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }	          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    If(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    	compilable	  [FE]  AssertionFailedError  	133	5	replace
705	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_SPLIT)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_SPLIT)  {  this.runningState  =  STATE_UNSTARTED;  }	          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    If(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    	compilable	  [FE]  AssertionFailedError  	133	5	replace
706	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SPLIT)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_SPLIT)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_SPLIT)  {  this.runningState  =  STATE_UNSTARTED;  }	          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    If(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    	compilable	  [FE]  AssertionFailedError  	133	5	replace
707	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	77	1	add
708	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	77	1	add
709	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeM  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeM  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeM	  	non-compiled	[CE]  ';'  expected	77	None	add
710	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SU  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SU  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SU	  	non-compiled	[CE]  ';'  expected	77	None	add
711	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
712	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this	  	non-compiled	[CE]  not  a  statement	77	None	add
713	[BUG]  [BUGGY]  This.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [CE]  cannot  find  symbol  This  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  This.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	This.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    Stopwatch.this.runningState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  cannot  find  symbol  This	6	None	replace
714	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState        =        STATE_SUSPENDED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	118	1	add
715	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	118	1	add
716	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState        =        STATE_SUSPENDED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	118	1	add
717	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	118	1	add
718	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  int  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  int  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    int  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  not  a  statement	118	None	add
719	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState        =        STATE_SUSPENDED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	118	1	add
720	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	118	1	add
721	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState        =        STATE_SUSPENDED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	118	1	add
722	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	118	1	add
723	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  if(this.runningState!=    STATE_UNSTARTED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    	compilable	  [FE]  AssertionFailedError  	141	1	replace
724	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  if(this.runningState!=    STATE_UNSTARTED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    	compilable	  [FE]  AssertionFailedError  	141	1	replace
725	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=    STATE_STOPPED    ||    this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	59	5	add
726	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=    STATE_STOPPED    ||    this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	59	5	add
727	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=    STATE_STOPPED    ||    this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_STOPPED  ||  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	59	5	add
728	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_STOPPED  ||  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=    STATE_STOPPED    ||    this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_STOPPED  ||  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	59	5	add
729	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_STOPPED  ||  this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=    STATE_STOPPED    ||    this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_STOPPED  ||  this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	59	5	add
730	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_STOPPED  ||  this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED  ||  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_STOPPED  ||  this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=    STATE_STOPPED    ||    this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_STOPPED  ||  this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	59	5	add
731	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	81	4	add
732	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	81	4	add
733	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
734	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SU  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SU  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SU	  	non-compiled	[CE]  ';'  expected	81	None	add
735	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this	  	non-compiled	[CE]  not  a  statement	81	None	add
736	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE	  	non-compiled	[CE]  ';'  expected	81	None	add
737	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  if(this.runningState!=    STATE_STOPPED    ||    this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	60	5	replace
738	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  if(this.runningState!=    STATE_STOPPED    ||    this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	60	5	replace
739	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  if(this.runningState!=    STATE_STOPPED    ||    this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	60	5	replace
740	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_STOPPED  &&  this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  if(this.runningState!=    STATE_STOPPED    ||    this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	60	5	replace
741	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	87	1	replace
742	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	87	1	replace
743	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	non-compiled	[CE]  possible  loss  of  precision	87	None	replace
744	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	non-compiled	[CE]  possible  loss  of  precision	87	None	replace
745	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.startTime  =  System.  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.startTime  =  System.  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.startTime  =  System.	          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    this.startTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  <identifier>  expected	149	None	replace
746	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.startTime  =  System.currentTimeMillis();  }	          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    this.startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	149	4	replace
747	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.startTime  =  System.currentTimeMillis();  }	          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    this.startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	149	4	replace
748	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }	          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    this.startTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
749	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	11	1	replace
750	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	11	1	replace
751	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	11	1	replace
752	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	11	1	replace
753	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	9	1	replace
754	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	9	1	replace
755	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	9	5	replace
756	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	9	5	replace
757	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	9	4	replace
758	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	9	4	replace
759	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        StopWatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	120	1	add
760	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        StopWatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	120	1	add
761	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        StopWatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  StopWatch.this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	120	1	add
762	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        StopWatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  StopWatch.this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	120	1	add
763	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        StopWatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	120	1	add
764	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        StopWatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	120	1	add
765	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        StopWatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	120	1	add
766	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        StopWatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	120	1	add
767	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        StopWatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	120	1	add
768	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        StopWatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	120	1	add
769	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	47	1	add
770	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	47	1	add
771	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	47	1	add
772	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	47	1	add
773	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	47	1	add
774	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	47	1	add
775	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	47	1	add
776	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	47	1	add
777	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	47	1	add
778	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	47	1	add
779	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	129	4	add
780	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	129	4	add
781	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	129	4	add
782	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	129	4	add
783	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    this.runningState  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	129	None	add
784	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	129	4	add
785	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	129	4	add
786	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	129	4	add
787	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	129	4	add
788	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  long  splitState  =  System.currentTimeMillis();  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  long  splitState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    long  splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	142	None	add
789	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	142	1	add
790	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	142	1	add
791	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	17	1	add
792	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	17	1	add
793	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  StopWatch.this.stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	stopTime    =    System.currentTimeMillis()    -    1;    StopWatch.this.stopTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	17	1	add
794	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  StopWatch.this.stopTime  =  System.currentTimeMillis()  -  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  StopWatch.this.stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime    =    System.currentTimeMillis()    -    1;    StopWatch.this.stopTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	17	1	add
795	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	136	1	add
796	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	136	1	add
797	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	136	1	add
798	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	136	1	add
799	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	136	1	add
800	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	136	1	add
801	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	69	4	add
802	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	69	4	add
803	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    startTime    =    System.currentTimeMillis();    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	69	4	add
804	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    startTime    =    System.currentTimeMillis();    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	69	4	add
805	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	69	4	add
806	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	69	4	add
807	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	69	4	add
808	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	69	4	add
809	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	69	4	add
810	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	69	4	add
811	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	long  splitState  =  System.currentTimeMillis()  -  1;  this.splitState  =  STATE_STOPPED;	  long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	110	1	replace
812	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long  splitState  =  System.currentTimeMillis()  -  1;  this.splitState  =  STATE_STOPPED;	  long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	110	1	replace
813	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  long  startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    long  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	165	1	add
814	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  long  startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  long  startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    long  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	165	1	add
815	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   "  [CE]  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   "  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   "	  	non-compiled	[CE]  	73	None	add
816	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	73	None	add
817	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState    ==    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_RUNNING)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState  ==  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	73	None	add
818	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	147	None	replace
819	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	147	None	replace
820	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	161	1	add
821	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	161	1	add
822	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	161	1	add
823	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	161	1	add
824	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	161	1	add
825	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	161	1	add
826	[BUG]  [BUGGY]  this.splitState  =  null;  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  null;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.splitState  =  null;	  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  incompatible  types	78	None	replace
827	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
828	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
829	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
830	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
831	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=    STATE_UNSTARTED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	140	1	add
832	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=    STATE_UNSTARTED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	140	1	add
833	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=    STATE_UNSTARTED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	140	1	add
834	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=    STATE_UNSTARTED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	140	1	add
835	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.startTime  =  System.currentTimeM  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.startTime  =  System.currentTimeM  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.startTime  =  System.currentTimeM	          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    this.startTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  ';'  expected	149	None	replace
836	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this	          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    this.startTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  not  a  statement	149	None	replace
837	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  StopWatch.this.stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	stopTime    =    System.currentTimeMillis()    /    1000;    StopWatch.this.stopTime  =  System.currentTimeMillis()  /  1000;	  	compilable	  [FE]  AssertionFailedError  	21	4	add
838	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  StopWatch.this.stopTime  =  System.currentTimeMillis()  /  1000;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  StopWatch.this.stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime    =    System.currentTimeMillis()    /    1000;    StopWatch.this.stopTime  =  System.currentTimeMillis()  /  1000;	  	compilable	  [FE]  AssertionFailedError  	21	4	add
839	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState  ==  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState    ==    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }	  	compilable	  [FE]  AssertionFailedError  	131	1	add
840	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState  ==  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState  ==  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState    ==    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState  ==  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }	  	compilable	  [FE]  AssertionFailedError  	131	1	add
841	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	52	5	replace
842	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	52	5	replace
843	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	52	5	replace
844	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	52	5	replace
845	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  AssertionFailedError  	52	1	replace
846	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  AssertionFailedError  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  AssertionFailedError  	52	1	replace
847	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    this.startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }	  	non-compiled	[CE]  illegal  start  of  expression	148	None	add
848	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    this.startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this	  	non-compiled	[CE]  not  a  statement	148	None	add
849	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMill  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMill  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    this.startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMill	  	non-compiled	[CE]  ';'  expected	148	None	add
850	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    this.startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {	  	non-compiled	[CE]  illegal  start  of  expression	148	None	add
851	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	long  splitState  =  System.currentTimeMillis()  -  startTime  +  1;	  long    splitState    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	156	1	replace
852	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long  splitState  =  System.currentTimeMillis()  -  startTime  +  1;	  long    splitState    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	156	1	replace
853	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	8	1	add
854	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	8	1	add
855	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  StopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [CE]  cannot  find  symbol  StopTime  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  StopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    StopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  cannot  find  symbol  StopTime	8	None	add
856	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	8	1	add
857	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	8	1	add
858	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	122	1	add
859	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	122	1	add
860	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    long    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	128	1	replace
861	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    long    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	128	1	replace
862	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	129	4	add
863	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	129	4	add
864	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	129	4	add
865	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	129	4	add
866	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	long    stopTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	114	1	add
867	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long    stopTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	114	1	add
868	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  Long  stopTime  =  System.currentTimeMillis();  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  Long  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long    stopTime    =    System.currentTimeMillis();    Long  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	114	None	add
869	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long    stopTime    =    System.currentTimeMillis();    int  splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	114	None	add
870	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  long  runTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	long    stopTime    =    System.currentTimeMillis();    long  runTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	114	1	add
871	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  long  runTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  long  runTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long    stopTime    =    System.currentTimeMillis();    long  runTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	114	1	add
872	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  possible  loss  of  precision	171	None	replace
873	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	171	5	replace
874	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	171	5	replace
875	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
876	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMill  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMill  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMill	  	non-compiled	[CE]  ';'  expected	33	None	add
877	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this	  	non-compiled	[CE]  not  a  statement	33	None	add
878	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  possible  loss  of  precision	146	None	replace
879	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        StopWatch.this.stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	124	1	add
880	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        StopWatch.this.stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	124	1	add
881	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  possible  loss  of  precision	86	None	replace
882	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.current  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.current  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.current	          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  ';'  expected	30	None	replace
883	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTime  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTime  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTime	          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  ';'  expected	30	None	replace
884	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=    STATE_UNSTARTED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	157	1	add
885	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=    STATE_UNSTARTED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	157	1	add
886	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_UNSTARTED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	158	1	replace
887	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_UNSTARTED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	158	1	replace
888	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_UNSTARTED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	158	5	replace
889	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_UNSTARTED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	158	5	replace
890	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_UNSTARTED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	158	1	replace
891	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_UNSTARTED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	158	1	replace
892	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	4	4	add
893	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    long  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	4	4	add
894	[BUG]  [BUGGY]  this.splitState  =  STATE_RUNNING;  if(this.splitState!=  STATE_RUNNING)  {  this.splitState  =  STATE_RUNNING;  }  else  {  System.arraycopy(this.splitState,  0,  this.splitState,  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_RUNNING;  if(this.splitState!=  STATE_RUNNING)  {  this.splitState  =  STATE_RUNNING;  }  else  {  System.arraycopy(this.splitState,  0,  this.splitState,  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.splitState    =    STATE_RUNNING;    if(this.splitState!=  STATE_RUNNING)  {  this.splitState  =  STATE_RUNNING;  }  else  {  System.arraycopy(this.splitState,  0,  this.splitState,	  	non-compiled	[CE]  ')'  expected	25	None	add
895	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	134	1	add
896	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	134	1	add
897	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	134	1	add
898	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	134	1	add
899	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	77	1	add
900	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	77	1	add
901	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeM  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeM  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeM	  	non-compiled	[CE]  ';'  expected	77	None	add
902	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMill  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMill  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMill	  	non-compiled	[CE]  ';'  expected	77	None	add
903	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	long  splitState  =  System.currentTimeMillis()  -  stopTime  +  1;	  long    splitState    =    System.currentTimeMillis()    -    stopTime;    	compilable	  [FE]  AssertionFailedError  	113	1	replace
904	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long  splitState  =  System.currentTimeMillis()  -  stopTime  +  1;	  long    splitState    =    System.currentTimeMillis()    -    stopTime;    	compilable	  [FE]  AssertionFailedError  	113	1	replace
905	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	9	1	replace
906	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	9	1	replace
907	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	9	1	replace
908	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	9	1	replace
909	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	27	4	add
910	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	27	4	add
911	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }	          this.runningState    =    STATE_UNSTARTED;    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	44	1	replace
912	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }	          this.runningState    =    STATE_UNSTARTED;    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	44	1	replace
913	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_UNSTARTED;    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	44	1	replace
914	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_UNSTARTED;    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	44	1	replace
915	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  stopTime  =  System.currentTimeMillis()  -  1;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.startTime    =    System.currentTimeMillis()    -    1;    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  stopTime  =  System.currentTimeMillis()  -  1;  }	  	compilable	  [FE]  AssertionFailedError  	37	4	add
916	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  stopTime  =  System.currentTimeMillis()  -  1;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  stopTime  =  System.currentTimeMillis()  -  1;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.startTime    =    System.currentTimeMillis()    -    1;    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  stopTime  =  System.currentTimeMillis()  -  1;  }	  	compilable	  [FE]  AssertionFailedError  	37	4	add
917	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.startTime    =    System.currentTimeMillis()    -    1;    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  this.startTime  =  System.currentTimeMillis()  -  1;  }	  	compilable	  [FE]  AssertionFailedError  	37	4	add
918	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.startTime    =    System.currentTimeMillis()    -    1;    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  this.startTime  =  System.currentTimeMillis()  -  1;  }	  	compilable	  [FE]  AssertionFailedError  	37	4	add
919	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.startTime    =    System.currentTimeMillis()    -    1;    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  -  1;  }	  	compilable	  [FE]  AssertionFailedError  	37	4	add
920	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.startTime    =    System.currentTimeMillis()    -    1;    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  -  1;  }	  	compilable	  [FE]  AssertionFailedError  	37	4	add
921	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  startTime  =  System.currentTimeMillis()  -  1;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.startTime    =    System.currentTimeMillis()    -    1;    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  startTime  =  System.currentTimeMillis()  -  1;  }	  	compilable	  [FE]  AssertionFailedError  	37	4	add
922	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  startTime  =  System.currentTimeMillis()  -  1;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  startTime  =  System.currentTimeMillis()  -  1;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.startTime    =    System.currentTimeMillis()    -    1;    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  startTime  =  System.currentTimeMillis()  -  1;  }	  	compilable	  [FE]  AssertionFailedError  	37	4	add
923	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  }	  	compilable	  [FE]  AssertionFailedError  	61	1	add
924	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  }	  	compilable	  [FE]  AssertionFailedError  	61	1	add
925	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	61	1	add
926	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	61	1	add
927	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  if(stopTime!=  System.currentTimeMillis())  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        this.runningState    =    STATE_RUNNING;    if(stopTime!=  System.currentTimeMillis())  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  }	  	compilable	  [FE]  AssertionFailedError  	61	1	add
928	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  if(stopTime!=  System.currentTimeMillis())  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  if(stopTime!=  System.currentTimeMillis())  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        this.runningState    =    STATE_RUNNING;    if(stopTime!=  System.currentTimeMillis())  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  }	  	compilable	  [FE]  AssertionFailedError  	61	1	add
929	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }	  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    +=    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	84	1	replace
930	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }	  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    +=    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	84	1	replace
931	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }	  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    +=    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	84	1	replace
932	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }	  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    +=    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	84	1	replace
933	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	13	1	replace
934	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	13	1	replace
935	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.startTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	13	4	replace
936	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.startTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	13	4	replace
937	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( " ");  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	13	1	replace
938	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( " ");  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	13	1	replace
939	[BUG]  [BUGGY]  this.splitState  =  System.currentTimeMillis();  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  System.currentTimeMillis();  }  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  System.currentTimeMillis();  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.splitState  =  System.currentTimeMillis();  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  System.currentTimeMillis();  }	          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  possible  loss  of  precision	32	None	replace
940	[BUG]  [BUGGY]  this.splitState  =  System.currentTimeMillis();  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  System.currentTimeMillis();  }  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  System.currentTimeMillis();  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.splitState  =  System.currentTimeMillis();  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  System.currentTimeMillis();  }	          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  possible  loss  of  precision	32	None	replace
941	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	56	5	add
942	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	56	5	add
943	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	56	5	add
944	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	56	5	add
945	[BUG]  [BUGGY]  this.splitState  =  System.currentTimeMillis()  -  STATE_UNSTARTED;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  System.currentTimeMillis()  -  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.splitState  =  System.currentTimeMillis()  -  STATE_UNSTARTED;	  this.splitState    =    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  possible  loss  of  precision	111	None	replace
946	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  long  runState  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	long    splitState    =    System.currentTimeMillis()    -    startTime;    long  runState  =  System.currentTimeMillis()  -  startTime;	  	compilable	  [FE]  AssertionFailedError  	155	1	add
947	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  long  runState  =  System.currentTimeMillis()  -  startTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  long  runState  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long    splitState    =    System.currentTimeMillis()    -    startTime;    long  runState  =  System.currentTimeMillis()  -  startTime;	  	compilable	  [FE]  AssertionFailedError  	155	1	add
948	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  Long  startTime  =  System.currentTimeMillis()  -  startTime;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  Long  startTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long    splitState    =    System.currentTimeMillis()    -    startTime;    Long  startTime  =  System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	155	None	add
949	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }	          if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(       "Stopwatch    is    not    running.           ");    }    if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running..   ");    }    	compilable	  [FE]  IllegalStateException  	145	5	replace
950	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }	          if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(       "Stopwatch    is    not    running.           ");    }    if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running..   ");    }    	compilable	  [FE]  IllegalStateException  	145	5	replace
951	[BUG]  [BUGGY]  while(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  while(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	while(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;	          if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(       "Stopwatch    is    not    running.           ");    }    if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running..   ");    }    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
952	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  if(this.startTime!=  System.currentTimeMillis()  +  1)  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  else  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.startTime    =    System.currentTimeMillis()    +    1;    if(this.startTime!=  System.currentTimeMillis()  +  1)  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  else  {  this.startTime  =  System.currentTimeMillis()  +  1;  }	  	compilable	  [FE]  AssertionFailedError  	39	4	add
953	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  if(this.startTime!=  System.currentTimeMillis()  +  1)  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  else  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  if(this.startTime!=  System.currentTimeMillis()  +  1)  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  else  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.startTime    =    System.currentTimeMillis()    +    1;    if(this.startTime!=  System.currentTimeMillis()  +  1)  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  else  {  this.startTime  =  System.currentTimeMillis()  +  1;  }	  	compilable	  [FE]  AssertionFailedError  	39	4	add
954	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  else  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.startTime    =    System.currentTimeMillis()    +    1;    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  else  {  this.startTime  =  System.currentTimeMillis()  +  1;  }	  	compilable	  [FE]  AssertionFailedError  	39	4	add
955	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  else  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  else  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.startTime    =    System.currentTimeMillis()    +    1;    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  else  {  this.startTime  =  System.currentTimeMillis()  +  1;  }	  	compilable	  [FE]  AssertionFailedError  	39	4	add
956	[BUG]  [BUGGY]  This.runningState  =  STATE_STOPPED;  [CE]  cannot  find  symbol  This  [FE]        AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  This.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	This.runningState  =  STATE_STOPPED;	  This.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  cannot  find  symbol  This	139	None	replace
957	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	95	1	add
958	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	95	1	add
959	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	95	1	add
960	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	95	1	add
961	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	95	1	add
962	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	95	1	add
963	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SU  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SU  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SU	  	non-compiled	[CE]  ';'  expected	95	None	add
964	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	125	1	replace
965	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING  ||  this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	125	1	replace
966	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	125	1	replace
967	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	125	1	replace
968	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STAPPED;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STAPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STAPPED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	109	None	add
969	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	45	1	add
970	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	45	1	add
971	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	45	1	add
972	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	45	1	add
973	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	45	1	add
974	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	45	1	add
975	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	14	None	replace
976	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long  splitState  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	14	None	replace
977	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.current  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.current  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.current	          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    startTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  ';'  expected	34	None	replace
978	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  StopWatch.this.stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	stopTime    =    System.currentTimeMillis()    +    1;    StopWatch.this.stopTime  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	19	1	add
979	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  StopWatch.this.stopTime  =  System.currentTimeMillis()  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  StopWatch.this.stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime    =    System.currentTimeMillis()    +    1;    StopWatch.this.stopTime  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	19	1	add
980	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.startTime  =  System.currentTimeMillis()  -  STATE_UNSTARTED;	  this.startTime    =    System.currentTimeMillis()    -    stopTime;    	compilable	  [FE]  AssertionFailedError  	164	4	replace
981	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.startTime  =  System.currentTimeMillis()  -  STATE_UNSTARTED;	  this.startTime    =    System.currentTimeMillis()    -    stopTime;    	compilable	  [FE]  AssertionFailedError  	164	4	replace
982	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  }	          this.runningState    =    STATE_RUNNING;    this.runningState    =    STATE_RUNNING;    	compilable	  [FE]  AssertionFailedError  	62	1	replace
983	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  }	          this.runningState    =    STATE_RUNNING;    this.runningState    =    STATE_RUNNING;    	compilable	  [FE]  AssertionFailedError  	62	1	replace
984	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_RUNNING;    this.runningState    =    STATE_RUNNING;    	compilable	  [FE]  AssertionFailedError  	62	1	replace
985	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_RUNNING;    this.runningState    =    STATE_RUNNING;    	compilable	  [FE]  AssertionFailedError  	62	1	replace
986	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  possible  loss  of  precision	88	None	replace
987	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  if(this.runningState!=    STATE_STOPPED    ||    this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	60	5	replace
988	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_UNSTARTED  ||  this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  if(this.runningState!=    STATE_STOPPED    ||    this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	60	5	replace
989	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime;  long  splitState  =  System.currentTimeMillis()  -  startTime;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime;  long  splitState  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long    splitState    =    System.currentTimeMillis()    -    stopTime;    long  splitState  =  System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	112	None	add
990	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime;  long  startTime  =  System.currentTimeMillis()  -  stopTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	long    splitState    =    System.currentTimeMillis()    -    stopTime;    long  startTime  =  System.currentTimeMillis()  -  stopTime;	  	compilable	  [FE]  AssertionFailedError  	112	1	add
991	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime;  long  startTime  =  System.currentTimeMillis()  -  stopTime;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime;  long  startTime  =  System.currentTimeMillis()  -  stopTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long    splitState    =    System.currentTimeMillis()    -    stopTime;    long  startTime  =  System.currentTimeMillis()  -  stopTime;	  	compilable	  [FE]  AssertionFailedError  	112	1	add
992	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime;  long  runState  =  System.currentTimeMillis()  -  stopTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	long    splitState    =    System.currentTimeMillis()    -    stopTime;    long  runState  =  System.currentTimeMillis()  -  stopTime;	  	compilable	  [FE]  AssertionFailedError  	112	1	add
993	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime;  long  runState  =  System.currentTimeMillis()  -  stopTime;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime;  long  runState  =  System.currentTimeMillis()  -  stopTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long    splitState    =    System.currentTimeMillis()    -    stopTime;    long  runState  =  System.currentTimeMillis()  -  stopTime;	  	compilable	  [FE]  AssertionFailedError  	112	1	add
994	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	104	4	add
995	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	104	4	add
996	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	104	4	add
997	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	104	4	add
998	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	116	1	add
999	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	116	1	add
1000	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	116	1	add
1001	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	116	1	add
1002	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	116	1	add
1003	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	116	1	add
1004	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	123	5	replace
1005	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	123	5	replace
1006	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	123	5	replace
1007	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	123	5	replace
1008	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	123	1	replace
1009	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	123	1	replace
1010	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	non-compiled	[CE]  illegal  start  of  expression	79	None	add
1011	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	79	1	add
1012	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	79	1	add
1013	[BUG]  [BUGGY]  this.splitState  =  System.currentTimeMillis();  if(this.splitState!=  System.currentTimeMillis())  {  this.splitState  =  System.currentTimeMillis();  }  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  System.currentTimeMillis();  if(this.splitState!=  System.currentTimeMillis())  {  this.splitState  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.splitState  =  System.currentTimeMillis();  if(this.splitState!=  System.currentTimeMillis())  {  this.splitState  =  System.currentTimeMillis();  }	          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    this.runningState    =    STATE_UNSTARTED;    }    	non-compiled	[CE]  possible  loss  of  precision	36	None	replace
1014	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState        =        STATE_SUSPENDED;        this.runningState    =    STATE_SUSPENDED;    this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	75	1	add
1015	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        this.runningState    =    STATE_SUSPENDED;    this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	75	1	add
1016	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;  this.startTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState        =        STATE_SUSPENDED;        this.runningState    =    STATE_SUSPENDED;    this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	75	4	add
1017	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;  this.startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;  this.startTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        this.runningState    =    STATE_SUSPENDED;    this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	75	4	add
1018	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState        =        STATE_SUSPENDED;        this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	75	1	add
1019	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	75	1	add
1020	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState        =        STATE_SUSPENDED;        this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	75	1	add
1021	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	75	1	add
1022	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1L;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	stopTime  =  System.currentTimeMillis()  -  1L;	  stopTime    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	18	1	replace
1023	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1L;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1L;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime  =  System.currentTimeMillis()  -  1L;	  stopTime    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	18	1	replace
1024	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  int  startTime  =  System.currentTimeMillis()  -  startTime;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  int  startTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime    =    System.currentTimeMillis()    -    startTime;    int  startTime  =  System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  possible  loss  of  precision	169	None	add
1025	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  while(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  while(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	while(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    while(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	172	5	add
1026	[BUG]  [BUGGY]  while(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  while(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  while(this.runningState!=  STATE_STOPPED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  while(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	while(this.runningState!=    STATE_STOPPED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    while(this.runningState!=  STATE_SUSPENDED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	172	5	add
1027	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    	compilable	  [FE]  AssertionFailedError  	168	1	replace
1028	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    	compilable	  [FE]  AssertionFailedError  	168	1	replace
1029	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   "  [CE]  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   "  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   "	  	non-compiled	[CE]  	71	None	add
1030	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	106	1	add
1031	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	106	1	add
1032	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	106	1	add
1033	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	106	1	add
1034	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	99	1	add
1035	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	99	1	add
1036	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	99	1	add
1037	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  >=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	99	1	add
1038	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	99	1	add
1039	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	99	1	add
1040	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	99	1	add
1041	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  >=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    >=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	99	1	add
1042	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState        =        STATE_SUSPENDED;        if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	151	1	add
1043	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	151	1	add
1044	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMill  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMill  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMill	  	non-compiled	[CE]  ';'  expected	151	None	add
1045	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeM  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeM  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeM	  	non-compiled	[CE]  ';'  expected	151	None	add
1046	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  int  startTime  =  System.currentTimeMillis()  -  1;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  int  startTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long    splitState    =    System.currentTimeMillis()    -    1;    int  startTime  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  possible  loss  of  precision	90	None	add
1047	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	49	4	add
1048	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	49	4	add
1049	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    startTime    =    System.currentTimeMillis();    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	49	4	add
1050	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    startTime    =    System.currentTimeMillis();    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	49	4	add
1051	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	49	4	add
1052	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	49	4	add
1053	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	43	4	add
1054	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	43	4	add
1055	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeM  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeM  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    +=    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeM	  	non-compiled	[CE]  ';'  expected	83	None	add
1056	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    +=    System.currentTimeMillis();    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	83	1	add
1057	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    +=    System.currentTimeMillis();    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	83	1	add
1058	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  stopTime  +=  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    +=    System.currentTimeMillis();    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  stopTime  +=  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	83	4	add
1059	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  stopTime  +=  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  +=  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  stopTime  +=  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    +=    System.currentTimeMillis();    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  stopTime  +=  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	83	4	add
1060	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
1061	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMill  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMill  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMill	  	non-compiled	[CE]  ';'  expected	29	None	add
1062	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
1063	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	stopTime  =  System.currentTimeMillis()  /  1000L;	  stopTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	22	1	replace
1064	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime  =  System.currentTimeMillis()  /  1000L;	  stopTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	22	1	replace
1065	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	105	5	replace
1066	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	105	5	replace
1067	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	105	1	replace
1068	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	105	1	replace
1069	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_STOPPED)  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	105	5	replace
1070	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_STOPPED)  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	105	5	replace
1071	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    	compilable	  [FE]  AssertionFailedError  	103	5	replace
1072	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    	compilable	  [FE]  AssertionFailedError  	103	5	replace
1073	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  stopTime;  System.currentTimeMillis()  -  stopTime;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  stopTime;  System.currentTimeMillis()  -  stopTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.startTime    =    System.currentTimeMillis()    -    stopTime;    System.currentTimeMillis()  -  stopTime;	  	non-compiled	[CE]  not  a  statement	163	None	add
1074	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  stopTime;  this.startTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.startTime    =    System.currentTimeMillis()    -    stopTime;    this.startTime  =  System.currentTimeMillis()  -  startTime;	  	compilable	  [FE]  AssertionFailedError  	163	4	add
1075	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  stopTime;  this.startTime  =  System.currentTimeMillis()  -  startTime;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  stopTime;  this.startTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.startTime    =    System.currentTimeMillis()    -    stopTime;    this.startTime  =  System.currentTimeMillis()  -  startTime;	  	compilable	  [FE]  AssertionFailedError  	163	4	add
1076	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
1077	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.splitState  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.splitState  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.splitState  =  System.currentTimeMillis();  }	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
1078	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
1079	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	46	5	replace
1080	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	46	5	replace
1081	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	46	5	replace
1082	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	46	5	replace
1083	[BUG]  [BUGGY]  while(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  [CE]  illegal  start  of  expression  [FE]          IllegalStateException      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  while(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	while(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;	  while(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
1084	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    StopWatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	121	1	replace
1085	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    StopWatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	121	1	replace
1086	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    StopWatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	121	5	replace
1087	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    StopWatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	121	5	replace
1088	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UN  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UN  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UN	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    StopWatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  ';'  expected	121	None	replace
1089	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  StopTime  =  System.currentTimeMillis();  [CE]  cannot  find  symbol  StopTime  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  StopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long  stopTime  =  System.currentTimeMillis();  StopTime  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    StopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  cannot  find  symbol  StopTime	126	None	replace
1090	[BUG]  [BUGGY]  StopTime  =  System.currentTimeMillis();  [CE]  cannot  find  symbol  StopTime  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  StopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	StopTime  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    StopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  cannot  find  symbol  StopTime	126	None	replace
1091	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	130	4	replace
1092	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	130	4	replace
1093	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	long  startTime  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	130	1	replace
1094	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long  startTime  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	130	1	replace
1095	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	67	1	add
1096	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	67	1	add
1097	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	67	1	add
1098	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	67	1	add
1099	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	67	1	add
1100	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	67	1	add
1101	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	51	5	add
1102	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running.     ");  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	51	5	add
1103	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_SPLIT;  if(this.runningState  ==  STATE_SPLIT)  {  this.runningState  =  STATE_SPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState    =    STATE_SPLIT;    if(this.runningState  ==  STATE_SPLIT)  {  this.runningState  =  STATE_SPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	54	1	add
1104	[BUG]  [BUGGY]  this.runningState  =  STATE_SPLIT;  if(this.runningState  ==  STATE_SPLIT)  {  this.runningState  =  STATE_SPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_SPLIT;  if(this.runningState  ==  STATE_SPLIT)  {  this.runningState  =  STATE_SPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState    =    STATE_SPLIT;    if(this.runningState  ==  STATE_SPLIT)  {  this.runningState  =  STATE_SPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	54	1	add
1105	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_SPLIT;  if(this.runningState  ==  STATE_SPLIT)  {  this.runningState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState    =    STATE_SPLIT;    if(this.runningState  ==  STATE_SPLIT)  {  this.runningState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	54	1	add
1106	[BUG]  [BUGGY]  this.runningState  =  STATE_SPLIT;  if(this.runningState  ==  STATE_SPLIT)  {  this.runningState  =  STATE_SPLIT;  }  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_SPLIT;  if(this.runningState  ==  STATE_SPLIT)  {  this.runningState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState    =    STATE_SPLIT;    if(this.runningState  ==  STATE_SPLIT)  {  this.runningState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	54	1	add
1107	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	15	1	add
1108	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	15	1	add
1109	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	15	4	add
1110	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	15	4	add
1111	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    startTime    =    System.currentTimeMillis();    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	81	4	add
1112	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    startTime    =    System.currentTimeMillis();    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	81	4	add
1113	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeM  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeM  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeM	  	non-compiled	[CE]  ';'  expected	81	None	add
1114	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMill  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMill  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMill	  	non-compiled	[CE]  ';'  expected	81	None	add
1115	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  2;  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  -  2;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.startTime    =    System.currentTimeMillis()    -    2;    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  -  2;  }	  	compilable	  [FE]  AssertionFailedError  	41	4	add
1116	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  2;  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  -  2;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  2;  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  -  2;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.startTime    =    System.currentTimeMillis()    -    2;    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  -  2;  }	  	compilable	  [FE]  AssertionFailedError  	41	4	add
1117	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  2;  int  this.startTime  =  System.currentTimeMillis()  -  2;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  2;  int  this.startTime  =  System.currentTimeMillis()  -  2;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.startTime    =    System.currentTimeMillis()    -    2;    int  this.startTime  =  System.currentTimeMillis()  -  2;	  	non-compiled	[CE]  not  a  statement	41	None	add
1118	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	65	1	add
1119	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	65	1	add
1120	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	65	1	add
1121	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	65	1	add
1122	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	65	1	add
1123	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	65	1	add
1124	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	65	1	add
1125	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	65	1	add
1126	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	65	1	add
1127	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	65	1	add
1128	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	11	1	replace
1129	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	11	1	replace
1130	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMill  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMill  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMill	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  ';'  expected	11	None	replace
1131	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( " ");  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	11	1	replace
1132	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( " ");  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	11	1	replace
1133	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.runningState  =  STATE_SUSPENDED;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.runningState  =  STATE_SUSPENDED;  }	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
1134	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.runningState  =  STATE_UNSTARTED;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.runningState  =  STATE_UNSTARTED;  }	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
1135	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    Stopwatch.this.runningState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	6	5	replace
1136	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    Stopwatch.this.runningState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	6	5	replace
1137	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  Stopwatch.this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_UN  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  Stopwatch.this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_UN  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  Stopwatch.this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_UN	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    Stopwatch.this.runningState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  ';'  expected	6	None	replace
1138	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSPLIT)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_UNSPLIT)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    this.runningState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	3	5	replace
1139	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSPLIT)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSPLIT)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_UNSPLIT)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    this.runningState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	3	5	replace
1140	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	167	1	add
1141	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	167	1	add
1142	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	167	1	add
1143	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	167	1	add
1144	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	167	1	add
1145	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	167	1	add
1146	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        StopWatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	120	1	add
1147	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        StopWatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	120	1	add
1148	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        StopWatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    StopWatch.this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	120	1	add
1149	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        StopWatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    StopWatch.this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	120	1	add
1150	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
1151	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
1152	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
1153	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
1154	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	63	1	add
1155	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	63	1	add
1156	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
1157	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
1158	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	102	1	add
1159	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	102	1	add
1160	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	159	1	add
1161	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	159	1	add
1162	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	159	1	add
1163	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	159	1	add
1164	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	159	1	add
1165	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	159	1	add
1166	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSPLIT)  {  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_UNSPLIT)  {  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	5	1	replace
1167	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSPLIT)  {  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSPLIT)  {  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_UNSPLIT)  {  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	5	1	replace
1168	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	2	5	replace
1169	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	2	5	replace
1170	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	non-compiled	[CE]  possible  loss  of  precision	87	None	replace
1171	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        long    stopTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	127	None	add
1172	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  long  this.runningState  =  STATE_STOPPED;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  long  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        long    stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  long  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  not  a  statement	127	None	add
1173	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	non-compiled	[CE]  illegal  start  of  expression	153	None	add
1174	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState        =        STATE_SUSPENDED;        if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	153	1	add
1175	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	153	1	add
1176	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }	  	non-compiled	[CE]  illegal  start  of  expression	153	None	add
1177	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	85	None	replace
1178	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	85	None	replace
1179	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  long  splitState  =  System.currentTimeMillis();  splitState  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING)  {  long  splitState  =  System.currentTimeMillis();  splitState  =  System.currentTimeMillis();  }	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	85	1	replace
1180	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  long  splitState  =  System.currentTimeMillis();  splitState  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  long  splitState  =  System.currentTimeMillis();  splitState  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING)  {  long  splitState  =  System.currentTimeMillis();  splitState  =  System.currentTimeMillis();  }	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	85	1	replace
1181	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	stopTime  =  System.currentTimeMillis()  -  this.startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	170	1	replace
1182	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime  =  System.currentTimeMillis()  -  this.startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	170	1	replace
1183	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	47	1	add
1184	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	47	1	add
1185	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	47	1	add
1186	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	47	1	add
1187	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	long  splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	16	5	replace
1188	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long  splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  AssertionFailedError  	16	5	replace
1189	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState        =        STATE_SUSPENDED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	118	1	add
1190	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	118	1	add
1191	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState        =        STATE_SUSPENDED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	118	1	add
1192	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	118	1	add
1193	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	10	1	add
1194	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	10	1	add
1195	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	10	1	add
1196	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	10	1	add
1197	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	97	1	add
1198	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	97	1	add
1199	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	97	1	add
1200	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	97	1	add
1201	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	97	1	add
1202	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	97	1	add
1203	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SU  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SU  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SU	  	non-compiled	[CE]  ';'  expected	97	None	add
1204	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_	  	non-compiled	[CE]  ';'  expected	97	None	add
1205	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running..   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running..   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running..   ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.	  	non-compiled	[CE]  unclosed  string  literal	144	None	add
1206	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running..   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running..   ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	144	5	add
1207	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running..   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running..   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running..   ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	  	compilable	  [FE]  IllegalStateException  	144	5	add
1208	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running..   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running..   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                if(this.runningState!=        STATE_UNSTARTED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running..   ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running..   ");  }	  	compilable	  [FE]  IllegalStateException  	144	5	add
1209	[BUG]  [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running..   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running..   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(     "Stopwatch    is    not    running.         ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException(   "Stopwatch  is  not  running..   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running..   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_UNSTARTED)        {        throw        new        IllegalStateException(       "Stopwatch        is        not        running.               ");        }        if(this.runningState!=    STATE_UNSTARTED)    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running..   ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.. ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  throw  new  IllegalStateException( "Stopwatch  is  not  running..   ");  }	  	compilable	  [FE]  IllegalStateException  	144	5	add
1210	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	12	1	add
1211	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	12	1	add
1212	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	12	1	add
1213	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	12	1	add
1214	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	67	1	add
1215	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	67	1	add
1216	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	67	1	add
1217	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	67	1	add
1218	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	67	1	add
1219	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	67	1	add
1220	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  if(this.runningState!=    STATE_UNSTARTED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    	compilable	  [FE]  AssertionFailedError  	141	1	replace
1221	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  if(this.runningState!=    STATE_UNSTARTED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    	compilable	  [FE]  AssertionFailedError  	141	1	replace
1222	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	135	5	replace
1223	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	135	5	replace
1224	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	135	1	replace
1225	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	135	1	replace
1226	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	82	1	replace
1227	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	82	1	replace
1228	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  +  1;  long  splitState  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_UNSTARTED;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  +  1;  long  splitState  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long    splitState    =    System.currentTimeMillis()    +    1;    long  splitState  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	92	None	add
1229	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	49	4	add
1230	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	49	4	add
1231	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	49	4	add
1232	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	49	4	add
1233	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  long  runningState  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	stopTime    =    System.currentTimeMillis()    /    1000;    long  runningState  =  System.currentTimeMillis()  /  1000;	  	compilable	  [FE]  AssertionFailedError  	21	4	add
1234	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  long  runningState  =  System.currentTimeMillis()  /  1000;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  long  runningState  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime    =    System.currentTimeMillis()    /    1000;    long  runningState  =  System.currentTimeMillis()  /  1000;	  	compilable	  [FE]  AssertionFailedError  	21	4	add
1235	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_RUNNING;    if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	70	1	replace
1236	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_RUNNING;  }  else  {  startTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_RUNNING;    if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	70	1	replace
1237	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_RUNNING;    if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	70	1	replace
1238	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_RUNNING;    if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	70	1	replace
1239	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	109	None	add
1240	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	79	1	add
1241	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	79	1	add
1242	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  }	  	compilable	  [FE]  AssertionFailedError  	79	1	add
1243	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  }	  	compilable	  [FE]  AssertionFailedError  	79	1	add
1244	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	165	None	add
1245	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [CE]  variable  splitState  is  already  defined  in  method  stop()  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  stop()	165	None	add
1246	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	27	4	add
1247	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	27	4	add
1248	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	27	4	add
1249	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	27	4	add
1250	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	106	1	add
1251	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	106	1	add
1252	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=    STATE_UNSTARTED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	157	1	add
1253	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=    STATE_UNSTARTED)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	157	1	add
1254	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  this.runningState  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  this.runningState  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    this.runningState  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }	  	non-compiled	[CE]  possible  loss  of  precision	31	None	add
1255	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  this.splitState  =  System.currentTimeMillis();  if(this.splitState!=  System.currentTimeMillis())  {  this.splitState  =  System.currentTimeMillis();  }  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  this.splitState  =  System.currentTimeMillis();  if(this.splitState!=  System.currentTimeMillis())  {  this.splitState  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    this.splitState  =  System.currentTimeMillis();  if(this.splitState!=  System.currentTimeMillis())  {  this.splitState  =  System.currentTimeMillis();  }	  	non-compiled	[CE]  possible  loss  of  precision	31	None	add
1256	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  this.splitState  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  this.splitState  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    this.splitState  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }	  	non-compiled	[CE]  possible  loss  of  precision	31	None	add
1257	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  this.runningState    =    STATE_SUSPENDED;    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	119	1	replace
1258	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  this.runningState    =    STATE_SUSPENDED;    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	119	1	replace
1259	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  this.runningState    =    STATE_SUSPENDED;    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	119	1	replace
1260	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  this.runningState    =    STATE_SUSPENDED;    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	119	1	replace
1261	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  AssertionFailedError  	52	5	replace
1262	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  AssertionFailedError  	52	5	replace
1263	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	52	5	replace
1264	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  throw  new  IllegalStateException( "Stopwatch  is  not  running.   ");  }	          this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    throw    new    IllegalStateException(   "Stopwatch    is    not    running.       ");    }    	compilable	  [FE]  IllegalStateException  	52	5	replace
1265	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	30	1	replace
1266	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_RUNNING  &&  this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	30	1	replace
1267	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    this.runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	1	None	add
1268	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  stopTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	long  stopTime  =  System.currentTimeMillis()  -  startTime;	  long    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	115	1	replace
1269	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis()  -  startTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  stopTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	long  stopTime  =  System.currentTimeMillis()  -  startTime;	  long    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	115	1	replace
1270	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	78	1	replace
1271	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	78	1	replace
1272	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  long  runTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [CE]  variable  stopTime  is  already  defined  in  method  stop()  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  long  runTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        long    stopTime    =    System.currentTimeMillis();    long  runTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  stop()	127	None	add
1273	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	102	1	add
1274	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	102	1	add
1275	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    this.runningState    =    STATE_UNSTARTED;    }    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	35	4	add
1276	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    System.currentTimeMillis())    {    this.startTime    =    System.currentTimeMillis();    }    else    {    this.runningState    =    STATE_UNSTARTED;    }    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  System.currentTimeMillis())  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	35	4	add
1277	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	65	1	add
1278	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	65	1	add
1279	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	65	1	add
1280	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	65	1	add
1281	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	161	1	add
1282	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	161	1	add
1283	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	161	1	add
1284	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	161	1	add
1285	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        StopWatch.this.stopTime    =    System.currentTimeMillis();    this.stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	124	1	add
1286	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        StopWatch.this.stopTime    =    System.currentTimeMillis();    this.stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	124	1	add
1287	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  Stopwatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UN  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  Stopwatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UN  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  }  else  {  Stopwatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UN	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    Stopwatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  ';'  expected	7	None	replace
1288	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE	  	non-compiled	[CE]  ')'  expected	97	None	add
1289	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	97	1	add
1290	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	97	1	add
1291	[BUG]  [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.running  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.running  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                if(this.runningState!=        STATE_RUNNING)        {        this.runningState        =        STATE_UNSTARTED;        }        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.running	  	non-compiled	[CE]  ')'  expected	97	None	add
1292	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_RUNNING;        this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	61	1	add
1293	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_RUNNING;        this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	61	1	add
1294	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	167	1	add
1295	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	167	1	add
1296	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	167	1	add
1297	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	167	1	add
1298	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	167	1	add
1299	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	167	1	add
1300	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	136	1	add
1301	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	136	1	add
1302	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	136	1	add
1303	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	136	1	add
1304	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	136	1	add
1305	[BUG]  [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_STOPPED;  }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	                this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	136	1	add
1306	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	81	4	add
1307	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	81	4	add
1308	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	81	4	add
1309	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	81	4	add
1310	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	81	4	add
1311	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	81	4	add
1312	[BUG]  [BUGGY]  timeout  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	add	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	timeout	81	1	add
1313	[BUG]  [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  timeout  [FE]          AssertionFailedError    [CONTEXT]      public  void  stop()  {  if(this.runningState  !=  STATE_RUNNING  &&  this.runningState  !=  STATE_SUSPENDED)  {  throw  new  IllegalStateException(     "Stopwatch  is  not  running.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  stop  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.4472135954999579	119	119	1	replace	this.runningState        =        STATE_SUSPENDED;        if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	timeout	81	1	add
