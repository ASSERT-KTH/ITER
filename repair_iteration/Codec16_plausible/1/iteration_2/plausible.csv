9	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Padding    must    not    be    in    alphabet    or    whitespace       ");    throw    new    IllegalArgumentException(       "Padding    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]        IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Padding    must    not    be    in    alphabet    or    whitespace       ");    throw    new    IllegalArgumentException(       "Padding    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  whitespace ");	  throw    new    IllegalArgumentException(       "Padding    must    not    be    in    alphabet    or    whitespace       ");    throw    new    IllegalArgumentException(       "Padding    must    not    be    in    alphabet    or    whitespace       ");    	plausible		423	0
106	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "pad    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "pad    must    not    be    in    alphabet    or    whitespace.       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "pad    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "pad    must    not    be    in    alphabet    or    whitespace.       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.   ");	  throw    new    IllegalArgumentException(       "pad    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "pad    must    not    be    in    alphabet    or    whitespace.       ");    	plausible		293	0
106	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "pad    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "pad    must    not    be    in    alphabet    or    whitespace.       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "pad    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "pad    must    not    be    in    alphabet    or    whitespace.       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.   ");	  throw    new    IllegalArgumentException(       "pad    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "pad    must    not    be    in    alphabet    or    whitespace.       ");    	plausible		293	0
106	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "pad    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "pad    must    not    be    in    alphabet    or    whitespace.       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "pad    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "pad    must    not    be    in    alphabet    or    whitespace.       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Alphabet  must  not  be  in  alphabet  or  whitespace.   ");	  throw    new    IllegalArgumentException(       "pad    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "pad    must    not    be    in    alphabet    or    whitespace.       ");    	plausible		293	0
106	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "pad    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "pad    must    not    be    in    alphabet    or    whitespace.       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "pad    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "pad    must    not    be    in    alphabet    or    whitespace.       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace.   ");	  throw    new    IllegalArgumentException(       "pad    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "pad    must    not    be    in    alphabet    or    whitespace.       ");    	plausible		293	0
106	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "pad    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "pad    must    not    be    in    alphabet    or    whitespace.       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "pad    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "pad    must    not    be    in    alphabet    or    whitespace.       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Platform  must  not  be  in  alphabet  or  whitespace.   ");	  throw    new    IllegalArgumentException(       "pad    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "pad    must    not    be    in    alphabet    or    whitespace.       ");    	plausible		293	0
106	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "pad    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "pad    must    not    be    in    alphabet    or    whitespace.       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "pad    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "pad    must    not    be    in    alphabet    or    whitespace.       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace.   ");	  throw    new    IllegalArgumentException(       "pad    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "pad    must    not    be    in    alphabet    or    whitespace.       ");    	plausible		293	0
106	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "pad    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "pad    must    not    be    in    alphabet    or    whitespace.       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "pad    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "pad    must    not    be    in    alphabet    or    whitespace.       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Bluespace  must  not  be  in  alphabet  or  whitespace.   ");	  throw    new    IllegalArgumentException(       "pad    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "pad    must    not    be    in    alphabet    or    whitespace.       ");    	plausible		293	0
146	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace.       ");    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace.       ");    [CE]    unreachable    statement    [FE]        IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace.       ");    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace.       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace. ");	  throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace.       ");    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace.       ");    	plausible		23	0
244	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "UsageHex    must    not    be    in    alphabet    or    whitespace       ");    IllegalArgumentException(       "UsageHex    must    not    be    in    alphabet    or    whitespace       ");    [CE]    cannot    find    symbol    [FE]        IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "UsageHex    must    not    be    in    alphabet    or    whitespace       ");    IllegalArgumentException(       "UsageHex    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace ");	  throw    new    IllegalArgumentException(       "UsageHex    must    not    be    in    alphabet    or    whitespace       ");    IllegalArgumentException(       "UsageHex    must    not    be    in    alphabet    or    whitespace       ");    	plausible		434	0
333	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Bad    useHex    must    not    be    in    alphabet    or    whitespace.       ");    throw    new    IllegalArgumentException(       "Bad    useHex    must    not    be    in    alphabet    or    whitespace.       ");    [CE]    unreachable    statement    [FE]        IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Bad    useHex    must    not    be    in    alphabet    or    whitespace.       ");    throw    new    IllegalArgumentException(       "Bad    useHex    must    not    be    in    alphabet    or    whitespace.       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace. ");	  throw    new    IllegalArgumentException(       "Bad    useHex    must    not    be    in    alphabet    or    whitespace.       ");    throw    new    IllegalArgumentException(       "Bad    useHex    must    not    be    in    alphabet    or    whitespace.       ");    	plausible		336	0
372	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace ");	  throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    	plausible		314	0
372	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace. ");	  throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    	plausible		314	0
372	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace, ");	  throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    	plausible		314	0
373	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace! ");	  throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    	plausible		314	0
373	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace... ");	  throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    	plausible		314	0
373	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace: ");	  throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    	plausible		314	0
689	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Padding    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(       "Padding    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]                        IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Padding    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(       "Padding    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  whitespace ");	  throw    new    IllegalArgumentException(       "Padding    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(       "Padding    must    not    be    in    alphabet    or    whitespace       ");    	plausible		427	0
689	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Padding    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(       "Padding    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]                        IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Padding    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(       "Padding    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  whitespace. ");	  throw    new    IllegalArgumentException(       "Padding    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(       "Padding    must    not    be    in    alphabet    or    whitespace       ");    	plausible		427	0
689	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Padding    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(       "Padding    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]                        IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Padding    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(       "Padding    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  whitespace! ");	  throw    new    IllegalArgumentException(       "Padding    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(       "Padding    must    not    be    in    alphabet    or    whitespace       ");    	plausible		427	0
689	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Padding    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(       "Padding    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]                        IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Padding    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(       "Padding    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  whitespace, ");	  throw    new    IllegalArgumentException(       "Padding    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(       "Padding    must    not    be    in    alphabet    or    whitespace       ");    	plausible		427	0
690	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Padding    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(       "Padding    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]                        IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Padding    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(       "Padding    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  whitespace... ");	  throw    new    IllegalArgumentException(       "Padding    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(       "Padding    must    not    be    in    alphabet    or    whitespace       ");    	plausible		427	0
690	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Padding    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(       "Padding    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]                        IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Padding    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(       "Padding    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  whitespace: ");	  throw    new    IllegalArgumentException(       "Padding    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(       "Padding    must    not    be    in    alphabet    or    whitespace       ");    	plausible		427	0
824	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace ");	  throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    	plausible		329	0
824	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace, ");	  throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    	plausible		329	0
824	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace! ");	  throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    	plausible		329	0
825	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace... ");	  throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    	plausible		329	0
825	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace: ");	  throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    	plausible		329	0
905	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "UsageHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "UsageHex    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "UsageHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "UsageHex    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace ");	  throw    new    IllegalArgumentException(       "UsageHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "UsageHex    must    not    be    in    alphabet    or    whitespace       ");    	plausible		170	0
905	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "UsageHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "UsageHex    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "UsageHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "UsageHex    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace. ");	  throw    new    IllegalArgumentException(       "UsageHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "UsageHex    must    not    be    in    alphabet    or    whitespace       ");    	plausible		170	0
905	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "UsageHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "UsageHex    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "UsageHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "UsageHex    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace, ");	  throw    new    IllegalArgumentException(       "UsageHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "UsageHex    must    not    be    in    alphabet    or    whitespace       ");    	plausible		170	0
906	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "UsageHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "UsageHex    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "UsageHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "UsageHex    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace! ");	  throw    new    IllegalArgumentException(       "UsageHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "UsageHex    must    not    be    in    alphabet    or    whitespace       ");    	plausible		170	0
906	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "UsageHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "UsageHex    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "UsageHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "UsageHex    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace... ");	  throw    new    IllegalArgumentException(       "UsageHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "UsageHex    must    not    be    in    alphabet    or    whitespace       ");    	plausible		170	0
906	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "UsageHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "UsageHex    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "UsageHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "UsageHex    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace: ");	  throw    new    IllegalArgumentException(       "UsageHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "UsageHex    must    not    be    in    alphabet    or    whitespace       ");    	plausible		170	0
1020	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Bad    space    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(       "Bad    space    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Bad    space    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(       "Bad    space    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace ");	  throw    new    IllegalArgumentException(       "Bad    space    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(       "Bad    space    must    not    be    in    alphabet    or    whitespace       ");    	plausible		248	0
1020	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Bad    space    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(       "Bad    space    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Bad    space    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(       "Bad    space    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace! ");	  throw    new    IllegalArgumentException(       "Bad    space    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(       "Bad    space    must    not    be    in    alphabet    or    whitespace       ");    	plausible		248	0
1020	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Bad    space    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(       "Bad    space    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Bad    space    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(       "Bad    space    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace: ");	  throw    new    IllegalArgumentException(       "Bad    space    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(       "Bad    space    must    not    be    in    alphabet    or    whitespace       ");    	plausible		248	0
1020	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Bad    space    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(       "Bad    space    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Bad    space    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(       "Bad    space    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace... ");	  throw    new    IllegalArgumentException(       "Bad    space    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(       "Bad    space    must    not    be    in    alphabet    or    whitespace       ");    	plausible		248	0
1021	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Bad    space    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(       "Bad    space    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Bad    space    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(       "Bad    space    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace, ");	  throw    new    IllegalArgumentException(       "Bad    space    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(       "Bad    space    must    not    be    in    alphabet    or    whitespace       ");    	plausible		248	0
1083	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "The    pad    must    not    be    in    alphabet    or    whitespace       ");    IllegalArgumentException(       "The    pad    must    not    be    in    alphabet    or    whitespace       ");    [CE]    cannot    find    symbol    [FE]            IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "The    pad    must    not    be    in    alphabet    or    whitespace       ");    IllegalArgumentException(       "The    pad    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace. ");	  throw    new    IllegalArgumentException(       "The    pad    must    not    be    in    alphabet    or    whitespace       ");    IllegalArgumentException(       "The    pad    must    not    be    in    alphabet    or    whitespace       ");    	plausible		506	0
1239	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Bad    useHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Bad    useHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace ");	  throw    new    IllegalArgumentException(       "Bad    useHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace       ");    	plausible		406	0
1239	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Bad    useHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Bad    useHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace: ");	  throw    new    IllegalArgumentException(       "Bad    useHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace       ");    	plausible		406	0
1239	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Bad    useHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Bad    useHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace, ");	  throw    new    IllegalArgumentException(       "Bad    useHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace       ");    	plausible		406	0
1239	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Bad    useHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Bad    useHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace! ");	  throw    new    IllegalArgumentException(       "Bad    useHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace       ");    	plausible		406	0
1240	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Bad    useHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Bad    useHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace... ");	  throw    new    IllegalArgumentException(       "Bad    useHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace       ");    	plausible		406	0
1262	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Decode    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Decode    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace ");	  throw    new    IllegalArgumentException(       "Decode    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace       ");    	plausible		32	0
1262	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Decode    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Decode    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace. ");	  throw    new    IllegalArgumentException(       "Decode    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace       ");    	plausible		32	0
1263	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Decode    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Decode    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace... ");	  throw    new    IllegalArgumentException(       "Decode    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace       ");    	plausible		32	0
1263	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Decode    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Decode    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace: ");	  throw    new    IllegalArgumentException(       "Decode    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace       ");    	plausible		32	0
1263	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Decode    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Decode    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace, ");	  throw    new    IllegalArgumentException(       "Decode    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace       ");    	plausible		32	0
1263	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Decode    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Decode    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace! ");	  throw    new    IllegalArgumentException(       "Decode    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace       ");    	plausible		32	0
1515	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Sep    must    not    be    in    alphabet    or    whitespace       ");    throw    new    IllegalArgumentException(   "Sep    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]        IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Sep    must    not    be    in    alphabet    or    whitespace       ");    throw    new    IllegalArgumentException(   "Sep    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace ");	  throw    new    IllegalArgumentException(       "Sep    must    not    be    in    alphabet    or    whitespace       ");    throw    new    IllegalArgumentException(   "Sep    must    not    be    in    alphabet    or    whitespace       ");    	plausible		285	0
1668	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Sep    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Sep    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Sep    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Sep    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace ");	  throw    new    IllegalArgumentException(       "Sep    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Sep    must    not    be    in    alphabet    or    whitespace       ");    	plausible		288	0
1668	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Sep    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Sep    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Sep    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Sep    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace. ");	  throw    new    IllegalArgumentException(       "Sep    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Sep    must    not    be    in    alphabet    or    whitespace       ");    	plausible		288	0
1668	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Sep    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Sep    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Sep    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Sep    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace! ");	  throw    new    IllegalArgumentException(       "Sep    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Sep    must    not    be    in    alphabet    or    whitespace       ");    	plausible		288	0
1668	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Sep    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Sep    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Sep    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Sep    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace, ");	  throw    new    IllegalArgumentException(       "Sep    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Sep    must    not    be    in    alphabet    or    whitespace       ");    	plausible		288	0
1668	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Sep    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Sep    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Sep    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Sep    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace... ");	  throw    new    IllegalArgumentException(       "Sep    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Sep    must    not    be    in    alphabet    or    whitespace       ");    	plausible		288	0
1668	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Sep    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Sep    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Sep    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Sep    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace: ");	  throw    new    IllegalArgumentException(       "Sep    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Sep    must    not    be    in    alphabet    or    whitespace       ");    	plausible		288	0
1750	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "The    pad    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]        IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "The    pad    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace. ");	  throw    new    IllegalArgumentException(       "The    pad    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace       ");    	plausible		505	0
1750	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "The    pad    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]        IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "The    pad    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace ");	  throw    new    IllegalArgumentException(       "The    pad    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace       ");    	plausible		505	0
1750	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "The    pad    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]        IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "The    pad    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace... ");	  throw    new    IllegalArgumentException(       "The    pad    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace       ");    	plausible		505	0
1750	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "The    pad    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]        IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "The    pad    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace: ");	  throw    new    IllegalArgumentException(       "The    pad    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace       ");    	plausible		505	0
1750	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "The    pad    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]        IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "The    pad    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace! ");	  throw    new    IllegalArgumentException(       "The    pad    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace       ");    	plausible		505	0
1750	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "The    pad    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]        IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "The    pad    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace: "  +  pad);	  throw    new    IllegalArgumentException(       "The    pad    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace       ");    	plausible		505	0
1944	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Bytes    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.       ");    [CE]    unreachable    statement    [FE]        IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Bytes    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.. ");	  throw    new    IllegalArgumentException(       "Bytes    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.       ");    	plausible		524	0
1944	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Bytes    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.       ");    [CE]    unreachable    statement    [FE]        IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Bytes    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.n ");	  throw    new    IllegalArgumentException(       "Bytes    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.       ");    	plausible		524	0
1945	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Bytes    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.       ");    [CE]    unreachable    statement    [FE]        IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Bytes    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.... ");	  throw    new    IllegalArgumentException(       "Bytes    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.       ");    	plausible		524	0
2088	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace.       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace.       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.n ");	  throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace.       ");    	plausible		26	0
2088	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace.       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace.       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.. ");	  throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace.       ");    	plausible		26	0
2247	[BUG]    [BUGGY]    logically(useHex)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    }    [CE]    ';'    expected    [FE]                                            IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    logically(useHex)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    }    [BUGGY]        throw    new    IllegalArgumentException(       "pad    must    not    be    in    alphabet    or    whitespace       ");    }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	if(!useHex)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  }	  logically(useHex)    {    System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    }    	plausible		489	0
2658	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    [CE]    cannot    find    symbol    [FE]        IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace ");	  throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    	plausible		526	0
2658	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    [CE]    cannot    find    symbol    [FE]        IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace. ");	  throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    blackspace       ");    	plausible		526	0
2672	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Decode    must    not    be    in    alphabet    or    whitespace       ");    throw    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]        IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Decode    must    not    be    in    alphabet    or    whitespace       ");    throw    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace ");	  throw    new    IllegalArgumentException(       "Decode    must    not    be    in    alphabet    or    whitespace       ");    throw    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace       ");    	plausible		29	0
2840	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Bytes    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]            IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Bytes    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace ");	  throw    new    IllegalArgumentException(       "Bytes    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace       ");    	plausible		543	0
2841	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Bytes    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]            IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Bytes    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace: ");	  throw    new    IllegalArgumentException(       "Bytes    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace       ");    	plausible		543	0
2841	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Bytes    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]            IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Bytes    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace... ");	  throw    new    IllegalArgumentException(       "Bytes    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace       ");    	plausible		543	0
2841	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Bytes    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]            IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Bytes    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace, ");	  throw    new    IllegalArgumentException(       "Bytes    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace       ");    	plausible		543	0
2841	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Bytes    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]            IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Bytes    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace! ");	  throw    new    IllegalArgumentException(       "Bytes    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace       ");    	plausible		543	0
2892	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "UseHex    must    not    be    in    alphabet    or    whitespace       ");    throw    new    IllegalArgumentException(   "UseHex    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]        IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "UseHex    must    not    be    in    alphabet    or    whitespace       ");    throw    new    IllegalArgumentException(   "UseHex    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace ");	  throw    new    IllegalArgumentException(       "UseHex    must    not    be    in    alphabet    or    whitespace       ");    throw    new    IllegalArgumentException(   "UseHex    must    not    be    in    alphabet    or    whitespace       ");    	plausible		223	0
2926	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "UseHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "UseHex    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "UseHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "UseHex    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace ");	  throw    new    IllegalArgumentException(       "UseHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "UseHex    must    not    be    in    alphabet    or    whitespace       ");    	plausible		226	0
2926	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "UseHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "UseHex    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "UseHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "UseHex    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace. ");	  throw    new    IllegalArgumentException(       "UseHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "UseHex    must    not    be    in    alphabet    or    whitespace       ");    	plausible		226	0
2926	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "UseHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "UseHex    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "UseHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "UseHex    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace, ");	  throw    new    IllegalArgumentException(       "UseHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "UseHex    must    not    be    in    alphabet    or    whitespace       ");    	plausible		226	0
2926	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "UseHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "UseHex    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "UseHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "UseHex    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace! ");	  throw    new    IllegalArgumentException(       "UseHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "UseHex    must    not    be    in    alphabet    or    whitespace       ");    	plausible		226	0
2927	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "UseHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "UseHex    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "UseHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "UseHex    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace... ");	  throw    new    IllegalArgumentException(       "UseHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "UseHex    must    not    be    in    alphabet    or    whitespace       ");    	plausible		226	0
2927	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "UseHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "UseHex    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "UseHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "UseHex    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace: ");	  throw    new    IllegalArgumentException(       "UseHex    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "UseHex    must    not    be    in    alphabet    or    whitespace       ");    	plausible		226	0
3172	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Bad    useHex    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace.       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Bad    useHex    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace.       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace.. ");	  throw    new    IllegalArgumentException(       "Bad    useHex    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace.       ");    	plausible		339	0
3172	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Bad    useHex    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace.       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Bad    useHex    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace.       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace.n ");	  throw    new    IllegalArgumentException(       "Bad    useHex    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace.       ");    	plausible		339	0
3173	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Bad    useHex    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace.       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Bad    useHex    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace.       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace.... ");	  throw    new    IllegalArgumentException(       "Bad    useHex    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace.       ");    	plausible		339	0
3239	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "pad    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "pad    must    not    be    in    alphabet    or    whitespace.       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "pad    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "pad    must    not    be    in    alphabet    or    whitespace.       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Encoding  must  not  be  in  alphabet  or  whitespace.   ");	  throw    new    IllegalArgumentException(       "pad    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "pad    must    not    be    in    alphabet    or    whitespace.       ");    	plausible		293	0
3282	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Bad    useHex    must    not    be    in    alphabet    or    whitespace.       ");    throw    new    IllegalArgumentException(       "Bad    useHex    must    not    be    in    alphabet    or    whitespace.       ");    [CE]    unreachable    statement    [FE]        IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Bad    useHex    must    not    be    in    alphabet    or    whitespace.       ");    throw    new    IllegalArgumentException(       "Bad    useHex    must    not    be    in    alphabet    or    whitespace.       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace. ");	  throw    new    IllegalArgumentException(       "Bad    useHex    must    not    be    in    alphabet    or    whitespace.       ");    throw    new    IllegalArgumentException(       "Bad    useHex    must    not    be    in    alphabet    or    whitespace.       ");    	plausible		336	0
3289	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace.    Please    check    that    the    pad    does    not    exist.   ");    [FE]    IllegalArgumentException    [FE]        IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace.    Please    check    that    the    pad    does    not    exist.   ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace.  Please  check  that  the  pad  does  not  exist. ");	  throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace.    Please    check    that    the    pad    does    not    exist.   ");    	plausible		451	0
3367	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "The    pad    must    not    be    in    alphabet    or    whitespace       ");    IllegalArgumentException(       "The    pad    must    not    be    in    alphabet    or    whitespace       ");    [CE]    cannot    find    symbol    [FE]            IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "The    pad    must    not    be    in    alphabet    or    whitespace       ");    IllegalArgumentException(       "The    pad    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace ");	  throw    new    IllegalArgumentException(       "The    pad    must    not    be    in    alphabet    or    whitespace       ");    IllegalArgumentException(       "The    pad    must    not    be    in    alphabet    or    whitespace       ");    	plausible		506	0
3375	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Bad    useHex    must    not    be    in    alphabet    or    whitespace       ");    throw    new    IllegalArgumentException(       "Bad    useHex    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]        IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Bad    useHex    must    not    be    in    alphabet    or    whitespace       ");    throw    new    IllegalArgumentException(       "Bad    useHex    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace ");	  throw    new    IllegalArgumentException(       "Bad    useHex    must    not    be    in    alphabet    or    whitespace       ");    throw    new    IllegalArgumentException(       "Bad    useHex    must    not    be    in    alphabet    or    whitespace       ");    	plausible		403	0
3389	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.    Please    check    that    the    useHex    is    null.   ");    [FE]    IllegalArgumentException    [FE]                IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.    Please    check    that    the    useHex    is    null.   ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.  Please  check  that  the  useHex  is  null. ");	  throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.    Please    check    that    the    useHex    is    null.   ");    	plausible		466	0
3458	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace.    Please    check    that    it    does.   ");    [FE]    IllegalArgumentException    [FE]                IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace.    Please    check    that    it    does.   ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace.  Please  check  that  it  does. ");	  throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace.    Please    check    that    it    does.   ");    	plausible		592	0
3690	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "The    pad    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]        IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "The    pad    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace, ");	  throw    new    IllegalArgumentException(       "The    pad    must    not    be    in    alphabet    or    whitespace       ");    Throwable    cause    =    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace       ");    	plausible		505	0
3701	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.    Please    check    that    this    pad    does    not    exist.   ");    [FE]    IllegalArgumentException    [FE]            IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.    Please    check    that    this    pad    does    not    exist.   ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.  Please  check  that  this  pad  does  not  exist. ");	  throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.    Please    check    that    this    pad    does    not    exist.   ");    	plausible		231	0
3704	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.    Please    check    that    the    pad    does    not    exist:   "    +    pad);    [FE]    IllegalArgumentException    [FE]            IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.    Please    check    that    the    pad    does    not    exist:   "    +    pad);    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.  Please  check  that  the  pad  does  not  exist: "  +  pad);	  throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.    Please    check    that    the    pad    does    not    exist:   "    +    pad);    	plausible		464	0
3704	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Bad    space    must    not    be    in    alphabet    or    whitespace       ");    throw    new    IllegalArgumentException(       "Bad    space    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]        IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Bad    space    must    not    be    in    alphabet    or    whitespace       ");    throw    new    IllegalArgumentException(       "Bad    space    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace ");	  throw    new    IllegalArgumentException(       "Bad    space    must    not    be    in    alphabet    or    whitespace       ");    throw    new    IllegalArgumentException(       "Bad    space    must    not    be    in    alphabet    or    whitespace       ");    	plausible		245	0
3756	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace.    Please    check    that    your    pad    does    not    exist.   ");    [FE]    IllegalArgumentException    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace.    Please    check    that    your    pad    does    not    exist.   ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace.  Please  check  that  your  pad  does  not  exist. ");	  throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace.    Please    check    that    your    pad    does    not    exist.   ");    	plausible		594	0
3760	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace.    Please    check    that    it    does.   ");    [FE]    IllegalArgumentException    [FE]        IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace.    Please    check    that    it    does.   ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.  Please  check  that  it  does. ");	  throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace.    Please    check    that    it    does.   ");    	plausible		624	0
3829	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Bytes    must    not    be    in    alphabet    or    whitespace       ");    throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]        IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Bytes    must    not    be    in    alphabet    or    whitespace       ");    throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	if(!useHex)  {  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace ");  }	  throw    new    IllegalArgumentException(       "Bytes    must    not    be    in    alphabet    or    whitespace       ");    throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace       ");    	plausible		355	0
3829	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Bytes    must    not    be    in    alphabet    or    whitespace       ");    throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]        IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Bytes    must    not    be    in    alphabet    or    whitespace       ");    throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace ");	  throw    new    IllegalArgumentException(       "Bytes    must    not    be    in    alphabet    or    whitespace       ");    throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace       ");    	plausible		355	0
3925	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]        IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace ");	  throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    	plausible		326	0
4025	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace.    Please    check    that    the    pad    does    not    exist.   ");    [FE]    IllegalArgumentException    [FE]            IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace.    Please    check    that    the    pad    does    not    exist.   ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.  Please  check  that  the  pad  does  not  exist. ");	  throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace.    Please    check    that    the    pad    does    not    exist.   ");    	plausible		521	0
4108	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace.    Please    check    that    the    useHex    is    null.   ");    [FE]    IllegalArgumentException    [FE]                IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace.    Please    check    that    the    useHex    is    null.   ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.  Please  check  that  the  useHex  is  null. ");	  throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace.    Please    check    that    the    useHex    is    null.   ");    	plausible		523	0
4175	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Bytes    must    not    be    in    alphabet    or    whitespace.       ");    throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.       ");    [CE]    unreachable    statement    [FE]        IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Bytes    must    not    be    in    alphabet    or    whitespace.       ");    throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace. ");	  throw    new    IllegalArgumentException(       "Bytes    must    not    be    in    alphabet    or    whitespace.       ");    throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.       ");    	plausible		181	0
4238	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.    Please    check    that    your    useHex    is    null.   ");    [FE]    IllegalArgumentException    [FE]            IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.    Please    check    that    your    useHex    is    null.   ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.  Please  check  that  your  useHex  is  null. ");	  throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.    Please    check    that    your    useHex    is    null.   ");    	plausible		600	0
4258	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.    Please    check    that    the    pad    does    not    exist.   ");    [FE]    IllegalArgumentException    [FE]        IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.    Please    check    that    the    pad    does    not    exist.   ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.  Please  check  that  the  pad  does  not  exist. ");	  throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.    Please    check    that    the    pad    does    not    exist.   ");    	plausible		462	0
4629	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]        IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	if(!useHex)  {  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace ");  }	  throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    	plausible		326	0
4629	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]        IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	if(!useHex)  {  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace. ");  }	  throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace       ");    	plausible		326	0
4808	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Decode    must    not    be    in    alphabet    or    whitespace       ");    Throwables.throw    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace       ");    [CE]    <identifier>    expected    [FE]                IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Decode    must    not    be    in    alphabet    or    whitespace       ");    Throwables.throw    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	if(!useHex)  {  throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace ");  }	  throw    new    IllegalArgumentException(       "Decode    must    not    be    in    alphabet    or    whitespace       ");    Throwables.throw    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace       ");    	plausible		31	0
4834	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace.       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace.       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.  Try  again. ");	  throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace.       ");    	plausible		26	0
4834	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace.       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace.       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.  Please  check  that  it  does. ");	  throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace.       ");    	plausible		26	0
4834	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace.       ");    [CE]    unreachable    statement    [FE]                    IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace.       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.  Please  check  that  the  pad  does  not  exist. ");	  throw    new    IllegalArgumentException(       "Whitespace    must    not    be    in    alphabet    or    whitespace.       ");    Throwable    cause    =    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace.       ");    	plausible		26	0
4840	[BUG]    [BUGGY]    throw    new    IllegalArgumentException(       "Bytes    must    not    be    in    alphabet    or    whitespace       ");    throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace       ");    [CE]    unreachable    statement    [FE]        IllegalArgumentException        [CONTEXT]        this.encodeSize    =    BYTES_PER_ENCODED_BLOCK    +    lineSeparator.length;    this.lineSeparator    =    new    byte[lineSeparator.length];    System.arraycopy(lineSeparator,    0,    this.lineSeparator,    0,    lineSeparator.length);    }    else    {    this.encodeSize    =    BYTES_PER_ENCODED_BLOCK;    this.lineSeparator    =    null;    }    this.decodeSize    =    this.encodeSize    -    1;    if    (isInAlphabet(pad)    ||    isWhiteSpace(pad))    {        [BUGGY]    throw    new    IllegalArgumentException(       "Bytes    must    not    be    in    alphabet    or    whitespace       ");    throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace       ");    [BUGGY]        }    }    [CLASS]    Base32    [METHOD]    <init>    [RETURN_TYPE]    Base32(int,byte[],boolean,byte)    final    int    lineLength    final    byte[]    lineSeparator    final    boolean    useHex    final    byte    pad    [VARIABLES]    byte[]    CHUNK_SEPARATOR    DECODE_TABLE    ENCODE_TABLE    HEX_DECODE_TABLE    HEX_ENCODE_TABLE    decodeTable    encodeTable    lineSeparator    boolean    useHex    String    sep    int    BITS_PER_ENCODED_BYTE    BYTES_PER_ENCODED_BLOCK    BYTES_PER_UNENCODED_BLOCK    MASK_5BITS    decodeSize    encodeSize    lineLength    byte    pad    	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	if(!useHex)  {  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace. ");  }	  throw    new    IllegalArgumentException(       "Bytes    must    not    be    in    alphabet    or    whitespace       ");    throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace       ");    	plausible		355	0
