bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  List  <  String>  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  List  <  String>  iter  =  options.values().iterator();  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	List  <  String>  iter  =  options.values().iterator();	  Iterator    <    String>    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
2	[BUG]  [BUGGY]  else  if(!options.hasOption(token)&&  tokenLength  >  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(!options.hasOption(token)&&  tokenLength  >  0)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(!options.hasOption(token)&&  tokenLength  >  0)  {	  else    if(!options.hasOption(token)&&    tokenLength    >    2)    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
3	[BUG]  [BUGGY]  else  if(!options.hasOption(token)&&  tokenLength  ==  2)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(!options.hasOption(token)&&  tokenLength  ==  2)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(!options.hasOption(token)&&  tokenLength  ==  2)  {	  else    if(!options.hasOption(token)&&    tokenLength    >    2)    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
4	[BUG]  [BUGGY]  else  if(!options.hasOption(token)&&  tokenLength  >  1)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(!options.hasOption(token)&&  tokenLength  >  1)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(!options.hasOption(token)&&  tokenLength  >  1)  {	  else    if(!options.hasOption(token)&&    tokenLength    >    2)    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
5	[BUG]  [BUGGY]  else  if(!options.hasOption(token)&&  tokenLength  <  2)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(!options.hasOption(token)&&  tokenLength  <  2)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(!options.hasOption(token)&&  tokenLength  <  2)  {	  else    if(!options.hasOption(token)&&    tokenLength    >    2)    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
6	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  token.startsWith( "- ")||  tokenLength  <  1)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  token.startsWith( "- ")||  tokenLength  <  1)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  token.startsWith( "- ")||  tokenLength  <  1)  {	  else    if(options.hasOption(token)&&    token.startsWith(   "-   ")||    tokenLength    <    2)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
7	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  token.startsWith( "- ")||  tokenLength  >  2)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  token.startsWith( "- ")||  tokenLength  >  2)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  token.startsWith( "- ")||  tokenLength  >  2)  {	  else    if(options.hasOption(token)&&    token.startsWith(   "-   ")||    tokenLength    <    2)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
8	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)/  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  option  =  options.getOption(token)/  1;  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  option  =  options.getOption(token)/  1;	  Option    option    =    options.getOption(token)+    1;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
9	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)+  2;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  option  =  options.getOption(token)+  2;  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  option  =  options.getOption(token)+  2;	  Option    option    =    options.getOption(token)+    1;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
10	[BUG]  [BUGGY]  Option  option  =  options.getOption(tokenLength)+  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  option  =  options.getOption(tokenLength)+  1;  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  option  =  options.getOption(tokenLength)+  1;	  Option    option    =    options.getOption(token)+    1;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
11	[BUG]  [BUGGY]  Option  option  =  options.getOption(tokenLength  +  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  option  =  options.getOption(tokenLength  +  1);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  option  =  options.getOption(tokenLength  +  1);	  Option    option    =    options.getOption(tokenLength);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
12	[BUG]  [BUGGY]  Option  option  =  options.getOption(tokenLength  -  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  option  =  options.getOption(tokenLength  -  1);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  option  =  options.getOption(tokenLength  -  1);	  Option    option    =    options.getOption(tokenLength);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
13	[BUG]  [BUGGY]  Option  option  =  options.getOption(tokenLength  +  2);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  option  =  options.getOption(tokenLength  +  2);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  option  =  options.getOption(tokenLength  +  2);	  Option    option    =    options.getOption(tokenLength);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
14	[BUG]  [BUGGY]  else  if(tokenLength  >  1)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(tokenLength  >  1)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(tokenLength  >  1)  {	  else    if(stopAtNonOption    &&    tokenLength    >    1)    {    	non-compiled	[CE]  <identifier>  expected	52	None	replace
15	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  tokenLength  >  1)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(stopAtNonOption  ||  tokenLength  >  1)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(stopAtNonOption  ||  tokenLength  >  1)  {	  else    if(stopAtNonOption    &&    tokenLength    >    1)    {    	non-compiled	[CE]  <identifier>  expected	52	None	replace
16	[BUG]  [BUGGY]  tokens.add(tokenLength  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  tokens.add(tokenLength  +  1);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	tokens.add(tokenLength  +  1);	  tokens.add(tokenLength);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
17	[BUG]  [BUGGY]  tokens.add(tokenLength  +  2);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  tokens.add(tokenLength  +  2);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	tokens.add(tokenLength  +  2);	  tokens.add(tokenLength);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
18	[BUG]  [BUGGY]  tokens.add(tokenLength  -  1);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  tokens.add(tokenLength  -  1);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	tokens.add(tokenLength  -  1);	  tokens.add(tokenLength);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
19	[BUG]  [BUGGY]  Option  options  =  currentOption.getOption(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  options  =  currentOption.getOption(token,  stopAtNonOption);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  options  =  currentOption.getOption(token,  stopAtNonOption);	  Option    options    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
20	[BUG]  [BUGGY]  Option  options  =  options.getOption(token,  stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  options  =  options.getOption(token,  stopAtNonOption,  arguments);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  options  =  options.getOption(token,  stopAtNonOption,  arguments);	  Option    options    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
21	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  token.startsWith( "- ")||  tokenLength  ==  1)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  token.startsWith( "- ")||  tokenLength  ==  1)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  token.startsWith( "- ")||  tokenLength  ==  1)  {	  else    if(options.hasOption(token)&&    token.startsWith(   "-   ")||    tokenLength    ==    2)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
22	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  token.startsWith( "-   ")||  tokenLength  ==  2)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)||  token.startsWith( "-   ")||  tokenLength  ==  2)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)||  token.startsWith( "-   ")||  tokenLength  ==  2)  {	  else    if(options.hasOption(token)&&    token.startsWith(   "-   ")||    tokenLength    ==    2)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
23	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  tokenLength  ==  1)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)||  tokenLength  ==  1)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)||  tokenLength  ==  1)  {	  else    if(options.hasOption(token)||    tokenLength    ==    2)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
24	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  tokenLength  <  2)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)||  tokenLength  <  2)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)||  tokenLength  <  2)  {	  else    if(options.hasOption(token)||    tokenLength    ==    2)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
25	[BUG]  [BUGGY]  else  if(options.hasOption(tokenLength)||  token.startsWith( "-   "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(tokenLength)||  token.startsWith( "-   "))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(tokenLength)||  token.startsWith( "-   "))  {	  else    if(options.hasOption(tokenLength)&&    token.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
26	[BUG]  [BUGGY]  else  if(options.hasOption(tokenLength)&&  token.startsWith( "/ "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(tokenLength)&&  token.startsWith( "/ "))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(tokenLength)&&  token.startsWith( "/ "))  {	  else    if(options.hasOption(tokenLength)&&    token.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
27	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  tokenLength  ==  1)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(stopAtNonOption  &&  tokenLength  ==  1)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(stopAtNonOption  &&  tokenLength  ==  1)  {	  else    if(stopAtNonOption    &&    tokenLength    ==    2)    {    	non-compiled	[CE]  <identifier>  expected	53	None	replace
28	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  arguments.length  >  1)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(stopAtNonOption  ||  arguments.length  >  1)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(stopAtNonOption  ||  arguments.length  >  1)  {	  else    if(stopAtNonOption    &&    arguments.length    >    1)    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
29	[BUG]  [BUGGY]  else  if(!options.hasOption(token)&&  stopAtNonOption  ==  true)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(!options.hasOption(token)&&  stopAtNonOption  ==  true)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(!options.hasOption(token)&&  stopAtNonOption  ==  true)  {	  else    if(!options.hasOption(token)&&    stopAtNonOption    ==    false)    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
30	[BUG]  [BUGGY]  else  if(!options.hasOption(token)&&  stopAtNonOption!=  false)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(!options.hasOption(token)&&  stopAtNonOption!=  false)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(!options.hasOption(token)&&  stopAtNonOption!=  false)  {	  else    if(!options.hasOption(token)&&    stopAtNonOption    ==    false)    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
31	[BUG]  [BUGGY]  else  if(!options.hasOption(token)&&  stopAtNonOption!=  true)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(!options.hasOption(token)&&  stopAtNonOption!=  true)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(!options.hasOption(token)&&  stopAtNonOption!=  true)  {	  else    if(!options.hasOption(token)&&    stopAtNonOption    ==    false)    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
32	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  stopAtNonOption  ||  options.hasOption(tokenLength))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)||  stopAtNonOption  ||  options.hasOption(tokenLength))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)||  stopAtNonOption  ||  options.hasOption(tokenLength))  {	  else    if(options.hasOption(token)&&    stopAtNonOption    ||    options.hasOption(tokenLength))    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
33	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  &&  options.hasOption(tokenLength))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  &&  options.hasOption(tokenLength))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption  &&  options.hasOption(tokenLength))  {	  else    if(options.hasOption(token)&&    stopAtNonOption    ||    options.hasOption(tokenLength))    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
34	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ||  options.hasOption(tokenLength  +  2))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ||  options.hasOption(tokenLength  +  2))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption  ||  options.hasOption(tokenLength  +  2))  {	  else    if(options.hasOption(token)&&    stopAtNonOption    ||    options.hasOption(tokenLength))    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
35	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(stopAtNonOption)  {  tokens.add(token);  }	  else    if(options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
36	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  options.hasOption(tokenLength))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)||  options.hasOption(tokenLength))  {  tokens.add(token);  }  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)||  options.hasOption(tokenLength))  {  tokens.add(token);  }	  else    if(options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
37	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  tokenLength  <  2)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  tokenLength  <  2)  {  tokens.add(token);  }  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  tokenLength  <  2)  {  tokens.add(token);  }	  else    if(options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
38	[BUG]  [BUGGY]  else  if(options.hasOption(tokenLength))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(tokenLength))  {  tokens.add(token);  }  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(tokenLength))  {  tokens.add(token);  }	  else    if(options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
39	[BUG]  [BUGGY]  Option  options  =  options.getOption(token)&&  options.hasOption(token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  options  =  options.getOption(token)&&  options.hasOption(token);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  options  =  options.getOption(token)&&  options.hasOption(token);	  Option    options    =    options.getOption(token)||    options.hasOption(token);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
40	[BUG]  [BUGGY]  Option  options  =  options.getOption(token)||  options.hasOption(tokenLength);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  options  =  options.getOption(token)||  options.hasOption(tokenLength);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  options  =  options.getOption(token)||  options.hasOption(tokenLength);	  Option    options    =    options.getOption(token)||    options.hasOption(token);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
41	[BUG]  [BUGGY]  Option  options  =  options.getOption(token)||  options.hasOption(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  options  =  options.getOption(token)||  options.hasOption(token,  stopAtNonOption);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  options  =  options.getOption(token)||  options.hasOption(token,  stopAtNonOption);	  Option    options    =    options.getOption(token)||    options.hasOption(token);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
42	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  tokenLength!=  1)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  tokenLength!=  1)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  tokenLength!=  1)  {	  else    if(options.hasOption(token)&&    tokenLength!=    2)    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
43	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&!options.hasOption(tokenLength))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(stopAtNonOption  &&!options.hasOption(tokenLength))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(stopAtNonOption  &&!options.hasOption(tokenLength))  {	  else    if(stopAtNonOption    ||!options.hasOption(tokenLength))    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
44	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(tokenLength))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(tokenLength))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(stopAtNonOption  &&  options.hasOption(tokenLength))  {	  else    if(stopAtNonOption    ||!options.hasOption(tokenLength))    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
45	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(tokenLength))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(tokenLength))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(stopAtNonOption  ||  options.hasOption(tokenLength))  {	  else    if(stopAtNonOption    ||!options.hasOption(tokenLength))    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
46	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(tokenLength  +  2))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(tokenLength  +  2))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  options.hasOption(tokenLength  +  2))  {	  else    if(options.hasOption(token)&&    options.hasOption(tokenLength))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
47	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(tokenLength  +  1))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(tokenLength  +  1))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  options.hasOption(tokenLength  +  1))  {	  else    if(options.hasOption(token)&&    options.hasOption(tokenLength))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
48	[BUG]  [BUGGY]  else  if(!stopAtNonOption  &&  options.hasOption(token)&&  options.hasOption(tokenLength))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(!stopAtNonOption  &&  options.hasOption(token)&&  options.hasOption(tokenLength))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(!stopAtNonOption  &&  options.hasOption(token)&&  options.hasOption(tokenLength))  {	  else    if(options.hasOption(token)&&    options.hasOption(tokenLength))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
49	[BUG]  [BUGGY]  else  if(tokenLength  >  2)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(tokenLength  >  2)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(tokenLength  >  2)  {	  else    if(stopAtNonOption    &&    tokenLength    >    2)    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
50	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  tokenLength  >  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(stopAtNonOption  &&  tokenLength  >  0)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(stopAtNonOption  &&  tokenLength  >  0)  {	  else    if(stopAtNonOption    &&    tokenLength    >    2)    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
51	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption!=  true)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption!=  true)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption!=  true)  {	  else    if(options.hasOption(token)&&    stopAtNonOption!=    false)    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
52	[BUG]  [BUGGY]  final  Ilerator  <  String>  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  final  Ilerator  <  String>  iter  =  options.iterator();  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	final  Ilerator  <  String>  iter  =  options.iterator();	  Ilerator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
53	[BUG]  [BUGGY]  List  <  String>  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  List  <  String>  iter  =  options.iterator();  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	List  <  String>  iter  =  options.iterator();	  Ilerator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
54	[BUG]  [BUGGY]  Option  options  =  currentOption.getOption(tokenLength);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  options  =  currentOption.getOption(tokenLength);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  options  =  currentOption.getOption(tokenLength);	  Option    options    =    options.getOption(tokenLength);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
55	[BUG]  [BUGGY]  Option  options  =  options.getOption(tokenLength  +  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  options  =  options.getOption(tokenLength  +  1);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  options  =  options.getOption(tokenLength  +  1);	  Option    options    =    options.getOption(tokenLength);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
56	[BUG]  [BUGGY]  Option  options  =  options.getOption(tokenLength  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  options  =  options.getOption(tokenLength  -  1);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  options  =  options.getOption(tokenLength  -  1);	  Option    options    =    options.getOption(tokenLength);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
57	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  token.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)||  token.startsWith( "-- "))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)||  token.startsWith( "-- "))  {	  else    if(options.hasOption(token)&&    token.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	57	None	replace
58	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  token.startsWith( "-- ")||  tokenLength  ==  2)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  token.startsWith( "-- ")||  tokenLength  ==  2)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  token.startsWith( "-- ")||  tokenLength  ==  2)  {	  else    if(options.hasOption(token)&&    token.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	57	None	replace
59	[BUG]  [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption,  arguments);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  option  =  options.getOption(token,  stopAtNonOption,  arguments);	  Option    option    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
60	[BUG]  [BUGGY]  Option  option  =  options.getOption(token,  eatTheRest);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  option  =  options.getOption(token,  eatTheRest);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  option  =  options.getOption(token,  eatTheRest);	  Option    option    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
61	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  stopAtNonOption  ==  true)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)||  stopAtNonOption  ==  true)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)||  stopAtNonOption  ==  true)  {	  else    if(options.hasOption(token)&&    stopAtNonOption    ==    true)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
62	[BUG]  [BUGGY]  else  if(options.hasOption(tokenLength)&&  stopAtNonOption  ==  false)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(tokenLength)&&  stopAtNonOption  ==  false)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(tokenLength)&&  stopAtNonOption  ==  false)  {	  else    if(options.hasOption(token)&&    stopAtNonOption    ==    true)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
63	[BUG]  [BUGGY]  else  if(tokenLength  ||  stopAtNonOption  ==  2)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(tokenLength  ||  stopAtNonOption  ==  2)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(tokenLength  ||  stopAtNonOption  ==  2)  {	  else    if(stopAtNonOption    ||    tokenLength    ==    2)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
64	[BUG]  [BUGGY]  else  if(tokenLength  ||  stopAtNonOption  ==  1)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(tokenLength  ||  stopAtNonOption  ==  1)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(tokenLength  ||  stopAtNonOption  ==  1)  {	  else    if(stopAtNonOption    ||    tokenLength    ==    2)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
65	[BUG]  [BUGGY]  else  if(token.startsWith( "-   "))  {  tokens.add(token);  }  else  {  options.put(token,  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(token.startsWith( "-   "))  {  tokens.add(token);  }  else  {  options.put(token,  stopAtNonOption);  }  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(token.startsWith( "-   "))  {  tokens.add(token);  }  else  {  options.put(token,  stopAtNonOption);  }	  else    if(options.hasOption(token))    {    tokens.add(token);    }    else    {    options.put(token,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
66	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  tokenLength  <  2)  {  tokens.add(token);  }  else  {  options.put(token,  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  tokenLength  <  2)  {  tokens.add(token);  }  else  {  options.put(token,  stopAtNonOption);  }  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  tokenLength  <  2)  {  tokens.add(token);  }  else  {  options.put(token,  stopAtNonOption);  }	  else    if(options.hasOption(token))    {    tokens.add(token);    }    else    {    options.put(token,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
67	[BUG]  [BUGGY]  else  if(options.hasOption(tokenLength)&&  options.hasOption(tokenLength))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(tokenLength)&&  options.hasOption(tokenLength))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(tokenLength)&&  options.hasOption(tokenLength))  {	  else    if(options.hasOption(tokenLength)||    options.hasOption(tokenLength))    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
68	[BUG]  [BUGGY]  else  if(options.hasOption(tokenLength)||  options.hasOption(tokenLength  +  2))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(tokenLength)||  options.hasOption(tokenLength  +  2))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(tokenLength)||  options.hasOption(tokenLength  +  2))  {	  else    if(options.hasOption(tokenLength)||    options.hasOption(tokenLength))    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
69	[BUG]  [BUGGY]  else  if(options.hasOption(tokenLength  +  1)&&  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(tokenLength  +  1)&&  stopAtNonOption)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(tokenLength  +  1)&&  stopAtNonOption)  {	  else    if(options.hasOption(tokenLength    +    1))    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
70	[BUG]  [BUGGY]  else  if(options.hasOption(tokenLength  +  1)||  arguments.contains(token))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(tokenLength  +  1)||  arguments.contains(token))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(tokenLength  +  1)||  arguments.contains(token))  {	  else    if(options.hasOption(tokenLength    +    1))    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
71	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  0)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  0)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(stopAtNonOption  &&  arguments.length  >  0)  {	  else    if(stopAtNonOption    &&    arguments.length    >    2)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
72	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  stopAtNonOption!=  false)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)||  stopAtNonOption!=  false)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)||  stopAtNonOption!=  false)  {	  else    if(options.hasOption(token)||    stopAtNonOption    ==    false)    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
73	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  currentOption.arguments.iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Iterator  <  String>  iter  =  currentOption.arguments.iterator();  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Iterator  <  String>  iter  =  currentOption.arguments.iterator();	  Iterator    <    String>    iter    =    this.arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
74	[BUG]  [BUGGY]  else  if(tokenLength  ==  1)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(tokenLength  ==  1)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(tokenLength  ==  1)  {	  else    if(tokenLength    ==    2)    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
75	[BUG]  [BUGGY]  else  if(tokenLength!=  2)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(tokenLength!=  2)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(tokenLength!=  2)  {	  else    if(tokenLength    ==    2)    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
76	[BUG]  [BUGGY]  else  if(tokenLength  <  2)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(tokenLength  <  2)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(tokenLength  <  2)  {	  else    if(tokenLength    ==    2)    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
77	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  stopAtNonOption  ||  arguments.contains(token))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)||  stopAtNonOption  ||  arguments.contains(token))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)||  stopAtNonOption  ||  arguments.contains(token))  {	  else    if(options.hasOption(token)||    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
78	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  tokenLength  >  1)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  tokenLength  >  1)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  tokenLength  >  1)  {	  else    if(options.hasOption(token)&&    tokenLength    ==    1)    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
79	[BUG]  [BUGGY]  Option  options  =  currentOption.getOptions(tokenLength);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  options  =  currentOption.getOptions(tokenLength);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  options  =  currentOption.getOptions(tokenLength);	  Option    options    =    options.getOptions(tokenLength);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
80	[BUG]  [BUGGY]  Option  options  =  options.getOptions(tokenLength  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  options  =  options.getOptions(tokenLength  +  1);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  options  =  options.getOptions(tokenLength  +  1);	  Option    options    =    options.getOptions(tokenLength);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
81	[BUG]  [BUGGY]  Option  options  =  options.getOptions(tokenLength  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  options  =  options.getOptions(tokenLength  -  1);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  options  =  options.getOptions(tokenLength  -  1);	  Option    options    =    options.getOptions(tokenLength);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
82	[BUG]  [BUGGY]  Option  options  =  options.getOptions(tokenLength  +  2);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  options  =  options.getOptions(tokenLength  +  2);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  options  =  options.getOptions(tokenLength  +  2);	  Option    options    =    options.getOptions(tokenLength);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
83	[BUG]  [BUGGY]  else  if(!stopAtNonOption  &&  options.hasOption(token)||  options.hasOption(tokenLength  +  1))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(!stopAtNonOption  &&  options.hasOption(token)||  options.hasOption(tokenLength  +  1))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(!stopAtNonOption  &&  options.hasOption(token)||  options.hasOption(tokenLength  +  1))  {	  else    if(options.hasOption(token)||    options.hasOption(tokenLength    +    1))    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
84	[BUG]  [BUGGY]  Iterator  iter  =  this.arguments.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Iterator  iter  =  this.arguments.iterator();  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Iterator  iter  =  this.arguments.iterator();	  Iterator    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
85	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption.equals( "- "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption.equals( "- "))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption.equals( "- "))  {	  else    if(options.hasOption(token)&&    stopAtNonOption.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
86	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  stopAtNonOption.startsWith( "-   "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)||  stopAtNonOption.startsWith( "-   "))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)||  stopAtNonOption.startsWith( "-   "))  {	  else    if(options.hasOption(token)&&    stopAtNonOption.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
87	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption.endsWith( "- "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption.endsWith( "- "))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption.endsWith( "- "))  {	  else    if(options.hasOption(token)&&    stopAtNonOption.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
88	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  tokenLength  >  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  tokenLength  >  0)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  tokenLength  >  0)  {	  else    if(options.hasOption(token)&&    tokenLength    >    2)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
89	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  tokens.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Iterator  <  String>  iter  =  tokens.iterator();  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Iterator  <  String>  iter  =  tokens.iterator();	  Iterator    <    String>    iter    =    currentOption.iterator();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
90	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)&&  options.hasOption(token);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  option  =  options.getOption(token)&&  options.hasOption(token);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  option  =  options.getOption(token)&&  options.hasOption(token);	  Option    option    =    options.getOption(token)||    options.hasOption(token);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
91	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)||  options.hasOption(tokenLength);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  option  =  options.getOption(token)||  options.hasOption(tokenLength);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  option  =  options.getOption(token)||  options.hasOption(tokenLength);	  Option    option    =    options.getOption(token)||    options.hasOption(token);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
92	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)||  options.hasOption(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  option  =  options.getOption(token)||  options.hasOption(token,  stopAtNonOption);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  option  =  options.getOption(token)||  options.hasOption(token,  stopAtNonOption);	  Option    option    =    options.getOption(token)||    options.hasOption(token);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
93	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(token))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(token))  {  tokens.add(token);  }  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  options.hasOption(token))  {  tokens.add(token);  }	  else    if(options.hasOption(token)||    options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
94	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(tokenLength))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(tokenLength))  {  tokens.add(token);  }  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  options.hasOption(tokenLength))  {  tokens.add(token);  }	  else    if(options.hasOption(token)||    options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
95	[BUG]  [BUGGY]  else  if(options.hasValue(token)||  options.hasOption(token))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasValue(token)||  options.hasOption(token))  {  tokens.add(token);  }  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasValue(token)||  options.hasOption(token))  {  tokens.add(token);  }	  else    if(options.hasOption(token)||    options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
96	[BUG]  [BUGGY]  else  if(!options.hasOption(tokenLength)&&  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(!options.hasOption(tokenLength)&&  stopAtNonOption)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(!options.hasOption(tokenLength)&&  stopAtNonOption)  {	  else    if(!options.hasOption(tokenLength))    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
97	[BUG]  [BUGGY]  else  if(!options.hasOption(tokenLength  +  2))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(!options.hasOption(tokenLength  +  2))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(!options.hasOption(tokenLength  +  2))  {	  else    if(!options.hasOption(tokenLength))    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
98	[BUG]  [BUGGY]  else  if(!options.hasOption(tokenLength)&&!stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(!options.hasOption(tokenLength)&&!stopAtNonOption)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(!options.hasOption(tokenLength)&&!stopAtNonOption)  {	  else    if(!options.hasOption(tokenLength))    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
99	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  <  2)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  <  2)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(stopAtNonOption  &&  arguments.length  <  2)  {	  else    if(stopAtNonOption    ||    arguments.length    <    2)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
100	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  arguments.length  <  1)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(stopAtNonOption  ||  arguments.length  <  1)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(stopAtNonOption  ||  arguments.length  <  1)  {	  else    if(stopAtNonOption    ||    arguments.length    <    2)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
101	[BUG]  [BUGGY]  Iterator  iter  =  options.entrySet().iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Iterator  iter  =  options.entrySet().iterator();  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Iterator  iter  =  options.entrySet().iterator();	  Iterator    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
102	[BUG]  [BUGGY]  else  if(options.hasOption(tokenLength  +  2)||  options.hasOption(tokenLength  +  1))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(tokenLength  +  2)||  options.hasOption(tokenLength  +  1))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(tokenLength  +  2)||  options.hasOption(tokenLength  +  1))  {	  else    if(options.hasOption(tokenLength    +    2))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
103	[BUG]  [BUGGY]  else  if(options.hasOption(tokenLength  +  2)||  arguments.contains(token))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(tokenLength  +  2)||  arguments.contains(token))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(tokenLength  +  2)||  arguments.contains(token))  {	  else    if(options.hasOption(tokenLength    +    2))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
104	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ==  0)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ==  0)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption  ==  0)  {	  else    if(options.hasOption(token)&&    stopAtNonOption    ==    2)    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
105	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ==  1)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ==  1)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption  ==  1)  {	  else    if(options.hasOption(token)&&    stopAtNonOption    ==    2)    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
106	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption!=  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption!=  0)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption!=  0)  {	  else    if(options.hasOption(token)&&    stopAtNonOption    ==    2)    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
107	[BUG]  [BUGGY]  Iterator  iter  =  this.tokens.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Iterator  iter  =  this.tokens.iterator();  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Iterator  iter  =  this.tokens.iterator();	  Iterator    iter    =    tokens.iterator();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
108	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&!options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(stopAtNonOption  &&!options.hasOption(token))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(stopAtNonOption  &&!options.hasOption(token))  {	  else    if(stopAtNonOption    ||!options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
109	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(stopAtNonOption  &&  options.hasOption(token))  {	  else    if(stopAtNonOption    ||!options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
110	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ||  arguments.contains(tokenLength))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ||  arguments.contains(tokenLength))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption  ||  arguments.contains(tokenLength))  {	  else    if(options.hasOption(token)&&    stopAtNonOption    ||    arguments.contains(token))    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
111	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ||  options.contains(token))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ||  options.contains(token))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption  ||  options.contains(token))  {	  else    if(options.hasOption(token)&&    stopAtNonOption    ||    arguments.contains(token))    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
112	[BUG]  [BUGGY]  else  if(options.hasOption(tokenLength)||  stopAtNonOption  ||  arguments.contains(token))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(tokenLength)||  stopAtNonOption  ||  arguments.contains(token))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(tokenLength)||  stopAtNonOption  ||  arguments.contains(token))  {	  else    if(options.hasOption(tokenLength)||    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
113	[BUG]  [BUGGY]  else  if(options.hasOption(token))  {  tokens.add(token,  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token))  {  tokens.add(token,  stopAtNonOption);  }  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token))  {  tokens.add(token,  stopAtNonOption);  }	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
114	[BUG]  [BUGGY]  else  if(options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
115	[BUG]  [BUGGY]  options  =  currentOption.getOption(token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  options  =  currentOption.getOption(token);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	options  =  currentOption.getOption(token);	  Option    options    =    currentOption.getOption(token);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
116	[BUG]  [BUGGY]  Iterator  <  String>  iter  =(this.options!=  null)?  this.options.iterator()  :  null;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Iterator  <  String>  iter  =(this.options!=  null)?  this.options.iterator()  :  null;  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Iterator  <  String>  iter  =(this.options!=  null)?  this.options.iterator()  :  null;	  Iterator    <    String>    iter    =    this.options.iterator();    	non-compiled	[CE]  <identifier>  expected	61	None	replace
117	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ||  arguments.size()  ==  1)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ||  arguments.size()  ==  1)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption  ||  arguments.size()  ==  1)  {	  else    if(options.hasOption(token)&&    stopAtNonOption    ||    arguments.size()    ==    2)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
118	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  stopAtNonOption  ||  arguments.size()  ==  2)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)||  stopAtNonOption  ||  arguments.size()  ==  2)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)||  stopAtNonOption  ||  arguments.size()  ==  2)  {	  else    if(options.hasOption(token)&&    stopAtNonOption    ||    arguments.size()    ==    2)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
119	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  &&  arguments.size()  ==  2)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  &&  arguments.size()  ==  2)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption  &&  arguments.size()  ==  2)  {	  else    if(options.hasOption(token)&&    stopAtNonOption    ||    arguments.size()    ==    2)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
120	[BUG]  [BUGGY]  else  if(options.hasOption(tokenLength)&&  stopAtNonOption  ||  arguments.contains(token))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(tokenLength)&&  stopAtNonOption  ||  arguments.contains(token))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(tokenLength)&&  stopAtNonOption  ||  arguments.contains(token))  {	  else    if(options.hasOption(tokenLength)&&    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
121	[BUG]  [BUGGY]  else  if(options.hasOption(tokenLength)&&  stopAtNonOption  ||  arguments.size()  ==  2)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(tokenLength)&&  stopAtNonOption  ||  arguments.size()  ==  2)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(tokenLength)&&  stopAtNonOption  ||  arguments.size()  ==  2)  {	  else    if(options.hasOption(tokenLength)&&    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
122	[BUG]  [BUGGY]  Ilerator  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Ilerator  iter  =  options.values().iterator();  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Ilerator  iter  =  options.values().iterator();	  Iterator    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
123	[BUG]  [BUGGY]  Option  option  =  options.getOption(tokenLength,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  option  =  options.getOption(tokenLength,  stopAtNonOption);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  option  =  options.getOption(tokenLength,  stopAtNonOption);	  Option    option    =    options.getOption(tokenLength);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
124	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Ilerator  <  String>  iter  =  options.keySet().iterator();  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Ilerator  <  String>  iter  =  options.keySet().iterator();	  Iterator    <    String>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
125	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Ilerator  <  String>  iter  =  options.values().iterator();  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Ilerator  <  String>  iter  =  options.values().iterator();	  Iterator    <    String>    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
126	[BUG]  [BUGGY]  else  if(tokenLength  ==  0)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(tokenLength  ==  0)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(tokenLength  ==  0)  {	  else    if(tokenLength    ==    2)    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
127	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  currentOption  =  options.getOption(token);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  currentOption  =  options.getOption(token);	  else    if(options.hasOption(token))    {    tokens.add(token);    }    else    {    options.put(token,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
128	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokenLength);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  currentOption  =  options.getOption(tokenLength);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  currentOption  =  options.getOption(tokenLength);	  else    if(options.hasOption(token))    {    tokens.add(token);    }    else    {    options.put(token,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
129	[BUG]  [BUGGY]  Option  currentOption  =  options.get(tokenLength);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  currentOption  =  options.get(tokenLength);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  currentOption  =  options.get(tokenLength);	  else    if(options.hasOption(token))    {    tokens.add(token);    }    else    {    options.put(token,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
130	[BUG]  [BUGGY]  else  if(options.hasOption(tokenLength)&&  options.hasOption(tokenLength  +  1))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(tokenLength)&&  options.hasOption(tokenLength  +  1))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(tokenLength)&&  options.hasOption(tokenLength  +  1))  {	  else    if(options.hasOption(token)||    options.hasOption(tokenLength    +    1))    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
131	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ||  tokens.contains(token))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ||  tokens.contains(token))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption  ||  tokens.contains(token))  {	  else    if(options.hasOption(token)&&    stopAtNonOption    ||    arguments.contains(token))    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
132	[BUG]  [BUGGY]  else  if(options.hasOption(tokenLength)&&  stopAtNonOption.startsWith( "- "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(tokenLength)&&  stopAtNonOption.startsWith( "- "))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(tokenLength)&&  stopAtNonOption.startsWith( "- "))  {	  else    if(options.hasOption(tokenLength)&&    token.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
133	[BUG]  [BUGGY]  else  if(options.hasOption(tokenLength)&&  token.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(tokenLength)&&  token.startsWith( "-- "))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(tokenLength)&&  token.startsWith( "-- "))  {	  else    if(options.hasOption(tokenLength)&&    token.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
134	[BUG]  [BUGGY]  else  if(options.hasOption(tokenLength  +  2)||  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(tokenLength  +  2)||  stopAtNonOption)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(tokenLength  +  2)||  stopAtNonOption)  {	  else    if(options.hasOption(tokenLength    +    2))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
135	[BUG]  [BUGGY]  else  if(options.hasOption(tokenLength  +  2)&&  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(tokenLength  +  2)&&  stopAtNonOption)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(tokenLength  +  2)&&  stopAtNonOption)  {	  else    if(options.hasOption(tokenLength    +    2))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
136	[BUG]  [BUGGY]  Ilerator  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Ilerator  iter  =  options.keySet().iterator();  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Ilerator  iter  =  options.keySet().iterator();	  Iterator    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
137	[BUG]  [BUGGY]  Option  options  =  options.getOptions(tokenLength,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  options  =  options.getOptions(tokenLength,  stopAtNonOption);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  options  =  options.getOptions(tokenLength,  stopAtNonOption);	  Option    options    =    options.getOptions(tokenLength);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
138	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||!options.hasOption(token)&&  tokenLength  >  2)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(stopAtNonOption  ||!options.hasOption(token)&&  tokenLength  >  2)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(stopAtNonOption  ||!options.hasOption(token)&&  tokenLength  >  2)  {	  else    if(!options.hasOption(token)&&    tokenLength    >    2)    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
139	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ==  false)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ==  false)  {  tokens.add(token);  }  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption  ==  false)  {  tokens.add(token);  }	  else    if(options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
140	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption!=  false)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption!=  false)  {  tokens.add(token);  }  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption!=  false)  {  tokens.add(token);  }	  else    if(options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
141	[BUG]  [BUGGY]  else  if(options.hasOption(tokenLength)&&  options.hasOption(tokenLength  +  2))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(tokenLength)&&  options.hasOption(tokenLength  +  2))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(tokenLength)&&  options.hasOption(tokenLength  +  2))  {	  else    if(options.hasOption(token)||    options.hasOption(tokenLength    +    2))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
142	[BUG]  [BUGGY]  else  if(options.hasOption(tokenLength  +  1)||  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(tokenLength  +  1)||  stopAtNonOption)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(tokenLength  +  1)||  stopAtNonOption)  {	  else    if(options.hasOption(tokenLength)||    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
143	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  arguments.length  ==  2)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(stopAtNonOption  ||  arguments.length  ==  2)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(stopAtNonOption  ||  arguments.length  ==  2)  {	  else    if(stopAtNonOption    ||    arguments.length    <    2)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
144	[BUG]  [BUGGY]  Option  options  =  iter.getOption(token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  options  =  iter.getOption(token);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  options  =  iter.getOption(token);	  Option    options    =    currentOption.getOption(token);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
145	[BUG]  [BUGGY]  else  if(options.hasOption(tokenLength)&&  stopAtNonOption  ==  true)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(tokenLength)&&  stopAtNonOption  ==  true)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(tokenLength)&&  stopAtNonOption  ==  true)  {	  else    if(options.hasOption(token)&&    stopAtNonOption    ==    true)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
146	[BUG]  [BUGGY]  else  if(stopAtNonOption.hasOption(token)&&  options.hasOption(tokenLength))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(stopAtNonOption.hasOption(token)&&  options.hasOption(tokenLength))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(stopAtNonOption.hasOption(token)&&  options.hasOption(tokenLength))  {	  else    if(options.hasOption(token)&&    stopAtNonOption.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
147	[BUG]  [BUGGY]  IllegalArgumentIterator  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  IllegalArgumentIterator  iter  =  options.iterator();  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	IllegalArgumentIterator  iter  =  options.iterator();	  Ilerator    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	50	None	replace
148	[BUG]  [BUGGY]  else  if(options.hasOption(tokenLength)&&  tokenLength  ==  2)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(tokenLength)&&  tokenLength  ==  2)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(tokenLength)&&  tokenLength  ==  2)  {	  else    if(options.hasOption(token)||    tokenLength    ==    2)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
149	[BUG]  [BUGGY]  else  if(!options.hasOption(tokenLength)||  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(!options.hasOption(tokenLength)||  stopAtNonOption)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(!options.hasOption(tokenLength)||  stopAtNonOption)  {	  else    if(!options.hasOption(tokenLength))    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
150	[BUG]  [BUGGY]  else  if(options.hasOption(tokenLength)||  stopAtNonOption  ==  false)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(tokenLength)||  stopAtNonOption  ==  false)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(tokenLength)||  stopAtNonOption  ==  false)  {	  else    if(options.hasOption(token)||    stopAtNonOption    ==    false)    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
151	[BUG]  [BUGGY]  Option  options  =  options.getOption(tokenLength)||  options.hasOption(token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  options  =  options.getOption(tokenLength)||  options.hasOption(token);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  options  =  options.getOption(tokenLength)||  options.hasOption(token);	  Option    options    =    options.getOption(token)||    options.hasOption(token);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
152	[BUG]  [BUGGY]  Option  options  =  currentOption.cloneOption();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  options  =  currentOption.cloneOption();  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  options  =  currentOption.cloneOption();	  Option    options    =    currentOption.getOptions();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
153	[BUG]  [BUGGY]  Option  options  =  currentOption.getOptions(token);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  options  =  currentOption.getOptions(token);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  options  =  currentOption.getOptions(token);	  Option    options    =    currentOption.getOptions();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
154	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  token.startsWith( "-   ")||  tokenLength  <  2)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)||  token.startsWith( "-   ")||  tokenLength  <  2)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)||  token.startsWith( "-   ")||  tokenLength  <  2)  {	  else    if(options.hasOption(token)&&    token.startsWith(   "-   ")||    tokenLength    <    2)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
155	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  token.startsWith( "-- ")||  tokenLength  <  2)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  token.startsWith( "-- ")||  tokenLength  <  2)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  token.startsWith( "-- ")||  tokenLength  <  2)  {	  else    if(options.hasOption(token)&&    token.startsWith(   "-   ")||    tokenLength    <    2)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
156	[BUG]  [BUGGY]  else  if(options.hasOption(tokenLength)&&  stopAtNonOption  ||  options.hasOption(tokenLength))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(tokenLength)&&  stopAtNonOption  ||  options.hasOption(tokenLength))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(tokenLength)&&  stopAtNonOption  ||  options.hasOption(tokenLength))  {	  else    if(options.hasOption(tokenLength)&&    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
157	[BUG]  [BUGGY]  Option  option  =  options.getOption(tokenLength)||  options.hasOption(token);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  option  =  options.getOption(tokenLength)||  options.hasOption(token);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  option  =  options.getOption(tokenLength)||  options.hasOption(token);	  Option    option    =    options.getOption(token)||    options.hasOption(token);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
158	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token)&&  token.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token)&&  token.startsWith( "-- "))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(stopAtNonOption  &&  options.hasOption(token)&&  token.startsWith( "-- "))  {	  else    if(options.hasOption(token)&&    token.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	57	None	replace
159	[BUG]  [BUGGY]  else  if(tokenLength  ==  2  ||  stopAtNonOption  ==  2)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(tokenLength  ==  2  ||  stopAtNonOption  ==  2)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(tokenLength  ==  2  ||  stopAtNonOption  ==  2)  {	  else    if(stopAtNonOption    ||    tokenLength    ==    2)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
160	[BUG]  [BUGGY]  Option  options  =  options.getOption(tokenLength,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  options  =  options.getOption(tokenLength,  stopAtNonOption);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  options  =  options.getOption(tokenLength,  stopAtNonOption);	  Option    options    =    options.getOption(tokenLength);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
161	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  tokenLength!=  2)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)||  tokenLength!=  2)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)||  tokenLength!=  2)  {	  else    if(options.hasOption(token)&&    tokenLength!=    2)    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
162	[BUG]  [BUGGY]  Option  option  =  options.getOption(tokenLength)&&  options.hasOption(token);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  option  =  options.getOption(tokenLength)&&  options.hasOption(token);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  option  =  options.getOption(tokenLength)&&  options.hasOption(token);	  Option    option    =    options.getOption(token)||    options.hasOption(token);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
163	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  token.startsWith( "- ")&&  tokenLength  ==  2)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  token.startsWith( "- ")&&  tokenLength  ==  2)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  token.startsWith( "- ")&&  tokenLength  ==  2)  {	  else    if(options.hasOption(token)&&    token.startsWith(   "-   ")||    tokenLength    ==    2)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
164	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption.matches( "- "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption.matches( "- "))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption.matches( "- "))  {	  else    if(options.hasOption(token)&&    stopAtNonOption.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
165	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  else    if(options.hasOption(token))    {    tokens.add(token);    }    else    {    options.put(token,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
166	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  {  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  {	  else    if(options.hasOption(token))    {    tokens.add(token);    }    else    {    options.put(token,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
167	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  {  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  {	  else    if(options.hasOption(token))    {    tokens.add(token);    }    else    {    options.put(token,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
168	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  else    if(options.hasOption(token))    {    tokens.add(token);    }    else    {    options.put(token,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
169	[BUG]  [BUGGY]  Option  options  =  options.getOptions(tokenLength  -  2);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  options  =  options.getOptions(tokenLength  -  2);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  options  =  options.getOptions(tokenLength  -  2);	  Option    options    =    options.getOptions(tokenLength);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
170	[BUG]  [BUGGY]  else  if(!options.hasOption(tokenLength  +  1))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(!options.hasOption(tokenLength  +  1))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(!options.hasOption(tokenLength  +  1))  {	  else    if(!options.hasOption(tokenLength))    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
171	[BUG]  [BUGGY]  Iterator  <  String>  iter  =(this.options!=  null)?  options.iterator()  :  this.options.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Iterator  <  String>  iter  =(this.options!=  null)?  options.iterator()  :  this.options.iterator();  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Iterator  <  String>  iter  =(this.options!=  null)?  options.iterator()  :  this.options.iterator();	  Iterator    <    String>    iter    =    this.options.iterator();    	non-compiled	[CE]  <identifier>  expected	61	None	replace
172	[BUG]  [BUGGY]  else  if(options.hasOption(tokenLength  +  1)||  options.hasOption(tokenLength))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(tokenLength  +  1)||  options.hasOption(tokenLength))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(tokenLength  +  1)||  options.hasOption(tokenLength))  {	  else    if(options.hasOption(tokenLength    +    1))    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
173	[BUG]  [BUGGY]  else  if(tokenLength  ==  2)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(tokenLength  ==  2)  {  tokens.add(token);  }  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(tokenLength  ==  2)  {  tokens.add(token);  }	  else    if(options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
174	[BUG]  [BUGGY]  else  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  {  tokens.add(token);  }  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  {  tokens.add(token);  }	  else    if(options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
175	[BUG]  [BUGGY]  else  if(options.hasOption(tokenLength  +  2)||  options.hasOption(tokenLength))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(tokenLength  +  2)||  options.hasOption(tokenLength))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(tokenLength  +  2)||  options.hasOption(tokenLength))  {	  else    if(options.hasOption(tokenLength    +    2))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
176	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption!=  2)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption!=  2)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption!=  2)  {	  else    if(options.hasOption(token)&&    stopAtNonOption    ==    2)    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
177	[BUG]  [BUGGY]  Option  options  =  options.getOption(tokenLength  -  2);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  options  =  options.getOption(tokenLength  -  2);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  options  =  options.getOption(tokenLength  -  2);	  Option    options    =    options.getOption(tokenLength);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
178	[BUG]  [BUGGY]  Option  options  =  options.getOption(tokenLength)&&  options.hasOption(token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  options  =  options.getOption(tokenLength)&&  options.hasOption(token);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	Option  options  =  options.getOption(tokenLength)&&  options.hasOption(token);	  Option    options    =    options.getOption(token)||    options.hasOption(token);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
179	[BUG]  [BUGGY]  else  if(options.hasOption(tokenLength)||  options.hasOption(tokenLength  +  1))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(tokenLength)||  options.hasOption(tokenLength  +  1))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(options.hasOption(tokenLength)||  options.hasOption(tokenLength  +  1))  {	  else    if(options.hasOption(tokenLength)||    options.hasOption(tokenLength))    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
180	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  arguments.length  >  2)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(stopAtNonOption  ||  arguments.length  >  2)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(stopAtNonOption  ||  arguments.length  >  2)  {	  else    if(stopAtNonOption    &&    arguments.length    >    2)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
181	[BUG]  [BUGGY]  else  if(tokenLength  >=  2)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(tokenLength  >=  2)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	139	1	replace	else  if(tokenLength  >=  2)  {	  else    if(tokenLength    ==    2)    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
