bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Integer  tokenLength  =  token.length();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  Integer  tokenLength  =  token.length();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	Integer  tokenLength  =  token.length();	  int    tokenLength    =    token.length()    -    1;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
2	[BUG]  [BUGGY]  token  =  stopAtNonOption?  options.stopAtNonOption  :  stopAtNonOption;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption?  options.stopAtNonOption  :  stopAtNonOption;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption?  options.stopAtNonOption  :  stopAtNonOption;	  token    =    stopAtNonOption?    stopAtNonOption    :    options;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
3	[BUG]  [BUGGY]  token  =  stopAtNonOption?  options.length  :  stopAtNonOption;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption?  options.length  :  stopAtNonOption;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption?  options.length  :  stopAtNonOption;	  token    =    stopAtNonOption?    stopAtNonOption    :    options;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
4	[BUG]  [BUGGY]  token  =  stopAtNonOption?  options.toString()  :  null;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption?  options.toString()  :  null;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption?  options.toString()  :  null;	  token    =    stopAtNonOption?    stopAtNonOption    :    options;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
5	[BUG]  [BUGGY]  token  =  stopAtNonOption?  options.cloneTree()  :  null;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption?  options.cloneTree()  :  null;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption?  options.cloneTree()  :  null;	  token    =    stopAtNonOption?    stopAtNonOption    :    options;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
6	[BUG]  [BUGGY]  else  if(token.startsWith( "- ")&&  token.startsWith( "- "))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(token.startsWith( "- ")&&  token.startsWith( "- "))  {  [BUGGY]      {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(token.startsWith( "- ")&&  token.startsWith( "- "))  {	  else    if(token.startsWith(   "-   ")&&    token.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
7	[BUG]  [BUGGY]  token  =  stopAtNonOption  &&  stopAtNonOption  :  null;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption  &&  stopAtNonOption  :  null;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption  &&  stopAtNonOption  :  null;	  token    =    stopAtNonOption    ||    stopAtNonOption    :    null;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
8	[BUG]  [BUGGY]  token  =  stopAtNonOption  ||  arguments.length  :  null;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption  ||  arguments.length  :  null;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption  ||  arguments.length  :  null;	  token    =    stopAtNonOption    ||    stopAtNonOption    :    null;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
9	[BUG]  [BUGGY]  token  =  stopAtNonOption  ||  eatTheRest  :  null;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption  ||  eatTheRest  :  null;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption  ||  eatTheRest  :  null;	  token    =    stopAtNonOption    ||    stopAtNonOption    :    null;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
10	[BUG]  [BUGGY]  token  =  stopAtNonOption  ||  stopAtNonOption.equals(arguments):  null;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption  ||  stopAtNonOption.equals(arguments):  null;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption  ||  stopAtNonOption.equals(arguments):  null;	  token    =    stopAtNonOption    ||    stopAtNonOption    :    null;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
11	[BUG]  [BUGGY]  Iterator  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  Iterator  iter  =  options.keySet().iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	Iterator  iter  =  options.keySet().iterator();	  Iterator    iter    =    options.entrySet().iterator();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
12	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.contains( "-- "))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  arguments.contains( "-- "))  {  [BUGGY]      {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(stopAtNonOption  &&  arguments.contains( "-- "))  {	  else    if(stopAtNonOption    &&    token.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
13	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  token.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  token.startsWith( "-- "))  {  [BUGGY]      {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(stopAtNonOption  ||  token.startsWith( "-- "))  {	  else    if(stopAtNonOption    &&    token.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
14	[BUG]  [BUGGY]  else  if(token.equals( "- ")&&  token.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(token.equals( "- ")&&  token.startsWith( "-- "))  {  [BUGGY]      {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(token.equals( "- ")&&  token.startsWith( "-- "))  {	  else    if(token.equals(   "-   ")||    token.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
15	[BUG]  [BUGGY]  else  if(token.equals( "-- ")&&  token.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(token.equals( "-- ")&&  token.startsWith( "-- "))  {  [BUGGY]      {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(token.equals( "-- ")&&  token.startsWith( "-- "))  {	  else    if(token.equals(   "-   ")||    token.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
16	[BUG]  [BUGGY]  else  if(token.equals( "-- ")||  token.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(token.equals( "-- ")||  token.startsWith( "-- "))  {  [BUGGY]      {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(token.equals( "-- ")||  token.startsWith( "-- "))  {	  else    if(token.equals(   "-   ")||    token.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
17	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token))  {  [BUGGY]      {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(stopAtNonOption  &&  options.hasOption(token))  {	  else    if(!stopAtNonOption    &&    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
18	[BUG]  [BUGGY]  token  =  stopAtNonOption?  tokens.size()  :  2;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption?  tokens.size()  :  2;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption?  tokens.size()  :  2;	  token    =    stopAtNonOption?    tokens.size()    :    1;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
19	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  token.equals( "- "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  token.equals( "- "))  {  [BUGGY]      {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(stopAtNonOption  ||  token.equals( "- "))  {	  else    if(stopAtNonOption    ||    token.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
20	[BUG]  [BUGGY]  else  if(token.startsWith( "- ")&&  token.startsWith( "--))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(token.startsWith( "- ")&&  token.startsWith( "--))  {  [BUGGY]      {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(token.startsWith( "- ")&&  token.startsWith( "--))  {	  else    if(token.startsWith(   "-   ")||    token.startsWith(   "--))    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
21	[BUG]  [BUGGY]  else  if(token.startsWith( "- ")||  token.startsWith( "-))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(token.startsWith( "- ")||  token.startsWith( "-))  {  [BUGGY]      {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(token.startsWith( "- ")||  token.startsWith( "-))  {	  else    if(token.startsWith(   "-   ")||    token.startsWith(   "--))    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
22	[BUG]  [BUGGY]  token  =  stopAtNonOption  &&  stopAtNonOption  :  token;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption  &&  stopAtNonOption  :  token;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption  &&  stopAtNonOption  :  token;	  token    =    stopAtNonOption    ||    stopAtNonOption    :    token;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
23	[BUG]  [BUGGY]  token  =  stopAtNonOption  ||  stopAtNonOption  :  arguments;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption  ||  stopAtNonOption  :  arguments;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption  ||  stopAtNonOption  :  arguments;	  token    =    stopAtNonOption    ||    stopAtNonOption    :    token;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
24	[BUG]  [BUGGY]  token  =  stopAtNonOption  ||  eatTheRest  :  token;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption  ||  eatTheRest  :  token;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption  ||  eatTheRest  :  token;	  token    =    stopAtNonOption    ||    stopAtNonOption    :    token;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
25	[BUG]  [BUGGY]  token  =  stopAtNonOption  ||  arguments.length  :  token;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption  ||  arguments.length  :  token;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption  ||  arguments.length  :  token;	  token    =    stopAtNonOption    ||    stopAtNonOption    :    token;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
26	[BUG]  [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	parent  ==  null  &&  stopAtNonOption)  {  tokens.add(token);  }	  if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
27	[BUG]  [BUGGY]  Option  option  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  Option  option  =  options.getOption(token);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	Option  option  =  options.getOption(token);	  if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
28	[BUG]  [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  tokens.add(token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  tokens.add(token);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	parent  ==  null  &&  stopAtNonOption)  {  tokens.add(token);	  if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
29	[BUG]  [BUGGY]  token  =  stopAtNonOption  ||  tokenLength  >  2)  {  token  =  stopAtNonOption?  token  :  stopAtNonOption;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption  ||  tokenLength  >  2)  {  token  =  stopAtNonOption?  token  :  stopAtNonOption;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption  ||  tokenLength  >  2)  {  token  =  stopAtNonOption?  token  :  stopAtNonOption;	  token    =    stopAtNonOption?    token    :    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
30	[BUG]  [BUGGY]  token  =  stopAtNonOption?  token  :  stopAtNonOption.toString();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption?  token  :  stopAtNonOption.toString();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption?  token  :  stopAtNonOption.toString();	  token    =    stopAtNonOption?    token    :    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
31	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  arguments.contains( "-   "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  arguments.contains( "-   "))  {  [BUGGY]      {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(stopAtNonOption  ||  arguments.contains( "-   "))  {	  else    if(stopAtNonOption    &&    arguments.contains(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
32	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.contains( "- ")||  arguments.contains( "- "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  arguments.contains( "- ")||  arguments.contains( "- "))  {  [BUGGY]      {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(stopAtNonOption  &&  arguments.contains( "- ")||  arguments.contains( "- "))  {	  else    if(stopAtNonOption    &&    arguments.contains(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
33	[BUG]  [BUGGY]  tokens.add( "- "  +  token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  tokens.add( "- "  +  token,  stopAtNonOption);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	tokens.add( "- "  +  token,  stopAtNonOption);	  tokens.add(   "-   ",    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
34	[BUG]  [BUGGY]  tokens.add( "- ",  eatTheRest);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  tokens.add( "- ",  eatTheRest);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	tokens.add( "- ",  eatTheRest);	  tokens.add(   "-   ",    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
35	[BUG]  [BUGGY]  token  =  stopAtNonOption?  tokens[0]  :  null;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption?  tokens[0]  :  null;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption?  tokens[0]  :  null;	  token    =    stopAtNonOption?    token    :    null;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
36	[BUG]  [BUGGY]  token  =  stopAtNonOption?  tokens.size()  :  null;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption?  tokens.size()  :  null;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption?  tokens.size()  :  null;	  token    =    stopAtNonOption?    token    :    null;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
37	[BUG]  [BUGGY]  Iterator  iter  =  this.arguments.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  Iterator  iter  =  this.arguments.iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	Iterator  iter  =  this.arguments.iterator();	  Iterator    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
38	[BUG]  [BUGGY]  Iterator  iter  =  tokens.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  Iterator  iter  =  tokens.iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	Iterator  iter  =  tokens.iterator();	  Iterator    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
39	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption)  {  tokens.add(token);  }	  else    if(options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
40	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  token.startsWith( "-   "))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  token.startsWith( "-   "))  {  tokens.add(token);  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(options.hasOption(token)&&  token.startsWith( "-   "))  {  tokens.add(token);  }	  else    if(options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
41	[BUG]  [BUGGY]  tokens.add( "- "  +  token.length());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  tokens.add( "- "  +  token.length());  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	tokens.add( "- "  +  token.length());	  tokens.add(   "-   "    +    token);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
42	[BUG]  [BUGGY]  tokens.add( "- "  +  token.substring(1));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  tokens.add( "- "  +  token.substring(1));  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	tokens.add( "- "  +  token.substring(1));	  tokens.add(   "-   "    +    token);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
43	[BUG]  [BUGGY]  tokens.add( "- "  +  tokenLength);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  tokens.add( "- "  +  tokenLength);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	tokens.add( "- "  +  tokenLength);	  tokens.add(   "-   "    +    token);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
44	[BUG]  [BUGGY]  tokens.add( "- "  +  token.substring(2));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  tokens.add( "- "  +  token.substring(2));  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	tokens.add( "- "  +  token.substring(2));	  tokens.add(   "-   "    +    token);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
45	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(tokenLength))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(tokenLength))  {  [BUGGY]      {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(options.hasOption(token)&&  options.hasOption(tokenLength))  {	  else    if(options.hasOption(token)||    options.hasOption(tokenLength))    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
46	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  options.hasOption(tokenLength  +  2))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(options.hasOption(token)||  options.hasOption(tokenLength  +  2))  {  [BUGGY]      {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(options.hasOption(token)||  options.hasOption(tokenLength  +  2))  {	  else    if(options.hasOption(token)||    options.hasOption(tokenLength))    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
47	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  options.hasOption(tokenLength  +  1))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(options.hasOption(token)||  options.hasOption(tokenLength  +  1))  {  [BUGGY]      {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(options.hasOption(token)||  options.hasOption(tokenLength  +  1))  {	  else    if(options.hasOption(token)||    options.hasOption(tokenLength))    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
48	[BUG]  [BUGGY]  token  =  stopAtNonOption?  options.stopAtNonOption  :  arguments;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption?  options.stopAtNonOption  :  arguments;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption?  options.stopAtNonOption  :  arguments;	  token    =    stopAtNonOption?    options.stopAtNonOption    :    null;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
49	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(options.hasOption(token)||  stopAtNonOption)  {  [BUGGY]      {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(options.hasOption(token)||  stopAtNonOption)  {	  else    if(options.hasOption(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
50	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ||  arguments.contains(token))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ||  arguments.contains(token))  {  [BUGGY]      {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption  ||  arguments.contains(token))  {	  else    if(options.hasOption(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
51	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ||  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ||  options.hasOption(token))  {  [BUGGY]      {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption  ||  options.hasOption(token))  {	  else    if(options.hasOption(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
52	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  currentOption.arguments.iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  Iterator  <  String>  iter  =  currentOption.arguments.iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	Iterator  <  String>  iter  =  currentOption.arguments.iterator();	  Iterator    <    String>    iter    =    this.arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	21	None	replace
53	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  tokens.iterator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  Iterator  <  String>  iter  =  tokens.iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	Iterator  <  String>  iter  =  tokens.iterator();	  Iterator    <    String>    iter    =    currentOption.iterator();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
54	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(token))  {  [BUGGY]      {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(options.hasOption(token)&&  options.hasOption(token))  {	  else    if(options.hasOption(token)||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
55	[BUG]  [BUGGY]  else  if(options.hasValue(token)||  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(options.hasValue(token)||  options.hasOption(token))  {  [BUGGY]      {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(options.hasValue(token)||  options.hasOption(token))  {	  else    if(options.hasOption(token)||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
56	[BUG]  [BUGGY]  else  if(options.hasArg(token)||  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(options.hasArg(token)||  options.hasOption(token))  {  [BUGGY]      {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(options.hasArg(token)||  options.hasOption(token))  {	  else    if(options.hasOption(token)||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
57	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(token))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(token))  {  tokens.add(token);  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(options.hasOption(token)&&  options.hasOption(token))  {  tokens.add(token);  }	  else    if(options.hasOption(token)||    options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
58	[BUG]  [BUGGY]  else  if(options.hasValue(token)||  options.hasOption(token))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(options.hasValue(token)||  options.hasOption(token))  {  tokens.add(token);  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(options.hasValue(token)||  options.hasOption(token))  {  tokens.add(token);  }	  else    if(options.hasOption(token)||    options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
59	[BUG]  [BUGGY]  else  if(options.hasSingleHyphen(token)||  options.hasOption(token))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(options.hasSingleHyphen(token)||  options.hasOption(token))  {  tokens.add(token);  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(options.hasSingleHyphen(token)||  options.hasOption(token))  {  tokens.add(token);  }	  else    if(options.hasOption(token)||    options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
60	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
61	[BUG]  [BUGGY]  parent  ==  null  ||  stopAtNonOption)  {  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  parent  ==  null  ||  stopAtNonOption)  {  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	parent  ==  null  ||  stopAtNonOption)  {  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
62	[BUG]  [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	parent  ==  null  &&  stopAtNonOption)  {  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
63	[BUG]  [BUGGY]  else  if(token.startsWith( "- ")&&  token.startsWith( ".- "))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(token.startsWith( "- ")&&  token.startsWith( ".- "))  {  [BUGGY]      {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(token.startsWith( "- ")&&  token.startsWith( ".- "))  {	  else    if(token.startsWith(   "-   ")||    token.startsWith(   ".-   "))    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
64	[BUG]  [BUGGY]  else  if(token.startsWith( ".- ")||  token.startsWith( ".- "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(token.startsWith( ".- ")||  token.startsWith( ".- "))  {  [BUGGY]      {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(token.startsWith( ".- ")||  token.startsWith( ".- "))  {	  else    if(token.startsWith(   "-   ")||    token.startsWith(   ".-   "))    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
65	[BUG]  [BUGGY]  tokens.add( "- "  +  token.equals(token));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  tokens.add( "- "  +  token.equals(token));  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	tokens.add( "- "  +  token.equals(token));	  tokens.add(   "-   ".equals(token));    	non-compiled	[CE]  <identifier>  expected	48	None	replace
66	[BUG]  [BUGGY]  tokens.add( "- ").equals(token));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  tokens.add( "- ").equals(token));  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	tokens.add( "- ").equals(token));	  tokens.add(   "-   ".equals(token));    	non-compiled	[CE]  <identifier>  expected	48	None	replace
67	[BUG]  [BUGGY]  tokens.add( "-- "  +  token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  tokens.add( "-- "  +  token);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	tokens.add( "-- "  +  token);	  tokens.add(   "--   ");    	non-compiled	[CE]  <identifier>  expected	37	None	replace
68	[BUG]  [BUGGY]  else  if(token.equals( "- ")||  token.equals( "- "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(token.equals( "- ")||  token.equals( "- "))  {  [BUGGY]      {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(token.equals( "- ")||  token.equals( "- "))  {	  else    if(token.startsWith(   "-   ")||    token.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
69	[BUG]  [BUGGY]  else  if(token.startsWith( "-- ")&&  token.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(token.startsWith( "-- ")&&  token.startsWith( "-- "))  {  [BUGGY]      {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(token.startsWith( "-- ")&&  token.startsWith( "-- "))  {	  else    if    (token.startsWith(   "--   ")||    token.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
70	[BUG]  [BUGGY]  token  =  stopAtNonOption?  null  :  arguments;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption?  null  :  arguments;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption?  null  :  arguments;	  token    =    stopAtNonOption?    stopAtNonOption    :    arguments;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
71	[BUG]  [BUGGY]  token  =  stopAtNonOption?  stopAtNonOption  :  arguments[0];  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption?  stopAtNonOption  :  arguments[0];  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption?  stopAtNonOption  :  arguments[0];	  token    =    stopAtNonOption?    stopAtNonOption    :    arguments;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
72	[BUG]  [BUGGY]  token  =  stopAtNonOption?  arguments.length  :  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption?  arguments.length  :  stopAtNonOption;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption?  arguments.length  :  stopAtNonOption;	  token    =    stopAtNonOption?    stopAtNonOption    :    arguments;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
73	[BUG]  [BUGGY]  List  <  String>  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  List  <  String>  iter  =  options.values().iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	List  <  String>  iter  =  options.values().iterator();	  Iterator    <    String>    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
74	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  this.currentOptions.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  Iterator  <  String>  iter  =  this.currentOptions.iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	Iterator  <  String>  iter  =  this.currentOptions.iterator();	  Iterator    <    String>    iter    =    currentOptions.iterator();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
75	[BUG]  [BUGGY]  List  <  String>  iter  =  currentOptions.iterator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  List  <  String>  iter  =  currentOptions.iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	List  <  String>  iter  =  currentOptions.iterator();	  Iterator    <    String>    iter    =    currentOptions.iterator();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
76	[BUG]  [BUGGY]  else  if  (token.startsWith( "-- ")&&  token.startsWith( "--))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if  (token.startsWith( "-- ")&&  token.startsWith( "--))  {  [BUGGY]      {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if  (token.startsWith( "-- ")&&  token.startsWith( "--))  {	  else    if    (token.startsWith(   "--   ")||    token.startsWith(   "--))    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
77	[BUG]  [BUGGY]  token  =  stopAtNonOption?  null  :  stopAtNonOption.toString();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption?  null  :  stopAtNonOption.toString();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption?  null  :  stopAtNonOption.toString();	  token    =    stopAtNonOption?    null    :    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
78	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.entrySet().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  Iterator  <  String>  iter  =  options.entrySet().iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	Iterator  <  String>  iter  =  options.entrySet().iterator();	  Iterator    <    String>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
79	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.contains(token))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  arguments.contains(token))  {  [BUGGY]      {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(stopAtNonOption  &&  arguments.contains(token))  {	  else    if(stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
80	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  arguments.contains(token))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  arguments.contains(token))  {  [BUGGY]      {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(stopAtNonOption  ||  arguments.contains(token))  {	  else    if(stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
81	[BUG]  [BUGGY]  else  if(!stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(!stopAtNonOption)  {  [BUGGY]      {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(!stopAtNonOption)  {	  else    if(stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
82	[BUG]  [BUGGY]  token  =  stopAtNonOption?  token  :  new  String[0];  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption?  token  :  new  String[0];  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption?  token  :  new  String[0];	  token    =    stopAtNonOption?    token    :    null;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
83	[BUG]  [BUGGY]  Int  tokenLength  =  token.length();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  Int  tokenLength  =  token.length();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	Int  tokenLength  =  token.length();	  int    tokenLength    =    token.length()    +    1;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
84	[BUG]  [BUGGY]  IllegalArgumentIterator  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  IllegalArgumentIterator  iter  =  options.iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	IllegalArgumentIterator  iter  =  options.iterator();	  Ilerator    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
85	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  Option  currentOption  =  options.getOption(token);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	Option  currentOption  =  options.getOption(token);	  Ilerator    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
86	[BUG]  [BUGGY]  token  =  stopAtNonOption  ||  stopAtNonOption!=  null;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption  ||  stopAtNonOption!=  null;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption  ||  stopAtNonOption!=  null;	  token    =    stopAtNonOption    ||    stopAtNonOption    :    null;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
87	[BUG]  [BUGGY]  token  =  stopAtNonOption  ||  stopAtNonOption  ==  null;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption  ||  stopAtNonOption  ==  null;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption  ||  stopAtNonOption  ==  null;	  token    =    stopAtNonOption    ||    stopAtNonOption    :    null;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
88	[BUG]  [BUGGY]  token  =  stopAtNonOption  ||  stopAtNonOption  <  0;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption  ||  stopAtNonOption  <  0;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption  ||  stopAtNonOption  <  0;	  token    =    stopAtNonOption    ||    stopAtNonOption    :    null;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
89	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  Ilerator  <  String>  iter  =  options.iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	Ilerator  <  String>  iter  =  options.iterator();	  Iterator    <    String>    iter    =    currentOption.iterator();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
90	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(stopAtNonOption)  {  tokens.add(token);  }	  else    if(options.hasOption(token)||    options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
91	[BUG]  [BUGGY]  token  =  stopAtNonOption  ||  stopAtNonOption  :  tokens;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption  ||  stopAtNonOption  :  tokens;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption  ||  stopAtNonOption  :  tokens;	  token    =    stopAtNonOption    ||    stopAtNonOption    :    token;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
92	[BUG]  [BUGGY]  token  =  stopAtNonOption  ||  stopAtNonOption  :  token.toLowerCase();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption  ||  stopAtNonOption  :  token.toLowerCase();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption  ||  stopAtNonOption  :  token.toLowerCase();	  token    =    stopAtNonOption    ||    stopAtNonOption    :    token;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
93	[BUG]  [BUGGY]  tokens.add( "-- ".equals(token));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  tokens.add( "-- ".equals(token));  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	tokens.add( "-- ".equals(token));	  tokens.add(   "-   ".equals(token));    	non-compiled	[CE]  <identifier>  expected	48	None	replace
94	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption!=  false)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption!=  false)  {  tokens.add(token);  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption!=  false)  {  tokens.add(token);  }	  else    if(options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
95	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);  }	  if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
96	[BUG]  [BUGGY]  Option  options  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  Option  options  =  options.getOption(token);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	Option  options  =  options.getOption(token);	  if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
97	[BUG]  [BUGGY]  Ilerator  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  Ilerator  iter  =  options.values().iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	Ilerator  iter  =  options.values().iterator();	  Iterator    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
98	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
99	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  Iterator  <  Option>  iter  =  options.iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	Iterator  <  Option>  iter  =  options.iterator();	  Iterator    iter    =    currentOption.options.iterator();    	non-compiled	[CE]  <identifier>  expected	35	None	replace
100	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  Ilerator  <  String>  iter  =  options.values().iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	Ilerator  <  String>  iter  =  options.values().iterator();	  Iterator    <    String>    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
101	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  token.startsWith( "-- ")||  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  token.startsWith( "-- ")||  stopAtNonOption)  {  [BUGGY]      {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(stopAtNonOption  &&  token.startsWith( "-- ")||  stopAtNonOption)  {	  else    if(stopAtNonOption    &&    token.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
102	[BUG]  [BUGGY]  else  if(token.equals( "- ")||  token.startsWith( "--))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(token.equals( "- ")||  token.startsWith( "--))  {  [BUGGY]      {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(token.equals( "- ")||  token.startsWith( "--))  {	  else    if(token.startsWith(   "-   ")||    token.startsWith(   "--))    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
103	[BUG]  [BUGGY]  token  =  stopAtNonOption?  null  :  token.toLowerCase();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption?  null  :  token.toLowerCase();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption?  null  :  token.toLowerCase();	  token    =    stopAtNonOption?    null    :    token;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
104	[BUG]  [BUGGY]  else  if(token.startsWith( "- ")&&  token.startsWith( "-- ")||  token.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(token.startsWith( "- ")&&  token.startsWith( "-- ")||  token.startsWith( "-- "))  {  [BUGGY]      {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(token.startsWith( "- ")&&  token.startsWith( "-- ")||  token.startsWith( "-- "))  {	  else    if(token.startsWith(   "-   ")&&    token.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
105	[BUG]  [BUGGY]  else  if(token.startsWith( "- ")&&  token.startsWith( "-- ")||  token.startsWith( "--))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(token.startsWith( "- ")&&  token.startsWith( "-- ")||  token.startsWith( "--))  {  [BUGGY]      {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(token.startsWith( "- ")&&  token.startsWith( "-- ")||  token.startsWith( "--))  {	  else    if(token.startsWith(   "-   ")&&    token.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
106	[BUG]  [BUGGY]  token  =  stopAtNonOption?  options  :  stopAtNonOption;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption?  options  :  stopAtNonOption;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption?  options  :  stopAtNonOption;	  token    =    stopAtNonOption?    stopAtNonOption    :    options;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
107	[BUG]  [BUGGY]  token  =  stopAtNonOption?  options.toString()  :  stopAtNonOption;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption?  options.toString()  :  stopAtNonOption;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption?  options.toString()  :  stopAtNonOption;	  token    =    stopAtNonOption?    stopAtNonOption    :    options;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
108	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  token.startsWith( "- ")||  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  token.startsWith( "- ")||  stopAtNonOption)  {  [BUGGY]      {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(stopAtNonOption  &&  token.startsWith( "- ")||  stopAtNonOption)  {	  else    if(stopAtNonOption    &&    token.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
109	[BUG]  [BUGGY]  token  =  stopAtNonOption?  tokens.length()  :  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption?  tokens.length()  :  1;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption?  tokens.length()  :  1;	  token    =    stopAtNonOption?    tokens.size()    :    1;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
110	[BUG]  [BUGGY]  token  =  stopAtNonOption?  options.stopToken  :  null;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption?  options.stopToken  :  null;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption?  options.stopToken  :  null;	  token    =    stopAtNonOption?    options.stopAtNonOption    :    null;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
111	[BUG]  [BUGGY]  token  =  stopAtNonOption?  options.eatTheRest  :  null;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption?  options.eatTheRest  :  null;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption?  options.eatTheRest  :  null;	  token    =    stopAtNonOption?    options.stopAtNonOption    :    null;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
112	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  Ilerator  <  String>  iter  =  options.keySet().iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	Ilerator  <  String>  iter  =  options.keySet().iterator();	  Iterator    <    String>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
113	[BUG]  [BUGGY]  tokens.add( "- "  +  token.toLowerCase());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  tokens.add( "- "  +  token.toLowerCase());  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	tokens.add( "- "  +  token.toLowerCase());	  tokens.add(   "-   "    +    token);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
114	[BUG]  [BUGGY]  token  =  stopAtNonOption?  stopAtNonOption  :  arguments[tokenLength];  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption?  stopAtNonOption  :  arguments[tokenLength];  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption?  stopAtNonOption  :  arguments[tokenLength];	  token    =    stopAtNonOption?    stopAtNonOption    :    arguments;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
115	[BUG]  [BUGGY]  token  =  stopAtNonOption?  token  :  stopAtNonOption  +  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption?  token  :  stopAtNonOption  +  1;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption?  token  :  stopAtNonOption  +  1;	  token    =    stopAtNonOption?    token    :    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
116	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  currentOption.options.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  Iterator  <  String>  iter  =  currentOption.options.iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	Iterator  <  String>  iter  =  currentOption.options.iterator();	  Iterator    iter    =    currentOption.options.iterator();    	non-compiled	[CE]  <identifier>  expected	35	None	replace
117	[BUG]  [BUGGY]  Iterator  iter  =  this.options.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  Iterator  iter  =  this.options.iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	Iterator  iter  =  this.options.iterator();	  Iterator    iter    =    currentOption.options.iterator();    	non-compiled	[CE]  <identifier>  expected	35	None	replace
118	[BUG]  [BUGGY]  token  =  stopAtNonOption?  options.getOption(token):  arguments;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption?  options.getOption(token):  arguments;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption?  options.getOption(token):  arguments;	  token    =    stopAtNonOption?    stopAtNonOption    :    arguments;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
119	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  token.startsWith( "- ")||  token.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  token.startsWith( "- ")||  token.startsWith( "-- "))  {  [BUGGY]      {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(stopAtNonOption  &&  token.startsWith( "- ")||  token.startsWith( "-- "))  {	  else    if(stopAtNonOption    &&    token.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
120	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  token.equals( "-- "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  token.equals( "-- "))  {  [BUGGY]      {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(stopAtNonOption  &&  token.equals( "-- "))  {	  else    if(stopAtNonOption    &&    token.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
121	[BUG]  [BUGGY]  token  =  stopAtNonOption?  options.stopAtNonOption  :  arguments[0];  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption?  options.stopAtNonOption  :  arguments[0];  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption?  options.stopAtNonOption  :  arguments[0];	  token    =    stopAtNonOption?    options.stopAtNonOption    :    null;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
122	[BUG]  [BUGGY]  token  =  stopAtNonOption?  tokens.toArray(new  String[tokenLength]):  null;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption?  tokens.toArray(new  String[tokenLength]):  null;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption?  tokens.toArray(new  String[tokenLength]):  null;	  token    =    stopAtNonOption?    token    :    null;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
123	[BUG]  [BUGGY]  token  =  stopAtNonOption?  token  :  arguments;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption?  token  :  arguments;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption?  token  :  arguments;	  token    =    stopAtNonOption?    token    :    null;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
124	[BUG]  [BUGGY]  token  =  stopAtNonOption?  tokens.toArray(new  String[]  {  }  )  :  null;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption?  tokens.toArray(new  String[]  {  }  )  :  null;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption?  tokens.toArray(new  String[]  {  }  )  :  null;	  token    =    stopAtNonOption?    token    :    null;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
125	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.equals( "- "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  arguments.equals( "- "))  {  [BUGGY]      {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(stopAtNonOption  &&  arguments.equals( "- "))  {	  else    if(stopAtNonOption    &&    token.equals(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
126	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  options.hasOption(token,  stopAtNonOption))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(options.hasOption(token)||  options.hasOption(token,  stopAtNonOption))  {  [BUGGY]      {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(options.hasOption(token)||  options.hasOption(token,  stopAtNonOption))  {	  else    if(options.hasOption(token)||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
127	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  options.getOption(token))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(options.hasOption(token)||  options.getOption(token))  {  [BUGGY]      {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(options.hasOption(token)||  options.getOption(token))  {	  else    if(options.hasOption(token)||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
128	[BUG]  [BUGGY]  tokens.add( "- "  +  token.trim());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  tokens.add( "- "  +  token.trim());  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	tokens.add( "- "  +  token.trim());	  tokens.add(   "-   "    +    token);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
129	[BUG]  [BUGGY]  else  if(token.equals( "- ")||  token.startsWith( "- "))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  else  if(token.equals( "- ")||  token.startsWith( "- "))  {  [BUGGY]      {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	else  if(token.equals( "- ")||  token.startsWith( "- "))  {	  else    if(token.equals(   "-   ")||    token.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
130	[BUG]  [BUGGY]  token  =  stopAtNonOption?  options.size()  :  stopAtNonOption;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption?  options.size()  :  stopAtNonOption;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption?  options.size()  :  stopAtNonOption;	  token    =    stopAtNonOption?    stopAtNonOption    :    options;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
131	[BUG]  [BUGGY]  token  =  stopAtNonOption?  options.get(token):  stopAtNonOption;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption?  options.get(token):  stopAtNonOption;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption?  options.get(token):  stopAtNonOption;	  token    =    stopAtNonOption?    stopAtNonOption    :    options;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
132	[BUG]  [BUGGY]  token  =  stopAtNonOption?  null  :  token.toString();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption?  null  :  token.toString();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption?  null  :  token.toString();	  token    =    stopAtNonOption?    null    :    token;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
133	[BUG]  [BUGGY]  token  =  stopAtNonOption?  null  :  token.length();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption?  null  :  token.length();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption?  null  :  token.length();	  token    =    stopAtNonOption?    null    :    token;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
134	[BUG]  [BUGGY]  token  =  stopAtNonOption?  token  :  arguments[0];  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption?  token  :  arguments[0];  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption?  token  :  arguments[0];	  token    =    stopAtNonOption?    token    :    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
135	[BUG]  [BUGGY]  token  =  stopAtNonOption?  token  :   "- ";  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption?  token  :   "- ";  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption?  token  :   "- ";	  token    =    stopAtNonOption?    token    :    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
136	[BUG]  [BUGGY]  token  =  stopAtNonOption?  token  :  options.get(token);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption?  token  :  options.get(token);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption?  token  :  options.get(token);	  token    =    stopAtNonOption?    token    :    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
137	[BUG]  [BUGGY]  token  =  stopAtNonOption?  tokens.size()  :  0;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption?  tokens.size()  :  0;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption?  tokens.size()  :  0;	  token    =    stopAtNonOption?    tokens.size()    :    1;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
138	[BUG]  [BUGGY]  [Delete]  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  [Delete]  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	[Delete]	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
139	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  tokens.add(token,  stopAtNonOption);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	tokens.add(token,  stopAtNonOption);	  tokens.add(   "-   ",    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
140	[BUG]  [BUGGY]  tokens.add('-');  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  tokens.add('-');  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	tokens.add('-');	  tokens.add(   "--   ");    	non-compiled	[CE]  <identifier>  expected	37	None	replace
141	[BUG]  [BUGGY]  token  =  stopAtNonOption  ||  tokenLength  :  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption  ||  tokenLength  :  stopAtNonOption;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption  ||  tokenLength  :  stopAtNonOption;	  token    =    stopAtNonOption    ||    stopAtNonOption    :    token;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
142	[BUG]  [BUGGY]  token  =  stopAtNonOption  ||  tokenLength  -  stopAtNonOption  :  token;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption  ||  tokenLength  -  stopAtNonOption  :  token;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption  ||  tokenLength  -  stopAtNonOption  :  token;	  token    =    stopAtNonOption    ||    stopAtNonOption    :    token;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
143	[BUG]  [BUGGY]  token  =  stopAtNonOption  ||  arguments.length  >  0?  options.length  :  null;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption  ||  arguments.length  >  0?  options.length  :  null;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption  ||  arguments.length  >  0?  options.length  :  null;	  token    =    stopAtNonOption    ||    stopAtNonOption    :    null;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
144	[BUG]  [BUGGY]  token  =  stopAtNonOption  ||  arguments.length  >  0?  arguments[0]  :  null;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  processSingleHyphen(token);  }      [BUGGY]  token  =  stopAtNonOption  ||  arguments.length  >  0?  arguments[0]  :  null;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  int  tokenLength  =  token.length();  if  (tokenLength  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	130	131	1	replace	token  =  stopAtNonOption  ||  arguments.length  >  0?  arguments[0]  :  null;	  token    =    stopAtNonOption    ||    stopAtNonOption    :    null;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
