bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return(tokenLength  >  1)?  options.get(tokenLength  -  1):  arguments[0];  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  return(tokenLength  >  1)?  options.get(tokenLength  -  1):  arguments[0];  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	return(tokenLength  >  1)?  options.get(tokenLength  -  1):  arguments[0];	  return(tokenLength    >    0)?    options.get(tokenLength    -    1):    arguments[0];    	non-compiled	[CE]  <identifier>  expected	18	None	replace
2	[BUG]  [BUGGY]  return(tokenLength  >  1)?  options.get(tokenLength  -  1):  arguments[1];  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  return(tokenLength  >  1)?  options.get(tokenLength  -  1):  arguments[1];  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	return(tokenLength  >  1)?  options.get(tokenLength  -  1):  arguments[1];	  return(tokenLength    >    0)?    options.get(tokenLength    -    1):    arguments[0];    	non-compiled	[CE]  <identifier>  expected	18	None	replace
3	[BUG]  [BUGGY]  return(tokenLength  >  0)?  options.get(tokenLength  -  1):  arguments[1];  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  return(tokenLength  >  0)?  options.get(tokenLength  -  1):  arguments[1];  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	return(tokenLength  >  0)?  options.get(tokenLength  -  1):  arguments[1];	  return(tokenLength    >    0)?    options.get(tokenLength    -    1):    arguments[0];    	non-compiled	[CE]  <identifier>  expected	18	None	replace
4	[BUG]  [BUGGY]  iter.add(arguments[0]);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  iter.add(arguments[0]);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	iter.add(arguments[0]);	      iter.remove();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
5	[BUG]  [BUGGY]  tokens  =  new  String[tokenLength];  System.arraycopy(arguments,  0,  tokens,  0,  tokenLength);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  tokens  =  new  String[tokenLength];  System.arraycopy(arguments,  0,  tokens,  0,  tokenLength);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	tokens  =  new  String[tokenLength];  System.arraycopy(arguments,  0,  tokens,  0,  tokenLength);	      if(stopAtNonOption)    {    tokens    =    new    String[tokenLength];    System.arraycopy(arguments,    0,    tokens,    0,    tokenLength);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
6	[BUG]  [BUGGY]  tokens  =  new  String[tokenLength];  System.arraycopy(arguments,  0,  tokens,  0,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  tokens  =  new  String[tokenLength];  System.arraycopy(arguments,  0,  tokens,  0,  stopAtNonOption);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	tokens  =  new  String[tokenLength];  System.arraycopy(arguments,  0,  tokens,  0,  stopAtNonOption);	      if(stopAtNonOption)    {    tokens    =    new    String[tokenLength];    System.arraycopy(arguments,    0,    tokens,    0,    tokenLength);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
7	[BUG]  [BUGGY]  tokens  =  new  String[tokenLength];  System.arraycopy(arguments,  0,  tokens,  0,  tokenLength);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  tokens  =  new  String[tokenLength];  System.arraycopy(arguments,  0,  tokens,  0,  tokenLength);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	tokens  =  new  String[tokenLength];  System.arraycopy(arguments,  0,  tokens,  0,  tokenLength);  }	      if(stopAtNonOption)    {    tokens    =    new    String[tokenLength];    System.arraycopy(arguments,    0,    tokens,    0,    tokenLength);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
8	[BUG]  [BUGGY]  tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  i++)  {  options[i]  =  options[i];  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  i++)  {  options[i]  =  options[i];  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  i++)  {  options[i]  =  options[i];  }	      if(stopAtNonOption)    {    tokens    =    new    String[tokenLength];    for(int    i    =    0,    len    =    arguments.length;    i    <    len;    i++)    {    options[i]    =    options[i];    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
9	[BUG]  [BUGGY]  tokens  =  new  String[tokenLength  -  1];  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  i++)  {  options[i]  =  options[i];  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  tokens  =  new  String[tokenLength  -  1];  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  i++)  {  options[i]  =  options[i];  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	tokens  =  new  String[tokenLength  -  1];  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  i++)  {  options[i]  =  options[i];  }	      if(stopAtNonOption)    {    tokens    =    new    String[tokenLength];    for(int    i    =    0,    len    =    arguments.length;    i    <    len;    i++)    {    options[i]    =    options[i];    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
10	[BUG]  [BUGGY]  tokens  =  new  String[tokenLength  +  1];  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  i++)  {  options[i]  =  options[i];  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  tokens  =  new  String[tokenLength  +  1];  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  i++)  {  options[i]  =  options[i];  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	tokens  =  new  String[tokenLength  +  1];  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  i++)  {  options[i]  =  options[i];  }	      if(stopAtNonOption)    {    tokens    =    new    String[tokenLength];    for(int    i    =    0,    len    =    arguments.length;    i    <    len;    i++)    {    options[i]    =    options[i];    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
11	[BUG]  [BUGGY]  tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  i++)  {  options[i]  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  i++)  {  options[i]  =  null;  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  i++)  {  options[i]  =  null;  }	      if(stopAtNonOption)    {    tokens    =    new    String[tokenLength];    for(int    i    =    0,    len    =    arguments.length;    i    <    len;    i++)    {    options[i]    =    options[i];    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
12	[BUG]  [BUGGY]  tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  i++)  {  tokens[i]  =  options[i];  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  i++)  {  tokens[i]  =  options[i];  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  i++)  {  tokens[i]  =  options[i];  }	      if(stopAtNonOption)    {    tokens    =    new    String[tokenLength];    for(int    i    =    0,    len    =    arguments.length;    i    <    len;    i++)    {    tokens[i]    =    options[i];    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
13	[BUG]  [BUGGY]  tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  i++)  {  tokens[i]  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  i++)  {  tokens[i]  =  null;  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  i++)  {  tokens[i]  =  null;  }	      if(stopAtNonOption)    {    tokens    =    new    String[tokenLength];    for(int    i    =    0,    len    =    arguments.length;    i    <    len;    i++)    {    tokens[i]    =    options[i];    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
14	[BUG]  [BUGGY]  tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  i++)  {  tokens[i]  =  options[0];  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  i++)  {  tokens[i]  =  options[0];  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  i++)  {  tokens[i]  =  options[0];  }	      if(stopAtNonOption)    {    tokens    =    new    String[tokenLength];    for(int    i    =    0,    len    =    arguments.length;    i    <    len;    i++)    {    tokens[i]    =    options[i];    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
15	[BUG]  [BUGGY]  tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  i++)  {  tokens[i]  =  option;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  i++)  {  tokens[i]  =  option;  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  i++)  {  tokens[i]  =  option;  }	      if(stopAtNonOption)    {    tokens    =    new    String[tokenLength];    for(int    i    =    0,    len    =    arguments.length;    i    <    len;    i++)    {    tokens[i]    =    options[i];    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
16	[BUG]  [BUGGY]  Option  option  =  options.getOption(stopAtNonOption);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  Option  option  =  options.getOption(stopAtNonOption);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	Option  option  =  options.getOption(stopAtNonOption);	  if(stopAtNonOption)    {    for(Iterator    iter    =    options.iterator();    iter.hasNext();)    {    tokens.add(iter.next());    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
17	[BUG]  [BUGGY]  Option  options  =  options.get(tokenLength);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  Option  options  =  options.get(tokenLength);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	Option  options  =  options.get(tokenLength);	  if(stopAtNonOption)    {    for(Iterator    iter    =    options.iterator();    iter.hasNext();)    {    tokens.add(iter.next());    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
18	[BUG]  [BUGGY]  Option  options  =  options.get(tokenLength  -  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  Option  options  =  options.get(tokenLength  -  1);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	Option  options  =  options.get(tokenLength  -  1);	  if(stopAtNonOption)    {    for(Iterator    iter    =    options.iterator();    iter.hasNext();)    {    tokens.add(iter.next());    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
19	[BUG]  [BUGGY]  Option  option  =  options.getOption(tokenLength);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  Option  option  =  options.getOption(tokenLength);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	Option  option  =  options.getOption(tokenLength);	  if(stopAtNonOption)    {    for(Iterator    iter    =    options.iterator();    iter.hasNext();)    {    tokens.add(iter.next());    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
20	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokenLength);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  Option  currentOption  =  options.getOption(tokenLength);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	Option  currentOption  =  options.getOption(tokenLength);	  if(stopAtNonOption)    {    for(Iterator    iter    =    arguments.iterator();    iter.hasNext();)    {    tokens.add(iter.next());    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
21	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  Option  currentOption  =  options.getOption(token);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	Option  currentOption  =  options.getOption(token);	  if(stopAtNonOption)    {    for(Iterator    iter    =    arguments.iterator();    iter.hasNext();)    {    tokens.add(iter.next());    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
22	[BUG]  [BUGGY]  Option  options  =  options.getOption(tokenLength);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  Option  options  =  options.getOption(tokenLength);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	Option  options  =  options.getOption(tokenLength);	  if(stopAtNonOption)    {    for(Iterator    iter    =    arguments.iterator();    iter.hasNext();)    {    tokens.add(iter.next());    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
23	[BUG]  [BUGGY]  Option  currentOption  =  options.get(tokenLength);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  Option  currentOption  =  options.get(tokenLength);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	Option  currentOption  =  options.get(tokenLength);	  if(stopAtNonOption)    {    for(Iterator    iter    =    arguments.iterator();    iter.hasNext();)    {    tokens.add(iter.next());    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
24	[BUG]  [BUGGY]  tokens.add(iter.next());  continue;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  tokens.add(iter.next());  continue;  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	tokens.add(iter.next());  continue;	      if(stopAtNonOption)    {    for(Iterator    iter    =    arguments.iterator();    iter.hasNext();)    {    tokens.add(iter.next());    continue;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
25	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(tokenLength  -  1);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(tokenLength  -  1);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	tokens.add(token);  currentOption  =  options.getOption(tokenLength  -  1);	      tokens.add(token);    currentOption    =    options.getOption(tokenLength);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
26	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(tokenLength  +  1);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(tokenLength  +  1);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	tokens.add(token);  currentOption  =  options.getOption(tokenLength  +  1);	      tokens.add(token);    currentOption    =    options.getOption(tokenLength);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
27	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(tokenLength,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(tokenLength,  stopAtNonOption);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	tokens.add(token);  currentOption  =  options.getOption(tokenLength,  stopAtNonOption);	      tokens.add(token);    currentOption    =    options.getOption(tokenLength);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
28	[BUG]  [BUGGY]  options.add(token);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  options.add(token);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	options.add(token);	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
29	[BUG]  [BUGGY]  Option  option  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  Option  option  =  options.getOption(token);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	Option  option  =  options.getOption(token);	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
30	[BUG]  [BUGGY]  return(tokenLength  >  1)?  options.get(tokenLength  -  1):  null;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  return(tokenLength  >  1)?  options.get(tokenLength  -  1):  null;  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	return(tokenLength  >  1)?  options.get(tokenLength  -  1):  null;	  return(tokenLength    >    0)?    options.get(tokenLength    -    1):    null;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
31	[BUG]  [BUGGY]  return(tokenLength  >  0)?  options.get(0):  null;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  return(tokenLength  >  0)?  options.get(0):  null;  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	return(tokenLength  >  0)?  options.get(0):  null;	  return(tokenLength    >    0)?    options.get(tokenLength    -    1):    null;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
32	[BUG]  [BUGGY]  return(tokenLength  <  1)?  options.get(tokenLength  -  1):  null;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  return(tokenLength  <  1)?  options.get(tokenLength  -  1):  null;  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	return(tokenLength  <  1)?  options.get(tokenLength  -  1):  null;	  return(tokenLength    >    0)?    options.get(tokenLength    -    1):    null;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
33	[BUG]  [BUGGY]  if(stopAtNonOption)  {  return  options.toArray(new  String[tokenLength]);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  if(stopAtNonOption)  {  return  options.toArray(new  String[tokenLength]);  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	if(stopAtNonOption)  {  return  options.toArray(new  String[tokenLength]);  }	  return    options.toArray(new    String[tokenLength]);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
34	[BUG]  [BUGGY]  if(stopAtNonOption)  {  return  options.toArray(new  String[tokenLength]);  }  else  {  tokens.add(arguments[tokenLength]);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  if(stopAtNonOption)  {  return  options.toArray(new  String[tokenLength]);  }  else  {  tokens.add(arguments[tokenLength]);  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	if(stopAtNonOption)  {  return  options.toArray(new  String[tokenLength]);  }  else  {  tokens.add(arguments[tokenLength]);  }	  return    options.toArray(new    String[tokenLength]);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
35	[BUG]  [BUGGY]  if(stopAtNonOption)  {  return  options.toArray(new  String[tokenLength]);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  if(stopAtNonOption)  {  return  options.toArray(new  String[tokenLength]);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	if(stopAtNonOption)  {  return  options.toArray(new  String[tokenLength]);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    options.toArray(new    String[tokenLength]);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
36	[BUG]  [BUGGY]  return  options.toArray(new  String[0]);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  return  options.toArray(new  String[0]);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	return  options.toArray(new  String[0]);	  return    options.toArray(new    String[tokenLength]);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
37	[BUG]  [BUGGY]  tokens.add(arguments[0].toString());  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  tokens.add(arguments[0].toString());  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	tokens.add(arguments[0].toString());	      iter.remove();    tokens.add(arguments[0].toString());    	non-compiled	[CE]  <identifier>  expected	17	None	replace
38	[BUG]  [BUGGY]  iter.remove();  tokens.add(arguments[1].toString());  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  iter.remove();  tokens.add(arguments[1].toString());  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	iter.remove();  tokens.add(arguments[1].toString());	      iter.remove();    tokens.add(arguments[0].toString());    	non-compiled	[CE]  <identifier>  expected	17	None	replace
39	[BUG]  [BUGGY]  tokens.add(arguments[0]);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  tokens.add(arguments[0]);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	tokens.add(arguments[0]);	  tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
40	[BUG]  [BUGGY]  tokens.add(arguments[tokenLength]);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  tokens.add(arguments[tokenLength]);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	tokens.add(arguments[tokenLength]);	  tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
41	[BUG]  [BUGGY]  tokens.add(arguments[0],  arguments[1]);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  tokens.add(arguments[0],  arguments[1]);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	tokens.add(arguments[0],  arguments[1]);	  tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
42	[BUG]  [BUGGY]  return(tokenLength  >  1)?  options.get(tokenLength  -  1): "   ";  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  return(tokenLength  >  1)?  options.get(tokenLength  -  1): "   ";  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	return(tokenLength  >  1)?  options.get(tokenLength  -  1): "   ";	  return(tokenLength    >    0)?    options.get(tokenLength    -    1):   "   ";    	non-compiled	[CE]  <identifier>  expected	19	None	replace
43	[BUG]  [BUGGY]  return(tokenLength  >  0)?  options.get(tokenLength  -  1): ", ";  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  return(tokenLength  >  0)?  options.get(tokenLength  -  1): ", ";  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	return(tokenLength  >  0)?  options.get(tokenLength  -  1): ", ";	  return(tokenLength    >    0)?    options.get(tokenLength    -    1):   "   ";    	non-compiled	[CE]  <identifier>  expected	19	None	replace
44	[BUG]  [BUGGY]  return  options.toArray(stopAtNonOption):  null;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  return  options.toArray(stopAtNonOption):  null;  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	return  options.toArray(stopAtNonOption):  null;	  return    stopAtNonOption?    options.toArray(arguments):    null;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
45	[BUG]  [BUGGY]  return  stopsAtNonOption?  options.toArray(arguments):  null;  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  return  stopsAtNonOption?  options.toArray(arguments):  null;  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	return  stopsAtNonOption?  options.toArray(arguments):  null;	  return    stopAtNonOption?    options.toArray(arguments):    null;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
46	[BUG]  [BUGGY]  tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  argument.length;  i  <  len;  i++)  {  tokens[i]  =  null;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  argument.length;  i  <  len;  i++)  {  tokens[i]  =  null;  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  argument.length;  i  <  len;  i++)  {  tokens[i]  =  null;  }	      if(stopAtNonOption)    {    tokens    =    new    String[tokenLength];    for(int    i    =    0,    len    =    arguments.length;    i    <    len;    i++)    {    tokens[i]    =    null;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
47	[BUG]  [BUGGY]  tokens  =  new  String[tokenLength];  for(int  i  =  1,  len  =  arguments.length;  i  <  len;  i++)  {  tokens[i]  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  tokens  =  new  String[tokenLength];  for(int  i  =  1,  len  =  arguments.length;  i  <  len;  i++)  {  tokens[i]  =  null;  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	tokens  =  new  String[tokenLength];  for(int  i  =  1,  len  =  arguments.length;  i  <  len;  i++)  {  tokens[i]  =  null;  }	      if(stopAtNonOption)    {    tokens    =    new    String[tokenLength];    for(int    i    =    0,    len    =    arguments.length;    i    <    len;    i++)    {    tokens[i]    =    null;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
48	[BUG]  [BUGGY]  iter.remove();  tokens.add(arguments[0]);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  iter.remove();  tokens.add(arguments[0]);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	iter.remove();  tokens.add(arguments[0]);	      iter.remove();    tokens.add(arguments[tokenLength]);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
49	[BUG]  [BUGGY]  return  stopAtNonOption?  options.toString(arguments):  null;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  return  stopAtNonOption?  options.toString(arguments):  null;  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	return  stopAtNonOption?  options.toString(arguments):  null;	  return    stopAtNonOption?    options.toArray(arguments):    null;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
50	[BUG]  [BUGGY]  return  stopAtNonOption?  options.toArray(arguments):  arguments;  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  return  stopAtNonOption?  options.toArray(arguments):  arguments;  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	return  stopAtNonOption?  options.toArray(arguments):  arguments;	  return    stopAtNonOption?    options.toArray(arguments):    null;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
51	[BUG]  [BUGGY]  tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  options.length;  i  <  len;  i++)  {  tokens[i]  =  options[i];  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  options.length;  i  <  len;  i++)  {  tokens[i]  =  options[i];  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  options.length;  i  <  len;  i++)  {  tokens[i]  =  options[i];  }	      if(stopAtNonOption)    {    tokens    =    new    String[tokenLength];    for(int    i    =    0,    len    =    arguments.length;    i    <    len;    i++)    {    tokens[i]    =    options[i];    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
52	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokenLength);  tokens  =  new  String[currentOption.length];  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  i++)  {  tokens[i]  =  options[i];  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  Option  currentOption  =  options.getOption(tokenLength);  tokens  =  new  String[currentOption.length];  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  i++)  {  tokens[i]  =  options[i];  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	Option  currentOption  =  options.getOption(tokenLength);  tokens  =  new  String[currentOption.length];  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  i++)  {  tokens[i]  =  options[i];  }	      if(stopAtNonOption)    {    tokens    =    new    String[tokenLength];    for(int    i    =    0,    len    =    arguments.length;    i    <    len;    i++)    {    tokens[i]    =    options[i];    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
53	[BUG]  [BUGGY]  tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  options.length;  i  <  len;  i++)  {  options[i]  =  options[i];  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  options.length;  i  <  len;  i++)  {  options[i]  =  options[i];  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  options.length;  i  <  len;  i++)  {  options[i]  =  options[i];  }	      if(stopAtNonOption)    {    tokens    =    new    String[tokenLength];    for(int    i    =    0,    len    =    arguments.length;    i    <    len;    i++)    {    options[i]    =    options[i];    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
54	[BUG]  [BUGGY]  tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  i++)  {  options[i]  =  options[0];  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  i++)  {  options[i]  =  options[0];  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  i++)  {  options[i]  =  options[0];  }	      if(stopAtNonOption)    {    tokens    =    new    String[tokenLength];    for(int    i    =    0,    len    =    arguments.length;    i    <    len;    i++)    {    options[i]    =    options[i];    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
55	[BUG]  [BUGGY]  iter.remove();  tokens.add(arguments[tokenLength  -  1]);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  iter.remove();  tokens.add(arguments[tokenLength  -  1]);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	iter.remove();  tokens.add(arguments[tokenLength  -  1]);	      iter.remove();    tokens.add(arguments[tokenLength]);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
56	[BUG]  [BUGGY]  tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  options.length;  i  <  len;  i++)  {  tokens[i]  =  null;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  options.length;  i  <  len;  i++)  {  tokens[i]  =  null;  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  options.length;  i  <  len;  i++)  {  tokens[i]  =  null;  }	      if(stopAtNonOption)    {    tokens    =    new    String[tokenLength];    for(int    i    =    0,    len    =    arguments.length;    i    <    len;    i++)    {    tokens[i]    =    null;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
57	[BUG]  [BUGGY]  Option  options  =  options.getOptions();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  Option  options  =  options.getOptions();  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	Option  options  =  options.getOptions();	  if(stopAtNonOption)    {    for(Iterator    iter    =    options.iterator();    iter.hasNext();)    {    tokens.add(iter.next());    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
58	[BUG]  [BUGGY]  Option  options  =  options.getOption( "stopAtNonOption ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  Option  options  =  options.getOption( "stopAtNonOption ");  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	Option  options  =  options.getOption( "stopAtNonOption ");	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
59	[BUG]  [BUGGY]  Option  options  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  Option  options  =  options.getOption(token);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	Option  options  =  options.getOption(token);	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
60	[BUG]  [BUGGY]  iter.remove(arguments[0]);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  iter.remove(arguments[0]);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	iter.remove(arguments[0]);	      iter.remove();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
61	[BUG]  [BUGGY]  iter.clear();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  iter.clear();  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	iter.clear();	      iter.remove();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
62	[BUG]  [BUGGY]  return  options.toArray(arguments);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  return  options.toArray(arguments);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	return  options.toArray(arguments);	  return    options.toArray(new    String[tokenLength]);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
63	[BUG]  [BUGGY]  if(stopAtNonOption)  {  return  options.toArray(new  String[tokenLength]);  }  else  {  tokens.add(arguments[0]);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  if(stopAtNonOption)  {  return  options.toArray(new  String[tokenLength]);  }  else  {  tokens.add(arguments[0]);  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	if(stopAtNonOption)  {  return  options.toArray(new  String[tokenLength]);  }  else  {  tokens.add(arguments[0]);  }	  return    options.toArray(new    String[tokenLength]);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
64	[BUG]  [BUGGY]  return(tokenLength  ==  0)?  options.get(tokenLength  -  1):  null;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  return(tokenLength  ==  0)?  options.get(tokenLength  -  1):  null;  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	return(tokenLength  ==  0)?  options.get(tokenLength  -  1):  null;	  return(tokenLength    >    0)?    options.get(tokenLength    -    1):    null;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
65	[BUG]  [BUGGY]  return(tokenLength  >  2)?  options.get(tokenLength  -  1):  null;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  return(tokenLength  >  2)?  options.get(tokenLength  -  1):  null;  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	return(tokenLength  >  2)?  options.get(tokenLength  -  1):  null;	  return(tokenLength    >    0)?    options.get(tokenLength    -    1):    null;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
66	[BUG]  [BUGGY]  return(tokenLength  >  0)?  options.get(tokenLength  -  1): "n ";  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  return(tokenLength  >  0)?  options.get(tokenLength  -  1): "n ";  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	return(tokenLength  >  0)?  options.get(tokenLength  -  1): "n ";	  return(tokenLength    >    0)?    options.get(tokenLength    -    1):   "   ";    	non-compiled	[CE]  <identifier>  expected	19	None	replace
67	[BUG]  [BUGGY]  tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  argument.length;  i  <  len;  i++)  {  options[i]  =  options[i];  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  argument.length;  i  <  len;  i++)  {  options[i]  =  options[i];  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  argument.length;  i  <  len;  i++)  {  options[i]  =  options[i];  }	      if(stopAtNonOption)    {    tokens    =    new    String[tokenLength];    for(int    i    =    0,    len    =    arguments.length;    i    <    len;    i++)    {    options[i]    =    options[i];    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
68	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  return  options.toArray(new  String[tokenLength]);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  if(!stopAtNonOption)  {  return  options.toArray(new  String[tokenLength]);  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	if(!stopAtNonOption)  {  return  options.toArray(new  String[tokenLength]);  }	  return    options.toArray(new    String[tokenLength]);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
69	[BUG]  [BUGGY]  return  options.toArray(arguments[tokenLength]);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  return  options.toArray(arguments[tokenLength]);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	return  options.toArray(arguments[tokenLength]);	  return    options.toArray(new    String[tokenLength]);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
70	[BUG]  [BUGGY]  if(tokenLength  ==  2)  {  return  options.toArray(new  String[tokenLength]);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  if(tokenLength  ==  2)  {  return  options.toArray(new  String[tokenLength]);  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	if(tokenLength  ==  2)  {  return  options.toArray(new  String[tokenLength]);  }	  return    options.toArray(new    String[tokenLength]);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
71	[BUG]  [BUGGY]  Iterator  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  Iterator  iter  =  options.iterator();  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	Iterator  iter  =  options.iterator();	  if(stopAtNonOption)    {    for(Iterator    iter    =    options.iterator();    iter.hasNext();)    {    tokens.add(iter.next());    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
72	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  Iterator  <  String>  iter  =  options.iterator();  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	Iterator  <  String>  iter  =  options.iterator();	  if(stopAtNonOption)    {    for(Iterator    iter    =    arguments.iterator();    iter.hasNext();)    {    tokens.add(iter.next());    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
73	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokenLength)+  1;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  Option  currentOption  =  options.getOption(tokenLength)+  1;  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	Option  currentOption  =  options.getOption(tokenLength)+  1;	  if(stopAtNonOption)    {    for(Iterator    iter    =    arguments.iterator();    iter.hasNext();)    {    tokens.add(iter.next());    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
74	[BUG]  [BUGGY]  System.arraycopy(arguments,  0,  tokens,  0,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  System.arraycopy(arguments,  0,  tokens,  0,  stopAtNonOption);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	System.arraycopy(arguments,  0,  tokens,  0,  stopAtNonOption);	      if(stopAtNonOption)    {    tokens    =    new    String[tokenLength];    System.arraycopy(arguments,    0,    tokens,    0,    tokenLength);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
75	[BUG]  [BUGGY]  tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  i++)  {  tos[i]  =  null;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  i++)  {  tos[i]  =  null;  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  i++)  {  tos[i]  =  null;  }	      if(stopAtNonOption)    {    tokens    =    new    String[tokenLength];    for(int    i    =    0,    len    =    arguments.length;    i    <    len;    i++)    {    tokens[i]    =    null;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
76	[BUG]  [BUGGY]  Option  <?>  currentOption  =  options.get(token);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  Option  <?>  currentOption  =  options.get(token);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	Option  <?>  currentOption  =  options.get(token);	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
77	[BUG]  [BUGGY]  Option  <?>  currentOption  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  Option  <?>  currentOption  =  options.getOption(token);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	Option  <?>  currentOption  =  options.getOption(token);	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
78	[BUG]  [BUGGY]  tokens.add(arguments[0].trim());  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  tokens.add(arguments[0].trim());  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	tokens.add(arguments[0].trim());	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
79	[BUG]  [BUGGY]  tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  i++)  {  tokens[i]  =  option[i];  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  i++)  {  tokens[i]  =  option[i];  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  i++)  {  tokens[i]  =  option[i];  }	      if(stopAtNonOption)    {    tokens    =    new    String[tokenLength];    for(int    i    =    0,    len    =    arguments.length;    i    <    len;    i++)    {    tokens[i]    =    options[i];    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
80	[BUG]  [BUGGY]  tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  argument.length;  i  <  len;  i++)  {  tokens[i]  =  options[i];  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  argument.length;  i  <  len;  i++)  {  tokens[i]  =  options[i];  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	tokens  =  new  String[tokenLength];  for(int  i  =  0,  len  =  argument.length;  i  <  len;  i++)  {  tokens[i]  =  options[i];  }	      if(stopAtNonOption)    {    tokens    =    new    String[tokenLength];    for(int    i    =    0,    len    =    arguments.length;    i    <    len;    i++)    {    tokens[i]    =    options[i];    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
81	[BUG]  [BUGGY]  iter.write(arguments[0]);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  iter.write(arguments[0]);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	iter.write(arguments[0]);	      iter.remove();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
82	[BUG]  [BUGGY]  tokens.add(tokenLength);  currentOption  =  options.getOption(tokenLength);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {  process(token);  }  else  {  tokens.add(token);  }  }  gobble(iter);    [BUGGY]  tokens.add(tokenLength);  currentOption  =  options.getOption(tokenLength);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	161	161	1	replace	tokens.add(tokenLength);  currentOption  =  options.getOption(tokenLength);	      tokens.add(token);    currentOption    =    options.getOption(tokenLength);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
