bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Option  option  =  options.getOption(ch);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);    [BUGGY]  Option  option  =  options.getOption(ch);  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	291	291	1	replace	Option  option  =  options.getOption(ch);	      if(stopAtNonOption)    {    if(options.hasOption(ch))    {    tokens.add(   "-   "    +    ch);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
2	[BUG]  [BUGGY]  if(stopAtNonOption)  {  currentOption  =  options.getOption(token);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);    [BUGGY]  if(stopAtNonOption)  {  currentOption  =  options.getOption(token);  }  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	291	291	1	replace	if(stopAtNonOption)  {  currentOption  =  options.getOption(token);  }	  currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
3	[BUG]  [BUGGY]  if(stopAtNonOption)  {  currentOption  =  options.getOption(token);  }  else  {  tokens.add( "- "  +  ch);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);    [BUGGY]  if(stopAtNonOption)  {  currentOption  =  options.getOption(token);  }  else  {  tokens.add( "- "  +  ch);  }  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	291	291	1	replace	if(stopAtNonOption)  {  currentOption  =  options.getOption(token);  }  else  {  tokens.add( "- "  +  ch);  }	  currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
4	[BUG]  [BUGGY]  if(stopAtNonOption)  {  currentOption  =  options.getOption(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);    [BUGGY]  if(stopAtNonOption)  {  currentOption  =  options.getOption(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	291	291	1	replace	if(stopAtNonOption)  {  currentOption  =  options.getOption(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
5	[BUG]  [BUGGY]  options.add( "- "  +  token);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);    [BUGGY]  options.add( "- "  +  token);  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	291	291	1	replace	options.add( "- "  +  token);	      options.add(   "-   "    +    ch);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
6	[BUG]  [BUGGY]  options.add( "- "  +  i);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);    [BUGGY]  options.add( "- "  +  i);  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	291	291	1	replace	options.add( "- "  +  i);	      options.add(   "-   "    +    ch);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
7	[BUG]  [BUGGY]  Option  options  =  options.getOption(ch,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);    [BUGGY]  Option  options  =  options.getOption(ch,  stopAtNonOption);  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	291	291	1	replace	Option  options  =  options.getOption(ch,  stopAtNonOption);	      Option    options    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
8	[BUG]  [BUGGY]  Option  options  =  options.getOption(ch  +  1);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);    [BUGGY]  Option  options  =  options.getOption(ch  +  1);  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	291	291	1	replace	Option  options  =  options.getOption(ch  +  1);	      Option    options    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
9	[BUG]  [BUGGY]  Option  options  =  options.getOption(ch  -  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);    [BUGGY]  Option  options  =  options.getOption(ch  -  1);  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	291	291	1	replace	Option  options  =  options.getOption(ch  -  1);	      Option    options    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
10	[BUG]  [BUGGY]  tokens.add( "- "  +  i);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);    [BUGGY]  tokens.add( "- "  +  i);  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	291	291	1	replace	tokens.add( "- "  +  i);	      tokens.add(   "-   "    +    ch);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
11	[BUG]  [BUGGY]  tokens.add( "- "  +  ch  + ": ");  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);    [BUGGY]  tokens.add( "- "  +  ch  + ": ");  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	291	291	1	replace	tokens.add( "- "  +  ch  + ": ");	      tokens.add(   "-   "    +    ch);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
12	[BUG]  [BUGGY]  tokens.add( "- "  +  ch  + ";n ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);    [BUGGY]  tokens.add( "- "  +  ch  + ";n ");  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	291	291	1	replace	tokens.add( "- "  +  ch  + ";n ");	      tokens.add(   "-   "    +    ch);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
13	[BUG]  [BUGGY]  currentOption  =  options.getOption(i  +  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);    [BUGGY]  currentOption  =  options.getOption(i  +  1);  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	291	291	1	replace	currentOption  =  options.getOption(i  +  1);	  currentOption    =    options.getOption(ch    +    1);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
14	[BUG]  [BUGGY]  tors.add( "- "  +  ch);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);    [BUGGY]  tors.add( "- "  +  ch);  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	291	291	1	replace	tors.add( "- "  +  ch);	      if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
15	[BUG]  [BUGGY]  tokens.add( "- "  +  i);  break;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);    [BUGGY]  tokens.add( "- "  +  i);  break;  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	291	291	1	replace	tokens.add( "- "  +  i);  break;	      tokens.add(   "-   "    +    ch);    break;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
16	[BUG]  [BUGGY]  tokens.add( "- "  +  ch  +  1);  break;  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);    [BUGGY]  tokens.add( "- "  +  ch  +  1);  break;  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	291	291	1	replace	tokens.add( "- "  +  ch  +  1);  break;	      tokens.add(   "-   "    +    ch);    break;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
17	[BUG]  [BUGGY]  tokens.add( "- "  +  ch  + ";n ");  break;  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);    [BUGGY]  tokens.add( "- "  +  ch  + ";n ");  break;  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	291	291	1	replace	tokens.add( "- "  +  ch  + ";n ");  break;	      tokens.add(   "-   "    +    ch);    break;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
18	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);    [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  }  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	291	291	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  }	      Option    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
19	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  }  else  {  tokens.add( "- "  +  ch);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);    [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  }  else  {  tokens.add( "- "  +  ch);  }  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	291	291	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  }  else  {  tokens.add( "- "  +  ch);  }	      Option    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
20	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(ch,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);    [BUGGY]  Option  currentOption  =  options.getOption(ch,  stopAtNonOption);  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	291	291	1	replace	Option  currentOption  =  options.getOption(ch,  stopAtNonOption);	      Option    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
21	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1));  break;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);    [BUGGY]  tokens.add(token.substring(i  +  1));  break;  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	291	291	1	replace	tokens.add(token.substring(i  +  1));  break;	      if(stopAtNonOption)    {    tokens.add(token.substring(i    +    1));    break;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
22	[BUG]  [BUGGY]  currentOption  =  options.getOption(i  -  1);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);    [BUGGY]  currentOption  =  options.getOption(i  -  1);  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	291	291	1	replace	currentOption  =  options.getOption(i  -  1);	  currentOption    =    options.getOption(ch    -    1);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
23	[BUG]  [BUGGY]  currentOption  =  options.getOption(ch  -  1  +  1);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);    [BUGGY]  currentOption  =  options.getOption(ch  -  1  +  1);  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	291	291	1	replace	currentOption  =  options.getOption(ch  -  1  +  1);	  currentOption    =    options.getOption(ch    -    1);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
24	[BUG]  [BUGGY]  currentOption  =  options.getOption(ch,  token);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);    [BUGGY]  currentOption  =  options.getOption(ch,  token);  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	291	291	1	replace	currentOption  =  options.getOption(ch,  token);	  currentOption    =    options.getOption(ch,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
25	[BUG]  [BUGGY]  currentOption  =  options.getOption(ch,  eatTheRest);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);    [BUGGY]  currentOption  =  options.getOption(ch,  eatTheRest);  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	291	291	1	replace	currentOption  =  options.getOption(ch,  eatTheRest);	  currentOption    =    options.getOption(ch,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
26	[BUG]  [BUGGY]  if(stopAtNonOption)  {  currentOption  =  options.getOption(ch,  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);    [BUGGY]  if(stopAtNonOption)  {  currentOption  =  options.getOption(ch,  stopAtNonOption);  }  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	291	291	1	replace	if(stopAtNonOption)  {  currentOption  =  options.getOption(ch,  stopAtNonOption);  }	  currentOption    =    options.getOption(ch,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
27	[BUG]  [BUGGY]  currentOption  =  options.getOption(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);    [BUGGY]  currentOption  =  options.getOption(token,  stopAtNonOption);  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	291	291	1	replace	currentOption  =  options.getOption(token,  stopAtNonOption);	  currentOption    =    options.getOption(ch,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
28	[BUG]  [BUGGY]  currentOption  =  options.getOption(ch,  i);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);    [BUGGY]  currentOption  =  options.getOption(ch,  i);  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	291	291	1	replace	currentOption  =  options.getOption(ch,  i);	  currentOption    =    options.getOption(ch,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
29	[BUG]  [BUGGY]  tokens.add( "-n "  +  ch);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);    [BUGGY]  tokens.add( "-n "  +  ch);  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	291	291	1	replace	tokens.add( "-n "  +  ch);	      tokens.add(   "-   "    +    ch);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
30	[BUG]  [BUGGY]  tokens.add( "- "  +  0);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);    [BUGGY]  tokens.add( "- "  +  0);  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	291	291	1	replace	tokens.add( "- "  +  0);	      tokens.add(   "-   "    +    ch);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
31	[BUG]  [BUGGY]  currentOption  =  options.getOption(ch  -  1  -  1);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);    [BUGGY]  currentOption  =  options.getOption(ch  -  1  -  1);  [BUGGY]      if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	291	291	1	replace	currentOption  =  options.getOption(ch  -  1  -  1);	  currentOption    =    options.getOption(ch    -    1);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
32	[BUG]  [BUGGY]  options.add( "-- "  +  ch);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);    [BUGGY]  options.add( "-- "  +  ch);  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	291	291	1	replace	options.add( "-- "  +  ch);	      options.add(   "-   "    +    ch);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
33	[BUG]  [BUGGY]  tokens.add( "- "  +  ch,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);    [BUGGY]  tokens.add( "- "  +  ch,  stopAtNonOption);  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	291	291	1	replace	tokens.add( "- "  +  ch,  stopAtNonOption);	      tokens.add(   "-   "    +    ch);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
34	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  if(!stopAtNonOption)  {  tokens.add( "- "  +  ch);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);    [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  if(!stopAtNonOption)  {  tokens.add( "- "  +  ch);  }  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	291	291	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  if(!stopAtNonOption)  {  tokens.add( "- "  +  ch);  }	      Option    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
35	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  if(currentOption!=  null)  {  tokens.add( "- "  +  ch);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);    [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  if(currentOption!=  null)  {  tokens.add( "- "  +  ch);  }  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	291	291	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  if(currentOption!=  null)  {  tokens.add( "- "  +  ch);  }	      Option    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
36	[BUG]  [BUGGY]  [Delete]  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);    [BUGGY]  [Delete]  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	291	291	1	replace	[Delete]	      if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
