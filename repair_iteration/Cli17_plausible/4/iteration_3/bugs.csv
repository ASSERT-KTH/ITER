bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  PosixParser  currentOption  =(PosixParser)this.tokens.get(value  +  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  PosixParser  currentOption  =(PosixParser)this.tokens.get(value  +  1);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	PosixParser  currentOption  =(PosixParser)this.tokens.get(value  +  1);	  PosixParser    currentOption    =(PosixParser)this.tokens.get(value);    	non-compiled	[CE]  	20	None	replace
2	[BUG]  [BUGGY]  PosixParser  currentOption  =(PosixParser)this.tokens.get(value  -  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  PosixParser  currentOption  =(PosixParser)this.tokens.get(value  -  1);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	PosixParser  currentOption  =(PosixParser)this.tokens.get(value  -  1);	  PosixParser    currentOption    =(PosixParser)this.tokens.get(value);    	non-compiled	[CE]  	20	None	replace
3	[BUG]  [BUGGY]  PosixParser  currentOption  =(PosixParser)this.tokens.get(0);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  PosixParser  currentOption  =(PosixParser)this.tokens.get(0);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	PosixParser  currentOption  =(PosixParser)this.tokens.get(0);	  PosixParser    currentOption    =(PosixParser)this.tokens.get(value);    	non-compiled	[CE]  	20	None	replace
4	[BUG]  [BUGGY]  options.setOption(value,  options.getOption(value));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  options.setOption(value,  options.getOption(value));  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	options.setOption(value,  options.getOption(value));	  if(options.getOption(value)!=    null)    {    Options    currentOption    =    options.getOption(value);    }    	non-compiled	[CE]  	51	None	replace
5	[BUG]  [BUGGY]  options.put(value,  currentOption);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  options.put(value,  currentOption);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	options.put(value,  currentOption);	  if(options.getOption(value)!=    null)    {    Options    currentOption    =    options.getOption(value);    }    	non-compiled	[CE]  	51	None	replace
6	[BUG]  [BUGGY]  Option  currentOption  =  option.getOption(value  /  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Option  currentOption  =  option.getOption(value  /  1);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  option.getOption(value  /  1);	  Option    currentOption    =    option.getOption(value    +    1);    	non-compiled	[CE]  	14	None	replace
7	[BUG]  [BUGGY]  Option  currentOption  =  option.getOption(value  -  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Option  currentOption  =  option.getOption(value  -  1);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  option.getOption(value  -  1);	  Option    currentOption    =    option.getOption(value    +    1);    	non-compiled	[CE]  	14	None	replace
8	[BUG]  [BUGGY]  Options  options  =  options.getOption(value);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Options  options  =  options.getOption(value);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Options  options  =  options.getOption(value);	  if(options!=    null)    {    Option    currentOption    =    options.getOption(value);    }    	non-compiled	[CE]  	10	None	replace
9	[BUG]  [BUGGY]  options.setOption(currentOption,  value);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  options.setOption(currentOption,  value);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	options.setOption(currentOption,  value);	  if(options!=    null)    {    Option    currentOption    =    options.getOption(value);    }    	non-compiled	[CE]  	10	None	replace
10	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  Option  currentOption  =  options.stopAtNonOption(value);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  if(!stopAtNonOption)  {  Option  currentOption  =  options.stopAtNonOption(value);  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	if(!stopAtNonOption)  {  Option  currentOption  =  options.stopAtNonOption(value);  }	  Option    currentOption    =    options.stopAtNonOption(value);    	non-compiled	[CE]  	29	None	replace
11	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.stopAtNonOption(value);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.stopAtNonOption(value);  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.stopAtNonOption(value);  }	  Option    currentOption    =    options.stopAtNonOption(value);    	non-compiled	[CE]  	29	None	replace
12	[BUG]  [BUGGY]  Option  currentOption  =  options.stopAtNonOption(value,  true);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Option  currentOption  =  options.stopAtNonOption(value,  true);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  options.stopAtNonOption(value,  true);	  Option    currentOption    =    options.stopAtNonOption(value);    	non-compiled	[CE]  	29	None	replace
13	[BUG]  [BUGGY]  currentOption  =  new  Option();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  currentOption  =  new  Option();  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	currentOption  =  new  Option();	  currentOption    =    null;    	non-compiled	[CE]  	4	None	replace
14	[BUG]  [BUGGY]  currentOption  =  options;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  currentOption  =  options;  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	currentOption  =  options;	  currentOption    =    null;    	non-compiled	[CE]  	4	None	replace
15	[BUG]  [BUGGY]  currentOption  =(Option)null;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  currentOption  =(Option)null;  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	currentOption  =(Option)null;	  currentOption    =    null;    	non-compiled	[CE]  	4	None	replace
16	[BUG]  [BUGGY]  Options  currentOption  =  options.getOption(value);  if(currentOption!=  null)  {  tokens.add(value);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Options  currentOption  =  options.getOption(value);  if(currentOption!=  null)  {  tokens.add(value);  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Options  currentOption  =  options.getOption(value);  if(currentOption!=  null)  {  tokens.add(value);  }	  if(options.getOption(value)!=    null)    {    Options    currentOption    =    options.getOption(value);    if(currentOption!=    null)    {    tokens.add(value);    }    	non-compiled	[CE]  	52	None	replace
17	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(value);  if(currentOption!=  null)  {  tokens.add(value);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Option  currentOption  =  options.getOption(value);  if(currentOption!=  null)  {  tokens.add(value);  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  options.getOption(value);  if(currentOption!=  null)  {  tokens.add(value);  }	  if(options.getOption(value)!=    null)    {    Options    currentOption    =    options.getOption(value);    if(currentOption!=    null)    {    tokens.add(value);    }    	non-compiled	[CE]  	52	None	replace
18	[BUG]  [BUGGY]  options.put(value,  options);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  options.put(value,  options);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	options.put(value,  options);	  if(options!=    null)    {    Options    currentOption    =    options.getOption(value);    }    	non-compiled	[CE]  	26	None	replace
19	[BUG]  [BUGGY]  while(!stopAtNonOption  &&  value.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  while(!stopAtNonOption  &&  value.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	while(!stopAtNonOption  &&  value.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  While(!stopAtNonOption    &&    value.length()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	33	None	replace
20	[BUG]  [BUGGY]  While(!stopAtNonOption  &&  value.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  While(!stopAtNonOption  &&  value.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	While(!stopAtNonOption  &&  value.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  While(!stopAtNonOption    &&    value.length()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	33	None	replace
21	[BUG]  [BUGGY]  tokens.clear();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  tokens.clear();  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	tokens.clear();	  tokens.add(value);    	non-compiled	[CE]  	7	None	replace
22	[BUG]  [BUGGY]  tokens.add( "n ");  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  tokens.add( "n ");  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	tokens.add( "n ");	  tokens.add(value);    	non-compiled	[CE]  	7	None	replace
23	[BUG]  [BUGGY]  tokens.add(currentOption);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  tokens.add(currentOption);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	tokens.add(currentOption);	  tokens.add(value);    	non-compiled	[CE]  	7	None	replace
24	[BUG]  [BUGGY]  safeTest(this.stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  safeTest(this.stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	safeTest(this.stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  safeTest(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	44	None	replace
25	[BUG]  [BUGGY]  safeTest(value)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  safeTest(value)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	safeTest(value)  {  throw  new  IllegalArgumentException( " ");  }	  safeTest(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	44	None	replace
26	[BUG]  [BUGGY]  PosixParser  currentOption  =(PosixParser)tokens.get(value  /  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  PosixParser  currentOption  =(PosixParser)tokens.get(value  /  1);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	PosixParser  currentOption  =(PosixParser)tokens.get(value  /  1);	  PosixParser    currentOption    =(PosixParser)tokens.get(value    +    1);    	non-compiled	[CE]  	21	None	replace
27	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(value,  value  +  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Option  currentOption  =  options.getOption(value,  value  +  1);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  options.getOption(value,  value  +  1);	  Option    currentOption    =    options.getOption(value,    value);    	non-compiled	[CE]  	12	None	replace
28	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(value,  value  -  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Option  currentOption  =  options.getOption(value,  value  -  1);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  options.getOption(value,  value  -  1);	  Option    currentOption    =    options.getOption(value,    value);    	non-compiled	[CE]  	12	None	replace
29	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(value,  value.toLowerCase());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Option  currentOption  =  options.getOption(value,  value.toLowerCase());  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  options.getOption(value,  value.toLowerCase());	  Option    currentOption    =    options.getOption(value,    value);    	non-compiled	[CE]  	12	None	replace
30	[BUG]  [BUGGY]  While(!stopAtNonOption  &&  value  ==  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  While(!stopAtNonOption  &&  value  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	While(!stopAtNonOption  &&  value  ==  null)  {  throw  new  IllegalStateException( " ");  }	  While(!stopAtNonOption    &&    value!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	43	None	replace
31	[BUG]  [BUGGY]  while(!stopAtNonOption  &&  value!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  while(!stopAtNonOption  &&  value!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	while(!stopAtNonOption  &&  value!=  null)  {  throw  new  IllegalStateException( " ");  }	  While(!stopAtNonOption    &&    value!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	43	None	replace
32	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(value  -  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Option  currentOption  =  options.getOption(value  -  1);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  options.getOption(value  -  1);	  Option    currentOption    =    options.getOption(value    +    1);    	non-compiled	[CE]  	11	None	replace
33	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(value  /  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Option  currentOption  =  options.getOption(value  /  1);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  options.getOption(value  /  1);	  Option    currentOption    =    options.getOption(value    +    1);    	non-compiled	[CE]  	11	None	replace
34	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(value,  false);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Option  currentOption  =  options.getOption(value,  false);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  options.getOption(value,  false);	  Option    currentOption    =    options.getOption(value,    true);    	non-compiled	[CE]  	36	None	replace
35	[BUG]  [BUGGY]  Options  currentOption  =  options.getOption(value,  false);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Options  currentOption  =  options.getOption(value,  false);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Options  currentOption  =  options.getOption(value,  false);	  Option    currentOption    =    options.getOption(value,    true);    	non-compiled	[CE]  	36	None	replace
36	[BUG]  [BUGGY]  options.add(options.getOption(value));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  options.add(options.getOption(value));  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	options.add(options.getOption(value));	  if(options!=    null)    {    Options    currentOption    =    options.getOption(value);    if(currentOption!=    null)    {    tokens.add(value);    }    	non-compiled	[CE]  	40	None	replace
37	[BUG]  [BUGGY]  tokens.add(value);  currentOption  =  new  Option();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  tokens.add(value);  currentOption  =  new  Option();  [BUGGY]      {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	tokens.add(value);  currentOption  =  new  Option();	  tokens.add(value);    currentOption    =    null;    	non-compiled	[CE]  	18	None	replace
38	[BUG]  [BUGGY]  tokens.clear();  currentOption  =  null;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  tokens.clear();  currentOption  =  null;  [BUGGY]      {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	tokens.clear();  currentOption  =  null;	  tokens.add(value);    currentOption    =    null;    	non-compiled	[CE]  	18	None	replace
39	[BUG]  [BUGGY]  safeMultiply(value,  getValue())  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  safeMultiply(value,  getValue())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	safeMultiply(value,  getValue())  {  throw  new  IllegalStateException( " ");  }	  safeMultiply(getValue(),    value)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	58	None	replace
40	[BUG]  [BUGGY]  safeAdd(getValue(),  value)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  safeAdd(getValue(),  value)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	safeAdd(getValue(),  value)  {  throw  new  IllegalStateException( " ");  }	  safeMultiply(getValue(),    value)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	58	None	replace
41	[BUG]  [BUGGY]  if(value!=  null  &&  currentOption.hasValues())  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  if(value!=  null  &&  currentOption.hasValues())  {  [BUGGY]      {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	if(value!=  null  &&  currentOption.hasValues())  {	  if(currentOption!=    null    &&    currentOption.hasValues())    {    	non-compiled	[CE]  	53	None	replace
42	[BUG]  [BUGGY]  if(currentOption!=  null  ||  currentOption.hasValues())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  if(currentOption!=  null  ||  currentOption.hasValues())  {  [BUGGY]      {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	if(currentOption!=  null  ||  currentOption.hasValues())  {	  if(currentOption!=    null    &&    currentOption.hasValues())    {    	non-compiled	[CE]  	53	None	replace
43	[BUG]  [BUGGY]  if(value!=  null  ||  currentOption.hasValues())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  if(value!=  null  ||  currentOption.hasValues())  {  [BUGGY]      {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	if(value!=  null  ||  currentOption.hasValues())  {	  if(currentOption!=    null    &&    currentOption.hasValues())    {    	non-compiled	[CE]  	53	None	replace
44	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  currentOption  =  null;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  ||  stopAtNonOption)  {  currentOption  =  null;  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	||  stopAtNonOption)  {  currentOption  =  null;  }	  if(stopAtNonOption)    {    currentOption    =    null;    }    	non-compiled	[CE]  	6	None	replace
45	[BUG]  [BUGGY]  CurrentOption  <?>  currentOption  =  null;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  CurrentOption  <?>  currentOption  =  null;  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	CurrentOption  <?>  currentOption  =  null;	  if(stopAtNonOption)    {    currentOption    =    null;    }    	non-compiled	[CE]  	6	None	replace
46	[BUG]  [BUGGY]  While(!eatTheRest)  {  throw  new  IllegalArgumentException( " ".equals(value));  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  While(!eatTheRest)  {  throw  new  IllegalArgumentException( " ".equals(value));  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	While(!eatTheRest)  {  throw  new  IllegalArgumentException( " ".equals(value));  }	  While(!stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ".equals(value));    }    	non-compiled	[CE]  	55	None	replace
47	[BUG]  [BUGGY]  While(!stopAtNonOption)  {  throw  new  IllegalArgumentException( " ").equals(value);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  While(!stopAtNonOption)  {  throw  new  IllegalArgumentException( " ").equals(value);  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	While(!stopAtNonOption)  {  throw  new  IllegalArgumentException( " ").equals(value);  }	  While(!stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ".equals(value));    }    	non-compiled	[CE]  	55	None	replace
48	[BUG]  [BUGGY]  While(!stopAtNonOption)  {  throw  new  IllegalArgumentException( " "  +  value);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  While(!stopAtNonOption)  {  throw  new  IllegalArgumentException( " "  +  value);  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	While(!stopAtNonOption)  {  throw  new  IllegalArgumentException( " "  +  value);  }	  While(!stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ".equals(value));    }    	non-compiled	[CE]  	55	None	replace
49	[BUG]  [BUGGY]  PosixParser  currentOption  =(PosixParser)this.options.get(key,  value);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  PosixParser  currentOption  =(PosixParser)this.options.get(key,  value);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	PosixParser  currentOption  =(PosixParser)this.options.get(key,  value);	  PosixParser    currentOption    =(PosixParser)this.options.get(key);    	non-compiled	[CE]  	34	None	replace
50	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(value,  tokens);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Option  currentOption  =  options.getOption(value,  tokens);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  options.getOption(value,  tokens);	  Option    currentOption    =    options.getOption(value,    null);    	non-compiled	[CE]  	57	None	replace
51	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(value,  this);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Option  currentOption  =  options.getOption(value,  this);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  options.getOption(value,  this);	  Option    currentOption    =    options.getOption(value,    null);    	non-compiled	[CE]  	57	None	replace
52	[BUG]  [BUGGY]  PosixParser  currentOption  =(PosixParser)tokens.get(value  -  2);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  PosixParser  currentOption  =(PosixParser)tokens.get(value  -  2);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	PosixParser  currentOption  =(PosixParser)tokens.get(value  -  2);	  PosixParser    currentOption    =(PosixParser)tokens.get(value    -    1);    	non-compiled	[CE]  	50	None	replace
53	[BUG]  [BUGGY]  PosixParser  currentOption  =(PosixParser)values.get(value  -  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  PosixParser  currentOption  =(PosixParser)values.get(value  -  1);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	PosixParser  currentOption  =(PosixParser)values.get(value  -  1);	  PosixParser    currentOption    =(PosixParser)tokens.get(value    -    1);    	non-compiled	[CE]  	50	None	replace
54	[BUG]  [BUGGY]  ||  currentOption!=  null)  {  currentOption  =  null;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  ||  currentOption!=  null)  {  currentOption  =  null;  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	||  currentOption!=  null)  {  currentOption  =  null;  }	  if(stopAtNonOption    ||    currentOption!=    null)    {    currentOption    =    null;    }    	non-compiled	[CE]  	39	None	replace
55	[BUG]  [BUGGY]  safeTest(this.stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  safeTest(this.stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	safeTest(this.stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }	  safeTest(stopAtNonOption)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	42	None	replace
56	[BUG]  [BUGGY]  safeTest(value)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  safeTest(value)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	safeTest(value)  {  throw  new  IllegalStateException( " ");  }	  safeTest(stopAtNonOption)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	42	None	replace
57	[BUG]  [BUGGY]  While(!stopAtNonOption  &&  currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  While(!stopAtNonOption  &&  currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	While(!stopAtNonOption  &&  currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }	  While(!stopAtNonOption)    {    tokens.add(value);    currentOption    =    null;    }    	non-compiled	[CE]  	46	None	replace
58	[BUG]  [BUGGY]  while(!stopAtNonOption  &&  currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  while(!stopAtNonOption  &&  currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	while(!stopAtNonOption  &&  currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }	  While(!stopAtNonOption)    {    tokens.add(value);    currentOption    =    null;    }    	non-compiled	[CE]  	46	None	replace
59	[BUG]  [BUGGY]  While(!stopAtNonOption  &&  currentOption.hasArgs())  {  tokens.add(value);  currentOption  =  null;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  While(!stopAtNonOption  &&  currentOption.hasArgs())  {  tokens.add(value);  currentOption  =  null;  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	While(!stopAtNonOption  &&  currentOption.hasArgs())  {  tokens.add(value);  currentOption  =  null;  }	  While(!stopAtNonOption)    {    tokens.add(value);    currentOption    =    null;    }    	non-compiled	[CE]  	46	None	replace
60	[BUG]  [BUGGY]  while(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  while(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	while(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }	  While(stopAtNonOption)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	24	None	replace
61	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add(value);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  While(stopAtNonOption)  {  tokens.add(value);  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	While(stopAtNonOption)  {  tokens.add(value);  }	  While(stopAtNonOption)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	24	None	replace
62	[BUG]  [BUGGY]  PosixParser  currentOption  =(PosixParser)this.options.get(1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  PosixParser  currentOption  =(PosixParser)this.options.get(1);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	PosixParser  currentOption  =(PosixParser)this.options.get(1);	  PosixParser    currentOption    =(PosixParser)this.options.get(0);    	non-compiled	[CE]  	3	None	replace
63	[BUG]  [BUGGY]  ||  eatTheRest)  {  currentOption  =  null;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  ||  eatTheRest)  {  currentOption  =  null;  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	||  eatTheRest)  {  currentOption  =  null;  }	  ||!stopAtNonOption)    {    currentOption    =    null;    }    	non-compiled	[CE]  	5	None	replace
64	[BUG]  [BUGGY]  Option  currentOption  =  option.getOption(value,  false);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Option  currentOption  =  option.getOption(value,  false);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  option.getOption(value,  false);	  Option    currentOption    =    option.getOption(value,    true);    	non-compiled	[CE]  	13	None	replace
65	[BUG]  [BUGGY]  option  =  option.getOption(value,  false);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  option  =  option.getOption(value,  false);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	option  =  option.getOption(value,  false);	  Option    currentOption    =    option.getOption(value,    true);    	non-compiled	[CE]  	13	None	replace
66	[BUG]  [BUGGY]  while(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  while(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	while(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  While(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	32	None	replace
67	[BUG]  [BUGGY]  Option  currentOption  =  options.stopAtNon(value);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Option  currentOption  =  options.stopAtNon(value);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  options.stopAtNon(value);	  Option    currentOption    =    options.stopAtNonOption();    	non-compiled	[CE]  	30	None	replace
68	[BUG]  [BUGGY]  options.stopAtNonOption();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  options.stopAtNonOption();  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	options.stopAtNonOption();	  Option    currentOption    =    options.stopAtNonOption();    	non-compiled	[CE]  	30	None	replace
69	[BUG]  [BUGGY]  Option  currentOption  =  options.process(value,  tokens);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Option  currentOption  =  options.process(value,  tokens);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  options.process(value,  tokens);	  Option    currentOption    =    options.process(value);    	non-compiled	[CE]  	28	None	replace
70	[BUG]  [BUGGY]  Option  currentOption  =  options.process(value,  true);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Option  currentOption  =  options.process(value,  true);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  options.process(value,  true);	  Option    currentOption    =    options.process(value);    	non-compiled	[CE]  	28	None	replace
71	[BUG]  [BUGGY]  Option  currentOption  =  options.process(value,  value);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Option  currentOption  =  options.process(value,  value);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  options.process(value,  value);	  Option    currentOption    =    options.process(value);    	non-compiled	[CE]  	28	None	replace
72	[BUG]  [BUGGY]  While(!stopAtNonOption)  {  throw  new  IllegalStateException( " "  +  value);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  While(!stopAtNonOption)  {  throw  new  IllegalStateException( " "  +  value);  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	While(!stopAtNonOption)  {  throw  new  IllegalStateException( " "  +  value);  }	  While(!stopAtNonOption)    {    throw    new    IllegalStateException(   "   ".equals(value));    }    	non-compiled	[CE]  	59	None	replace
73	[BUG]  [BUGGY]  While(!stopAtNonOption)  {  throw  new  IllegalStateException( " ").equals(value);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  While(!stopAtNonOption)  {  throw  new  IllegalStateException( " ").equals(value);  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	While(!stopAtNonOption)  {  throw  new  IllegalStateException( " ").equals(value);  }	  While(!stopAtNonOption)    {    throw    new    IllegalStateException(   "   ".equals(value));    }    	non-compiled	[CE]  	59	None	replace
74	[BUG]  [BUGGY]  While(!eatTheRest)  {  throw  new  IllegalStateException( " ".equals(value));  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  While(!eatTheRest)  {  throw  new  IllegalStateException( " ".equals(value));  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	While(!eatTheRest)  {  throw  new  IllegalStateException( " ".equals(value));  }	  While(!stopAtNonOption)    {    throw    new    IllegalStateException(   "   ".equals(value));    }    	non-compiled	[CE]  	59	None	replace
75	[BUG]  [BUGGY]  PosixParser  currentOption  =(PosixParser)this.options.get(value  -  2);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  PosixParser  currentOption  =(PosixParser)this.options.get(value  -  2);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	PosixParser  currentOption  =(PosixParser)this.options.get(value  -  2);	  PosixParser    currentOption    =(PosixParser)this.options.get(value    -    1);    	non-compiled	[CE]  	2	None	replace
76	[BUG]  [BUGGY]  PosixParser  currentOption  =(PosixParser)this.options.get(value  -  1  +  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  PosixParser  currentOption  =(PosixParser)this.options.get(value  -  1  +  1);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	PosixParser  currentOption  =(PosixParser)this.options.get(value  -  1  +  1);	  PosixParser    currentOption    =(PosixParser)this.options.get(value    -    1);    	non-compiled	[CE]  	2	None	replace
77	[BUG]  [BUGGY]  While(!stopAtNonOption  &&  currentOption.hasArgs())  {  tokens.add(value);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  While(!stopAtNonOption  &&  currentOption.hasArgs())  {  tokens.add(value);  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	While(!stopAtNonOption  &&  currentOption.hasArgs())  {  tokens.add(value);  }	  While(!stopAtNonOption)    {    tokens.add(value);    }    	non-compiled	[CE]  	45	None	replace
78	[BUG]  [BUGGY]  While(!stopAtNonOption  &&  currentOption.hasArg())  {  tokens.add(value);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  While(!stopAtNonOption  &&  currentOption.hasArg())  {  tokens.add(value);  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	While(!stopAtNonOption  &&  currentOption.hasArg())  {  tokens.add(value);  }	  While(!stopAtNonOption)    {    tokens.add(value);    }    	non-compiled	[CE]  	45	None	replace
79	[BUG]  [BUGGY]  While(!eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  While(!eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	While(!eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }	  While(!stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	31	None	replace
80	[BUG]  [BUGGY]  While(!stopAtNonOption  &&  currentOption.hasArg())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  While(!stopAtNonOption  &&  currentOption.hasArg())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	While(!stopAtNonOption  &&  currentOption.hasArg())  {  throw  new  IllegalArgumentException( " ");  }	  While(!stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	31	None	replace
81	[BUG]  [BUGGY]  PosixParser  currentOption  =(PosixParser)this.options.get(value  /  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  PosixParser  currentOption  =(PosixParser)this.options.get(value  /  1);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	PosixParser  currentOption  =(PosixParser)this.options.get(value  /  1);	  PosixParser    currentOption    =(PosixParser)this.options.get(value    +    1);    	non-compiled	[CE]  	1	None	replace
82	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(value)/  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Option  currentOption  =  options.getOption(value)/  1;  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  options.getOption(value)/  1;	  Option    currentOption    =    options.getOption(value)+    1;    	non-compiled	[CE]  	37	None	replace
83	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(value)-  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Option  currentOption  =  options.getOption(value)-  1;  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  options.getOption(value)-  1;	  Option    currentOption    =    options.getOption(value)+    1;    	non-compiled	[CE]  	37	None	replace
84	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(value)+  2;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Option  currentOption  =  options.getOption(value)+  2;  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  options.getOption(value)+  2;	  Option    currentOption    =    options.getOption(value)+    1;    	non-compiled	[CE]  	37	None	replace
85	[BUG]  [BUGGY]  Option  currentOption  =  options.get(value  -  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Option  currentOption  =  options.get(value  -  1);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  options.get(value  -  1);	  Option    currentOption    =    options.get(value);    	non-compiled	[CE]  	8	None	replace
86	[BUG]  [BUGGY]  Option  currentOption  =  options.get(value  +  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Option  currentOption  =  options.get(value  +  1);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  options.get(value  +  1);	  Option    currentOption    =    options.get(value);    	non-compiled	[CE]  	8	None	replace
87	[BUG]  [BUGGY]  Option  currentOption  =  options.get(0);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Option  currentOption  =  options.get(0);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  options.get(0);	  Option    currentOption    =    options.get(value);    	non-compiled	[CE]  	8	None	replace
88	[BUG]  [BUGGY]  Option  currentOption  =  option.getOption(value,  tokens);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Option  currentOption  =  option.getOption(value,  tokens);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  option.getOption(value,  tokens);	  Option    currentOption    =    option.getOption(value,    null);    	non-compiled	[CE]  	35	None	replace
89	[BUG]  [BUGGY]  Option  currentOption  =  option.getOption(value,  value);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Option  currentOption  =  option.getOption(value,  value);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  option.getOption(value,  value);	  Option    currentOption    =    option.getOption(value,    null);    	non-compiled	[CE]  	35	None	replace
90	[BUG]  [BUGGY]  while(!stopAtNonOption  &&  value.length()  >  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  while(!stopAtNonOption  &&  value.length()  >  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	while(!stopAtNonOption  &&  value.length()  >  0)  {  throw  new  IllegalStateException( " ");  }	  While(!stopAtNonOption    &&    value.length()    >    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	25	None	replace
91	[BUG]  [BUGGY]  While(!stopAtNonOption  &&  value.length()  ==  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  While(!stopAtNonOption  &&  value.length()  ==  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	While(!stopAtNonOption  &&  value.length()  ==  0)  {  throw  new  IllegalStateException( " ");  }	  While(!stopAtNonOption    &&    value.length()    >    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	25	None	replace
92	[BUG]  [BUGGY]  Option  currentOption  =  option.process(value,  tokens);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Option  currentOption  =  option.process(value,  tokens);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  option.process(value,  tokens);	  Option    currentOption    =    option.process(value);    	non-compiled	[CE]  	56	None	replace
93	[BUG]  [BUGGY]  Option  currentOption  =  option.process(value,  value);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Option  currentOption  =  option.process(value,  value);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  option.process(value,  value);	  Option    currentOption    =    option.process(value);    	non-compiled	[CE]  	56	None	replace
94	[BUG]  [BUGGY]  PosixParser  currentOption  =(PosixParser)this.tokens.get(key);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  PosixParser  currentOption  =(PosixParser)this.tokens.get(key);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	PosixParser  currentOption  =(PosixParser)this.tokens.get(key);	  PosixParser    currentOption    =(PosixParser)tokens.get(key);    	non-compiled	[CE]  	22	None	replace
95	[BUG]  [BUGGY]  PosixParser  currentOption  =(PosixParser)this.keys.get(key);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  PosixParser  currentOption  =(PosixParser)this.keys.get(key);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	PosixParser  currentOption  =(PosixParser)this.keys.get(key);	  PosixParser    currentOption    =(PosixParser)tokens.get(key);    	non-compiled	[CE]  	22	None	replace
96	[BUG]  [BUGGY]  While(!eatTheRest)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  While(!eatTheRest)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	While(!eatTheRest)  {  throw  new  IllegalStateException( " ");  }	  While(!stopAtNonOption)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	23	None	replace
97	[BUG]  [BUGGY]  While(!stopAtNonOption  &&  currentOption.hasArg())  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  While(!stopAtNonOption  &&  currentOption.hasArg())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	While(!stopAtNonOption  &&  currentOption.hasArg())  {  throw  new  IllegalStateException( " ");  }	  While(!stopAtNonOption)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	23	None	replace
98	[BUG]  [BUGGY]  Thread.currentThread().interrupt(this);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Thread.currentThread().interrupt(this);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Thread.currentThread().interrupt(this);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  	54	None	replace
99	[BUG]  [BUGGY]  Thread.currentThread().join();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Thread.currentThread().join();  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Thread.currentThread().join();	  Thread.currentThread().interrupt();    	non-compiled	[CE]  	54	None	replace
100	[BUG]  [BUGGY]  Thread.currentThread().interrupt(this,  value);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Thread.currentThread().interrupt(this,  value);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Thread.currentThread().interrupt(this,  value);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  	54	None	replace
101	[BUG]  [BUGGY]  options.add(value);  currentOption  =  null;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  options.add(value);  currentOption  =  null;  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	options.add(value);  currentOption  =  null;	  if(stopAtNonOption)    {    tokens.add(value);    currentOption    =    null;    }    	non-compiled	[CE]  	38	None	replace
102	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.remove(value);  currentOption  =  null;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.remove(value);  currentOption  =  null;  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	if(stopAtNonOption)  {  tokens.remove(value);  currentOption  =  null;  }	  if(stopAtNonOption)    {    tokens.add(value);    currentOption    =    null;    }    	non-compiled	[CE]  	38	None	replace
103	[BUG]  [BUGGY]  while(!stopAtNonOption  &&  currentOption.hasArg())  {  tokens.add(value);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  while(!stopAtNonOption  &&  currentOption.hasArg())  {  tokens.add(value);  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	while(!stopAtNonOption  &&  currentOption.hasArg())  {  tokens.add(value);  }	  While(!stopAtNonOption)    {    tokens.add(value);    }    	non-compiled	[CE]  	45	None	replace
104	[BUG]  [BUGGY]  options.setValue(value,  options.getOption(value));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  options.setValue(value,  options.getOption(value));  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	options.setValue(value,  options.getOption(value));	  if(options!=    null)    {    Options    currentOption    =    options.getOption(value);    }    else    {    tokens.add(value);    }    	non-compiled	[CE]  	27	None	replace
105	[BUG]  [BUGGY]  options.setValue(value);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  options.setValue(value);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	options.setValue(value);	  if(options!=    null)    {    Options    currentOption    =    options.getOption(value);    }    else    {    tokens.add(value);    }    	non-compiled	[CE]  	27	None	replace
106	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(value);  tokens.add(currentOption);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Option  currentOption  =  options.getOption(value);  tokens.add(currentOption);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  options.getOption(value);  tokens.add(currentOption);	  if(options!=    null)    {    Options    currentOption    =    options.getOption(value);    }    else    {    tokens.add(value);    }    	non-compiled	[CE]  	27	None	replace
107	[BUG]  [BUGGY]  process(value);  currentOption  =  null;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  process(value);  currentOption  =  null;  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	process(value);  currentOption  =  null;	  if(stopAtNonOption)    {    tokens.add(value);    currentOption    =    null;    }    	non-compiled	[CE]  	38	None	replace
108	[BUG]  [BUGGY]  SafeTest(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  SafeTest(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	SafeTest(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }	  safeTest(stopAtNonOption)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	42	None	replace
109	[BUG]  [BUGGY]  safeToken(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  safeToken(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	safeToken(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }	  safeTest(stopAtNonOption)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	42	None	replace
110	[BUG]  [BUGGY]  Options  currentOption  =  options.stopAtNonOption(value);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Options  currentOption  =  options.stopAtNonOption(value);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Options  currentOption  =  options.stopAtNonOption(value);	  Option    currentOption    =    options.stopAtNonOption();    	non-compiled	[CE]  	30	None	replace
111	[BUG]  [BUGGY]  CurrentOption  currentOption  =  null;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  CurrentOption  currentOption  =  null;  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	CurrentOption  currentOption  =  null;	  if(stopAtNonOption)    {    currentOption    =    null;    }    	non-compiled	[CE]  	6	None	replace
112	[BUG]  [BUGGY]  pendingProcessing()  {  currentOption  =  null;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  pendingProcessing()  {  currentOption  =  null;  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	pendingProcessing()  {  currentOption  =  null;  }	  if(stopAtNonOption)    {    currentOption    =    null;    }    	non-compiled	[CE]  	6	None	replace
113	[BUG]  [BUGGY]  Option  currentOption  =  options.process(value,  null);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Option  currentOption  =  options.process(value,  null);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  options.process(value,  null);	  Option    currentOption    =    options.process(value);    	non-compiled	[CE]  	28	None	replace
114	[BUG]  [BUGGY]  currentOption  =  options.getOption(value);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  currentOption  =  options.getOption(value);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	currentOption  =  options.getOption(value);	  currentOption    =    null;    	non-compiled	[CE]  	4	None	replace
115	[BUG]  [BUGGY]  options.process(value,  currentOption);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  options.process(value,  currentOption);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	options.process(value,  currentOption);	  if(options.getOption(value)!=    null)    {    Options    currentOption    =    options.getOption(value);    }    	non-compiled	[CE]  	51	None	replace
116	[BUG]  [BUGGY]  tokens.add(ValueUtil.toString(value));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  tokens.add(ValueUtil.toString(value));  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	tokens.add(ValueUtil.toString(value));	  tokens.add(value);    	non-compiled	[CE]  	7	None	replace
117	[BUG]  [BUGGY]  PosixParser  currentOption  =(PosixParser)this.options.get(key  +  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  PosixParser  currentOption  =(PosixParser)this.options.get(key  +  1);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	PosixParser  currentOption  =(PosixParser)this.options.get(key  +  1);	  PosixParser    currentOption    =(PosixParser)this.options.get(key);    	non-compiled	[CE]  	34	None	replace
118	[BUG]  [BUGGY]  safeMultiply(value,  value)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  safeMultiply(value,  value)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	safeMultiply(value,  value)  {  throw  new  IllegalStateException( " ");  }	  safeMultiply(getValue(),    value)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	58	None	replace
119	[BUG]  [BUGGY]  if(value  ==  null  &&  currentOption.hasArgs())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  if(value  ==  null  &&  currentOption.hasArgs())  {  [BUGGY]      {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	if(value  ==  null  &&  currentOption.hasArgs())  {	  if(value!=    null    &&    currentOption.hasArgs())    {    	non-compiled	[CE]  	16	None	replace
120	[BUG]  [BUGGY]  if(stopAtNonOption  &&  currentOption!=  null)  {  currentOption  =  null;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  if(stopAtNonOption  &&  currentOption!=  null)  {  currentOption  =  null;  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	if(stopAtNonOption  &&  currentOption!=  null)  {  currentOption  =  null;  }	  if(stopAtNonOption    ||    currentOption!=    null)    {    currentOption    =    null;    }    	non-compiled	[CE]  	39	None	replace
121	[BUG]  [BUGGY]  if(stopAtNonOption  ||  currentOption  ==  null)  {  currentOption  =  null;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  if(stopAtNonOption  ||  currentOption  ==  null)  {  currentOption  =  null;  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	if(stopAtNonOption  ||  currentOption  ==  null)  {  currentOption  =  null;  }	  if(stopAtNonOption    ||    currentOption!=    null)    {    currentOption    =    null;    }    	non-compiled	[CE]  	39	None	replace
122	[BUG]  [BUGGY]  ||!stopAtNonOption  &&  value.equals( " "))  {  currentOption  =  null;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  ||!stopAtNonOption  &&  value.equals( " "))  {  currentOption  =  null;  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	||!stopAtNonOption  &&  value.equals( " "))  {  currentOption  =  null;  }	  ||!stopAtNonOption)    {    currentOption    =    null;    }    	non-compiled	[CE]  	5	None	replace
123	[BUG]  [BUGGY]  options.setOption(options.getOption(value));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  options.setOption(options.getOption(value));  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	options.setOption(options.getOption(value));	  if(options!=    null)    {    Options    currentOption    =    options.getOption(value);    if(currentOption!=    null)    {    tokens.add(value);    }    	non-compiled	[CE]  	40	None	replace
124	[BUG]  [BUGGY]  AssertionFailedToProcessing(options,  value,  stopAtNonOption);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  AssertionFailedToProcessing(options,  value,  stopAtNonOption);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	AssertionFailedToProcessing(options,  value,  stopAtNonOption);	  if(options!=    null)    {    Options    currentOption    =    options.getOption(value);    if(currentOption!=    null)    {    tokens.add(value);    }    	non-compiled	[CE]  	40	None	replace
125	[BUG]  [BUGGY]  options.add(new  Option(value));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  options.add(new  Option(value));  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	options.add(new  Option(value));	  options.add(value);    	non-compiled	[CE]  	9	None	replace
126	[BUG]  [BUGGY]  Option  currentOption  =  options.get(value)+  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Option  currentOption  =  options.get(value)+  1;  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  options.get(value)+  1;	  Option    currentOption    =    options.get(value);    	non-compiled	[CE]  	8	None	replace
127	[BUG]  [BUGGY]  SafeTest(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  SafeTest(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	SafeTest(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  safeTest(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	44	None	replace
128	[BUG]  [BUGGY]  Thread.currentThread().interrupt(value);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Thread.currentThread().interrupt(value);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Thread.currentThread().interrupt(value);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  	54	None	replace
129	[BUG]  [BUGGY]  Option  currentOption  =  option.process(value,  true);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Option  currentOption  =  option.process(value,  true);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  option.process(value,  true);	  Option    currentOption    =    option.process(value);    	non-compiled	[CE]  	56	None	replace
130	[BUG]  [BUGGY]  Option  currentOption  =  option.process(value,  null);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Option  currentOption  =  option.process(value,  null);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  option.process(value,  null);	  Option    currentOption    =    option.process(value);    	non-compiled	[CE]  	56	None	replace
131	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  currentOption!=  null  &&  currentOption.hasValues())  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  if(!stopAtNonOption  &&  currentOption!=  null  &&  currentOption.hasValues())  {  [BUGGY]      {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	if(!stopAtNonOption  &&  currentOption!=  null  &&  currentOption.hasValues())  {	  if(currentOption!=    null    &&    currentOption.hasValues())    {    	non-compiled	[CE]  	53	None	replace
132	[BUG]  [BUGGY]  While(!stopAtNonOption  &&  currentOption!=  null)  {  tokens.add(value);  currentOption  =  null;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  While(!stopAtNonOption  &&  currentOption!=  null)  {  tokens.add(value);  currentOption  =  null;  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	While(!stopAtNonOption  &&  currentOption!=  null)  {  tokens.add(value);  currentOption  =  null;  }	  While(!stopAtNonOption)    {    tokens.add(value);    currentOption    =    null;    }    	non-compiled	[CE]  	46	None	replace
133	[BUG]  [BUGGY]  Option  currentOption  =  options.stopAtNonOption(value,  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Option  currentOption  =  options.stopAtNonOption(value,  null);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  options.stopAtNonOption(value,  null);	  Option    currentOption    =    options.stopAtNonOption(value);    	non-compiled	[CE]  	29	None	replace
134	[BUG]  [BUGGY]  Option  currentOption  =  options.stopAtNonOption(value,  tokens);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Option  currentOption  =  options.stopAtNonOption(value,  tokens);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  options.stopAtNonOption(value,  tokens);	  Option    currentOption    =    options.stopAtNonOption(value);    	non-compiled	[CE]  	29	None	replace
135	[BUG]  [BUGGY]  PosixParser  currentOption  =(PosixParser)tokens.get(value  -  1  +  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  PosixParser  currentOption  =(PosixParser)tokens.get(value  -  1  +  1);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	PosixParser  currentOption  =(PosixParser)tokens.get(value  -  1  +  1);	  PosixParser    currentOption    =(PosixParser)tokens.get(value    -    1);    	non-compiled	[CE]  	50	None	replace
136	[BUG]  [BUGGY]  PosixParser  currentOption  =(PosixParser)this.options.get(index);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  PosixParser  currentOption  =(PosixParser)this.options.get(index);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	PosixParser  currentOption  =(PosixParser)this.options.get(index);	  PosixParser    currentOption    =(PosixParser)this.options.get(0);    	non-compiled	[CE]  	3	None	replace
137	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(value)/  2  +  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Option  currentOption  =  options.getOption(value)/  2  +  1;  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  options.getOption(value)/  2  +  1;	  Option    currentOption    =    options.getOption(value)+    1;    	non-compiled	[CE]  	37	None	replace
138	[BUG]  [BUGGY]  AssertionFailedToProcess(options,  value,  stopAtNonOption);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  AssertionFailedToProcess(options,  value,  stopAtNonOption);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	AssertionFailedToProcess(options,  value,  stopAtNonOption);	  if(options!=    null)    {    Options    currentOption    =    options.getOption(value);    }    	non-compiled	[CE]  	26	None	replace
139	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(value,  this.stopAtNonOption);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Option  currentOption  =  options.getOption(value,  this.stopAtNonOption);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  options.getOption(value,  this.stopAtNonOption);	  Option    currentOption    =    options.getOption(value,    value);    	non-compiled	[CE]  	12	None	replace
140	[BUG]  [BUGGY]  while(!stopAtNonOption)  {  tokens.add(value);  currentOption  =  null;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  while(!stopAtNonOption)  {  tokens.add(value);  currentOption  =  null;  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	while(!stopAtNonOption)  {  tokens.add(value);  currentOption  =  null;  }	  While(!stopAtNonOption)    {    tokens.add(value);    currentOption    =    null;    }    	non-compiled	[CE]  	46	None	replace
141	[BUG]  [BUGGY]  Option  currentOption  =  options.stopAtNonOption()?  options.getOption(value):  null;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Option  currentOption  =  options.stopAtNonOption()?  options.getOption(value):  null;  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  options.stopAtNonOption()?  options.getOption(value):  null;	  Option    currentOption    =    options.stopAtNonOption();    	non-compiled	[CE]  	30	None	replace
142	[BUG]  [BUGGY]  Option  currentOption  =  options.stopAtNonOption()  &&  value.length()  >  0;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Option  currentOption  =  options.stopAtNonOption()  &&  value.length()  >  0;  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  options.stopAtNonOption()  &&  value.length()  >  0;	  Option    currentOption    =    options.stopAtNonOption();    	non-compiled	[CE]  	30	None	replace
143	[BUG]  [BUGGY]  tokens.add(ValueUtil.stripLeadingAndTrailingQuotes(value));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  tokens.add(ValueUtil.stripLeadingAndTrailingQuotes(value));  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	tokens.add(ValueUtil.stripLeadingAndTrailingQuotes(value));	  tokens.add(value);    	non-compiled	[CE]  	7	None	replace
144	[BUG]  [BUGGY]  tokens.add(ValueUtil.stripLeadingQuotes(value));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  tokens.add(ValueUtil.stripLeadingQuotes(value));  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	tokens.add(ValueUtil.stripLeadingQuotes(value));	  tokens.add(value);    	non-compiled	[CE]  	7	None	replace
145	[BUG]  [BUGGY]  tokens.add(ValueUtil.stripLeadingTree(value));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  tokens.add(ValueUtil.stripLeadingTree(value));  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	tokens.add(ValueUtil.stripLeadingTree(value));	  tokens.add(value);    	non-compiled	[CE]  	7	None	replace
146	[BUG]  [BUGGY]  Thread.currentThread().interrupt(throwAtNonOption);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Thread.currentThread().interrupt(throwAtNonOption);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Thread.currentThread().interrupt(throwAtNonOption);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  	54	None	replace
147	[BUG]  [BUGGY]  ||!stopAtNonOption)  {  currentOption  =  new  Option();  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  ||!stopAtNonOption)  {  currentOption  =  new  Option();  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	||!stopAtNonOption)  {  currentOption  =  new  Option();  }	  ||!stopAtNonOption)    {    currentOption    =    null;    }    	non-compiled	[CE]  	5	None	replace
148	[BUG]  [BUGGY]  if(options.getOption(value)  ==  null)  {  Options  currentOption  =  options.getOption(value);  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  if(options.getOption(value)  ==  null)  {  Options  currentOption  =  options.getOption(value);  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	if(options.getOption(value)  ==  null)  {  Options  currentOption  =  options.getOption(value);  }	  if(options.getOption(value)!=    null)    {    Options    currentOption    =    options.getOption(value);    }    	non-compiled	[CE]  	51	None	replace
149	[BUG]  [BUGGY]  if(options.getOption(value)!=  null)  {  tokens.add(value);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  if(options.getOption(value)!=  null)  {  tokens.add(value);  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	if(options.getOption(value)!=  null)  {  tokens.add(value);  }	  if(options.getOption(value)!=    null)    {    Options    currentOption    =    options.getOption(value);    }    	non-compiled	[CE]  	51	None	replace
150	[BUG]  [BUGGY]  PosixParser  currentOption  =(PosixParser)tokens.get(key  -  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  PosixParser  currentOption  =(PosixParser)tokens.get(key  -  1);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	PosixParser  currentOption  =(PosixParser)tokens.get(key  -  1);	  PosixParser    currentOption    =(PosixParser)tokens.get(value    -    1);    	non-compiled	[CE]  	50	None	replace
151	[BUG]  [BUGGY]  Option  currentOption  =  option.getOption(value,  this);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  Option  currentOption  =  option.getOption(value,  this);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	Option  currentOption  =  option.getOption(value,  this);	  Option    currentOption    =    option.getOption(value,    null);    	non-compiled	[CE]  	35	None	replace
152	[BUG]  [BUGGY]  AssertionFailedToProcess.process(value,  currentOption);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  AssertionFailedToProcess.process(value,  currentOption);  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	AssertionFailedToProcess.process(value,  currentOption);	  if(options!=    null)    {    Option    currentOption    =    options.getOption(value);    }    	non-compiled	[CE]  	10	None	replace
153	[BUG]  [BUGGY]  currentOption  =(Option)this.stopAtNonOption?  null  :  currentOption.getValue();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  currentOption  =(Option)this.stopAtNonOption?  null  :  currentOption.getValue();  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	currentOption  =(Option)this.stopAtNonOption?  null  :  currentOption.getValue();	  currentOption    =    null;    	non-compiled	[CE]  	4	None	replace
154	[BUG]  [BUGGY]  options.add(options.getValue(value));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  options.add(options.getValue(value));  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	options.add(options.getValue(value));	  if(options!=    null)    {    Options    currentOption    =    options.getOption(value);    }    else    {    tokens.add(value);    }    	non-compiled	[CE]  	27	None	replace
155	[BUG]  [BUGGY]  CurrentOption  <  Option>  currentOption  =  null;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  CurrentOption  <  Option>  currentOption  =  null;  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	CurrentOption  <  Option>  currentOption  =  null;	  if(stopAtNonOption    ||    currentOption!=    null)    {    currentOption    =    null;    }    	non-compiled	[CE]  	39	None	replace
156	[BUG]  [BUGGY]  While(!stopAtNonOption  &&  value.length()  <  2)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  While(!stopAtNonOption  &&  value.length()  <  2)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	While(!stopAtNonOption  &&  value.length()  <  2)  {  throw  new  IllegalStateException( " ");  }	  While(!stopAtNonOption    &&    value.length()    >    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	25	None	replace
157	[BUG]  [BUGGY]  safeMultiply(value,  currentOption)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  safeMultiply(value,  currentOption)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	safeMultiply(value,  currentOption)  {  throw  new  IllegalStateException( " ");  }	  safeMultiply(getValue(),    value)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	58	None	replace
158	[BUG]  [BUGGY]  AssertionFailedToProcess(value,  options.getOption(value));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  AssertionFailedToProcess(value,  options.getOption(value));  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	AssertionFailedToProcess(value,  options.getOption(value));	  if(options!=    null)    {    Options    currentOption    =    options.getOption(value);    if(currentOption!=    null)    {    tokens.add(value);    }    	non-compiled	[CE]  	40	None	replace
159	[BUG]  [BUGGY]  While(!stopAtNonOption  &&  value.length()  <  2)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  While(!stopAtNonOption  &&  value.length()  <  2)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	While(!stopAtNonOption  &&  value.length()  <  2)  {  throw  new  IllegalArgumentException( " ");  }	  While(!stopAtNonOption    &&    value.length()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	33	None	replace
160	[BUG]  [BUGGY]  while(!stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  while(!stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	while(!stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  While(!stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	31	None	replace
161	[BUG]  [BUGGY]  while(!stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  process(String  value)  {      [BUGGY]  while(!stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	while(!stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }	  While(!stopAtNonOption)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	23	None	replace
