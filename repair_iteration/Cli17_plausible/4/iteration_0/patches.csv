bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(value!=  null  ||  currentOption.hasArg())  {  [CE]  [FE]    AssertionFailedError  [CONTEXT]  private  void  process(String  value)  {  [BUGGY]  if(value!=  null  ||  currentOption.hasArg())  {  [BUGGY]  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	if(value!=  null  ||  currentOption.hasArg())  {	if  (currentOption  !=  null  &&  currentOption.hasArg())  {  	non-compiled	[CE]  	7	None	replace
2	[BUG]  [BUGGY]  if(currentOption!=  null  ||  currentOption.hasArg())  {  [CE]  [FE]      AssertionFailedError  [CONTEXT]  private  void  process(String  value)  {  [BUGGY]  if(currentOption!=  null  ||  currentOption.hasArg())  {  [BUGGY]  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	if(currentOption!=  null  ||  currentOption.hasArg())  {	if  (currentOption  !=  null  &&  currentOption.hasArg())  {  	non-compiled	[CE]  	7	None	replace
3	[BUG]  [BUGGY]  if(value!=  null  &&  currentOption.hasArg())  {  [CE]  [FE]        AssertionFailedError  [CONTEXT]  private  void  process(String  value)  {  [BUGGY]  if(value!=  null  &&  currentOption.hasArg())  {  [BUGGY]  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	if(value!=  null  &&  currentOption.hasArg())  {	if  (currentOption  !=  null  &&  currentOption.hasArg())  {  	non-compiled	[CE]  	7	None	replace
4	[BUG]  [BUGGY]    [CE]  [FE]          AssertionFailedError  [CONTEXT]  private  void  process(String  value)  {  [BUGGY]    [BUGGY]  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	  	if  (currentOption  !=  null  &&  currentOption.hasArg())  {  	non-compiled	[CE]  	7	None	replace
5	[BUG]  [BUGGY]    Option  currentOption  =  options.getOption(value);  [CE]  [FE]    AssertionFailedError  [CONTEXT]  private  void  process(String  value)  {  [BUGGY]    Option  currentOption  =  options.getOption(value);  [BUGGY]  if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	    Option  currentOption  =  options.getOption(value);		non-compiled	[CE]  	8	None	add
6	[BUG]  [BUGGY]    if(!stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]      AssertionFailedError  [CONTEXT]  private  void  process(String  value)  {  [BUGGY]    if(!stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	    if(!stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  	8	None	add
7	[BUG]  [BUGGY]    if(!stopAtNonOption)  {  currentOption  =  null;  }  [CE]  [FE]        AssertionFailedError  [CONTEXT]  private  void  process(String  value)  {  [BUGGY]    if(!stopAtNonOption)  {  currentOption  =  null;  }  [BUGGY]  if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	    if(!stopAtNonOption)  {  currentOption  =  null;  }		non-compiled	[CE]  	8	None	add
8	[BUG]  [BUGGY]    if(!stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]          AssertionFailedError  [CONTEXT]  private  void  process(String  value)  {  [BUGGY]    if(!stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]  if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	    if(!stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }		non-compiled	[CE]  	8	None	add
9	[BUG]  [BUGGY]    if(!stopAtNonOption)  {  tokens.add(value);  }  [CE]  [FE]            AssertionFailedError  [CONTEXT]  private  void  process(String  value)  {  [BUGGY]    if(!stopAtNonOption)  {  tokens.add(value);  }  [BUGGY]  if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	    if(!stopAtNonOption)  {  tokens.add(value);  }		non-compiled	[CE]  	8	None	add
10	[BUG]  [BUGGY]    Options  currentOption  =  options.getOption(value);  [CE]  [FE]    AssertionFailedError  [CONTEXT]  private  void  process(String  value)  {  [BUGGY]    Options  currentOption  =  options.getOption(value);  [BUGGY]  if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	    Options  currentOption  =  options.getOption(value);		non-compiled	[CE]  	8	None	add
11	[BUG]  [BUGGY]    PosixParser  currentOption  =(PosixParser)this.options.get(value);  [CE]  [FE]      AssertionFailedError  [CONTEXT]  private  void  process(String  value)  {  [BUGGY]    PosixParser  currentOption  =(PosixParser)this.options.get(value);  [BUGGY]  if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	    PosixParser  currentOption  =(PosixParser)this.options.get(value);		non-compiled	[CE]  	8	None	add
12	[BUG]  [BUGGY]    PosixParser  currentOption  =(PosixParser)tokens.get(value);  [CE]  [FE]        AssertionFailedError  [CONTEXT]  private  void  process(String  value)  {  [BUGGY]    PosixParser  currentOption  =(PosixParser)tokens.get(value);  [BUGGY]  if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	    PosixParser  currentOption  =(PosixParser)tokens.get(value);		non-compiled	[CE]  	8	None	add
13	[BUG]  [BUGGY]    Option  currentOption  =  options.findOption(value);  [CE]  [FE]          AssertionFailedError  [CONTEXT]  private  void  process(String  value)  {  [BUGGY]    Option  currentOption  =  options.findOption(value);  [BUGGY]  if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	    Option  currentOption  =  options.findOption(value);		non-compiled	[CE]  	8	None	add
14	[BUG]  [BUGGY]  if(currentOption!=  null  &&  currentOption.hasArgs())  {  [CE]  [FE]    AssertionFailedError  [CONTEXT]  private  void  process(String  value)  {  [BUGGY]  if(currentOption!=  null  &&  currentOption.hasArgs())  {  [BUGGY]  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	if(currentOption!=  null  &&  currentOption.hasArgs())  {	if  (currentOption  !=  null  &&  currentOption.hasArg())  {  	non-compiled	[CE]  	7	None	replace
15	[BUG]  [BUGGY]    Option  currentOption  =  option.getOption(value);  [CE]  [FE]    AssertionFailedError  [CONTEXT]  private  void  process(String  value)  {  [BUGGY]    Option  currentOption  =  option.getOption(value);  [BUGGY]  if  (currentOption  !=  null  &&  currentOption.hasArg())  {  {  if  (currentOption.hasArg())  {  tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	199	200	1	replace	    Option  currentOption  =  option.getOption(value);		non-compiled	[CE]  	8	None	add
