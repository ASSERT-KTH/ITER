bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  List  <  String>  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  List  <  String>  iter  =  options.values().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	List  <  String>  iter  =  options.values().iterator();	  Iterator    <    String>    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
2	[BUG]  [BUGGY]  accept(options,  stopAtNonOption,  tokens.size());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(options,  stopAtNonOption,  tokens.size());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(options,  stopAtNonOption,  tokens.size());	  accept(token,    stopAtNonOption,    options.size());    	non-compiled	[CE]  <identifier>  expected	42	None	replace
3	[BUG]  [BUGGY]  accept(token,  stopAtNonOption,  options.size()  -  1);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(token,  stopAtNonOption,  options.size()  -  1);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(token,  stopAtNonOption,  options.size()  -  1);	  accept(token,    stopAtNonOption,    options.size());    	non-compiled	[CE]  <identifier>  expected	42	None	replace
4	[BUG]  [BUGGY]  accept(token,  options.size()  -  1,  options.size());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(token,  options.size()  -  1,  options.size());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(token,  options.size()  -  1,  options.size());	  accept(token,    stopAtNonOption,    options.size());    	non-compiled	[CE]  <identifier>  expected	42	None	replace
5	[BUG]  [BUGGY]  accept(token,  stopAtNonOption,  arguments.size());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(token,  stopAtNonOption,  arguments.size());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(token,  stopAtNonOption,  arguments.size());	  accept(token,    stopAtNonOption,    options.size());    	non-compiled	[CE]  <identifier>  expected	42	None	replace
6	[BUG]  [BUGGY]  tokens.add( "null ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add( "null ");  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add( "null ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	27	None	replace
7	[BUG]  [BUGGY]  tokens.add( ": ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add( ": ");  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add( ": ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	27	None	replace
8	[BUG]  [BUGGY]  burstToken(token,  currentOption,  arguments,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  burstToken(token,  currentOption,  arguments,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	burstToken(token,  currentOption,  arguments,  stopAtNonOption);	  burstToken(token,    stopAtNonOption,    arguments,    options);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
9	[BUG]  [BUGGY]  burstToken(token,  stopAtNonOption,  arguments,  currentOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  burstToken(token,  stopAtNonOption,  arguments,  currentOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	burstToken(token,  stopAtNonOption,  arguments,  currentOption);	  burstToken(token,    stopAtNonOption,    arguments,    options);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
10	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(tokenLength);  tokens.add(currentOption);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(tokenLength);  tokens.add(currentOption);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(tokenLength);  tokens.add(currentOption);  }	  Option    currentOption    =    options.getOption(tokenLength);    tokens.add(currentOption);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
11	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokenLength  -  1);  tokens.add(currentOption);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  currentOption  =  options.getOption(tokenLength  -  1);  tokens.add(currentOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Option  currentOption  =  options.getOption(tokenLength  -  1);  tokens.add(currentOption);	  Option    currentOption    =    options.getOption(tokenLength);    tokens.add(currentOption);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
12	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokenLength  +  1);  tokens.add(currentOption);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  currentOption  =  options.getOption(tokenLength  +  1);  tokens.add(currentOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Option  currentOption  =  options.getOption(tokenLength  +  1);  tokens.add(currentOption);	  Option    currentOption    =    options.getOption(tokenLength);    tokens.add(currentOption);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
13	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token)/  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  currentOption  =  options.getOption(token)/  1;  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Option  currentOption  =  options.getOption(token)/  1;	  Option    currentOption    =    options.getOption(token)+    1;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
14	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token)+  2;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  currentOption  =  options.getOption(token)+  2;  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Option  currentOption  =  options.getOption(token)+  2;	  Option    currentOption    =    options.getOption(token)+    1;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
15	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token)-  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  currentOption  =  options.getOption(token)-  1;  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Option  currentOption  =  options.getOption(token)-  1;	  Option    currentOption    =    options.getOption(token)+    1;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
16	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokenLength  +  2);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  currentOption  =  options.getOption(tokenLength  +  2);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Option  currentOption  =  options.getOption(tokenLength  +  2);	  Option    currentOption    =    options.getOption(tokenLength    +    1);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
17	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokenLength  /  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  currentOption  =  options.getOption(tokenLength  /  1);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Option  currentOption  =  options.getOption(tokenLength  /  1);	  Option    currentOption    =    options.getOption(tokenLength    +    1);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
18	[BUG]  [BUGGY]  acceptToken(token,  option,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  acceptToken(token,  option,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	acceptToken(token,  option,  stopAtNonOption);	  acceptToken(token,    stopAtNonOption,    options);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
19	[BUG]  [BUGGY]  accept(token,  stopAtNonOption,  arguments.length,  tokenLength);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(token,  stopAtNonOption,  arguments.length,  tokenLength);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(token,  stopAtNonOption,  arguments.length,  tokenLength);	  accept(token,    stopAtNonOption,    arguments.length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
20	[BUG]  [BUGGY]  accept(token,  arguments.length,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(token,  arguments.length,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(token,  arguments.length,  stopAtNonOption);	  accept(token,    stopAtNonOption,    arguments.length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
21	[BUG]  [BUGGY]  accept(token,  stopAtNonOption,  arguments.length  +  1);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(token,  stopAtNonOption,  arguments.length  +  1);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(token,  stopAtNonOption,  arguments.length  +  1);	  accept(token,    stopAtNonOption,    arguments.length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
22	[BUG]  [BUGGY]  accept(token,  stopAtNonOption,  arguments.length  -  1);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(token,  stopAtNonOption,  arguments.length  -  1);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(token,  stopAtNonOption,  arguments.length  -  1);	  accept(token,    stopAtNonOption,    arguments.length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
23	[BUG]  [BUGGY]  List  <  String>  iter  =  currentOption.options.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  List  <  String>  iter  =  currentOption.options.iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	List  <  String>  iter  =  currentOption.options.iterator();	  Iterator    <    String>    iter    =    currentOption.options.iterator();    	non-compiled	[CE]  <identifier>  expected	38	None	replace
24	[BUG]  [BUGGY]  burstToken(token,  options.stopAtNonOption,  arguments,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  burstToken(token,  options.stopAtNonOption,  arguments,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	burstToken(token,  options.stopAtNonOption,  arguments,  stopAtNonOption);	  burstToken(token,    options.stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
25	[BUG]  [BUGGY]  acceptToken(token,  options.stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  acceptToken(token,  options.stopAtNonOption,  arguments);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	acceptToken(token,  options.stopAtNonOption,  arguments);	  burstToken(token,    options.stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
26	[BUG]  [BUGGY]  tokens.add(token,  options.stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add(token,  options.stopAtNonOption,  arguments);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add(token,  options.stopAtNonOption,  arguments);	  burstToken(token,    options.stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
27	[BUG]  [BUGGY]  burstToken(token,  options.stopAtNonOption,  arguments,  eatTheRest);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  burstToken(token,  options.stopAtNonOption,  arguments,  eatTheRest);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	burstToken(token,  options.stopAtNonOption,  arguments,  eatTheRest);	  burstToken(token,    options.stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
28	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption  &&  arguments.length  +  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add(token,  stopAtNonOption  &&  arguments.length  +  1);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add(token,  stopAtNonOption  &&  arguments.length  +  1);	  tokens.add(token,    stopAtNonOption    &&    arguments.length);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
29	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption  ||  arguments.length);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add(token,  stopAtNonOption  ||  arguments.length);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add(token,  stopAtNonOption  ||  arguments.length);	  tokens.add(token,    stopAtNonOption    &&    arguments.length);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
30	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption  &&  arguments.length  -  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add(token,  stopAtNonOption  &&  arguments.length  -  1);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add(token,  stopAtNonOption  &&  arguments.length  -  1);	  tokens.add(token,    stopAtNonOption    &&    arguments.length);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
31	[BUG]  [BUGGY]  acceptToken(token,  options,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  acceptToken(token,  options,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	acceptToken(token,  options,  stopAtNonOption);	  acceptToken(token,    options);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
32	[BUG]  [BUGGY]  acceptToken(token,  arguments);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  acceptToken(token,  arguments);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	acceptToken(token,  arguments);	  acceptToken(token,    options);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
33	[BUG]  [BUGGY]  acceptToken(token,  null);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  acceptToken(token,  null);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	acceptToken(token,  null);	  acceptToken(token,    options);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
34	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption,  arguments);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Option  currentOption  =  options.getOption(token,  stopAtNonOption,  arguments);	  Option    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
35	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  eatTheRest);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  currentOption  =  options.getOption(token,  eatTheRest);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Option  currentOption  =  options.getOption(token,  eatTheRest);	  Option    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
36	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokenLength  -  2);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  currentOption  =  options.getOption(tokenLength  -  2);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Option  currentOption  =  options.getOption(tokenLength  -  2);	  Option    currentOption    =    options.getOption(tokenLength    -    1);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
37	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokenLength  -  1  +  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  currentOption  =  options.getOption(tokenLength  -  1  +  1);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Option  currentOption  =  options.getOption(tokenLength  -  1  +  1);	  Option    currentOption    =    options.getOption(tokenLength    -    1);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
38	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokenLength  -  1,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  currentOption  =  options.getOption(tokenLength  -  1,  stopAtNonOption);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Option  currentOption  =  options.getOption(tokenLength  -  1,  stopAtNonOption);	  Option    currentOption    =    options.getOption(tokenLength    -    1);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
39	[BUG]  [BUGGY]  options.put(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  options.put(token,  stopAtNonOption);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	options.put(token,  stopAtNonOption);	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    tokens.add(currentOption);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
40	[BUG]  [BUGGY]  Iterator  iter  =  options.getIterables().iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Iterator  iter  =  options.getIterables().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Iterator  iter  =  options.getIterables().iterator();	  Iterator    iter    =    options.getOptions().iterator();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
41	[BUG]  [BUGGY]  Iterator  iter  =  options.getOwnerOptions().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Iterator  iter  =  options.getOwnerOptions().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Iterator  iter  =  options.getOwnerOptions().iterator();	  Iterator    iter    =    options.getOptions().iterator();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
42	[BUG]  [BUGGY]  accept(token,  options,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(token,  options,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(token,  options,  stopAtNonOption);	  accept(options,    token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
43	[BUG]  [BUGGY]  accept(options,  token,  stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(options,  token,  stopAtNonOption,  arguments);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(options,  token,  stopAtNonOption,  arguments);	  accept(options,    token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
44	[BUG]  [BUGGY]  accept(arguments,  token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(arguments,  token,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(arguments,  token,  stopAtNonOption);	  accept(options,    token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
45	[BUG]  [BUGGY]  accept(options,  arguments,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(options,  arguments,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(options,  arguments,  stopAtNonOption);	  accept(options,    token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
46	[BUG]  [BUGGY]  tokens.add(options.getValue(token));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add(options.getValue(token));  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add(options.getValue(token));	  tokens.add(options.getOption(token));    	non-compiled	[CE]  <identifier>  expected	20	None	replace
47	[BUG]  [BUGGY]  tokens.add(options.getOption(token,  stopAtNonOption));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add(options.getOption(token,  stopAtNonOption));  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add(options.getOption(token,  stopAtNonOption));	  tokens.add(options.getOption(token));    	non-compiled	[CE]  <identifier>  expected	20	None	replace
48	[BUG]  [BUGGY]  tokens.add(options.getOption(token),  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add(options.getOption(token),  stopAtNonOption);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add(options.getOption(token),  stopAtNonOption);	  tokens.add(options.getOption(token));    	non-compiled	[CE]  <identifier>  expected	20	None	replace
49	[BUG]  [BUGGY]  Ilerator  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Ilerator  iter  =  options.iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Ilerator  iter  =  options.iterator();	  Iterator    iter    =    currentOption.options.iterator();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
50	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption  +  2);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add(token,  stopAtNonOption  +  2);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add(token,  stopAtNonOption  +  2);	  tokens.add(token,    stopAtNonOption    +    1);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
51	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption  &  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add(token,  stopAtNonOption  &  1);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add(token,  stopAtNonOption  &  1);	  tokens.add(token,    stopAtNonOption    +    1);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
52	[BUG]  [BUGGY]  acceptToken(token,  options.stopAtNonOption,  arguments.length);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  acceptToken(token,  options.stopAtNonOption,  arguments.length);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	acceptToken(token,  options.stopAtNonOption,  arguments.length);	  acceptToken(token,    options.stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
53	[BUG]  [BUGGY]  acceptToken(token,  options.eatTheRest);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  acceptToken(token,  options.eatTheRest);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	acceptToken(token,  options.eatTheRest);	  acceptToken(token,    options.stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
54	[BUG]  [BUGGY]  acceptToken(token,  options.stopAtNonOption,  argumentLength);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  acceptToken(token,  options.stopAtNonOption,  argumentLength);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	acceptToken(token,  options.stopAtNonOption,  argumentLength);	  acceptToken(token,    options.stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
55	[BUG]  [BUGGY]  burstToken(token,  options,  stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  burstToken(token,  options,  stopAtNonOption,  arguments);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	burstToken(token,  options,  stopAtNonOption,  arguments);	  burstToken(token,    options,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
56	[BUG]  [BUGGY]  burstToken(token,  options,  stopAtNonOption,  argumentLength);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  burstToken(token,  options,  stopAtNonOption,  argumentLength);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	burstToken(token,  options,  stopAtNonOption,  argumentLength);	  burstToken(token,    options,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
57	[BUG]  [BUGGY]  burstToken(token,  options,  stopAtNonOption,  arguments.length);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  burstToken(token,  options,  stopAtNonOption,  arguments.length);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	burstToken(token,  options,  stopAtNonOption,  arguments.length);	  burstToken(token,    options,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
58	[BUG]  [BUGGY]  tokens.add(token,  options);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add(token,  options);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add(token,  options);	  burstToken(token,    options);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
59	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.entrySet().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Iterator  <  String>  iter  =  options.entrySet().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Iterator  <  String>  iter  =  options.entrySet().iterator();	  Iterator    <    String>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
60	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption,  eatTheRest);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add(token,  stopAtNonOption,  eatTheRest);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add(token,  stopAtNonOption,  eatTheRest);	  tokens.add(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
61	[BUG]  [BUGGY]  accept(token,  token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(token,  token,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(token,  token,  stopAtNonOption);	  accept(storage,    token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
62	[BUG]  [BUGGY]  accept(storage,  tokens,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(storage,  tokens,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(storage,  tokens,  stopAtNonOption);	  accept(storage,    token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
63	[BUG]  [BUGGY]  accept(token,storage,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(token,storage,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(token,storage,  stopAtNonOption);	  accept(storage,    token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
64	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption  &&  arguments.length  >  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add(token,  stopAtNonOption  &&  arguments.length  >  1);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add(token,  stopAtNonOption  &&  arguments.length  >  1);	  tokens.add(token,    stopAtNonOption    &&    arguments.length    >    0);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
65	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption  ||  arguments.length  >  0);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add(token,  stopAtNonOption  ||  arguments.length  >  0);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add(token,  stopAtNonOption  ||  arguments.length  >  0);	  tokens.add(token,    stopAtNonOption    &&    arguments.length    >    0);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
66	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption  &&  arguments.length  >  2);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add(token,  stopAtNonOption  &&  arguments.length  >  2);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add(token,  stopAtNonOption  &&  arguments.length  >  2);	  tokens.add(token,    stopAtNonOption    &&    arguments.length    >    0);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
67	[BUG]  [BUGGY]  accept(options,  stopAtNonOption,  token);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(options,  stopAtNonOption,  token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(options,  stopAtNonOption,  token);	  accept(token,    stopAtNonOption,    options);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
68	[BUG]  [BUGGY]  accept(token,  options);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(token,  options);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(token,  options);	  accept(token,    stopAtNonOption,    options);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
69	[BUG]  [BUGGY]  accept(arguments,  stopAtNonOption,  options);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(arguments,  stopAtNonOption,  options);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(arguments,  stopAtNonOption,  options);	  accept(token,    stopAtNonOption,    options);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
70	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokenLength,  arguments);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  currentOption  =  options.getOption(tokenLength,  arguments);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Option  currentOption  =  options.getOption(tokenLength,  arguments);	  Option    currentOption    =    options.getOption(tokenLength,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
71	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokenLength,  arguments[0]);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  currentOption  =  options.getOption(tokenLength,  arguments[0]);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Option  currentOption  =  options.getOption(tokenLength,  arguments[0]);	  Option    currentOption    =    options.getOption(tokenLength,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
72	[BUG]  [BUGGY]  List  <  String>  iter  =  options.iterator();  tokens.add(token);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  List  <  String>  iter  =  options.iterator();  tokens.add(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	List  <  String>  iter  =  options.iterator();  tokens.add(token);	  Iterator    <    String>    iter    =    options.iterator();    tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
73	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.values().iterator();  tokens.add(token);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Iterator  <  String>  iter  =  options.values().iterator();  tokens.add(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Iterator  <  String>  iter  =  options.values().iterator();  tokens.add(token);	  Iterator    <    String>    iter    =    options.iterator();    tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
74	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.iterator();  while(iter.hasNext())  {  tokens.add(iter.next());  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Iterator  <  String>  iter  =  options.iterator();  while(iter.hasNext())  {  tokens.add(iter.next());  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Iterator  <  String>  iter  =  options.iterator();  while(iter.hasNext())  {  tokens.add(iter.next());  }	  Iterator    <    String>    iter    =    options.iterator();    while(iter.hasNext())    {    tokens.add(iter.next());    	non-compiled	[CE]  <identifier>  expected	48	None	replace
75	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  arguments.iterator();  while(iter.hasNext())  {  tokens.add(iter.next());  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Iterator  <  String>  iter  =  arguments.iterator();  while(iter.hasNext())  {  tokens.add(iter.next());  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Iterator  <  String>  iter  =  arguments.iterator();  while(iter.hasNext())  {  tokens.add(iter.next());  }	  Iterator    <    String>    iter    =    options.iterator();    while(iter.hasNext())    {    tokens.add(iter.next());    	non-compiled	[CE]  <identifier>  expected	48	None	replace
76	[BUG]  [BUGGY]  acceptToken(token,  options.size()  -  1,  options.size());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  acceptToken(token,  options.size()  -  1,  options.size());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	acceptToken(token,  options.size()  -  1,  options.size());	  acceptToken(token,    stopAtNonOption,    options.size());    	non-compiled	[CE]  <identifier>  expected	43	None	replace
77	[BUG]  [BUGGY]  acceptToken(token,  stopAtNonOption,  options.size()  -  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  acceptToken(token,  stopAtNonOption,  options.size()  -  1);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	acceptToken(token,  stopAtNonOption,  options.size()  -  1);	  acceptToken(token,    stopAtNonOption,    options.size());    	non-compiled	[CE]  <identifier>  expected	43	None	replace
78	[BUG]  [BUGGY]  acceptToken(token,  options.size()  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  acceptToken(token,  options.size()  -  1);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	acceptToken(token,  options.size()  -  1);	  acceptToken(token,    stopAtNonOption,    options.size());    	non-compiled	[CE]  <identifier>  expected	43	None	replace
79	[BUG]  [BUGGY]  acceptToken(token,  stopAtNonOption,  options.size()  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  acceptToken(token,  stopAtNonOption,  options.size()  +  1);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	acceptToken(token,  stopAtNonOption,  options.size()  +  1);	  acceptToken(token,    stopAtNonOption,    options.size());    	non-compiled	[CE]  <identifier>  expected	43	None	replace
80	[BUG]  [BUGGY]  Iterator  iter  =  options.entrySet().iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Iterator  iter  =  options.entrySet().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Iterator  iter  =  options.entrySet().iterator();	  Iterator    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
81	[BUG]  [BUGGY]  tokens.add(tokenLength  +  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add(tokenLength  +  1);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add(tokenLength  +  1);	  tokens.add(tokenLength);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
82	[BUG]  [BUGGY]  tokens.add(tokenLength,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add(tokenLength,  stopAtNonOption);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add(tokenLength,  stopAtNonOption);	  tokens.add(tokenLength);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
83	[BUG]  [BUGGY]  iter.add(options.getOption(token));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  iter.add(options.getOption(token));  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	iter.add(options.getOption(token));	  iter.add(token);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
84	[BUG]  [BUGGY]  iter.add(arguments);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  iter.add(arguments);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	iter.add(arguments);	  iter.add(token);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
85	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption)+  2;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add(token,  stopAtNonOption)+  2;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add(token,  stopAtNonOption)+  2;	  tokens.add(token,    stopAtNonOption)+    1;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
86	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption)/  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add(token,  stopAtNonOption)/  1;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add(token,  stopAtNonOption)/  1;	  tokens.add(token,    stopAtNonOption)+    1;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
87	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption)+  3;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add(token,  stopAtNonOption)+  3;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add(token,  stopAtNonOption)+  3;	  tokens.add(token,    stopAtNonOption)+    1;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
88	[BUG]  [BUGGY]  tokens.add(token,  currentOption,  options);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add(token,  currentOption,  options);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add(token,  currentOption,  options);	  tokens.add(token,    stopAtNonOption,    options);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
89	[BUG]  [BUGGY]  accept(arguments,  stopAtNonOption,  tokenLength);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(arguments,  stopAtNonOption,  tokenLength);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(arguments,  stopAtNonOption,  tokenLength);	  accept(arguments,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
90	[BUG]  [BUGGY]  accept(arguments,  stopAtNonOption,  iter);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(arguments,  stopAtNonOption,  iter);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(arguments,  stopAtNonOption,  iter);	  accept(arguments,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
91	[BUG]  [BUGGY]  burstToken(token,  stopAtNonOption,  arguments,  false);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  burstToken(token,  stopAtNonOption,  arguments,  false);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	burstToken(token,  stopAtNonOption,  arguments,  false);	  burstToken(token,    stopAtNonOption,    arguments,    eatTheRest);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
92	[BUG]  [BUGGY]  burstToken(token,  stopAtNonOption,  arguments,  null);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  burstToken(token,  stopAtNonOption,  arguments,  null);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	burstToken(token,  stopAtNonOption,  arguments,  null);	  burstToken(token,    stopAtNonOption,    arguments,    eatTheRest);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
93	[BUG]  [BUGGY]  burstToken(token,  stopAtNonOption,  arguments,  true);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  burstToken(token,  stopAtNonOption,  arguments,  true);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	burstToken(token,  stopAtNonOption,  arguments,  true);	  burstToken(token,    stopAtNonOption,    arguments,    eatTheRest);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
94	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption,  arguments,  eatTheRest);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add(token,  stopAtNonOption,  arguments,  eatTheRest);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add(token,  stopAtNonOption,  arguments,  eatTheRest);	  burstToken(token,    stopAtNonOption,    arguments,    eatTheRest);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
95	[BUG]  [BUGGY]  burstToken(token,  currentOption,  arguments,  tokenLength);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  burstToken(token,  currentOption,  arguments,  tokenLength);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	burstToken(token,  currentOption,  arguments,  tokenLength);	  burstToken(token,    stopAtNonOption,    arguments,    tokenLength);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
96	[BUG]  [BUGGY]  burstToken(token,  stopAtNonOption,  arguments,  0);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  burstToken(token,  stopAtNonOption,  arguments,  0);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	burstToken(token,  stopAtNonOption,  arguments,  0);	  burstToken(token,    stopAtNonOption,    arguments,    tokenLength);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
97	[BUG]  [BUGGY]  acceptToken(token,  arguments,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  acceptToken(token,  arguments,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	acceptToken(token,  arguments,  stopAtNonOption);	  acceptToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
98	[BUG]  [BUGGY]  acceptToken(token,  stopAtNonOption,  arguments,  options);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  acceptToken(token,  stopAtNonOption,  arguments,  options);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	acceptToken(token,  stopAtNonOption,  arguments,  options);	  acceptToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
99	[BUG]  [BUGGY]  tokens.add( "- "  +  tokenLength);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add( "- "  +  tokenLength);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add( "- "  +  tokenLength);	  tokens.add(   "-   ");    	non-compiled	[CE]  <identifier>  expected	45	None	replace
100	[BUG]  [BUGGY]  tokens.add( "- "  +  token);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add( "- "  +  token);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add( "- "  +  token);	  tokens.add(   "-   ");    	non-compiled	[CE]  <identifier>  expected	45	None	replace
101	[BUG]  [BUGGY]  Ilerator  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Ilerator  iter  =  options.values().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Ilerator  iter  =  options.values().iterator();	  Iterator    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
102	[BUG]  [BUGGY]  accept(token,  throwAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(token,  throwAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(token,  throwAtNonOption);	  accept(throwAtNonOption,    token);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
103	[BUG]  [BUGGY]  accept(token,  swingAtNonOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(token,  swingAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(token,  swingAtNonOption);	  accept(throwAtNonOption,    token);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
104	[BUG]  [BUGGY]  accept(tokens,  token);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(tokens,  token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(tokens,  token);	  accept(throwAtNonOption,    token);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
105	[BUG]  [BUGGY]  accept(token,  options.stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(token,  options.stopAtNonOption,  arguments);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(token,  options.stopAtNonOption,  arguments);	  accept(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
106	[BUG]  [BUGGY]  accept(options,  stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(options,  stopAtNonOption,  arguments);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(options,  stopAtNonOption,  arguments);	  accept(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
107	[BUG]  [BUGGY]  accept(token,  stopAtNonOption,  arguments,  options);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(token,  stopAtNonOption,  arguments,  options);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(token,  stopAtNonOption,  arguments,  options);	  accept(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
108	[BUG]  [BUGGY]  accept(options,  token,  stopAtNonOption,  argumentLength);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(options,  token,  stopAtNonOption,  argumentLength);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(options,  token,  stopAtNonOption,  argumentLength);	  accept(options,    token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
109	[BUG]  [BUGGY]  accept(options,  token,  eatTheRest);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(options,  token,  eatTheRest);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(options,  token,  eatTheRest);	  accept(options,    token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
110	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getOptions().iterator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Iterator  <  String>  iter  =  options.getOptions().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Iterator  <  String>  iter  =  options.getOptions().iterator();	  Iterator    <    String>    iter    =    currentOption.iterator();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
111	[BUG]  [BUGGY]  acceptToken(token,  options.stopAtNonOption,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  acceptToken(token,  options.stopAtNonOption,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	acceptToken(token,  options.stopAtNonOption,  stopAtNonOption);	  acceptToken(token,    options.stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
112	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Ilerator  <  String>  iter  =  options.keySet().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Ilerator  <  String>  iter  =  options.keySet().iterator();	  Iterator    <    String>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
113	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption,  argumentLength);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add(token,  stopAtNonOption,  argumentLength);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add(token,  stopAtNonOption,  argumentLength);	  tokens.add(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
114	[BUG]  [BUGGY]  Iterator  iter  =  options.getOptions().values().iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Iterator  iter  =  options.getOptions().values().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Iterator  iter  =  options.getOptions().values().iterator();	  Iterator    iter    =    options.getOptions().iterator();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
115	[BUG]  [BUGGY]  Iterator  iter  =  options.getOptionIterator().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Iterator  iter  =  options.getOptionIterator().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Iterator  iter  =  options.getOptionIterator().iterator();	  Iterator    iter    =    options.getOptions().iterator();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
116	[BUG]  [BUGGY]  Iterator  iter  =  options.getOptionList().iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Iterator  iter  =  options.getOptionList().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Iterator  iter  =  options.getOptionList().iterator();	  Iterator    iter    =    options.getOptions().iterator();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
117	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Ilerator  <  String>  iter  =  options.values().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Ilerator  <  String>  iter  =  options.values().iterator();	  Iterator    <    String>    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
118	[BUG]  [BUGGY]  tokens.add( "stopAtNonOption ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add( "stopAtNonOption ");  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add( "stopAtNonOption ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	27	None	replace
119	[BUG]  [BUGGY]  tokens.add( "-- ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add( "-- ");  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add( "-- ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	27	None	replace
120	[BUG]  [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	parent  ==  null  &&  stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    tokens.add(currentOption);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
121	[BUG]  [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	parent  ==  null  &&  stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    tokens.add(currentOption);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
122	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption  &&  argumentLength  >  0);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add(token,  stopAtNonOption  &&  argumentLength  >  0);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add(token,  stopAtNonOption  &&  argumentLength  >  0);	  tokens.add(token,    stopAtNonOption    &&    arguments.length    >    0);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
123	[BUG]  [BUGGY]  iter.add(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  iter.add(token,  stopAtNonOption);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	iter.add(token,  stopAtNonOption);	  iter.add(token);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
124	[BUG]  [BUGGY]  iter.remove(token);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  iter.remove(token);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	iter.remove(token);	  iter.add(token);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
125	[BUG]  [BUGGY]  iter.add( "n ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  iter.add( "n ");  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	iter.add( "n ");	  iter.add(token);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
126	[BUG]  [BUGGY]  burstToken(token,  stopAtNonOption,  options,  arguments);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  burstToken(token,  stopAtNonOption,  options,  arguments);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	burstToken(token,  stopAtNonOption,  options,  arguments);	  burstToken(token,    stopAtNonOption,    arguments,    options);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
127	[BUG]  [BUGGY]  tokens.add(tokenLength  -  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add(tokenLength  -  1);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add(tokenLength  -  1);	  tokens.add(tokenLength);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
128	[BUG]  [BUGGY]  Ilerator  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Ilerator  iter  =  options.keySet().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Ilerator  iter  =  options.keySet().iterator();	  Iterator    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
129	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption  &&  options.length);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add(token,  stopAtNonOption  &&  options.length);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add(token,  stopAtNonOption  &&  options.length);	  tokens.add(token,    stopAtNonOption    &&    arguments.length);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
130	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  options.iterator();  while(iter.hasNext())  {  tokens.add(iter.next());  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Ilerator  <  String>  iter  =  options.iterator();  while(iter.hasNext())  {  tokens.add(iter.next());  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Ilerator  <  String>  iter  =  options.iterator();  while(iter.hasNext())  {  tokens.add(iter.next());  }	  Iterator    <    String>    iter    =    options.iterator();    while(iter.hasNext())    {    tokens.add(iter.next());    	non-compiled	[CE]  <identifier>  expected	48	None	replace
131	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Ilerator  <  String>  iter  =  options.iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Ilerator  <  String>  iter  =  options.iterator();	  Iterator    <    String>    iter    =    tokens.iterator();    	non-compiled	[CE]  <identifier>  expected	44	None	replace
132	[BUG]  [BUGGY]  accept(token,  target);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(token,  target);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(token,  target);	  accept(throwAtNonOption,    token);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
133	[BUG]  [BUGGY]  accept(storage,  token,  stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(storage,  token,  stopAtNonOption,  arguments);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(storage,  token,  stopAtNonOption,  arguments);	  accept(storage,    token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
134	[BUG]  [BUGGY]  accept(storage,  stopAtNonOption,  tokenLength);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(storage,  stopAtNonOption,  tokenLength);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(storage,  stopAtNonOption,  tokenLength);	  accept(storage,    token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
135	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokenLength);  if(currentOption!=  null)  {  tokens.add(currentOption);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  currentOption  =  options.getOption(tokenLength);  if(currentOption!=  null)  {  tokens.add(currentOption);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Option  currentOption  =  options.getOption(tokenLength);  if(currentOption!=  null)  {  tokens.add(currentOption);  }	  Option    currentOption    =    options.getOption(token);    if(currentOption!=    null)    {    tokens.add(currentOption);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
136	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Iterator  <  Option>  iter  =  options.iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Iterator  <  Option>  iter  =  options.iterator();	  Iterator    iter    =    currentOption.options.iterator();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
137	[BUG]  [BUGGY]  acceptToken(token,  stopAtNonOption,  arguments,  eatTheRest);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  acceptToken(token,  stopAtNonOption,  arguments,  eatTheRest);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	acceptToken(token,  stopAtNonOption,  arguments,  eatTheRest);	  acceptToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
138	[BUG]  [BUGGY]  accept(token,  stopAtNonOption,  options.size()  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(token,  stopAtNonOption,  options.size()  +  1);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(token,  stopAtNonOption,  options.size()  +  1);	  accept(token,    stopAtNonOption,    options.size());    	non-compiled	[CE]  <identifier>  expected	42	None	replace
139	[BUG]  [BUGGY]  burstToken(token,  stopAtNonOption,  arguments,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  burstToken(token,  stopAtNonOption,  arguments,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	burstToken(token,  stopAtNonOption,  arguments,  stopAtNonOption);	  burstToken(token,    stopAtNonOption,    arguments,    eatTheRest);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
140	[BUG]  [BUGGY]  burstToken(token,  stopAtNonOption,  arguments,  endAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  burstToken(token,  stopAtNonOption,  arguments,  endAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	burstToken(token,  stopAtNonOption,  arguments,  endAtNonOption);	  burstToken(token,    stopAtNonOption,    arguments,    eatTheRest);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
141	[BUG]  [BUGGY]  burstToken(token,  stopAtNonOption,  arguments,  0,  tokenLength);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  burstToken(token,  stopAtNonOption,  arguments,  0,  tokenLength);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	burstToken(token,  stopAtNonOption,  arguments,  0,  tokenLength);	  burstToken(token,    stopAtNonOption,    arguments,    tokenLength);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
142	[BUG]  [BUGGY]  burstToken(token,  stopAtNonOption,  arguments,  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  burstToken(token,  stopAtNonOption,  arguments,  1);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	burstToken(token,  stopAtNonOption,  arguments,  1);	  burstToken(token,    stopAtNonOption,    arguments,    tokenLength);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
143	[BUG]  [BUGGY]  burstToken(token,  options.stopAtNonOption,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  burstToken(token,  options.stopAtNonOption,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	burstToken(token,  options.stopAtNonOption,  stopAtNonOption);	  burstToken(token,    options.stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
144	[BUG]  [BUGGY]  burstToken(token,  options.stopAtNonOption,  tokenLength);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  burstToken(token,  options.stopAtNonOption,  tokenLength);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	burstToken(token,  options.stopAtNonOption,  tokenLength);	  burstToken(token,    options.stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
145	[BUG]  [BUGGY]  accept(token,  stopAtNonOption,  arguments.length,  eatTheRest);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(token,  stopAtNonOption,  arguments.length,  eatTheRest);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(token,  stopAtNonOption,  arguments.length,  eatTheRest);	  accept(token,    stopAtNonOption,    arguments.length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
146	[BUG]  [BUGGY]  tokens.add( "- ",  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add( "- ",  stopAtNonOption);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add( "- ",  stopAtNonOption);	  tokens.add(   "-   ");    	non-compiled	[CE]  <identifier>  expected	45	None	replace
147	[BUG]  [BUGGY]  acceptToken(token,  options.size());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  acceptToken(token,  options.size());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	acceptToken(token,  options.size());	  acceptToken(token,    stopAtNonOption,    options.size());    	non-compiled	[CE]  <identifier>  expected	43	None	replace
148	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Iterator  <  String>  iter  =  options.iterator();  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  Iterator  <  String>  iter  =  options.iterator();  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	if(stopAtNonOption)  {  Iterator  <  String>  iter  =  options.iterator();  tokens.add(token);  }	  Iterator    <    String>    iter    =    options.iterator();    tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
149	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  options.iterator();  tokens.add(token);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Ilerator  <  String>  iter  =  options.iterator();  tokens.add(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Ilerator  <  String>  iter  =  options.iterator();  tokens.add(token);	  Iterator    <    String>    iter    =    options.iterator();    tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
150	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption)+  0;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add(token,  stopAtNonOption)+  0;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add(token,  stopAtNonOption)+  0;	  tokens.add(token,    stopAtNonOption)+    1;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
151	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption  -  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add(token,  stopAtNonOption  -  1);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add(token,  stopAtNonOption  -  1);	  tokens.add(token,    stopAtNonOption    +    1);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
152	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption?  options  :  null);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add(token,  stopAtNonOption?  options  :  null);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add(token,  stopAtNonOption?  options  :  null);	  tokens.add(token,    stopAtNonOption,    options);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
153	[BUG]  [BUGGY]  accept(token,  stopAtNonOption,  arguments,  eatTheRest);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(token,  stopAtNonOption,  arguments,  eatTheRest);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(token,  stopAtNonOption,  arguments,  eatTheRest);	  accept(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
154	[BUG]  [BUGGY]  accept(token,  stopAtNonOption,  arguments,  tokenLength);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(token,  stopAtNonOption,  arguments,  tokenLength);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(token,  stopAtNonOption,  arguments,  tokenLength);	  accept(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
155	[BUG]  [BUGGY]  accept(options,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(options,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(options,  stopAtNonOption);	  accept(arguments,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
156	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  Iterator    <    String>    iter    =    options.iterator();    while(iter.hasNext())    {    tokens.add(iter.next());    	non-compiled	[CE]  <identifier>  expected	48	None	replace
157	[BUG]  [BUGGY]  acceptOption(token,  options);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  acceptOption(token,  options);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	acceptOption(token,  options);	  burstToken(token,    options);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
158	[BUG]  [BUGGY]  tokens.add( "stop ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add( "stop ");  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add( "stop ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	27	None	replace
159	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption  +  1,  arguments);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add(token,  stopAtNonOption  +  1,  arguments);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add(token,  stopAtNonOption  +  1,  arguments);	  tokens.add(token,    stopAtNonOption    +    1);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
160	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption)+  arguments.length;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add(token,  stopAtNonOption)+  arguments.length;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add(token,  stopAtNonOption)+  arguments.length;	  tokens.add(token,    stopAtNonOption)+    1;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
161	[BUG]  [BUGGY]  accept(token,  arguments,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(token,  arguments,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(token,  arguments,  stopAtNonOption);	  accept(token,    stopAtNonOption,    arguments.length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
162	[BUG]  [BUGGY]  accept(token,  stopAtNonOption,  arguments,  null);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(token,  stopAtNonOption,  arguments,  null);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(token,  stopAtNonOption,  arguments,  null);	  accept(token,    stopAtNonOption,    arguments.length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
163	[BUG]  [BUGGY]  accept(token,  options.size(),  arguments.length);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(token,  options.size(),  arguments.length);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(token,  options.size(),  arguments.length);	  accept(token,    stopAtNonOption,    arguments.length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
164	[BUG]  [BUGGY]  tokens.add(options.getOption(tokenLength));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add(options.getOption(tokenLength));  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add(options.getOption(tokenLength));	  tokens.add(options.getOption(token));    	non-compiled	[CE]  <identifier>  expected	20	None	replace
165	[BUG]  [BUGGY]  accept(options,  token,  arguments,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(options,  token,  arguments,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(options,  token,  arguments,  stopAtNonOption);	  accept(options,    token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
166	[BUG]  [BUGGY]  accept(token,  options.hasOption(token));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(token,  options.hasOption(token));  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(token,  options.hasOption(token));	  accept(options,    token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
167	[BUG]  [BUGGY]  tokens.add( ",  stopAtNonOption ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add( ",  stopAtNonOption ");  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add( ",  stopAtNonOption ");	  tokens.add(   "-   ");    	non-compiled	[CE]  <identifier>  expected	45	None	replace
168	[BUG]  [BUGGY]  iter.add(arguments[0]);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  iter.add(arguments[0]);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	iter.add(arguments[0]);	  iter.add(token);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
169	[BUG]  [BUGGY]  iter.add( "- ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  iter.add( "- ");  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	iter.add( "- ");	  iter.add(token);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
170	[BUG]  [BUGGY]  iter.addValue(token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  iter.addValue(token);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	iter.addValue(token);	  iter.add(token);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
171	[BUG]  [BUGGY]  burstToken(token,  options,  arguments,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  burstToken(token,  options,  arguments,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	burstToken(token,  options,  arguments,  stopAtNonOption);	  burstToken(token,    stopAtNonOption,    arguments,    options);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
172	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.allOptions().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Iterator  <  String>  iter  =  options.allOptions().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Iterator  <  String>  iter  =  options.allOptions().iterator();	  Iterator    <    String>    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
173	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.list().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Iterator  <  String>  iter  =  options.list().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Iterator  <  String>  iter  =  options.list().iterator();	  Iterator    <    String>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
174	[BUG]  [BUGGY]  Iterator  iter  =  options.allOptions().iterator();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Iterator  iter  =  options.allOptions().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Iterator  iter  =  options.allOptions().iterator();	  Iterator    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
175	[BUG]  [BUGGY]  acceptToken(token,  stopAtNonOption,  arguments,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  acceptToken(token,  stopAtNonOption,  arguments,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	acceptToken(token,  stopAtNonOption,  arguments,  stopAtNonOption);	  burstToken(token,    stopAtNonOption,    arguments,    eatTheRest);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
176	[BUG]  [BUGGY]  acceptToken(token,  stopAtNonOption,  arguments,  option);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  acceptToken(token,  stopAtNonOption,  arguments,  option);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	acceptToken(token,  stopAtNonOption,  arguments,  option);	  acceptToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
177	[BUG]  [BUGGY]  acceptToken(token,  options.size(),  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  acceptToken(token,  options.size(),  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	acceptToken(token,  options.size(),  stopAtNonOption);	  acceptToken(token,    stopAtNonOption,    options.size());    	non-compiled	[CE]  <identifier>  expected	43	None	replace
178	[BUG]  [BUGGY]  tokens.add(token,  stopsAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add(token,  stopsAtNonOption,  arguments);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add(token,  stopsAtNonOption,  arguments);	  tokens.add(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
179	[BUG]  [BUGGY]  accept(token,  token);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(token,  token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(token,  token);	  accept(throwAtNonOption,    token);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
180	[BUG]  [BUGGY]  Iterator  iter  =  options.getAllOptions().iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Iterator  iter  =  options.getAllOptions().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Iterator  iter  =  options.getAllOptions().iterator();	  Iterator    iter    =    options.getOptions().iterator();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
181	[BUG]  [BUGGY]  Iterator  iter  =  options.getOptionIterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Iterator  iter  =  options.getOptionIterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Iterator  iter  =  options.getOptionIterator();	  Iterator    iter    =    options.getOptions().iterator();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
182	[BUG]  [BUGGY]  accept(token,  options.stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(token,  options.stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	accept(token,  options.stopAtNonOption);	  acceptToken(token,    options.stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
183	[BUG]  [BUGGY]  acceptToken(token,  options.stopOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  acceptToken(token,  options.stopOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	acceptToken(token,  options.stopOption);	  acceptToken(token,    options.stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
184	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokenLength,  arguments.length);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  currentOption  =  options.getOption(tokenLength,  arguments.length);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Option  currentOption  =  options.getOption(tokenLength,  arguments.length);	  Option    currentOption    =    options.getOption(tokenLength,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
185	[BUG]  [BUGGY]  tokens.add(token,  arguments,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add(token,  arguments,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	tokens.add(token,  arguments,  stopAtNonOption);	  tokens.add(token,    stopAtNonOption,    options);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
186	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption)+  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption)+  1;  [BUGGY]      burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.4082482904638631	145	145	1	replace	Option  currentOption  =  options.getOption(token,  stopAtNonOption)+  1;	  Option    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
