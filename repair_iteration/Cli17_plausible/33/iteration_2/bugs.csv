bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(stopAtNonOption)  {  gobble(tokens,  iter);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  if(stopAtNonOption)  {  gobble(tokens,  iter);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	if(stopAtNonOption)  {  gobble(tokens,  iter);  }	  gobble(tokens,    iter);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
2	[BUG]  [BUGGY]  if(stopAtNonOption)  {  gobble(tokens,  iter);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  if(stopAtNonOption)  {  gobble(tokens,  iter);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	if(stopAtNonOption)  {  gobble(tokens,  iter);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  gobble(tokens,    iter);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
3	[BUG]  [BUGGY]  if(stopAtNonOption)  {  gobble(tokens,  iter);  }  else  {  tokens.add(item);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  if(stopAtNonOption)  {  gobble(tokens,  iter);  }  else  {  tokens.add(item);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	if(stopAtNonOption)  {  gobble(tokens,  iter);  }  else  {  tokens.add(item);  }	  gobble(tokens,    iter);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
4	[BUG]  [BUGGY]  if(stopAtNonOption)  {  gobble(tokens,  iter);  }  else  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  if(stopAtNonOption)  {  gobble(tokens,  iter);  }  else  {  tokens.add(token);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	if(stopAtNonOption)  {  gobble(tokens,  iter);  }  else  {  tokens.add(token);  }	  gobble(tokens,    iter);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
5	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  tokens.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  Iterator  <  String>  iter  =  tokens.iterator();  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	Iterator  <  String>  iter  =  tokens.iterator();	      Iterator    <    String>    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
6	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  currentOption.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  Iterator  <  String>  iter  =  currentOption.iterator();  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	Iterator  <  String>  iter  =  currentOption.iterator();	      Iterator    <    String>    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
7	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  currentOption.iterator();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  Iterator  <  Option>  iter  =  currentOption.iterator();  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	Iterator  <  Option>  iter  =  currentOption.iterator();	      Iterator    <    Option>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
8	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  arguments.iterator();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  Iterator  <  Option>  iter  =  arguments.iterator();  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	Iterator  <  Option>  iter  =  arguments.iterator();	      Iterator    <    Option>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
9	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  tokens.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  Iterator  <  Option>  iter  =  tokens.iterator();  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	Iterator  <  Option>  iter  =  tokens.iterator();	      Iterator    <    Option>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
10	[BUG]  [BUGGY]  if(stopAtNonOption)  {  proceed(iter);  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  if(stopAtNonOption)  {  proceed(iter);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	if(stopAtNonOption)  {  proceed(iter);  }	  proceed(iter);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
11	[BUG]  [BUGGY]  if(stopAtNonOption)  {  proceed(iter);  }  else  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  if(stopAtNonOption)  {  proceed(iter);  }  else  {  tokens.add(token);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	if(stopAtNonOption)  {  proceed(iter);  }  else  {  tokens.add(token);  }	  proceed(iter);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
12	[BUG]  [BUGGY]  if(stopAtNonOption)  {  proceed(iter);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  if(stopAtNonOption)  {  proceed(iter);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	if(stopAtNonOption)  {  proceed(iter);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  proceed(iter);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
13	[BUG]  [BUGGY]  if(stopAtNonOption)  {  proceed(iter);  }  else  {  tokens.add( "n ");  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  if(stopAtNonOption)  {  proceed(iter);  }  else  {  tokens.add( "n ");  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	if(stopAtNonOption)  {  proceed(iter);  }  else  {  tokens.add( "n ");  }	  proceed(iter);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
14	[BUG]  [BUGGY]  Iterator  iter  =  tokens.iterator();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  Iterator  iter  =  tokens.iterator();  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	Iterator  iter  =  tokens.iterator();	      Iterator    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
15	[BUG]  [BUGGY]  Iterator  iter  =  currentOption.iterator();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  Iterator  iter  =  currentOption.iterator();  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	Iterator  iter  =  currentOption.iterator();	      Iterator    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
16	[BUG]  [BUGGY]  Ilerator  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  Ilerator  iter  =  options.iterator();  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	Ilerator  iter  =  options.iterator();	      Iterator    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
17	[BUG]  [BUGGY]  if(stopAtNonOption)  {  gobble(tokens);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  if(stopAtNonOption)  {  gobble(tokens);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	if(stopAtNonOption)  {  gobble(tokens);  }	  gobble(tokens);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
18	[BUG]  [BUGGY]  if(stopAtNonOption)  {  gobble(tokens);  }  else  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  if(stopAtNonOption)  {  gobble(tokens);  }  else  {  tokens.add(token);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	if(stopAtNonOption)  {  gobble(tokens);  }  else  {  tokens.add(token);  }	  gobble(tokens);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
19	[BUG]  [BUGGY]  if(stopAtNonOption)  {  gobble(tokens);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  if(stopAtNonOption)  {  gobble(tokens);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	if(stopAtNonOption)  {  gobble(tokens);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  gobble(tokens);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
20	[BUG]  [BUGGY]  if(stopAtNonOption)  {  gobble(tokens);  }  else  {  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  if(stopAtNonOption)  {  gobble(tokens);  }  else  {  tokens.clear();  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	if(stopAtNonOption)  {  gobble(tokens);  }  else  {  tokens.clear();  }	  gobble(tokens);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
21	[BUG]  [BUGGY]  Iterator  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  Iterator  iter  =  options.keySet().iterator();  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	Iterator  iter  =  options.keySet().iterator();	  iter.remove();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
22	[BUG]  [BUGGY]  iter  =  arguments.iterator();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  iter  =  arguments.iterator();  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	iter  =  arguments.iterator();	      iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
23	[BUG]  [BUGGY]  iter  =  currentOption.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  iter  =  currentOption.iterator();  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	iter  =  currentOption.iterator();	      iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
24	[BUG]  [BUGGY]  if(stopAtNonOption)  {  process(iter);  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  if(stopAtNonOption)  {  process(iter);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	if(stopAtNonOption)  {  process(iter);  }	  process(iter);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
25	[BUG]  [BUGGY]  if(stopAtNonOption)  {  process(iter);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  if(stopAtNonOption)  {  process(iter);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	if(stopAtNonOption)  {  process(iter);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  process(iter);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
26	[BUG]  [BUGGY]  if(stopAtNonOption)  {  process(iter);  }  else  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  if(stopAtNonOption)  {  process(iter);  }  else  {  tokens.add(token);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	if(stopAtNonOption)  {  process(iter);  }  else  {  tokens.add(token);  }	  process(iter);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
27	[BUG]  [BUGGY]  if(stopAtNonOption)  {  process(iter);  }  else  {  tokens.add(item);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  if(stopAtNonOption)  {  process(iter);  }  else  {  tokens.add(item);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	if(stopAtNonOption)  {  process(iter);  }  else  {  tokens.add(item);  }	  process(iter);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
28	[BUG]  [BUGGY]  tokens.add(token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  tokens.add(token);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	tokens.add(token);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
29	[BUG]  [BUGGY]  return(String[])tokens.toArray(new  String[tokenLength]);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  return(String[])tokens.toArray(new  String[tokenLength]);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	return(String[])tokens.toArray(new  String[tokenLength]);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
30	[BUG]  [BUGGY]  return(String[])options.toArray(new  String[0]);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  return(String[])options.toArray(new  String[0]);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	return(String[])options.toArray(new  String[0]);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
31	[BUG]  [BUGGY]  return(String[])options.toArray(arguments);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  return(String[])options.toArray(arguments);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	return(String[])options.toArray(arguments);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
32	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest(iter);  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  if(stopAtNonOption)  {  eatTheRest(iter);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	if(stopAtNonOption)  {  eatTheRest(iter);  }	  eatTheRest(iter);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
33	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest(iter);  }  else  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  if(stopAtNonOption)  {  eatTheRest(iter);  }  else  {  tokens.add(token);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	if(stopAtNonOption)  {  eatTheRest(iter);  }  else  {  tokens.add(token);  }	  eatTheRest(iter);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
34	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest(iter);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  if(stopAtNonOption)  {  eatTheRest(iter);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	if(stopAtNonOption)  {  eatTheRest(iter);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  eatTheRest(iter);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
35	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest(iter);  }  else  {  tokens.add( "n ");  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  if(stopAtNonOption)  {  eatTheRest(iter);  }  else  {  tokens.add( "n ");  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	if(stopAtNonOption)  {  eatTheRest(iter);  }  else  {  tokens.add( "n ");  }	  eatTheRest(iter);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
36	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest(iter);  }  else  {  tokens.add(tokenLength);  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  if(stopAtNonOption)  {  eatTheRest(iter);  }  else  {  tokens.add(tokenLength);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	if(stopAtNonOption)  {  eatTheRest(iter);  }  else  {  tokens.add(tokenLength);  }	  eatTheRest(iter);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
37	[BUG]  [BUGGY]  process(token);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  process(token);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	process(token);	  process(iter);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
38	[BUG]  [BUGGY]  eatTheRest  =  process(iter);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  eatTheRest  =  process(iter);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	eatTheRest  =  process(iter);	  process(iter);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
39	[BUG]  [BUGGY]  process(arguments,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  process(arguments,  stopAtNonOption);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	process(arguments,  stopAtNonOption);	  process(iter);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
40	[BUG]  [BUGGY]  eatTheRest(tokens);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  eatTheRest(tokens);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	eatTheRest(tokens);	  gobble(tokens);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
41	[BUG]  [BUGGY]  stopAtNonOption  =  tokens.get(tokenLength);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  stopAtNonOption  =  tokens.get(tokenLength);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	stopAtNonOption  =  tokens.get(tokenLength);	  gobble(tokens);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
42	[BUG]  [BUGGY]  stopAtNonOption  =  tokens.remove(token);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  stopAtNonOption  =  tokens.remove(token);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	stopAtNonOption  =  tokens.remove(token);	  gobble(tokens);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
43	[BUG]  [BUGGY]  stopAtNonOption  =  tokens.isEmpty();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  stopAtNonOption  =  tokens.isEmpty();  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	stopAtNonOption  =  tokens.isEmpty();	  gobble(tokens);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
44	[BUG]  [BUGGY]  iter.remove(arguments[0]);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  iter.remove(arguments[0]);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	iter.remove(arguments[0]);	  iter.remove();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
45	[BUG]  [BUGGY]  iter.remove(token);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  iter.remove(token);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	iter.remove(token);	  iter.remove();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
46	[BUG]  [BUGGY]  Iterator  iter  =  currentOption.options.iterator();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  Iterator  iter  =  currentOption.options.iterator();  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	Iterator  iter  =  currentOption.options.iterator();	      Iterator    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
47	[BUG]  [BUGGY]  Iterator  iter  =  currentOptions.iterator();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  Iterator  iter  =  currentOptions.iterator();  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	Iterator  iter  =  currentOptions.iterator();	      Iterator    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
48	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  Iterator  <  String>  iter  =  options.values().iterator();  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	Iterator  <  String>  iter  =  options.values().iterator();	      Iterator    <    String>    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
49	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  Ilerator  <  String>  iter  =  options.iterator();  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	Ilerator  <  String>  iter  =  options.iterator();	      Iterator    <    String>    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
50	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  Iterator  <  String>  iter  =  options.keySet().iterator();  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	Iterator  <  String>  iter  =  options.keySet().iterator();	      Iterator    <    String>    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
51	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  currentOptions.iterator();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  Iterator  <  Option>  iter  =  currentOptions.iterator();  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	Iterator  <  Option>  iter  =  currentOptions.iterator();	      Iterator    <    Option>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
52	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  Iterator  <  Option>  iter  =  options.values().iterator();  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	Iterator  <  Option>  iter  =  options.values().iterator();	      Iterator    <    Option>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
53	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Iterator  iter  =  arguments.iterator();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  if(stopAtNonOption)  {  Iterator  iter  =  arguments.iterator();  }  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	if(stopAtNonOption)  {  Iterator  iter  =  arguments.iterator();  }	      Iterator    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
54	[BUG]  [BUGGY]  if(stopAtNonOption)  {  iter  =  arguments.iterator();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  if(stopAtNonOption)  {  iter  =  arguments.iterator();  }  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	if(stopAtNonOption)  {  iter  =  arguments.iterator();  }	      Iterator    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
55	[BUG]  [BUGGY]  eatTheRest(tokens,  iter);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  eatTheRest(tokens,  iter);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	eatTheRest(tokens,  iter);	  gobble(tokens,    iter);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
56	[BUG]  [BUGGY]  process(tokens,  iter);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  process(tokens,  iter);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	process(tokens,  iter);	  gobble(tokens,    iter);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
57	[BUG]  [BUGGY]  gobble(iter,  tokens);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  gobble(iter,  tokens);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	gobble(iter,  tokens);	  gobble(tokens,    iter);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
58	[BUG]  [BUGGY]  return  options.toArray(new  String[tokenLength]);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  return  options.toArray(new  String[tokenLength]);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	return  options.toArray(new  String[tokenLength]);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
59	[BUG]  [BUGGY]  return(tokenLength  >  0)?  options.get(tokenLength  -  1):  null;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  return(tokenLength  >  0)?  options.get(tokenLength  -  1):  null;  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	return(tokenLength  >  0)?  options.get(tokenLength  -  1):  null;	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
60	[BUG]  [BUGGY]  return(tokenLength  >  0)?  options.get(tokenLength  -  1):  arguments[0];  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  return(tokenLength  >  0)?  options.get(tokenLength  -  1):  arguments[0];  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	return(tokenLength  >  0)?  options.get(tokenLength  -  1):  arguments[0];	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
61	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  currentOption.options.iterator();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  Iterator  <  String>  iter  =  currentOption.options.iterator();  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	Iterator  <  String>  iter  =  currentOption.options.iterator();	      Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
62	[BUG]  [BUGGY]  process(iter,  tokens);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  process(iter,  tokens);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	process(iter,  tokens);	  gobble(tokens,    iter);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
63	[BUG]  [BUGGY]  process(arguments);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  process(arguments);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	process(arguments);	  process(iter);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
64	[BUG]  [BUGGY]  process(arguments,  iter);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  process(arguments,  iter);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	process(arguments,  iter);	  process(iter);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
65	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest(iter);  }  else  {  tokens.add(arguments[0]);  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  if(stopAtNonOption)  {  eatTheRest(iter);  }  else  {  tokens.add(arguments[0]);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	if(stopAtNonOption)  {  eatTheRest(iter);  }  else  {  tokens.add(arguments[0]);  }	  eatTheRest(iter);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
66	[BUG]  [BUGGY]  stopAtNonOption  =  tokens.isEmpty()?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  stopAtNonOption  =  tokens.isEmpty()?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	stopAtNonOption  =  tokens.isEmpty()?  Boolean.TRUE  :  Boolean.FALSE;	  gobble(tokens);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
67	[BUG]  [BUGGY]  stopAtNonOption  =  tokens.isEmpty()?  null  :  tokens.toArray(new  String[tokenLength]));  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  stopAtNonOption  =  tokens.isEmpty()?  null  :  tokens.toArray(new  String[tokenLength]));  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	stopAtNonOption  =  tokens.isEmpty()?  null  :  tokens.toArray(new  String[tokenLength]));	  gobble(tokens);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
68	[BUG]  [BUGGY]  stopAtNonOption  =  tokens.isEmpty()?  null  :  tokens.toArray(new  String[tokenLength]);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  stopAtNonOption  =  tokens.isEmpty()?  null  :  tokens.toArray(new  String[tokenLength]);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	stopAtNonOption  =  tokens.isEmpty()?  null  :  tokens.toArray(new  String[tokenLength]);	  gobble(tokens);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
69	[BUG]  [BUGGY]  stopAtNonOption  =  tokens.isEmpty()?  null  :  tokens.toArray(new  String[]  {  }  );  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  stopAtNonOption  =  tokens.isEmpty()?  null  :  tokens.toArray(new  String[]  {  }  );  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	stopAtNonOption  =  tokens.isEmpty()?  null  :  tokens.toArray(new  String[]  {  }  );	  gobble(tokens);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
70	[BUG]  [BUGGY]  tokens.add(arguments[0].toString());  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  tokens.add(arguments[0].toString());  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	tokens.add(arguments[0].toString());	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
71	[BUG]  [BUGGY]  return  options.toArray(arguments);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  return  options.toArray(arguments);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	return  options.toArray(arguments);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
72	[BUG]  [BUGGY]  tokens.add(arguments[0]);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  tokens.add(arguments[0]);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	tokens.add(arguments[0]);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
73	[BUG]  [BUGGY]  iter  =  tokens.iterator();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  iter  =  tokens.iterator();  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	iter  =  tokens.iterator();	      iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
74	[BUG]  [BUGGY]  iter.clear();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  iter.clear();  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	iter.clear();	  iter.remove();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
75	[BUG]  [BUGGY]  iter.add(arguments[0]);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  iter.add(arguments[0]);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	iter.add(arguments[0]);	  iter.remove();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
76	[BUG]  [BUGGY]  iter.add(arguments[0].toString());  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  iter.add(arguments[0].toString());  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	iter.add(arguments[0].toString());	  iter.remove();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
77	[BUG]  [BUGGY]  Iterator  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  Iterator  iter  =  options.values().iterator();  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	Iterator  iter  =  options.values().iterator();	      Iterator    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
78	[BUG]  [BUGGY]  proceed(token);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  proceed(token);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	proceed(token);	  proceed(iter);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
79	[BUG]  [BUGGY]  proceed(tokenLength);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  proceed(tokenLength);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	proceed(tokenLength);	  proceed(iter);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
80	[BUG]  [BUGGY]  proceed(tokenLength,  iter);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  proceed(tokenLength,  iter);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	proceed(tokenLength,  iter);	  proceed(iter);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
81	[BUG]  [BUGGY]  Iterator  iter  =  this.options.iterator();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  Iterator  iter  =  this.options.iterator();  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	Iterator  iter  =  this.options.iterator();	      Iterator    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
82	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  this.options.iterator();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  }    [BUGGY]  Iterator  <  String>  iter  =  this.options.iterator();  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  int  tokenLength  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	160	160	1	replace	Iterator  <  String>  iter  =  this.options.iterator();	      Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
