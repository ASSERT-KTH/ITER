bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  tokens.add( "-- "  +  currentOption);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  tokens.add( "-- "  +  currentOption);  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- "  +  currentOption);	  tokens.add(   "--   "    +    this.stopAtNonOption);    	non-compiled	[CE]  	2	None	replace
2	[BUG]  [BUGGY]  tokens.add( "-- "  +  this.stopAtNonOption,  eatTheRest);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  tokens.add( "-- "  +  this.stopAtNonOption,  eatTheRest);  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- "  +  this.stopAtNonOption,  eatTheRest);	  tokens.add(   "--   "    +    this.stopAtNonOption);    	non-compiled	[CE]  	2	None	replace
3	[BUG]  [BUGGY]  while(currentOption.hasArg())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  while(currentOption.hasArg())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	while(currentOption.hasArg())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }	      if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	5	None	replace
4	[BUG]  [BUGGY]  While(currentOption.hasArgs())  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  While(currentOption.hasArgs())  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	While(currentOption.hasArgs())  {  tokens.add( "-- ");  tokens.add(value);  }	      if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	5	None	replace
5	[BUG]  [BUGGY]  tokens.add( ";-- ");  [CE]  [FE]        AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  tokens.add( ";-- ");  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( ";-- ");	  tokens.add(   ".--   ");    	non-compiled	[CE]  	16	None	replace
6	[BUG]  [BUGGY]  tokens.add( "[-- ");  [CE]  [FE]          AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  tokens.add( "[-- ");  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "[-- ");	  tokens.add(   ".--   ");    	non-compiled	[CE]  	16	None	replace
7	[BUG]  [BUGGY]  tokens.add( ":-- ");  [CE]  [FE]            AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  tokens.add( ":-- ");  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( ":-- ");	  tokens.add(   ".--   ");    	non-compiled	[CE]  	16	None	replace
8	[BUG]  [BUGGY]  tokens.add( "-- "  +  currentOption.getValue());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  tokens.add( "-- "  +  currentOption.getValue());  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- "  +  currentOption.getValue());	  tokens.add(   "--   "    +    currentOption.getName());    	non-compiled	[CE]  	3	None	replace
9	[BUG]  [BUGGY]  tokens.add( "-- "  +  currentOption.toString());  [CE]  [FE]              AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  tokens.add( "-- "  +  currentOption.toString());  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- "  +  currentOption.toString());	  tokens.add(   "--   "    +    currentOption.getName());    	non-compiled	[CE]  	3	None	replace
10	[BUG]  [BUGGY]  tokens.add( "-- "  +  currentOption.getName(),  value);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  tokens.add( "-- "  +  currentOption.getName(),  value);  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- "  +  currentOption.getName(),  value);	  tokens.add(   "--   "    +    currentOption.getName());    	non-compiled	[CE]  	3	None	replace
11	[BUG]  [BUGGY]  tokens.add( "-- ");  currentOption  =  new  Option();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  tokens.add( "-- ");  currentOption  =  new  Option();  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- ");  currentOption  =  new  Option();	      tokens.add(   "--   ");    currentOption    =    null;    	non-compiled	[CE]  	12	None	replace
12	[BUG]  [BUGGY]  tokens.add( "-- ");  currentOption  =  this;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  tokens.add( "-- ");  currentOption  =  this;  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- ");  currentOption  =  this;	      tokens.add(   "--   ");    currentOption    =    null;    	non-compiled	[CE]  	12	None	replace
13	[BUG]  [BUGGY]  tokens.add( "-- ");  currentOption  =  options;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  tokens.add( "-- ");  currentOption  =  options;  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- ");  currentOption  =  options;	      tokens.add(   "--   ");    currentOption    =    null;    	non-compiled	[CE]  	12	None	replace
14	[BUG]  [BUGGY]  tokens.remove(0);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  tokens.remove(0);  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.remove(0);	  tokens.remove(   "--   ");    	non-compiled	[CE]  	13	None	replace
15	[BUG]  [BUGGY]  tokens.remove( "-- "  +  value);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  tokens.remove( "-- "  +  value);  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.remove( "-- "  +  value);	  tokens.remove(   "--   ");    	non-compiled	[CE]  	13	None	replace
16	[BUG]  [BUGGY]  eatTheRest  =  currentOption.hasArg();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  eatTheRest  =  currentOption.hasArg();  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  currentOption.hasArg();	      eatTheRest    =    stopAtNonOption.hasArg();    	non-compiled	[CE]  	15	None	replace
17	[BUG]  [BUGGY]  if(stopAtNonOption.hasArg())  {  eatTheRest  =  stopAtNonOption.hasArg();  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  if(stopAtNonOption.hasArg())  {  eatTheRest  =  stopAtNonOption.hasArg();  }  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption.hasArg())  {  eatTheRest  =  stopAtNonOption.hasArg();  }	      eatTheRest    =    stopAtNonOption.hasArg();    	non-compiled	[CE]  	15	None	replace
18	[BUG]  [BUGGY]  if(stopAtNonOption.hasArg())  {  eatTheRest  =  stopAtNonOption.hasArg();  }  else  {  tokens.add( "-- ");  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  if(stopAtNonOption.hasArg())  {  eatTheRest  =  stopAtNonOption.hasArg();  }  else  {  tokens.add( "-- ");  }  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption.hasArg())  {  eatTheRest  =  stopAtNonOption.hasArg();  }  else  {  tokens.add( "-- ");  }	      eatTheRest    =    stopAtNonOption.hasArg();    	non-compiled	[CE]  	15	None	replace
19	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(value);  }  else  {  stopAtNonOption  =  true;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  if(stopAtNonOption)  {  tokens.add(value);  }  else  {  stopAtNonOption  =  true;  }  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption)  {  tokens.add(value);  }  else  {  stopAtNonOption  =  true;  }	      	non-compiled	[CE]  	4	None	replace
20	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  if(stopAtNonOption)  {  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption)  {  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }	      	non-compiled	[CE]  	4	None	replace
21	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(currentOption);  }  else  {  stopAtNonOption  =  true;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  if(stopAtNonOption)  {  tokens.add(currentOption);  }  else  {  stopAtNonOption  =  true;  }  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption)  {  tokens.add(currentOption);  }  else  {  stopAtNonOption  =  true;  }	      	non-compiled	[CE]  	4	None	replace
22	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(currentOption);  }  else  {  stopAtNonOption  =  false;  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  if(stopAtNonOption)  {  tokens.add(currentOption);  }  else  {  stopAtNonOption  =  false;  }  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption)  {  tokens.add(currentOption);  }  else  {  stopAtNonOption  =  false;  }	      	non-compiled	[CE]  	4	None	replace
23	[BUG]  [BUGGY]  options.add( "-- ");  tokens.add(value);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  options.add( "-- ");  tokens.add(value);  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	options.add( "-- ");  tokens.add(value);	      if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    stopAtNonOption    =    true;    }    	non-compiled	[CE]  	6	None	replace
24	[BUG]  [BUGGY]  eatTheRest  =  currentOption.stopAtNonOption;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  eatTheRest  =  currentOption.stopAtNonOption;  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  currentOption.stopAtNonOption;	      eatTheRest    =    stopAtNonOption.stopAtNonOption;    	non-compiled	[CE]  	9	None	replace
25	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption.stopAtNonOption();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  eatTheRest  =  stopAtNonOption.stopAtNonOption();  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  stopAtNonOption.stopAtNonOption();	      eatTheRest    =    stopAtNonOption.stopAtNonOption;    	non-compiled	[CE]  	9	None	replace
26	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption.getValue();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  eatTheRest  =  stopAtNonOption.getValue();  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  stopAtNonOption.getValue();	      eatTheRest    =    stopAtNonOption.stopAtNonOption;    	non-compiled	[CE]  	9	None	replace
27	[BUG]  [BUGGY]  While(currentOption.hasArg())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  While(currentOption.hasArg())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	While(currentOption.hasArg())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }	      if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    stopAtNonOption    =    null;    }    	non-compiled	[CE]  	8	None	replace
28	[BUG]  [BUGGY]  While(currentOption.hasArgs())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  While(currentOption.hasArgs())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	While(currentOption.hasArgs())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }	      if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    stopAtNonOption    =    null;    }    	non-compiled	[CE]  	8	None	replace
29	[BUG]  [BUGGY]  While(currentOption.hasArg())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  While(currentOption.hasArg())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	While(currentOption.hasArg())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }	      if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    stopAtNonOption    =    null;    }    	non-compiled	[CE]  	8	None	replace
30	[BUG]  [BUGGY]  while(currentOption.hasArg())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  while(currentOption.hasArg())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	while(currentOption.hasArg())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }	      if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    stopAtNonOption    =    false;    }    	non-compiled	[CE]  	7	None	replace
31	[BUG]  [BUGGY]  while(currentOption.hasArgs())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  while(currentOption.hasArgs())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	while(currentOption.hasArgs())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }	      if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    stopAtNonOption    =    false;    }    	non-compiled	[CE]  	7	None	replace
32	[BUG]  [BUGGY]  tokens.add( "-- "  +  value,  currentOption.hasArg());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  tokens.add( "-- "  +  value,  currentOption.hasArg());  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- "  +  value,  currentOption.hasArg());	  tokens.add(   "--   ",    currentOption.hasArg());    	non-compiled	[CE]  	14	None	replace
33	[BUG]  [BUGGY]  tokens.add( "-- ",  currentOption.getValue());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  tokens.add( "-- ",  currentOption.getValue());  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- ",  currentOption.getValue());	  tokens.add(   "--   ",    currentOption.hasArg());    	non-compiled	[CE]  	14	None	replace
34	[BUG]  [BUGGY]  tokens.add( "-- ",  currentOption.getArg());  [CE]  [FE]              AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  tokens.add( "-- ",  currentOption.getArg());  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- ",  currentOption.getArg());	  tokens.add(   "--   ",    currentOption.hasArg());    	non-compiled	[CE]  	14	None	replace
35	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalArgumentException( " ");  }	      tokens.add(   "--   ");    tokens.add(value);    	non-compiled	[CE]  	10	None	replace
36	[BUG]  [BUGGY]  eatTheRest  =  true;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  eatTheRest  =  true;  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  true;	      eatTheRest    =    stopAtNonOption;    	non-compiled	[CE]  	11	None	replace
37	[BUG]  [BUGGY]  eatTheRest  =  false;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  eatTheRest  =  false;  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  false;	      eatTheRest    =    stopAtNonOption;    	non-compiled	[CE]  	11	None	replace
38	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption  ||  currentOption.hasArg();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  eatTheRest  =  stopAtNonOption  ||  currentOption.hasArg();  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  stopAtNonOption  ||  currentOption.hasArg();	      eatTheRest    =    stopAtNonOption;    	non-compiled	[CE]  	11	None	replace
39	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption  ||  currentOption.hasArgs();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  eatTheRest  =  stopAtNonOption  ||  currentOption.hasArgs();  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  stopAtNonOption  ||  currentOption.hasArgs();	      eatTheRest    =    stopAtNonOption;    	non-compiled	[CE]  	11	None	replace
40	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption  +  1;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  eatTheRest  =  stopAtNonOption  +  1;  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  stopAtNonOption  +  1;	      eatTheRest    =    stopAtNonOption;    	non-compiled	[CE]  	11	None	replace
41	[BUG]  [BUGGY]  if(stopAtNonOption.hasArg())  {  eatTheRest  =  stopAtNonOption.hasArg();  }  else  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  if(stopAtNonOption.hasArg())  {  eatTheRest  =  stopAtNonOption.hasArg();  }  else  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption.hasArg())  {  eatTheRest  =  stopAtNonOption.hasArg();  }  else  {  tokens.add( "-- ");  tokens.add(value);  }	      eatTheRest    =    stopAtNonOption.hasArg();    	non-compiled	[CE]  	15	None	replace
42	[BUG]  [BUGGY]  eatTheRest  =  currentOption.hasArgs();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  eatTheRest  =  currentOption.hasArgs();  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  currentOption.hasArgs();	      eatTheRest    =    stopAtNonOption.hasArg();    	non-compiled	[CE]  	15	None	replace
43	[BUG]  [BUGGY]  tokens.add( "-- "  +  value,  stopAtNonOption);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  tokens.add( "-- "  +  value,  stopAtNonOption);  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- "  +  value,  stopAtNonOption);	  tokens.add(   "--   "    +    value);    	non-compiled	[CE]  	1	None	replace
44	[BUG]  [BUGGY]  tokens.add( "-- "  +  eatTheRest);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  tokens.add( "-- "  +  eatTheRest);  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- "  +  eatTheRest);	  tokens.add(   "--   "    +    value);    	non-compiled	[CE]  	1	None	replace
45	[BUG]  [BUGGY]  tokens.put( "-- ", "-- ");  [CE]  [FE]        AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  tokens.put( "-- ", "-- ");  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.put( "-- ", "-- ");	  tokens.remove(   "--   ");    	non-compiled	[CE]  	13	None	replace
46	[BUG]  [BUGGY]  tokens.clear();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  tokens.clear();  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.clear();	  tokens.remove(   "--   ");    	non-compiled	[CE]  	13	None	replace
47	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.hasArg();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  parent!=  null  &&  currentOption.hasArg();  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	parent!=  null  &&  currentOption.hasArg();	      if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    stopAtNonOption    =    false;    }    	non-compiled	[CE]  	7	None	replace
48	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "-- ");  currentOption  =  null;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  if(stopAtNonOption)  {  tokens.add( "-- ");  currentOption  =  null;  }  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(stopAtNonOption)  {  tokens.add( "-- ");  currentOption  =  null;  }	      tokens.add(   "--   ");    currentOption    =    null;    	non-compiled	[CE]  	12	None	replace
49	[BUG]  [BUGGY]  tokens.add( "-- ", "currentOption.hasArg());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  tokens.add( "-- ", "currentOption.hasArg());  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- ", "currentOption.hasArg());	  tokens.add(   "--   ",    currentOption.hasArg());    	non-compiled	[CE]  	14	None	replace
50	[BUG]  [BUGGY]  safeToken(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  safeToken(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	safeToken(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }	      if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    stopAtNonOption    =    null;    }    	non-compiled	[CE]  	8	None	replace
51	[BUG]  [BUGGY]  tokens.add( "-- "  +  currentOption.getName(),  stopAtNonOption);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  tokens.add( "-- "  +  currentOption.getName(),  stopAtNonOption);  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- "  +  currentOption.getName(),  stopAtNonOption);	  tokens.add(   "--   "    +    currentOption.getName());    	non-compiled	[CE]  	3	None	replace
52	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  if(eatTheRest)  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(eatTheRest)  {  tokens.add( "-- ");  tokens.add(value);  }	      tokens.add(   "--   ");    tokens.add(value);    	non-compiled	[CE]  	10	None	replace
53	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption ");  [CE]  [FE]        AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption ");  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	Option  currentOption  =  options.getOption( "stopAtNonOption ");	      if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	5	None	replace
54	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption( "eatTheRest ");  [CE]  [FE]          AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  Option  currentOption  =  options.getOption( "eatTheRest ");  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	Option  currentOption  =  options.getOption( "eatTheRest ");	      if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	5	None	replace
55	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption.stopAtNonOption  =  true;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  eatTheRest  =  stopAtNonOption.stopAtNonOption  =  true;  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  stopAtNonOption.stopAtNonOption  =  true;	      eatTheRest    =    stopAtNonOption.stopAtNonOption;    	non-compiled	[CE]  	9	None	replace
56	[BUG]  [BUGGY]  tokens.add( "-- "  +  stopAtNonOption);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  tokens.add( "-- "  +  stopAtNonOption);  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- "  +  stopAtNonOption);	  tokens.add(   "--   "    +    value);    	non-compiled	[CE]  	1	None	replace
57	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption.equals(value);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  eatTheRest  =  stopAtNonOption.equals(value);  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  stopAtNonOption.equals(value);	      eatTheRest    =    stopAtNonOption.hasArg();    	non-compiled	[CE]  	15	None	replace
58	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption.getArgumentCount();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  eatTheRest  =  stopAtNonOption.getArgumentCount();  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  stopAtNonOption.getArgumentCount();	      eatTheRest    =    stopAtNonOption.hasArg();    	non-compiled	[CE]  	15	None	replace
59	[BUG]  [BUGGY]  while(currentOption.hasArg())  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  while(currentOption.hasArg())  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	while(currentOption.hasArg())  {  tokens.add( "-- ");  tokens.add(value);  }	      if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	5	None	replace
60	[BUG]  [BUGGY]  while(currentOption.hasArg())  {  tokens.add( "-- ");  tokens.add(value);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  while(currentOption.hasArg())  {  tokens.add( "-- ");  tokens.add(value);  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	while(currentOption.hasArg())  {  tokens.add( "-- ");  tokens.add(value);	      if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	5	None	replace
61	[BUG]  [BUGGY]  tokens.add( "-- "  +  currentOption.getKey());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  tokens.add( "-- "  +  currentOption.getKey());  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- "  +  currentOption.getKey());	  tokens.add(   "--   "    +    currentOption.getName());    	non-compiled	[CE]  	3	None	replace
62	[BUG]  [BUGGY]  tokens.add( "...-- ");  [CE]  [FE]        AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  tokens.add( "...-- ");  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "...-- ");	  tokens.add(   ".--   ");    	non-compiled	[CE]  	16	None	replace
63	[BUG]  [BUGGY]  tokens.add(currentOption.getValue());  [CE]  [FE]              AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  tokens.add(currentOption.getValue());  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add(currentOption.getValue());	      	non-compiled	[CE]  	4	None	replace
64	[BUG]  [BUGGY]  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  true;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  true;  }  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  true;  }	      if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    stopAtNonOption    =    true;    }    	non-compiled	[CE]  	6	None	replace
65	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.hasArg();  tokens.add( "-- ");  tokens.add(value);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  parent!=  null  &&  currentOption.hasArg();  tokens.add( "-- ");  tokens.add(value);  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	parent!=  null  &&  currentOption.hasArg();  tokens.add( "-- ");  tokens.add(value);	      if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    stopAtNonOption    =    true;    }    	non-compiled	[CE]  	6	None	replace
66	[BUG]  [BUGGY]  tokens.add( "-- ",  currentOption.getKey());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  tokens.add( "-- ",  currentOption.getKey());  [BUGGY]    tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- ",  currentOption.getKey());	  tokens.add(   "--   ",    currentOption.hasArg());    	non-compiled	[CE]  	14	None	replace
67	[BUG]  [BUGGY]  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  null;  }	      if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    stopAtNonOption    =    null;    }    	non-compiled	[CE]  	8	None	replace
68	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption  ||  currentOption!=  null;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  eatTheRest  =  stopAtNonOption  ||  currentOption!=  null;  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	eatTheRest  =  stopAtNonOption  ||  currentOption!=  null;	      eatTheRest    =    stopAtNonOption;    	non-compiled	[CE]  	11	None	replace
69	[BUG]  [BUGGY]  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- ");  tokens.add(value);  }  else  {  stopAtNonOption  =  false;  }	      if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    stopAtNonOption    =    false;    }    	non-compiled	[CE]  	7	None	replace
70	[BUG]  [BUGGY]  tokens.add( "-- ");  if(eatTheRest)  {  stopAtNonOption  =  false;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  tokens.add( "-- ");  if(eatTheRest)  {  stopAtNonOption  =  false;  }  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	tokens.add( "-- ");  if(eatTheRest)  {  stopAtNonOption  =  false;  }	      if(stopAtNonOption)    {    tokens.add(   "--   ");    tokens.add(value);    }    else    {    stopAtNonOption    =    false;    }    	non-compiled	[CE]  	7	None	replace
71	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  if(eatTheRest)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	if(eatTheRest)  {  tokens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalArgumentException( " ");  }	      tokens.add(   "--   ");    tokens.add(value);    	non-compiled	[CE]  	10	None	replace
72	[BUG]  [BUGGY]  else  if(eatTheRest)  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {  eatTheRest  =  true;    [BUGGY]  else  if(eatTheRest)  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]    tokens.add(   "--   ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	214	214	1	replace	else  if(eatTheRest)  {  tokens.add( "-- ");  tokens.add(value);  }	      tokens.add(   "--   ");    tokens.add(value);    	non-compiled	[CE]  	10	None	replace
