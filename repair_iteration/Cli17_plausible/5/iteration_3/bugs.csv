bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  echtsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  echtsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	echtsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti    =    true;    	non-compiled	[CE]  	42	None	replace
2	[BUG]  [BUGGY]  dsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  dsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	dsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti    =    true;    	non-compiled	[CE]  	42	None	replace
3	[BUG]  [BUGGY]  thensuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  thensuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	thensuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti    =    true;    	non-compiled	[CE]  	42	None	replace
4	[BUG]  [BUGGY]  tokens.add( "- "  +  currentOption.getValue());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add( "- "  +  currentOption.getValue());  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "- "  +  currentOption.getValue());	  tokens.add(   "-   "    +    currentOption.getName());    	non-compiled	[CE]  	9	None	replace
5	[BUG]  [BUGGY]  tokens.add( "- "  +  currentOption.getName(),  value);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add( "- "  +  currentOption.getName(),  value);  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "- "  +  currentOption.getName(),  value);	  tokens.add(   "-   "    +    currentOption.getName());    	non-compiled	[CE]  	9	None	replace
6	[BUG]  [BUGGY]  tokens.add( "- "  +  currentOption);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add( "- "  +  currentOption);  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "- "  +  currentOption);	  tokens.add(   "-   ",    currentOption);    	non-compiled	[CE]  	36	None	replace
7	[BUG]  [BUGGY]  tokens.add( "- ",  currentOption.getValue());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add( "- ",  currentOption.getValue());  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "- ",  currentOption.getValue());	  tokens.add(   "-   ",    currentOption);    	non-compiled	[CE]  	36	None	replace
8	[BUG]  [BUGGY]  tokens.add( "- "  +  value);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add( "- "  +  value);  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "- "  +  value);	  tokens.add(   "-   ",    currentOption);    	non-compiled	[CE]  	36	None	replace
9	[BUG]  [BUGGY]  tokens.add( "-- "  +  currentOption);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add( "-- "  +  currentOption);  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "-- "  +  currentOption);	  tokens.add(   "--   "    +    value);    	non-compiled	[CE]  	32	None	replace
10	[BUG]  [BUGGY]  tokens.add( "-- "  +  currentOption.getValue());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add( "-- "  +  currentOption.getValue());  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "-- "  +  currentOption.getValue());	  tokens.add(   "--   "    +    value);    	non-compiled	[CE]  	32	None	replace
11	[BUG]  [BUGGY]  tokens.add( "--? ");  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add( "--? ");  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "--? ");	  tokens.add(   "--n   ");    	non-compiled	[CE]  	28	None	replace
12	[BUG]  [BUGGY]  While(stopAtNonOption)  {  eatTheRest  =  true;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  While(stopAtNonOption)  {  eatTheRest  =  true;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	While(stopAtNonOption)  {  eatTheRest  =  true;  }	  While(stopAtNonOption)    {    eatTheRest    =    false;    }    	non-compiled	[CE]  	8	None	replace
13	[BUG]  [BUGGY]  While(currentOption.hasArgs())  {  eatTheRest  =  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  While(currentOption.hasArgs())  {  eatTheRest  =  false;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	While(currentOption.hasArgs())  {  eatTheRest  =  false;  }	  While(stopAtNonOption)    {    eatTheRest    =    false;    }    	non-compiled	[CE]  	8	None	replace
14	[BUG]  [BUGGY]  While(currentOption)  {  eatTheRest  =  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  While(currentOption)  {  eatTheRest  =  false;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	While(currentOption)  {  eatTheRest  =  false;  }	  While(stopAtNonOption)    {    eatTheRest    =    false;    }    	non-compiled	[CE]  	8	None	replace
15	[BUG]  [BUGGY]  tokens.add( "-- "  +  value,  currentOption);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add( "-- "  +  value,  currentOption);  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "-- "  +  value,  currentOption);	  tokens.add(   "--   ",    currentOption);    	non-compiled	[CE]  	31	None	replace
16	[BUG]  [BUGGY]  While(currentOption.hasMoreArgs())  {  if(stopAtNonOption)  {  eatTheRest  =  true;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  While(currentOption.hasMoreArgs())  {  if(stopAtNonOption)  {  eatTheRest  =  true;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	While(currentOption.hasMoreArgs())  {  if(stopAtNonOption)  {  eatTheRest  =  true;  }	  While(currentOption.hasArgs())    {    if(stopAtNonOption)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  	21	None	replace
17	[BUG]  [BUGGY]  While(currentOption.hasArgs())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  While(currentOption.hasArgs())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	While(currentOption.hasArgs())  {  if(stopAtNonOption)  {  tokens.add( "-- ");  }	  While(currentOption.hasArgs())    {    if(stopAtNonOption)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  	21	None	replace
18	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "-- ");  eatTheRest  =  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "-- ");  eatTheRest  =  false;  }  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	if(stopAtNonOption)  {  tokens.add( "-- ");  eatTheRest  =  false;  }	  tokens.add(   "--   ");    eatTheRest    =    false;    	non-compiled	[CE]  	4	None	replace
19	[BUG]  [BUGGY]  tokens.add( "  stopAtNonOption ");  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add( "  stopAtNonOption ");  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "  stopAtNonOption ");	  parent    ==    stopAtNonOption)    {    eatTheRest    =    true;    }    else    {    tokens.add(   ".--   ");    tokens.add(value);    }    	non-compiled	[CE]  	34	None	replace
20	[BUG]  [BUGGY]  tokens.add(currentOption.getArgs());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add(currentOption.getArgs());  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add(currentOption.getArgs());	  parent    ==    stopAtNonOption)    {    eatTheRest    =    true;    }    else    {    tokens.add(   ".--   ");    tokens.add(value);    }    	non-compiled	[CE]  	34	None	replace
21	[BUG]  [BUGGY]  tokens.add(currentOption.hasArgs());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add(currentOption.hasArgs());  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add(currentOption.hasArgs());	  parent    ==    stopAtNonOption)    {    eatTheRest    =    true;    }    else    {    tokens.add(   ".--   ");    tokens.add(value);    }    	non-compiled	[CE]  	34	None	replace
22	[BUG]  [BUGGY]  tokens.remove( "-- ");  tokens.add(value);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.remove( "-- ");  tokens.add(value);  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.remove( "-- ");  tokens.add(value);	  tokens.add(   "--   ");    tokens.add(value);    	non-compiled	[CE]  	11	None	replace
23	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption ",  value);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption ",  value);  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	Option  currentOption  =  options.getOption( "stopAtNonOption ",  value);	  Option    currentOption    =    options.getOption(   "stopAtNonOption   ");    	non-compiled	[CE]  	30	None	replace
24	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption. ");  [CE]  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption. ");  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	Option  currentOption  =  options.getOption( "stopAtNonOption. ");	  Option    currentOption    =    options.getOption(   "stopAtNonOption   ");    	non-compiled	[CE]  	30	None	replace
25	[BUG]  [BUGGY]  if(stopAtNonOption)  {  kens.add( "-- ");  tokens.add(value);  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  if(stopAtNonOption)  {  kens.add( "-- ");  tokens.add(value);  }  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	if(stopAtNonOption)  {  kens.add( "-- ");  tokens.add(value);  }	  kens.add(   "--   ");    tokens.add(value);    	non-compiled	[CE]  	29	None	replace
26	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  kens.add( "-- ");  tokens.add(value);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  if(!stopAtNonOption)  {  kens.add( "-- ");  tokens.add(value);  }  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	if(!stopAtNonOption)  {  kens.add( "-- ");  tokens.add(value);  }	  kens.add(   "--   ");    tokens.add(value);    	non-compiled	[CE]  	29	None	replace
27	[BUG]  [BUGGY]  if(stopAtNonOption)  {  kens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  if(stopAtNonOption)  {  kens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	if(stopAtNonOption)  {  kens.add( "-- ");  tokens.add(value);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  kens.add(   "--   ");    tokens.add(value);    	non-compiled	[CE]  	29	None	replace
28	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  eatTheRest  =  false;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  ||  stopAtNonOption)  {  eatTheRest  =  false;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	||  stopAtNonOption)  {  eatTheRest  =  false;  }	  if(stopAtNonOption)    {    eatTheRest    =    false;    }    	non-compiled	[CE]  	18	None	replace
29	[BUG]  [BUGGY]  While(!stopAtNonOption)  {  eatTheRest  =  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  While(!stopAtNonOption)  {  eatTheRest  =  false;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	While(!stopAtNonOption)  {  eatTheRest  =  false;  }	  if(stopAtNonOption)    {    eatTheRest    =    false;    }    	non-compiled	[CE]  	18	None	replace
30	[BUG]  [BUGGY]  tokens.add( "- ");  tokens.add(currentOption);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add( "- ");  tokens.add(currentOption);  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "- ");  tokens.add(currentOption);	  tokens.add(   "-   ".);    tokens.add(value);    	non-compiled	[CE]  	46	None	replace
31	[BUG]  [BUGGY]  tokens.add(getValue());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add(getValue());  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add(getValue());	  tokens.add(currentOption);    	non-compiled	[CE]  	24	None	replace
32	[BUG]  [BUGGY]  tokens.add( "-- ");  currentOption  =  new  LinkedList();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add( "-- ");  currentOption  =  new  LinkedList();  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "-- ");  currentOption  =  new  LinkedList();	  tokens.add(   "--   ");    currentOption    =    new    ArrayList();    	non-compiled	[CE]  	6	None	replace
33	[BUG]  [BUGGY]  tokens.add( "-- ");  currentOption  =  new  java.util.ArrayList();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add( "-- ");  currentOption  =  new  java.util.ArrayList();  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "-- ");  currentOption  =  new  java.util.ArrayList();	  tokens.add(   "--   ");    currentOption    =    new    ArrayList();    	non-compiled	[CE]  	6	None	replace
34	[BUG]  [BUGGY]  While(currentOption.hasArgs())  {  eatTheRest  =  false;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  While(currentOption.hasArgs())  {  eatTheRest  =  false;  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	While(currentOption.hasArgs())  {  eatTheRest  =  false;	  if(stopAtNonOption)    {    eatTheRest    =    false;    }    else    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	19	None	replace
35	[BUG]  [BUGGY]  tokens.add('-');  currentOption  =  new  Option();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add('-');  currentOption  =  new  Option();  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add('-');  currentOption  =  new  Option();	  tokens.add(   "-   ");    currentOption    =    new    Option();    	non-compiled	[CE]  	10	None	replace
36	[BUG]  [BUGGY]  tokens.add( "-- ".equals(currentOption.getValue()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add( "-- ".equals(currentOption.getValue()));  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "-- ".equals(currentOption.getValue()));	  tokens.add(   "--   ".equals(currentOption.getName()));    	non-compiled	[CE]  	51	None	replace
37	[BUG]  [BUGGY]  tokens.remove( "-- ");  currentOption  =  null;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.remove( "-- ");  currentOption  =  null;  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.remove( "-- ");  currentOption  =  null;	  tokens.add(   "--   ");    currentOption    =    this;    	non-compiled	[CE]  	38	None	replace
38	[BUG]  [BUGGY]  eattheRest  =  false;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  eattheRest  =  false;  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	eattheRest  =  false;	  eattheRest    =    true;    	non-compiled	[CE]  	40	None	replace
39	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eattheRest  =  true;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  if(stopAtNonOption)  {  eattheRest  =  true;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	if(stopAtNonOption)  {  eattheRest  =  true;  }	  eattheRest    =    true;    	non-compiled	[CE]  	40	None	replace
40	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eattheRest  =  true;  }  else  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  if(stopAtNonOption)  {  eattheRest  =  true;  }  else  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	if(stopAtNonOption)  {  eattheRest  =  true;  }  else  {  tokens.add( "-- ");  tokens.add(value);  }	  eattheRest    =    true;    	non-compiled	[CE]  	40	None	replace
41	[BUG]  [BUGGY]  &&  stopAtNonOption)  {  eatTheRest  =  true;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  &&  stopAtNonOption)  {  eatTheRest  =  true;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	&&  stopAtNonOption)  {  eatTheRest  =  true;  }	  ||    stopAtNonOption)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  	7	None	replace
42	[BUG]  [BUGGY]  ||  stopAtNonOption  &&  currentOption.hasArg())  {  eatTheRest  =  true;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  ||  stopAtNonOption  &&  currentOption.hasArg())  {  eatTheRest  =  true;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	||  stopAtNonOption  &&  currentOption.hasArg())  {  eatTheRest  =  true;  }	  ||    stopAtNonOption)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  	7	None	replace
43	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  tokens.add( "-- ");  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  ||  stopAtNonOption)  {  tokens.add( "-- ");  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	||  stopAtNonOption)  {  tokens.add( "-- ");  }	  ||    stopAtNonOption)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  	7	None	replace
44	[BUG]  [BUGGY]  if(stopAtNonOption)  {  kens.add( "- ");  tokens.add(value);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  if(stopAtNonOption)  {  kens.add( "- ");  tokens.add(value);  }  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	if(stopAtNonOption)  {  kens.add( "- ");  tokens.add(value);  }	  kens.add(   "-   ");    tokens.add(value);    	non-compiled	[CE]  	37	None	replace
45	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  kens.add( "- ");  tokens.add(value);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  if(!stopAtNonOption)  {  kens.add( "- ");  tokens.add(value);  }  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	if(!stopAtNonOption)  {  kens.add( "- ");  tokens.add(value);  }	  kens.add(   "-   ");    tokens.add(value);    	non-compiled	[CE]  	37	None	replace
46	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  tokens.add( "- ");  tokens.add(value);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  if(!stopAtNonOption)  {  tokens.add( "- ");  tokens.add(value);  }  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	if(!stopAtNonOption)  {  tokens.add( "- ");  tokens.add(value);  }	  kens.add(   "-   ");    tokens.add(value);    	non-compiled	[CE]  	37	None	replace
47	[BUG]  [BUGGY]  tokens.add( "-- "  +  currentOption.getName(),  value);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add( "-- "  +  currentOption.getName(),  value);  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "-- "  +  currentOption.getName(),  value);	  tokens.add(   "--   "    +    currentOption.getName());    	non-compiled	[CE]  	27	None	replace
48	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add( "-- ");  eatTheRest  =  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  While(stopAtNonOption)  {  tokens.add( "-- ");  eatTheRest  =  false;  }  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	While(stopAtNonOption)  {  tokens.add( "-- ");  eatTheRest  =  false;  }	  if(stopAtNonOption)    {    tokens.add(   "--   ");    eatTheRest    =    true;    }    	non-compiled	[CE]  	3	None	replace
49	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(currentOption);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  if(!stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(currentOption);  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	if(!stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(currentOption);  }	  tokens.add(   "--   ");    tokens.add(currentOption);    	non-compiled	[CE]  	1	None	replace
50	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(currentOption);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(currentOption);  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(currentOption);  }	  tokens.add(   "--   ");    tokens.add(currentOption);    	non-compiled	[CE]  	1	None	replace
51	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(currentOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(currentOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(currentOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  tokens.add(   "--   ");    tokens.add(currentOption);    	non-compiled	[CE]  	1	None	replace
52	[BUG]  [BUGGY]  tokens.add( "-- ");  if(stopAtNonOption)  {  eatTheRest  =  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add( "-- ");  if(stopAtNonOption)  {  eatTheRest  =  false;  }  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "-- ");  if(stopAtNonOption)  {  eatTheRest  =  false;  }	  tokens.add(   "--   ");    if(stopAtNonOption)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  	48	None	replace
53	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "-- ");  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "-- ");  }  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	if(stopAtNonOption)  {  tokens.add( "-- ");  }	  tokens.add(   "--   ");    if(stopAtNonOption)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  	48	None	replace
54	[BUG]  [BUGGY]  tokens.add( "-- ");  if(stopAtNonOption  ||  currentOption.hasArgs())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add( "-- ");  if(stopAtNonOption  ||  currentOption.hasArgs())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "-- ");  if(stopAtNonOption  ||  currentOption.hasArgs())  {  throw  new  IllegalArgumentException( " ");  }	  tokens.add(   "--   ");    if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	49	None	replace
55	[BUG]  [BUGGY]  tokens.add( "-- ");  if(stopAtNonOption  ||  currentOption.hasArg())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add( "-- ");  if(stopAtNonOption  ||  currentOption.hasArg())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "-- ");  if(stopAtNonOption  ||  currentOption.hasArg())  {  throw  new  IllegalArgumentException( " ");  }	  tokens.add(   "--   ");    if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	49	None	replace
56	[BUG]  [BUGGY]  tokens.add( "- "  +  currentOption.hasArg());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add( "- "  +  currentOption.hasArg());  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "- "  +  currentOption.hasArg());	  tokens.add(   "-   ",    currentOption.hasArg());    	non-compiled	[CE]  	50	None	replace
57	[BUG]  [BUGGY]  while(!stopAtNonOption)  {  eatTheRest  =  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  while(!stopAtNonOption)  {  eatTheRest  =  false;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	while(!stopAtNonOption)  {  eatTheRest  =  false;  }	  While(!stopAtNonOption)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  	2	None	replace
58	[BUG]  [BUGGY]  while(!stopAtNonOption  &&  currentOption.hasArgs())  {  eatTheRest  =  true;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  while(!stopAtNonOption  &&  currentOption.hasArgs())  {  eatTheRest  =  true;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	while(!stopAtNonOption  &&  currentOption.hasArgs())  {  eatTheRest  =  true;  }	  While(!stopAtNonOption)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  	2	None	replace
59	[BUG]  [BUGGY]  while(currentOption.hasErrors())  {  tokens.add( "-- ");  tokens.add(value);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  while(currentOption.hasErrors())  {  tokens.add( "-- ");  tokens.add(value);  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	while(currentOption.hasErrors())  {  tokens.add( "-- ");  tokens.add(value);	  While(currentOption.hasArgs())    {    tokens.add(   "--   ");    tokens.add(value);    	non-compiled	[CE]  	13	None	replace
60	[BUG]  [BUGGY]  moresuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  moresuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	moresuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti    	non-compiled	[CE]  	41	None	replace
61	[BUG]  [BUGGY]  While(currentOption.hasErrors())  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  While(currentOption.hasErrors())  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	While(currentOption.hasErrors())  {  tokens.add( "-- ");  tokens.add(value);  }	  While(currentOption.hasArgs())    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	12	None	replace
62	[BUG]  [BUGGY]  while(currentOption.hasErrors())  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  while(currentOption.hasErrors())  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	while(currentOption.hasErrors())  {  tokens.add( "-- ");  tokens.add(value);  }	  While(currentOption.hasArgs())    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	12	None	replace
63	[BUG]  [BUGGY]  tokens.add( "-- ");  currentOption  =  new  Options();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add( "-- ");  currentOption  =  new  Options();  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "-- ");  currentOption  =  new  Options();	  tokens.add(   "--   ");    currentOption    =    new    Option();    	non-compiled	[CE]  	5	None	replace
64	[BUG]  [BUGGY]  tokens.add('-'  +  currentOption.getName());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add('-'  +  currentOption.getName());  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add('-'  +  currentOption.getName());	  tokens.add('-');    	non-compiled	[CE]  	25	None	replace
65	[BUG]  [BUGGY]  tokens.add( "-- ").equals(currentOption.getArg());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add( "-- ").equals(currentOption.getArg());  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "-- ").equals(currentOption.getArg());	  tokens.add(   "--   ".equals(value));    	non-compiled	[CE]  	45	None	replace
66	[BUG]  [BUGGY]  tokens.add( "-- ").equals(currentOption.getValue());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add( "-- ").equals(currentOption.getValue());  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "-- ").equals(currentOption.getValue());	  tokens.add(   "--   ".equals(value));    	non-compiled	[CE]  	45	None	replace
67	[BUG]  [BUGGY]  while(stopAtNonOption)  {  tokens.add( "-- ");  currentOption  =  null;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  while(stopAtNonOption)  {  tokens.add( "-- ");  currentOption  =  null;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	while(stopAtNonOption)  {  tokens.add( "-- ");  currentOption  =  null;  }	  While(stopAtNonOption)    {    tokens.add(   "--   ");    currentOption    =    null;    }    	non-compiled	[CE]  	23	None	replace
68	[BUG]  [BUGGY]  tokens.remove( "- ");  tokens.add(value);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.remove( "- ");  tokens.add(value);  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.remove( "- ");  tokens.add(value);	  tokens.add(   "-   ");    tokens.add(value);    	non-compiled	[CE]  	15	None	replace
69	[BUG]  [BUGGY]  tokens.add(currentOption.getArg());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add(currentOption.getArg());  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add(currentOption.getArg());	  parent    ==    stopAtNonOption)    {    eatTheRest    =    true;    }    else    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	33	None	replace
70	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  tokens.add( "-- ");  currentOption  =  null;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  ||  stopAtNonOption)  {  tokens.add( "-- ");  currentOption  =  null;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	||  stopAtNonOption)  {  tokens.add( "-- ");  currentOption  =  null;  }	  parent    ==    stopAtNonOption)    {    eatTheRest    =    true;    }    else    {    tokens.add(   "--       ");    currentOption    =    null;    }    	non-compiled	[CE]  	35	None	replace
71	[BUG]  [BUGGY]  while(stopAtNonOption)  {  tokens.add( "-- ");  eatTheRest  =  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  while(stopAtNonOption)  {  tokens.add( "-- ");  eatTheRest  =  false;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	while(stopAtNonOption)  {  tokens.add( "-- ");  eatTheRest  =  false;  }	  While(stopAtNonOption)    {    tokens.add(   "--   ");    eatTheRest    =    true;    }    	non-compiled	[CE]  	39	None	replace
72	[BUG]  [BUGGY]  While(currentOption.hasErrors())  {  if(stopAtNonOption)  {  eatTheRest  =  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  While(currentOption.hasErrors())  {  if(stopAtNonOption)  {  eatTheRest  =  false;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	While(currentOption.hasErrors())  {  if(stopAtNonOption)  {  eatTheRest  =  false;  }	  While(currentOption.hasArgs())    {    if(stopAtNonOption)    {    eatTheRest    =    false;    }    	non-compiled	[CE]  	22	None	replace
73	[BUG]  [BUGGY]  if(stopAtNonOption)  {  kens.add( "-- ");  tokens.add(value);  }  else  {  currentOption  =  null;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  if(stopAtNonOption)  {  kens.add( "-- ");  tokens.add(value);  }  else  {  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	if(stopAtNonOption)  {  kens.add( "-- ");  tokens.add(value);  }  else  {  currentOption  =  null;  }	  kens.add(   "--   ");    tokens.add(value);    	non-compiled	[CE]  	29	None	replace
74	[BUG]  [BUGGY]  tokens.add( "- "  +  value,  currentOption.hasArg());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add( "- "  +  value,  currentOption.hasArg());  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "- "  +  value,  currentOption.hasArg());	  tokens.add(   "-   ",    currentOption.hasArg());    	non-compiled	[CE]  	50	None	replace
75	[BUG]  [BUGGY]  tokens.add( "- ", "currentOption.hasArg());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add( "- ", "currentOption.hasArg());  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "- ", "currentOption.hasArg());	  tokens.add(   "-   ",    currentOption.hasArg());    	non-compiled	[CE]  	50	None	replace
76	[BUG]  [BUGGY]  tokens.add( "--noArgs ");  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add( "--noArgs ");  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "--noArgs ");	  tokens.add(   "--n   ");    	non-compiled	[CE]  	28	None	replace
77	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(currentOption);  }  else  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(currentOption);  }  else  {  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	if(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(currentOption);  }  else  {	  tokens.add(   "--   ");    tokens.add(currentOption);    	non-compiled	[CE]  	1	None	replace
78	[BUG]  [BUGGY]  ffesuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  ffesuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	ffesuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti    	non-compiled	[CE]  	41	None	replace
79	[BUG]  [BUGGY]  tokens.add( "-- ").equals(currentOption.getName()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add( "-- ").equals(currentOption.getName()));  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "-- ").equals(currentOption.getName()));	  tokens.add(   "--   ".equals(currentOption.getName()));    	non-compiled	[CE]  	51	None	replace
80	[BUG]  [BUGGY]  parent  ==  stopAtNonOption)  {  tokens.add( "-- ");  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  parent  ==  stopAtNonOption)  {  tokens.add( "-- ");  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	parent  ==  stopAtNonOption)  {  tokens.add( "-- ");	  parent    ==    stopAtNonOption)    {    eatTheRest    =    true;    }    else    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	33	None	replace
81	[BUG]  [BUGGY]  tokens.add( "-- "  +  currentOption.getKey());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add( "-- "  +  currentOption.getKey());  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "-- "  +  currentOption.getKey());	  tokens.add(   "--   "    +    currentOption.getName());    	non-compiled	[CE]  	27	None	replace
82	[BUG]  [BUGGY]  While(currentOption.hasErrors())  {  if(stopAtNonOption)  {  eatTheRest  =  true;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  While(currentOption.hasErrors())  {  if(stopAtNonOption)  {  eatTheRest  =  true;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	While(currentOption.hasErrors())  {  if(stopAtNonOption)  {  eatTheRest  =  true;  }	  While(currentOption.hasArgs())    {    if(stopAtNonOption)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  	21	None	replace
83	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption( "startAtNonOption ");  [CE]  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  Option  currentOption  =  options.getOption( "startAtNonOption ");  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	Option  currentOption  =  options.getOption( "startAtNonOption ");	  if(stopAtNonOption)    {    eatTheRest    =    false;    }    else    {    tokens.add(   "--   ");    tokens.add(value);    }    	non-compiled	[CE]  	19	None	replace
84	[BUG]  [BUGGY]  parent!=  stopAtNonOption)  {  eatTheRest  =  true;  }  else  {  tokens.add( "-- ");  currentOption  =  null;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  parent!=  stopAtNonOption)  {  eatTheRest  =  true;  }  else  {  tokens.add( "-- ");  currentOption  =  null;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	parent!=  stopAtNonOption)  {  eatTheRest  =  true;  }  else  {  tokens.add( "-- ");  currentOption  =  null;  }	  parent    ==    stopAtNonOption)    {    eatTheRest    =    true;    }    else    {    tokens.add(   "--       ");    currentOption    =    null;    }    	non-compiled	[CE]  	35	None	replace
85	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  if(stopAtNonOption)    {    eatTheRest    =    false;    }    else    {    tokens.add(   "--   ");    tokens.add(currentOption);    }    	non-compiled	[CE]  	20	None	replace
86	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add( "-- ");  currentOption  =  null;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  While(stopAtNonOption)  {  tokens.add( "-- ");  currentOption  =  null;  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	While(stopAtNonOption)  {  tokens.add( "-- ");  currentOption  =  null;	  if(stopAtNonOption)    {    eatTheRest    =    false;    }    	non-compiled	[CE]  	18	None	replace
87	[BUG]  [BUGGY]  if(currentOption.hasArg())  {  kens.add( "- ");  tokens.add(value);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  if(currentOption.hasArg())  {  kens.add( "- ");  tokens.add(value);  }  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	if(currentOption.hasArg())  {  kens.add( "- ");  tokens.add(value);  }	  kens.add(   "-   ");    tokens.add(value);    	non-compiled	[CE]  	37	None	replace
88	[BUG]  [BUGGY]  if(currentOption.hasArgs())  {  kens.add( "- ");  tokens.add(value);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  if(currentOption.hasArgs())  {  kens.add( "- ");  tokens.add(value);  }  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	if(currentOption.hasArgs())  {  kens.add( "- ");  tokens.add(value);  }	  kens.add(   "-   ");    tokens.add(value);    	non-compiled	[CE]  	37	None	replace
89	[BUG]  [BUGGY]  if(currentOption.hasArg())  {  tokens.add( "- ");  tokens.add(value);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  if(currentOption.hasArg())  {  tokens.add( "- ");  tokens.add(value);  }  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	if(currentOption.hasArg())  {  tokens.add( "- ");  tokens.add(value);  }	  kens.add(   "-   ");    tokens.add(value);    	non-compiled	[CE]  	37	None	replace
90	[BUG]  [BUGGY]  tokens.add( "-- ");  currentOption  =  false;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add( "-- ");  currentOption  =  false;  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "-- ");  currentOption  =  false;	  tokens.add(   "--   ");    eatTheRest    =    false;    	non-compiled	[CE]  	4	None	replace
91	[BUG]  [BUGGY]  tokens.add( "-- ", "currentOption  =  null;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add( "-- ", "currentOption  =  null;  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "-- ", "currentOption  =  null;	  tokens.add(   "--   ",    currentOption);    	non-compiled	[CE]  	31	None	replace
92	[BUG]  [BUGGY]  tokens.add( "- "  +  currentOption.toString());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add( "- "  +  currentOption.toString());  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "- "  +  currentOption.toString());	  tokens.add(   "-   "    +    currentOption.getName());    	non-compiled	[CE]  	9	None	replace
93	[BUG]  [BUGGY]  tokens.add( "-- ").append(value);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add( "-- ").append(value);  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "-- ").append(value);	  tokens.add(   "--   ".equals(value));    	non-compiled	[CE]  	45	None	replace
94	[BUG]  [BUGGY]  tokens.add( "-- "  +  this.stopAtNonOption);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add( "-- "  +  this.stopAtNonOption);  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "-- "  +  this.stopAtNonOption);	  tokens.add(   "--   "    +    value);    	non-compiled	[CE]  	32	None	replace
95	[BUG]  [BUGGY]  tokens.add( "-- ");  if(stopAtNonOption  ||  stopAtNonOption)  {  eatTheRest  =  true;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add( "-- ");  if(stopAtNonOption  ||  stopAtNonOption)  {  eatTheRest  =  true;  }  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "-- ");  if(stopAtNonOption  ||  stopAtNonOption)  {  eatTheRest  =  true;  }	  tokens.add(   "--   ");    if(stopAtNonOption)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  	48	None	replace
96	[BUG]  [BUGGY]  tokens.add( "- ".equals(value));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add( "- ".equals(value));  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "- ".equals(value));	  tokens.add('-');    	non-compiled	[CE]  	25	None	replace
97	[BUG]  [BUGGY]  while(stopAtNonOption)  {  eatTheRest  =  true;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  while(stopAtNonOption)  {  eatTheRest  =  true;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	while(stopAtNonOption)  {  eatTheRest  =  true;  }	  While(stopAtNonOption)    {    eatTheRest    =    false;    }    	non-compiled	[CE]  	8	None	replace
98	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  While(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	While(stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }	  While(stopAtNonOption)    {    eatTheRest    =    false;    }    	non-compiled	[CE]  	8	None	replace
99	[BUG]  [BUGGY]  tokens.add(currentOption.hasArg());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add(currentOption.hasArg());  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add(currentOption.hasArg());	  parent    ==    stopAtNonOption)    {    eatTheRest    =    true;    }    else    {    tokens.add(   ".--   ");    tokens.add(value);    }    	non-compiled	[CE]  	34	None	replace
100	[BUG]  [BUGGY]  While(currentOption.hasNext())  {  if(stopAtNonOption)  {  eatTheRest  =  true;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  While(currentOption.hasNext())  {  if(stopAtNonOption)  {  eatTheRest  =  true;  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	While(currentOption.hasNext())  {  if(stopAtNonOption)  {  eatTheRest  =  true;  }	  While(currentOption.hasArgs())    {    if(stopAtNonOption)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  	21	None	replace
101	[BUG]  [BUGGY]  While(currentOption.hasErrors())  {  tokens.add( "-   ");  tokens.add(value);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  While(currentOption.hasErrors())  {  tokens.add( "-   ");  tokens.add(value);  }  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	While(currentOption.hasErrors())  {  tokens.add( "-   ");  tokens.add(value);  }	  While(currentOption.hasArg())    {    tokens.add(   "-   ");    tokens.add(value);    }    	non-compiled	[CE]  	17	None	replace
102	[BUG]  [BUGGY]  while(currentOption.hasOption(value))  {  tokens.add( "- ");  tokens.add(value);  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  while(currentOption.hasOption(value))  {  tokens.add( "- ");  tokens.add(value);  }  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	while(currentOption.hasOption(value))  {  tokens.add( "- ");  tokens.add(value);  }	  While(currentOption.hasArg())    {    tokens.add(   "-   ");    tokens.add(value);    }    	non-compiled	[CE]  	17	None	replace
103	[BUG]  [BUGGY]  tokens.add( "- "  +  currentOption.getKey());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add( "- "  +  currentOption.getKey());  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "- "  +  currentOption.getKey());	  tokens.add(   "-   "    +    currentOption.getName());    	non-compiled	[CE]  	9	None	replace
104	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  =  false;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  =  false;  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  =  false;	  if(stopAtNonOption)    {    eatTheRest    =    false;    }    	non-compiled	[CE]  	18	None	replace
105	[BUG]  [BUGGY]  while(currentOption.hasErrors())  {  tokens.add( "- ");  tokens.add(value);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  while(currentOption.hasErrors())  {  tokens.add( "- ");  tokens.add(value);  }  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	while(currentOption.hasErrors())  {  tokens.add( "- ");  tokens.add(value);  }	  While(currentOption.hasArgs())    {    tokens.add(   "-   ");    tokens.add(value);    }    	non-compiled	[CE]  	16	None	replace
106	[BUG]  [BUGGY]  else  if(currentOption.hasArg())  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  else  if(currentOption.hasArg())  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	else  if(currentOption.hasArg())  {  tokens.add( "-- ");  tokens.add(value);  }	  tokens.add(   "--   ");    tokens.add(currentOption);    	non-compiled	[CE]  	1	None	replace
107	[BUG]  [BUGGY]  else  if(currentOption.hasArgs())  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  else  if(currentOption.hasArgs())  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	else  if(currentOption.hasArgs())  {  tokens.add( "-- ");  tokens.add(value);  }	  tokens.add(   "--   ");    tokens.add(currentOption);    	non-compiled	[CE]  	1	None	replace
108	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  if(!stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	if(!stopAtNonOption)  {  tokens.add( "-- ");  tokens.add(value);  }	  tokens.add(   "--   ");    tokens.add(currentOption);    	non-compiled	[CE]  	1	None	replace
109	[BUG]  [BUGGY]  while(currentOption.hasOption(value))  {  tokens.add( "-- ");  tokens.add(value);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  while(currentOption.hasOption(value))  {  tokens.add( "-- ");  tokens.add(value);  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	while(currentOption.hasOption(value))  {  tokens.add( "-- ");  tokens.add(value);	  While(currentOption.hasArgs())    {    tokens.add(   "--   ");    tokens.add(value);    	non-compiled	[CE]  	13	None	replace
110	[BUG]  [BUGGY]  tokens.add( "-- ");  currentOption  =  new  Option(0);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add( "-- ");  currentOption  =  new  Option(0);  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "-- ");  currentOption  =  new  Option(0);	  tokens.add(   "--   ");    currentOption    =    new    Option();    	non-compiled	[CE]  	5	None	replace
111	[BUG]  [BUGGY]  tokens.add( "- ",  currentOption.getKey());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add( "- ",  currentOption.getKey());  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "- ",  currentOption.getKey());	  tokens.add(   "-   ",    currentOption.hasArg());    	non-compiled	[CE]  	50	None	replace
112	[BUG]  [BUGGY]  tokens.add( "-- ",  currentOption.hasArg());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add( "-- ",  currentOption.hasArg());  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "-- ",  currentOption.hasArg());	  tokens.add(   "--n   ");    	non-compiled	[CE]  	28	None	replace
113	[BUG]  [BUGGY]  tokens.add( "-- ".equals(currentOption.getKey()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add( "-- ".equals(currentOption.getKey()));  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "-- ".equals(currentOption.getKey()));	  tokens.add(   "--   ".equals(currentOption.getName()));    	non-compiled	[CE]  	51	None	replace
114	[BUG]  [BUGGY]  tokens.add( "-- ".equals(currentOption.getLocalName()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add( "-- ".equals(currentOption.getLocalName()));  [BUGGY]      tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "-- ".equals(currentOption.getLocalName()));	  tokens.add(   "--   ".equals(currentOption.getName()));    	non-compiled	[CE]  	51	None	replace
115	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption, ");  [CE]  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption, ");  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	Option  currentOption  =  options.getOption( "stopAtNonOption, ");	  Option    currentOption    =    options.getOption(   "stopAtNonOption   ");    	non-compiled	[CE]  	30	None	replace
116	[BUG]  [BUGGY]  tokens.add( "-- "  +  currentOption.toString());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add( "-- "  +  currentOption.toString());  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "-- "  +  currentOption.toString());	  tokens.add(   "--   "    +    currentOption.getName());    	non-compiled	[CE]  	27	None	replace
117	[BUG]  [BUGGY]  tokens.add( "-- ", "currentOption);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add( "-- ", "currentOption);  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "-- ", "currentOption);	  tokens.add(   "--   ",    currentOption);    	non-compiled	[CE]  	31	None	replace
118	[BUG]  [BUGGY]  tokens.add( "-- ");  currentOption  =  new  ArrayList  <  Option>();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      tokens.add(value);  currentOption  =  null;  }  else  if  (currentOption.hasArgs())  {  tokens.add(value);  }  }  else  {      [BUGGY]  tokens.add( "-- ");  currentOption  =  new  ArrayList  <  Option>();  [BUGGY]      eatTheRest  =  true;  tokens.add(     "--     ");  tokens.add(value);  }  }  [CLASS]  PosixParser  [METHOD]  process  [RETURN_TYPE]  void  String  value  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  value  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	0.5	213	213	1	replace	tokens.add( "-- ");  currentOption  =  new  ArrayList  <  Option>();	  tokens.add(   "--   ");    currentOption    =    new    ArrayList();    	non-compiled	[CE]  	6	None	replace
