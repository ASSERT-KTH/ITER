bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ||  currentOption.hasArgs())  {  tokens.add(token.substring(i  +  1));  [CE]  [FE]            AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  ||  currentOption.hasArgs())  {  tokens.add(token.substring(i  +  1));  [BUGGY]    process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	||  currentOption.hasArgs())  {  tokens.add(token.substring(i  +  1));	      ||    currentOption.hasArg())    {    tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  	4	None	replace
2	[BUG]  [BUGGY]  ||  currentOption.hasArg())  {  tokens.add(token.substring(i  +  2));  [CE]  [FE]              AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  ||  currentOption.hasArg())  {  tokens.add(token.substring(i  +  2));  [BUGGY]    process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	||  currentOption.hasArg())  {  tokens.add(token.substring(i  +  2));	      ||    currentOption.hasArg())    {    tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  	4	None	replace
3	[BUG]  [BUGGY]  ||  currentOption.hasArg())  {  tokens.add(token.substring(0,  i  +  1));  [CE]  [FE]                AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  ||  currentOption.hasArg())  {  tokens.add(token.substring(0,  i  +  1));  [BUGGY]    process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	||  currentOption.hasArg())  {  tokens.add(token.substring(0,  i  +  1));	      ||    currentOption.hasArg())    {    tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  	4	None	replace
4	[BUG]  [BUGGY]  process(token,  token.substring(i  +  1));  [CE]  [FE]        AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  process(token,  token.substring(i  +  1));  [BUGGY]    }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token,  token.substring(i  +  1));	  process(ch,    token.substring(i));    	non-compiled	[CE]  	7	None	replace
5	[BUG]  [BUGGY]  process(token,  token.substring(i));  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  process(token,  token.substring(i));  [BUGGY]    }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token,  token.substring(i));	  process(ch,    token.substring(i));    	non-compiled	[CE]  ')'  expected	7	None	replace
6	[BUG]  [BUGGY]  process(token,  ch.substring(i));  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  process(token,  ch.substring(i));  [BUGGY]    }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token,  ch.substring(i));	  process(ch,    token.substring(i));    	non-compiled	[CE]  ')'  expected	7	None	replace
7	[BUG]  [BUGGY]  process(token,  ch.substring(i  +  1));  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  process(token,  ch.substring(i  +  1));  [BUGGY]    }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token,  ch.substring(i  +  1));	  process(ch,    token.substring(i));    	non-compiled	[CE]  ')'  expected	7	None	replace
8	[BUG]  [BUGGY]  tokens.add(token.substring(0,  i  +  1));  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  tokens.add(token.substring(0,  i  +  1));  [BUGGY]    process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(token.substring(0,  i  +  1));	      tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  ')'  expected	2	None	replace
9	[BUG]  [BUGGY]  tokens.add(token.substring(i,  i  +  1));  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  tokens.add(token.substring(i,  i  +  1));  [BUGGY]    process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(token.substring(i,  i  +  1));	      tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  ')'  expected	2	None	replace
10	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  tokens.add(token,  stopAtNonOption);  [BUGGY]    process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(token,  stopAtNonOption);	      tokens.add(ch);    	non-compiled	[CE]  ')'  expected	16	None	replace
11	[BUG]  [BUGGY]  tokens.add(i);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  tokens.add(i);  [BUGGY]    process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(i);	      tokens.add(ch);    	non-compiled	[CE]  ')'  expected	16	None	replace
12	[BUG]  [BUGGY]  process(ch,  token.substring(1));  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  process(ch,  token.substring(1));  [BUGGY]    }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(ch,  token.substring(1));	  process(token.substring(1));    	non-compiled	[CE]  ')'  expected	14	None	replace
13	[BUG]  [BUGGY]  beginOption(token.substring(1));  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  beginOption(token.substring(1));  [BUGGY]    }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	beginOption(token.substring(1));	  process(token.substring(1));    	non-compiled	[CE]  ')'  expected	14	None	replace
14	[BUG]  [BUGGY]  tokens.add(token.substring(0,  1));  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  tokens.add(token.substring(0,  1));  [BUGGY]    process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(token.substring(0,  1));	      tokens.add(token.substring(0,    i));    	non-compiled	[CE]  ')'  expected	12	None	replace
15	[BUG]  [BUGGY]  tokens.add(token.substring(0,  2));  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  tokens.add(token.substring(0,  2));  [BUGGY]    process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(token.substring(0,  2));	      tokens.add(token.substring(0,    i));    	non-compiled	[CE]  ')'  expected	12	None	replace
16	[BUG]  [BUGGY]  tokens.add(token.substring(0,  i  +  2));  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  tokens.add(token.substring(0,  i  +  2));  [BUGGY]    process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(token.substring(0,  i  +  2));	      tokens.add(token.substring(0,    i));    	non-compiled	[CE]  ')'  expected	12	None	replace
17	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  break;  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  break;  }  [BUGGY]    process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  break;  }	      tokens.add(token.substring(i    +    1));    break;    	non-compiled	[CE]  ')'  expected	5	None	replace
18	[BUG]  [BUGGY]  tokens.add(token.substring(0,  i  +  1));  break;  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  tokens.add(token.substring(0,  i  +  1));  break;  [BUGGY]    process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(token.substring(0,  i  +  1));  break;	      tokens.add(token.substring(i    +    1));    break;    	non-compiled	[CE]  ')'  expected	5	None	replace
19	[BUG]  [BUGGY]  tokens.add(token.substring(1));  break;  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  tokens.add(token.substring(1));  break;  [BUGGY]    process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(token.substring(1));  break;	      tokens.add(token.substring(i));    break;    	non-compiled	[CE]  ')'  expected	11	None	replace
20	[BUG]  [BUGGY]  tokens.add(token.substring(0,  i));  break;  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  tokens.add(token.substring(0,  i));  break;  [BUGGY]    process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(token.substring(0,  i));  break;	      tokens.add(token.substring(i));    break;    	non-compiled	[CE]  ')'  expected	11	None	replace
21	[BUG]  [BUGGY]  addToken(token.substring(i  +  1),  currentOption);  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  addToken(token.substring(i  +  1),  currentOption);  [BUGGY]    }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	addToken(token.substring(i  +  1),  currentOption);	  addToken(token.substring(i    +    1));    	non-compiled	[CE]  ')'  expected	13	None	replace
22	[BUG]  [BUGGY]  addToken(token.substring(i  +  1),  token.length());  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  addToken(token.substring(i  +  1),  token.length());  [BUGGY]    }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	addToken(token.substring(i  +  1),  token.length());	  addToken(token.substring(i    +    1));    	non-compiled	[CE]  ')'  expected	13	None	replace
23	[BUG]  [BUGGY]  beginOption(ch,  token.substring(i  +  1));  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  beginOption(ch,  token.substring(i  +  1));  [BUGGY]    }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	beginOption(ch,  token.substring(i  +  1));	  beginOption(token.substring(i    +    1));    	non-compiled	[CE]  ')'  expected	10	None	replace
24	[BUG]  [BUGGY]  joinOption(token.substring(i  +  1));  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  joinOption(token.substring(i  +  1));  [BUGGY]    }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	joinOption(token.substring(i  +  1));	  beginOption(token.substring(i    +    1));    	non-compiled	[CE]  ')'  expected	10	None	replace
25	[BUG]  [BUGGY]  continueOption(token.substring(i  +  1));  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  continueOption(token.substring(i  +  1));  [BUGGY]    }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	continueOption(token.substring(i  +  1));	  beginOption(token.substring(i    +    1));    	non-compiled	[CE]  ')'  expected	10	None	replace
26	[BUG]  [BUGGY]  process(token.substring(0,  i  +  1));  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  process(token.substring(0,  i  +  1));  [BUGGY]    }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token.substring(0,  i  +  1));	  process(token.substring(0,    i));    	non-compiled	[CE]  ')'  expected	8	None	replace
27	[BUG]  [BUGGY]  process(token.substring(0,  1));  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  process(token.substring(0,  1));  [BUGGY]    }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token.substring(0,  1));	  process(token.substring(0,    i));    	non-compiled	[CE]  ')'  expected	8	None	replace
28	[BUG]  [BUGGY]  process(ch,  token.substring(0,  i));  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  process(ch,  token.substring(0,  i));  [BUGGY]    }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(ch,  token.substring(0,  i));	  process(token.substring(0,    i));    	non-compiled	[CE]  ')'  expected	8	None	replace
29	[BUG]  [BUGGY]  proceed(token.substring(0,  i  +  1));  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  proceed(token.substring(0,  i  +  1));  [BUGGY]    }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	proceed(token.substring(0,  i  +  1));	  process(token.substring(0,    i));    	non-compiled	[CE]  ')'  expected	8	None	replace
30	[BUG]  [BUGGY]  process(token.substring(i  +  1),  currentOption);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  process(token.substring(i  +  1),  currentOption);  [BUGGY]    }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token.substring(i  +  1),  currentOption);	  process(token.substring(i    +    1));    	non-compiled	[CE]  ')'  expected	9	None	replace
31	[BUG]  [BUGGY]  process(token.substring(i  +  1),  stopAtNonOption);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  process(token.substring(i  +  1),  stopAtNonOption);  [BUGGY]    }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token.substring(i  +  1),  stopAtNonOption);	  process(token.substring(i    +    1));    	non-compiled	[CE]  ')'  expected	9	None	replace
32	[BUG]  [BUGGY]  process(ch,  token.substring(i  +  1));  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  process(ch,  token.substring(i  +  1));  [BUGGY]    }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(ch,  token.substring(i  +  1));	  process(token.substring(i    +    1));    	non-compiled	[CE]  ')'  expected	9	None	replace
33	[BUG]  [BUGGY]  ||  currentOption.hasArg())  {  tokens.add(token.substring(i  +  1));  break;  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  ||  currentOption.hasArg())  {  tokens.add(token.substring(i  +  1));  break;  }  [BUGGY]    process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	||  currentOption.hasArg())  {  tokens.add(token.substring(i  +  1));  break;  }	      ||    currentOption.hasArg())    {    tokens.add(token.substring(i    +    1));    break;    	non-compiled	[CE]  ')'  expected	6	None	replace
34	[BUG]  [BUGGY]  ||  currentOption.hasArgs())  {  tokens.add(token.substring(i  +  1));  break;  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  ||  currentOption.hasArgs())  {  tokens.add(token.substring(i  +  1));  break;  [BUGGY]    process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	||  currentOption.hasArgs())  {  tokens.add(token.substring(i  +  1));  break;	      ||    currentOption.hasArg())    {    tokens.add(token.substring(i    +    1));    break;    	non-compiled	[CE]  ')'  expected	6	None	replace
35	[BUG]  [BUGGY]  ||  currentOption.hasArg())  {  tokens.add(token.substring(0,  i  +  1));  break;  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  ||  currentOption.hasArg())  {  tokens.add(token.substring(0,  i  +  1));  break;  [BUGGY]    process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	||  currentOption.hasArg())  {  tokens.add(token.substring(0,  i  +  1));  break;	      ||    currentOption.hasArg())    {    tokens.add(token.substring(i    +    1));    break;    	non-compiled	[CE]  ')'  expected	6	None	replace
36	[BUG]  [BUGGY]  addToken(token.substring(i  +  1),  ch);  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  addToken(token.substring(i  +  1),  ch);  [BUGGY]    }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	addToken(token.substring(i  +  1),  ch);	  addToken(token.substring(i    +    1));    	non-compiled	[CE]  ')'  expected	13	None	replace
37	[BUG]  [BUGGY]  tokens.add(token.substring(i,  i));  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  tokens.add(token.substring(i,  i));  [BUGGY]    process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(token.substring(i,  i));	      tokens.add(token.substring(0,    i));    	non-compiled	[CE]  ')'  expected	12	None	replace
38	[BUG]  [BUGGY]  proceed(token.substring(i  +  1));  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  proceed(token.substring(i  +  1));  [BUGGY]    }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	proceed(token.substring(i  +  1));	  beginOption(token.substring(i    +    1));    	non-compiled	[CE]  ')'  expected	10	None	replace
39	[BUG]  [BUGGY]  accept(token,  token.substring(i));  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  accept(token,  token.substring(i));  [BUGGY]    }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	accept(token,  token.substring(i));	  process(ch,    token.substring(i));    	non-compiled	[CE]  ')'  expected	7	None	replace
40	[BUG]  [BUGGY]  execute(token,  token.substring(i));  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  execute(token,  token.substring(i));  [BUGGY]    }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	execute(token,  token.substring(i));	  process(ch,    token.substring(i));    	non-compiled	[CE]  ')'  expected	7	None	replace
41	[BUG]  [BUGGY]  tokens.add(token.substring(2));  break;  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  tokens.add(token.substring(2));  break;  [BUGGY]    process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(token.substring(2));  break;	      tokens.add(token.substring(i));    break;    	non-compiled	[CE]  ')'  expected	11	None	replace
42	[BUG]  [BUGGY]      tokens.add(token.substring(i  +  1));  tokens.add(token.substring(i));  [CE]  'else'  without  'if'  [FE]    AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]      tokens.add(token.substring(i  +  1));  tokens.add(token.substring(i));  [BUGGY]    process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	        tokens.add(token.substring(i    +    1));    tokens.add(token.substring(i));	  	non-compiled	[CE]  'else'  without  'if'	1	None	add
43	[BUG]  [BUGGY]      tokens.add(token.substring(i  +  1));  tokens.add(token.substring(0,  i  +  1));  [CE]  [FE]      AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]      tokens.add(token.substring(i  +  1));  tokens.add(token.substring(0,  i  +  1));  [BUGGY]    process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	        tokens.add(token.substring(i    +    1));    tokens.add(token.substring(0,  i  +  1));	  	non-compiled	[CE]  	1	None	add
44	[BUG]  [BUGGY]      tokens.add(token.substring(i  +  1));  tokens.add(token.substring(0,  i));  [CE]  [FE]        AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]      tokens.add(token.substring(i  +  1));  tokens.add(token.substring(0,  i));  [BUGGY]    process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	        tokens.add(token.substring(i    +    1));    tokens.add(token.substring(0,  i));	  	non-compiled	[CE]  	1	None	add
45	[BUG]  [BUGGY]  Process(token.substring(0,  i  +  1));  [CE]  [FE]          AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  Process(token.substring(0,  i  +  1));  [BUGGY]    }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	Process(token.substring(0,  i  +  1));	  process(token.substring(0,    i));    	non-compiled	[CE]  	8	None	replace
46	[BUG]  [BUGGY]  ||  currentOption.hasArg())  {  tokens.add(token.substring(i  +  1,  ch));  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  ||  currentOption.hasArg())  {  tokens.add(token.substring(i  +  1,  ch));  [BUGGY]    process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	||  currentOption.hasArg())  {  tokens.add(token.substring(i  +  1,  ch));	      ||    currentOption.hasArg())    {    tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  ')'  expected	4	None	replace
47	[BUG]  [BUGGY]  tokens.add( "n ");  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  tokens.add( "n ");  [BUGGY]    process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add( "n ");	      tokens.add(ch);    	non-compiled	[CE]  ')'  expected	16	None	replace
48	[BUG]  [BUGGY]  process(token.substring(i,  i));  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  process(token.substring(i,  i));  [BUGGY]    }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token.substring(i,  i));	  process(token.substring(1));    	non-compiled	[CE]  ')'  expected	14	None	replace
49	[BUG]  [BUGGY]  tokens.add(Token.NAME);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  tokens.add(Token.NAME);  [BUGGY]    process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(Token.NAME);	      tokens.add(ch);    	non-compiled	[CE]  ')'  expected	16	None	replace
50	[BUG]  [BUGGY]  ||  currentOption.hasNext())  {  tokens.add(token.substring(i  +  1));  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  ||  currentOption.hasNext())  {  tokens.add(token.substring(i  +  1));  [BUGGY]    process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	||  currentOption.hasNext())  {  tokens.add(token.substring(i  +  1));	      ||    currentOption.hasArg())    {    tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  ')'  expected	4	None	replace
51	[BUG]  [BUGGY]  accept(token.substring(0,  i));  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  accept(token.substring(0,  i));  [BUGGY]    }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	accept(token.substring(0,  i));	  process(token.substring(0,    i));    	non-compiled	[CE]  ')'  expected	8	None	replace
52	[BUG]  [BUGGY]  tokens.add(token.substring(i,  ch));  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  tokens.add(token.substring(i,  ch));  [BUGGY]    process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(token.substring(i,  ch));	      tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  ')'  expected	2	None	replace
53	[BUG]  [BUGGY]  tokens.add(token.substring(i,  i  +  1));  break;  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  tokens.add(token.substring(i,  i  +  1));  break;  [BUGGY]    process(token.substring(i));  }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	tokens.add(token.substring(i,  i  +  1));  break;	      tokens.add(token.substring(i    +    1));    break;    	non-compiled	[CE]  ')'  expected	5	None	replace
54	[BUG]  [BUGGY]  accept(token.substring(i  +  1));  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  accept(token.substring(i  +  1));  [BUGGY]    }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	accept(token.substring(i  +  1));	  beginOption(token.substring(i    +    1));    	non-compiled	[CE]  ')'  expected	10	None	replace
55	[BUG]  [BUGGY]  beginOption(token.substring(i  +  1),  stopAtNonOption);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  beginOption(token.substring(i  +  1),  stopAtNonOption);  [BUGGY]    }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	beginOption(token.substring(i  +  1),  stopAtNonOption);	  beginOption(token.substring(i    +    1));    	non-compiled	[CE]  ')'  expected	10	None	replace
56	[BUG]  [BUGGY]  process(token.substring(i,  currentOption.getValue()));  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  process(token.substring(i,  currentOption.getValue()));  [BUGGY]    }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token.substring(i,  currentOption.getValue()));	  process(token.substring(1));    	non-compiled	[CE]  ')'  expected	14	None	replace
57	[BUG]  [BUGGY]  process(token.substring(i,  currentOption.getName()));  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  process(token.substring(i,  currentOption.getName()));  [BUGGY]    }  else  {  tokens.add(token);  break;  }  }  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli17/src/java/org/apache/commons/cli/PosixParser.java	1.0	302	302	1	replace	process(token.substring(i,  currentOption.getName()));	  process(token.substring(1));    	non-compiled	[CE]  ')'  expected	14	None	replace
