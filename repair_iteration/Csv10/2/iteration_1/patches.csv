bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  }  else  if(format.isEscape()  ||  format.isEscaped())  {  [CE]  cannot  find  symbol  [FE]        org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscape()  ||  format.isEscaped())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(format.isEscape()  ||  format.isEscaped())  {	  }    else    if(format.isEscape())    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
2	[BUG]  [BUGGY]  }  else  if(format.isEscape()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  [FE]          org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscape()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(format.isEscape()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  }    else    if(format.isEscape())    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
3	[BUG]  [BUGGY]  }  else  if(format.isEscape()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  [FE]            org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscape()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(format.isEscape()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  }    else    if(format.isEscape())    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
4	[BUG]  [BUGGY]  }  else  if(format.isEscape()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  [FE]              org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscape()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(format.isEscape()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  }    else    if(format.isEscape())    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
5	[BUG]  [BUGGY]  }  else  if(format.isEscape()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  [FE]                org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscape()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(format.isEscape()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  }    else    if(format.isEscape())    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
6	[BUG]  [BUGGY]  }  else  if(format.isEscape()  ||  format.isEmpty())  {  [CE]  cannot  find  symbol  [FE]                  org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscape()  ||  format.isEmpty())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(format.isEscape()  ||  format.isEmpty())  {	  }    else    if(format.isEscape())    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
7	[BUG]  [BUGGY]  if(newRecord)  {  printAndEscape(object,  offset,  len);  }  else  {  out.append(format.getDelimiter());  }  [CE]  cannot  find  symbol  [FE]                org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  if(newRecord)  {  printAndEscape(object,  offset,  len);  }  else  {  out.append(format.getDelimiter());  }  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	if(newRecord)  {  printAndEscape(object,  offset,  len);  }  else  {  out.append(format.getDelimiter());  }	      	non-compiled	[CE]  cannot  find  symbol	5	None	replace
8	[BUG]  [BUGGY]  printAndEscape(object,  offset,  len);  [CE]  cannot  find  symbol  [FE]                  org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  printAndEscape(object,  offset,  len);  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	printAndEscape(object,  offset,  len);	      	non-compiled	[CE]  cannot  find  symbol	5	None	replace
9	[BUG]  [BUGGY]  if(newRecord)  {  out.append(format.getDelimiter());  }  [CE]  cannot  find  symbol  [FE]                    org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  if(newRecord)  {  out.append(format.getDelimiter());  }  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	if(newRecord)  {  out.append(format.getDelimiter());  }	      	non-compiled	[CE]  cannot  find  symbol	5	None	replace
10	[BUG]  [BUGGY]  if(newRecord)  {  out.append(format.getDelimiter());  }  else  {  printAndEscape(object,  offset,  offset  +  len);  }  [CE]  cannot  find  symbol  [FE]                      org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  if(newRecord)  {  out.append(format.getDelimiter());  }  else  {  printAndEscape(object,  offset,  offset  +  len);  }  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	if(newRecord)  {  out.append(format.getDelimiter());  }  else  {  printAndEscape(object,  offset,  offset  +  len);  }	      	non-compiled	[CE]  cannot  find  symbol	5	None	replace
11	[BUG]  [BUGGY]  if(newRecord)  {  out.append(format.getDelimiter());  }  else  {  out.append(format.getDelimiter());  }  [CE]  cannot  find  symbol  [FE]                        org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  if(newRecord)  {  out.append(format.getDelimiter());  }  else  {  out.append(format.getDelimiter());  }  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	if(newRecord)  {  out.append(format.getDelimiter());  }  else  {  out.append(format.getDelimiter());  }	      	non-compiled	[CE]  cannot  find  symbol	5	None	replace
12	[BUG]  [BUGGY]  if(newRecord)  {  out.append(format.getDelimiter());  }  else  {  printAndEscape(object,  offset,  len);  }  [CE]  cannot  find  symbol  [FE]                          org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  if(newRecord)  {  out.append(format.getDelimiter());  }  else  {  printAndEscape(object,  offset,  len);  }  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	if(newRecord)  {  out.append(format.getDelimiter());  }  else  {  printAndEscape(object,  offset,  len);  }	      	non-compiled	[CE]  cannot  find  symbol	5	None	replace
13	[BUG]  [BUGGY]  if(newRecord)  {  out.append('n');  }  else  {  out.append(format.getDelimiter());  }  [CE]  cannot  find  symbol  [FE]                            org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  if(newRecord)  {  out.append('n');  }  else  {  out.append(format.getDelimiter());  }  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	if(newRecord)  {  out.append('n');  }  else  {  out.append(format.getDelimiter());  }	      	non-compiled	[CE]  cannot  find  symbol	5	None	replace
14	[BUG]  [BUGGY]  }  else  if(format.isEscaped()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  [FE]        org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscaped()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(format.isEscaped()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  }    else    if(format.isEscaped())    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
15	[BUG]  [BUGGY]  }  else  if(format.isEscaped()  ||  format.isEscaped())  {  [CE]  cannot  find  symbol  [FE]          org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscaped()  ||  format.isEscaped())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(format.isEscaped()  ||  format.isEscaped())  {	  }    else    if(format.isEscaped())    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
16	[BUG]  [BUGGY]  }  else  if(format.isEscaped()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  [FE]            org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscaped()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(format.isEscaped()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  }    else    if(format.isEscaped())    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
17	[BUG]  [BUGGY]  }  else  if(format.isEscaped()  ||  value.isEmpty())  {  [CE]  cannot  find  symbol  [FE]              org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscaped()  ||  value.isEmpty())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(format.isEscaped()  ||  value.isEmpty())  {	  }    else    if(format.isEscaped())    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
18	[BUG]  [BUGGY]  }  else  if(format.isEscaped()  ||  isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  [CE]  cannot  find  symbol  [FE]                org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscaped()  ||  isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(format.isEscaped()  ||  isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {	  }    else    if(format.isEscaped())    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
19	[BUG]  [BUGGY]  }  else  if(!format.isEscaped())  {  [CE]  cannot  find  symbol  [FE]                  org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(!format.isEscaped())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(!format.isEscaped())  {	  }    else    if(format.isEscaped())    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
20	[BUG]  [BUGGY]  }  else  if(format.isComparisonFailure()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  [FE]          org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isComparisonFailure()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(format.isComparisonFailure()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  }    else    if(format.isComparisonFailure())    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
21	[BUG]  [BUGGY]  }  else  if(format.isComparisonFailure()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  [FE]            org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isComparisonFailure()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(format.isComparisonFailure()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  }    else    if(format.isComparisonFailure())    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
22	[BUG]  [BUGGY]  }  else  if(format.isComparisonFailure()  ||  value.isEmpty())  {  [CE]  cannot  find  symbol  [FE]              org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isComparisonFailure()  ||  value.isEmpty())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(format.isComparisonFailure()  ||  value.isEmpty())  {	  }    else    if(format.isComparisonFailure())    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
23	[BUG]  [BUGGY]  }  else  if(format.isComparisonFailure()  &&  newRecord)  {  [CE]  cannot  find  symbol  [FE]                org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isComparisonFailure()  &&  newRecord)  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(format.isComparisonFailure()  &&  newRecord)  {	  }    else    if(format.isComparisonFailure())    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
24	[BUG]  [BUGGY]  }  else  if(format.isComparisonFailure()  ||  format.isEmpty())  {  [CE]  cannot  find  symbol  [FE]                  org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isComparisonFailure()  ||  format.isEmpty())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(format.isComparisonFailure()  ||  format.isEmpty())  {	  }    else    if(format.isComparisonFailure())    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
25	[BUG]  [BUGGY]  }  else  if(!format.isComparisonFailure())  {  [CE]  cannot  find  symbol  [FE]                    org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(!format.isComparisonFailure())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(!format.isComparisonFailure())  {	  }    else    if(format.isComparisonFailure())    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
26	[BUG]  [BUGGY]  }  else  if(!format.isEscaping()  &&!newRecord)  {  [CE]  cannot  find  symbol  [FE]            org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(!format.isEscaping()  &&!newRecord)  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(!format.isEscaping()  &&!newRecord)  {	  }    else    if(!format.isEscaping())    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
27	[BUG]  [BUGGY]  }  else  if(!format.isEscaping()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  [FE]              org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(!format.isEscaping()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(!format.isEscaping()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  }    else    if(!format.isEscaping())    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
28	[BUG]  [BUGGY]  }  else  if(!format.isEscaping()  ||  format.isEscaping())  {  [CE]  cannot  find  symbol  [FE]                org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(!format.isEscaping()  ||  format.isEscaping())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(!format.isEscaping()  ||  format.isEscaping())  {	  }    else    if(!format.isEscaping())    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
29	[BUG]  [BUGGY]  }  else  if(!format.isEscaping()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  [FE]                  org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(!format.isEscaping()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(!format.isEscaping()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  }    else    if(!format.isEscaping())    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
30	[BUG]  [BUGGY]  }  else  if(!format.isEscaping()  ||!newRecord)  {  [CE]  cannot  find  symbol  [FE]                    org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(!format.isEscaping()  ||!newRecord)  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(!format.isEscaping()  ||!newRecord)  {	  }    else    if(!format.isEscaping())    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
31	[BUG]  [BUGGY]  }  else  if(!format.isEscaping()  &&  isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  [CE]  cannot  find  symbol  [FE]                      org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(!format.isEscaping()  &&  isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(!format.isEscaping()  &&  isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {	  }    else    if(!format.isEscaping())    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
32	[BUG]  [BUGGY]  }  else  if(format.isEscaping()  &&  format.isEscaping())  {  [CE]  cannot  find  symbol  [FE]              org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscaping()  &&  format.isEscaping())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(format.isEscaping()  &&  format.isEscaping())  {	  }    else    if(format.isEscaping()    ||    format.isEscaping())    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
33	[BUG]  [BUGGY]  }  else  if(format.isEmpty()  ||  format.isEmpty())  {  [CE]  cannot  find  symbol  [FE]                org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEmpty()  ||  format.isEmpty())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(format.isEmpty()  ||  format.isEmpty())  {	  }    else    if(format.isEscaping()    ||    format.isEscaping())    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
34	[BUG]  [BUGGY]  }  else  if(value.isEscaping()  ||  format.isEscaping())  {  [CE]  cannot  find  symbol  [FE]                  org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(value.isEscaping()  ||  format.isEscaping())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(value.isEscaping()  ||  format.isEscaping())  {	  }    else    if(format.isEscaping()    ||    format.isEscaping())    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
35	[BUG]  [BUGGY]  }  else  if(format.isEscaping()  ||  format.isRecording())  {  [CE]  cannot  find  symbol  [FE]                    org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscaping()  ||  format.isRecording())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(format.isEscaping()  ||  format.isRecording())  {	  }    else    if(format.isEscaping()    ||    format.isEscaping())    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
36	[BUG]  [BUGGY]  }  else  if(format.isEscaping()  ||  format.isScaling())  {  [CE]  cannot  find  symbol  [FE]                      org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscaping()  ||  format.isScaling())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(format.isEscaping()  ||  format.isScaling())  {	  }    else    if(format.isEscaping()    ||    format.isEscaping())    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
37	[BUG]  [BUGGY]  }  else  if(format.isEscape()  ||  format.isEscaping())  {  [CE]  cannot  find  symbol  [FE]                        org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscape()  ||  format.isEscaping())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(format.isEscape()  ||  format.isEscaping())  {	  }    else    if(format.isEscaping()    ||    format.isEscaping())    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
38	[BUG]  [BUGGY]  out.append(format.getDelimiter());  [CE]  cannot  find  symbol  [FE]                org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  out.append(format.getDelimiter());  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	out.append(format.getDelimiter());	      	non-compiled	[CE]  cannot  find  symbol	5	None	replace
39	[BUG]  [BUGGY]  if(newRecord)  {  out.append(object.getDelimiter());  }  else  {  out.append(format.getDelimiter());  }  [CE]  cannot  find  symbol  [FE]                  org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  if(newRecord)  {  out.append(object.getDelimiter());  }  else  {  out.append(format.getDelimiter());  }  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	if(newRecord)  {  out.append(object.getDelimiter());  }  else  {  out.append(format.getDelimiter());  }	      	non-compiled	[CE]  cannot  find  symbol	5	None	replace
40	[BUG]  [BUGGY]  if(newRecord)  {  out.append(object);  }  else  {  out.append(format.getDelimiter());  }  [CE]  cannot  find  symbol  [FE]                    org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  if(newRecord)  {  out.append(object);  }  else  {  out.append(format.getDelimiter());  }  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	if(newRecord)  {  out.append(object);  }  else  {  out.append(format.getDelimiter());  }	      	non-compiled	[CE]  cannot  find  symbol	5	None	replace
41	[BUG]  [BUGGY]  if(newRecord)  {  out.append(object.getDelimiter());  }  [CE]  cannot  find  symbol  [FE]                      org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  if(newRecord)  {  out.append(object.getDelimiter());  }  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	if(newRecord)  {  out.append(object.getDelimiter());  }	      	non-compiled	[CE]  cannot  find  symbol	5	None	replace
42	[BUG]  [BUGGY]  }  else  if(!format.isEscaping()  ||!format.isEscaping())  {  [CE]  cannot  find  symbol  [FE]            org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(!format.isEscaping()  ||!format.isEscaping())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(!format.isEscaping()  ||!format.isEscaping())  {	  }    else    if(!format.isEscaping())    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
43	[BUG]  [BUGGY]  }  else  if(!format.isEscaping()  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  cannot  find  symbol  [FE]              org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(!format.isEscaping()  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(!format.isEscaping()  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  }    else    if(!format.isEscaping())    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
44	[BUG]  [BUGGY]  }  else  if(!format.isEscaping()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  [FE]                org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(!format.isEscaping()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(!format.isEscaping()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  }    else    if(!format.isEscaping())    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
45	[BUG]  [BUGGY]  }  else  if(!format.isEscaping()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  [FE]                  org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(!format.isEscaping()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(!format.isEscaping()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  }    else    if(!format.isEscaping())    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
46	[BUG]  [BUGGY]  }  else  if(!format.isEscape())  {  [CE]  cannot  find  symbol  [FE]                    org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(!format.isEscape())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(!format.isEscape())  {	  }    else    if(!format.isEscaping())    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
47	[BUG]  [BUGGY]  }  else  if(format.isEscaped()  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  cannot  find  symbol  [FE]        org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscaped()  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(format.isEscaped()  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  }    else    if(format.isEscaped())    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
48	[BUG]  [BUGGY]  }  else  if(format.isEscaped()  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [CE]  cannot  find  symbol  [FE]          org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscaped()  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(format.isEscaped()  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {	  }    else    if(format.isEscaped())    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
49	[BUG]  [BUGGY]  }  else  if(format.isEmpty()  ||  format.isEscaping())  {  [CE]  cannot  find  symbol  [FE]              org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEmpty()  ||  format.isEscaping())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(format.isEmpty()  ||  format.isEscaping())  {	  }    else    if(format.isEscaping()    ||    format.isEscaping())    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
50	[BUG]  [BUGGY]  }  else  if(format.isEscaping()  ||  format.isEscaped())  {  [CE]  cannot  find  symbol  [FE]                org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscaping()  ||  format.isEscaped())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(format.isEscaping()  ||  format.isEscaped())  {	  }    else    if(format.isEscaping()    ||    format.isEscaping())    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
51	[BUG]  [BUGGY]  }  else  if(format.isEscaping()  ||  format.isEscape())  {  [CE]  cannot  find  symbol  [FE]                  org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscaping()  ||  format.isEscape())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(format.isEscaping()  ||  format.isEscape())  {	  }    else    if(format.isEscaping()    ||    format.isEscaping())    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
52	[BUG]  [BUGGY]  }  else  if(format.isEscaping()  ||  format.isEmpty())  {  [CE]  cannot  find  symbol  [FE]                    org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscaping()  ||  format.isEmpty())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(format.isEscaping()  ||  format.isEmpty())  {	  }    else    if(format.isEscaping()    ||    format.isEscaping())    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
53	[BUG]  [BUGGY]  }  else  if(format.isComparisonFailure()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  [FE]          org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isComparisonFailure()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(format.isComparisonFailure()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  }    else    if(format.isComparisonFailure())    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
54	[BUG]  [BUGGY]  }  else  if(format.isComparisonFailure()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  [FE]            org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isComparisonFailure()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(format.isComparisonFailure()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  }    else    if(format.isComparisonFailure())    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
55	[BUG]  [BUGGY]  }  else  if(format.isComparisonFailure()  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  cannot  find  symbol  [FE]              org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isComparisonFailure()  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(format.isComparisonFailure()  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  }    else    if(format.isComparisonFailure())    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
56	[BUG]  [BUGGY]  }  else  if(format.isComparisonFailure()  ||  format.isEscaped())  {  [CE]  cannot  find  symbol  [FE]                org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isComparisonFailure()  ||  format.isEscaped())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(format.isComparisonFailure()  ||  format.isEscaped())  {	  }    else    if(format.isComparisonFailure())    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
57	[BUG]  [BUGGY]  }  else  if(format.isEscape()  ||  format.isDelimiter())  {  [CE]  cannot  find  symbol  [FE]        org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscape()  ||  format.isDelimiter())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(format.isEscape()  ||  format.isDelimiter())  {	  }    else    if(format.isEscape())    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
58	[BUG]  [BUGGY]  }  else  if(format.isEscape()  ||  format.isComparisonFailure())  {  [CE]  cannot  find  symbol  [FE]          org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscape()  ||  format.isComparisonFailure())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(format.isEscape()  ||  format.isComparisonFailure())  {	  }    else    if(format.isEscape())    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
59	[BUG]  [BUGGY]  }  else  if(format.isEscape()  ||  format.equals(value))  {  [CE]  cannot  find  symbol  [FE]            org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscape()  ||  format.equals(value))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(format.isEscape()  ||  format.equals(value))  {	  }    else    if(format.isEscape())    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
60	[BUG]  [BUGGY]  }  else  if(format.isEscape()  ||  format.isComparisonFactory())  {  [CE]  cannot  find  symbol  [FE]              org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscape()  ||  format.isComparisonFactory())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(format.isEscape()  ||  format.isComparisonFactory())  {	  }    else    if(format.isEscape())    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
61	[BUG]  [BUGGY]  }  else  if(format.isEscape()  ||  format.isEscapeCharacters())  {  [CE]  cannot  find  symbol  [FE]                org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscape()  ||  format.isEscapeCharacters())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(format.isEscape()  ||  format.isEscapeCharacters())  {	  }    else    if(format.isEscape())    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
62	[BUG]  [BUGGY]  }  else  if(format.isEscape()  ||  format.isEscape())  {  [CE]  cannot  find  symbol  [FE]        org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscape()  ||  format.isEscape())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(format.isEscape()  ||  format.isEscape())  {	  }    else    if(format.isEscape())    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
63	[BUG]  [BUGGY]  }  else  if(format.isEscape()  ||  format.equals(len))  {  [CE]  cannot  find  symbol  [FE]          org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscape()  ||  format.equals(len))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(format.isEscape()  ||  format.equals(len))  {	  }    else    if(format.isEscape())    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
64	[BUG]  [BUGGY]  if(newRecord)  {  printAndEscape(object,  offset,  offset  +  len);  }  else  {  out.append(format.getDelimiter());  }  [CE]  cannot  find  symbol  [FE]                org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  if(newRecord)  {  printAndEscape(object,  offset,  offset  +  len);  }  else  {  out.append(format.getDelimiter());  }  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	if(newRecord)  {  printAndEscape(object,  offset,  offset  +  len);  }  else  {  out.append(format.getDelimiter());  }	      	non-compiled	[CE]  cannot  find  symbol	5	None	replace
65	[BUG]  [BUGGY]  if(newRecord)  {  out.append(format.getDelimiter());  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CE]  cannot  find  symbol  [FE]                  org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  if(newRecord)  {  out.append(format.getDelimiter());  }  else  {  out.append(value,  offset,  offset  +  len);  }  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	if(newRecord)  {  out.append(format.getDelimiter());  }  else  {  out.append(value,  offset,  offset  +  len);  }	      	non-compiled	[CE]  cannot  find  symbol	5	None	replace
66	[BUG]  [BUGGY]  }  else  if(format.isEscaped()  ||  format.isEmpty())  {  [CE]  cannot  find  symbol  [FE]        org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscaped()  ||  format.isEmpty())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(format.isEscaped()  ||  format.isEmpty())  {	  }    else    if(format.isEscaped())    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
67	[BUG]  [BUGGY]  }  else  if(format.isEscaped()  ||  isEnabled(Feature.QUOTE_SOURCE))  {  [CE]  cannot  find  symbol  [FE]          org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscaped()  ||  isEnabled(Feature.QUOTE_SOURCE))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(format.isEscaped()  ||  isEnabled(Feature.QUOTE_SOURCE))  {	  }    else    if(format.isEscaped())    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
68	[BUG]  [BUGGY]  }  else  if(!newRecord.isEscaping())  {  [CE]  cannot  find  symbol  [FE]            org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(!newRecord.isEscaping())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(!newRecord.isEscaping())  {	  }    else    if(!format.isEscaping())    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
69	[BUG]  [BUGGY]  }  else  if(!format.isEscaping()  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [CE]  cannot  find  symbol  [FE]              org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(!format.isEscaping()  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(!format.isEscaping()  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {	  }    else    if(!format.isEscaping())    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
70	[BUG]  [BUGGY]  }  else  if(value.isComparisonFailure())  {  [CE]  cannot  find  symbol  [FE]          org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(value.isComparisonFailure())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(value.isComparisonFailure())  {	  }    else    if(format.isComparisonFailure())    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
71	[BUG]  [BUGGY]  }  else  if(format.isComparisonFailure()  ||  isEscaped(value,  offset,  len))  {  [CE]  cannot  find  symbol  [FE]            org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isComparisonFailure()  ||  isEscaped(value,  offset,  len))  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(format.isComparisonFailure()  ||  isEscaped(value,  offset,  len))  {	  }    else    if(format.isComparisonFailure())    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
72	[BUG]  [BUGGY]  }  else  if(format.isEscaping()  ||  format.escaping())  {  [CE]  cannot  find  symbol  [FE]              org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.isEscaping()  ||  format.escaping())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(format.isEscaping()  ||  format.escaping())  {	  }    else    if(format.isEscaping()    ||    format.isEscaping())    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
73	[BUG]  [BUGGY]  }  else  if(format.equals(offset)||  format.isEscaping())  {  [CE]  cannot  find  symbol  [FE]                org.junit.ComparisonFailure:  expected:<[C1    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {  if  (!newRecord)  {  out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);    [BUGGY]  }  else  if(format.equals(offset)||  format.isEscaping())  {  [BUGGY]    printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  newRecord  =  false;  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv10/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.35355339059327373	122	122	1	replace	}  else  if(format.equals(offset)||  format.isEscaping())  {	  }    else    if(format.isEscaping()    ||    format.isEscaping())    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
