bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number
this_action1	[BUG]  [BUGGY]    if(FACTORIALS  ==  null)  {  if(!FACTORIALS.isEmpty())  {  return;  }  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    if(FACTORIALS  ==  null)  {  if(!FACTORIALS.isEmpty())  {  return;  }  [BUGGY]  private  static  final  long[]  FACTORIALS  =  new  long[]  {  1l,1l,  2l,  6l,  24l,  120l,  720l,  5040l,  40320l,  362880l,3628800l,39916800l,  479001600l,  6227020800l,  87178291200l,  1307674368000l,  20922789888000l,  355687428096000l,  6402373705728000l,  121645100408832000l,  2432902008176640000l  };  [CLASS]  MathUtils  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	69	69	1	replace	    if(FACTORIALS  ==  null)  {  if(!FACTORIALS.isEmpty())  {  return;  }		non-compiled	[CE]  illegal  start  of  type	3	None	add
2	[BUG]  [BUGGY]    if(FACTORIALS  ==  null)  {  if(!FACTORIALS.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    if(FACTORIALS  ==  null)  {  if(!FACTORIALS.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  private  static  final  long[]  FACTORIALS  =  new  long[]  {  1l,1l,  2l,  6l,  24l,  120l,  720l,  5040l,  40320l,  362880l,3628800l,39916800l,  479001600l,  6227020800l,  87178291200l,  1307674368000l,  20922789888000l,  355687428096000l,  6402373705728000l,  121645100408832000l,  2432902008176640000l  };  [CLASS]  MathUtils  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	69	69	1	replace	    if(FACTORIALS  ==  null)  {  if(!FACTORIALS.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  type	3	None	add
3	[BUG]  [BUGGY]    if(FACTORIALS  ==  null)  {  if(!FACTORIALS.isEmpty())  {  return  true;  }  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    if(FACTORIALS  ==  null)  {  if(!FACTORIALS.isEmpty())  {  return  true;  }  [BUGGY]  private  static  final  long[]  FACTORIALS  =  new  long[]  {  1l,1l,  2l,  6l,  24l,  120l,  720l,  5040l,  40320l,  362880l,3628800l,39916800l,  479001600l,  6227020800l,  87178291200l,  1307674368000l,  20922789888000l,  355687428096000l,  6402373705728000l,  121645100408832000l,  2432902008176640000l  };  [CLASS]  MathUtils  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	69	69	1	replace	    if(FACTORIALS  ==  null)  {  if(!FACTORIALS.isEmpty())  {  return  true;  }		non-compiled	[CE]  illegal  start  of  type	3	None	add
4	[BUG]  [BUGGY]    if(FACTORIALS  ==  null)  {  if(!FACTORIALS.isEmpty())  {  return  new  long[];  }  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    if(FACTORIALS  ==  null)  {  if(!FACTORIALS.isEmpty())  {  return  new  long[];  }  [BUGGY]  private  static  final  long[]  FACTORIALS  =  new  long[]  {  1l,1l,  2l,  6l,  24l,  120l,  720l,  5040l,  40320l,  362880l,3628800l,39916800l,  479001600l,  6227020800l,  87178291200l,  1307674368000l,  20922789888000l,  355687428096000l,  6402373705728000l,  121645100408832000l,  2432902008176640000l  };  [CLASS]  MathUtils  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	69	69	1	replace	    if(FACTORIALS  ==  null)  {  if(!FACTORIALS.isEmpty())  {  return  new  long[];  }		non-compiled	[CE]  illegal  start  of  type	3	None	add
5	[BUG]  [BUGGY]    if(FACTORIALS  ==  null)  {  if(!FACTORIALS.isEmpty())  {  return  new  long[]?  FACTORIALS  :  4;  }  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    if(FACTORIALS  ==  null)  {  if(!FACTORIALS.isEmpty())  {  return  new  long[]?  FACTORIALS  :  4;  }  [BUGGY]  private  static  final  long[]  FACTORIALS  =  new  long[]  {  1l,1l,  2l,  6l,  24l,  120l,  720l,  5040l,  40320l,  362880l,3628800l,39916800l,  479001600l,  6227020800l,  87178291200l,  1307674368000l,  20922789888000l,  355687428096000l,  6402373705728000l,  121645100408832000l,  2432902008176640000l  };  [CLASS]  MathUtils  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	69	69	1	replace	    if(FACTORIALS  ==  null)  {  if(!FACTORIALS.isEmpty())  {  return  new  long[]?  FACTORIALS  :  4;  }		non-compiled	[CE]  illegal  start  of  type	3	None	add
11	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    double  sum  =  Math.sqrt(Math.log(p1)-  Math.log(p2));  if(sum  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1629	1629	1	add	    double  sum  =  Math.sqrt(Math.log(p1)-  Math.log(p2));  if(sum  <  0)  {  throw  new  IllegalArgumentException( " ");  }		compilable	timeout	13	1
12	[BUG]  [BUGGY]    double  sum  =  Math.sqrt(Math.log(p1)-  Math.log(p2));  if(sum  <  0)  {  throw  new  IllegalArgumentException( " ");  }  timeout  [CONTEXT]    [BUGGY]    double  sum  =  Math.sqrt(Math.log(p1)-  Math.log(p2));  if(sum  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1629	1629	1	replace	    double  sum  =  Math.sqrt(Math.log(p1)-  Math.log(p2));  if(sum  <  0)  {  throw  new  IllegalArgumentException( " ");  }		compilable	timeout	13	1	add
12	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    double  sum  =  Math.sqrt(Math.log(p1)-  Math.log(p2));  [BUGGY]  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1629	1629	1	add	    double  sum  =  Math.sqrt(Math.log(p1)-  Math.log(p2));		compilable	timeout	13	1
13	[BUG]  [BUGGY]    double  sum  =  Math.sqrt(Math.log(p1)-  Math.log(p2));  timeout  [CONTEXT]    [BUGGY]    double  sum  =  Math.sqrt(Math.log(p1)-  Math.log(p2));  [BUGGY]  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1629	1629	1	replace	    double  sum  =  Math.sqrt(Math.log(p1)-  Math.log(p2));		compilable	timeout	13	1	add
13	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    test(p1,  p2);  [BUGGY]  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1629	1629	1	add	    test(p1,  p2);		compilable	timeout	13	1
14	[BUG]  [BUGGY]    test(p1,  p2);  timeout  [CONTEXT]    [BUGGY]    test(p1,  p2);  [BUGGY]  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1629	1629	1	replace	    test(p1,  p2);		compilable	timeout	13	1	add
14	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    double  sum  =  Math.sqrt(Math.log(p1)-  Math.log(p2));  if(sum  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1629	1629	1	add	    double  sum  =  Math.sqrt(Math.log(p1)-  Math.log(p2));  if(sum  >  0)  {  throw  new  IllegalArgumentException( " ");  }		compilable	timeout	13	1
15	[BUG]  [BUGGY]    double  sum  =  Math.sqrt(Math.log(p1)-  Math.log(p2));  if(sum  >  0)  {  throw  new  IllegalArgumentException( " ");  }  timeout  [CONTEXT]    [BUGGY]    double  sum  =  Math.sqrt(Math.log(p1)-  Math.log(p2));  if(sum  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1629	1629	1	replace	    double  sum  =  Math.sqrt(Math.log(p1)-  Math.log(p2));  if(sum  >  0)  {  throw  new  IllegalArgumentException( " ");  }		compilable	timeout	13	1	add
15	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    if(p  >  0)  {  Math.sqrt(sum);  if(p  >  p2)  {  return  Math.log(p1,  p2);  }  [BUGGY]  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1629	1629	1	add	    if(p  >  0)  {  Math.sqrt(sum);  if(p  >  p2)  {  return  Math.log(p1,  p2);  }		compilable	timeout	13	1
16	[BUG]  [BUGGY]    if(p  >  0)  {  Math.sqrt(sum);  if(p  >  p2)  {  return  Math.log(p1,  p2);  }  timeout  [CONTEXT]    [BUGGY]    if(p  >  0)  {  Math.sqrt(sum);  if(p  >  p2)  {  return  Math.log(p1,  p2);  }  [BUGGY]  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1629	1629	1	replace	    if(p  >  0)  {  Math.sqrt(sum);  if(p  >  p2)  {  return  Math.log(p1,  p2);  }		compilable	timeout	13	1	add
21	[BUG]  [BUGGY]    int  s  =  Math.sqrt(Integer.MAX_VALUE);  [CE]  possible  loss  of  precision  [CONTEXT]    [BUGGY]    int  s  =  Math.sqrt(Integer.MAX_VALUE);  [BUGGY]  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	97	97	1	replace	    int  s  =  Math.sqrt(Integer.MAX_VALUE);		non-compiled	[CE]  possible  loss  of  precision	21	None	add
22	[BUG]  [BUGGY]    int  s  =  Math.sqrt(Math.random());  [CE]  possible  loss  of  precision  [CONTEXT]    [BUGGY]    int  s  =  Math.sqrt(Math.random());  [BUGGY]  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	97	97	1	replace	    int  s  =  Math.sqrt(Math.random());		non-compiled	[CE]  possible  loss  of  precision	21	None	add
23	[BUG]  [BUGGY]    int  s  =  Math.sqrt(Integer.valueOf(x),  y);  [CE]  cannot  find  symbol  x  [CONTEXT]    [BUGGY]    int  s  =  Math.sqrt(Integer.valueOf(x),  y);  [BUGGY]  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	97	97	1	replace	    int  s  =  Math.sqrt(Integer.valueOf(x),  y);		non-compiled	[CE]  cannot  find  symbol  x	21	None	add
24	[BUG]  [BUGGY]    int  s  =  Math.sqrt(Integer.valueOf(x));  [CE]  cannot  find  symbol  x  [CONTEXT]    [BUGGY]    int  s  =  Math.sqrt(Integer.valueOf(x));  [BUGGY]  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	97	97	1	replace	    int  s  =  Math.sqrt(Integer.valueOf(x));		non-compiled	[CE]  cannot  find  symbol  x	21	None	add
25	[BUG]  [BUGGY]    int  s  =  Math.sqrt(Integer.valueOf(x),  y));  [CE]  ';'  expected  [CONTEXT]    [BUGGY]    int  s  =  Math.sqrt(Integer.valueOf(x),  y));  [BUGGY]  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	97	97	1	replace	    int  s  =  Math.sqrt(Integer.valueOf(x),  y));		non-compiled	[CE]  ';'  expected	21	None	add
31	[BUG]  [BUGGY]    Preconditions.checkNotNull(MathUtils.DEFAULT_INIT_ERROR, " ");  [CE]  cannot  find  symbol  DEFAULT_INIT_ERROR  [CONTEXT]    [BUGGY]    Preconditions.checkNotNull(MathUtils.DEFAULT_INIT_ERROR, " ");  [BUGGY]  super();  }  [CLASS]  MathUtils  [METHOD]  <init>  [RETURN_TYPE]  MathUtils()  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	82	82	1	replace	    Preconditions.checkNotNull(MathUtils.DEFAULT_INIT_ERROR, " ");		non-compiled	[CE]  cannot  find  symbol  DEFAULT_INIT_ERROR	15	None	add
32	[BUG]  [BUGGY]    Preconditions.checkArgument(!MathUtils.isEmpty());  [CE]  cannot  find  symbol  [CONTEXT]    [BUGGY]    Preconditions.checkArgument(!MathUtils.isEmpty());  [BUGGY]  super();  }  [CLASS]  MathUtils  [METHOD]  <init>  [RETURN_TYPE]  MathUtils()  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	82	82	1	replace	    Preconditions.checkArgument(!MathUtils.isEmpty());		non-compiled	[CE]  cannot  find  symbol	15	None	add
33	[BUG]  [BUGGY]    Preconditions.checkNotNull(MathUtils.DEFAULT_INIT_ERROR,  false);  [CE]  cannot  find  symbol  DEFAULT_INIT_ERROR  [CONTEXT]    [BUGGY]    Preconditions.checkNotNull(MathUtils.DEFAULT_INIT_ERROR,  false);  [BUGGY]  super();  }  [CLASS]  MathUtils  [METHOD]  <init>  [RETURN_TYPE]  MathUtils()  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	82	82	1	replace	    Preconditions.checkNotNull(MathUtils.DEFAULT_INIT_ERROR,  false);		non-compiled	[CE]  cannot  find  symbol  DEFAULT_INIT_ERROR	15	None	add
34	[BUG]  [BUGGY]    Preconditions.checkNotNull(MathUtils.DEFAULT_INIT_ERROR,  null);  [CE]  cannot  find  symbol  DEFAULT_INIT_ERROR  [CONTEXT]    [BUGGY]    Preconditions.checkNotNull(MathUtils.DEFAULT_INIT_ERROR,  null);  [BUGGY]  super();  }  [CLASS]  MathUtils  [METHOD]  <init>  [RETURN_TYPE]  MathUtils()  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	82	82	1	replace	    Preconditions.checkNotNull(MathUtils.DEFAULT_INIT_ERROR,  null);		non-compiled	[CE]  cannot  find  symbol  DEFAULT_INIT_ERROR	15	None	add
35	[BUG]  [BUGGY]    Preconditions.checkNotNull(this);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [CONTEXT]    [BUGGY]    Preconditions.checkNotNull(this);  [BUGGY]  super();  }  [CLASS]  MathUtils  [METHOD]  <init>  [RETURN_TYPE]  MathUtils()  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	82	82	1	replace	    Preconditions.checkNotNull(this);		non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	15	None	add
41	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]  double  sum  =  0;  [BUGGY]  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1624	1624	1	add	double  sum  =  0;	int  sum  =  0;  	compilable	timeout	4	1
42	[BUG]  [BUGGY]  double  sum  =  0;  timeout  [CONTEXT]    [BUGGY]  double  sum  =  0;  [BUGGY]  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1624	1624	1	replace	double  sum  =  0;	int  sum  =  0;  	compilable	timeout	4	1	replace
42	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]  long  sum  =  0;  [BUGGY]  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1624	1624	1	add	long  sum  =  0;	int  sum  =  0;  	compilable	timeout	4	1
43	[BUG]  [BUGGY]  long  sum  =  0;  timeout  [CONTEXT]    [BUGGY]  long  sum  =  0;  [BUGGY]  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1624	1624	1	replace	long  sum  =  0;	int  sum  =  0;  	compilable	timeout	4	1	replace
43	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]  float  sum  =  0;  [BUGGY]  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1624	1624	1	add	float  sum  =  0;	int  sum  =  0;  	compilable	timeout	4	1
44	[BUG]  [BUGGY]  float  sum  =  0;  timeout  [CONTEXT]    [BUGGY]  float  sum  =  0;  [BUGGY]  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1624	1624	1	replace	float  sum  =  0;	int  sum  =  0;  	compilable	timeout	4	1	replace
44	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]  double  sum  =  1;  [BUGGY]  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1624	1624	1	add	double  sum  =  1;	int  sum  =  0;  	compilable	timeout	4	1
45	[BUG]  [BUGGY]  double  sum  =  1;  timeout  [CONTEXT]    [BUGGY]  double  sum  =  1;  [BUGGY]  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1624	1624	1	replace	double  sum  =  1;	int  sum  =  0;  	compilable	timeout	4	1	replace
45	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    [BUGGY]  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1624	1624	1	add	  	int  sum  =  0;  	compilable	timeout	4	1
46	[BUG]  [BUGGY]    timeout  [CONTEXT]    [BUGGY]    [BUGGY]  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1624	1624	1	replace	  	int  sum  =  0;  	compilable	timeout	4	1	replace
52	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]  final  double  dp  =  p1[i]  -  p2[i];  [BUGGY]  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1626	1626	1	add	final  double  dp  =  p1[i]  -  p2[i];	final  int  dp  =  p1[i]  -  p2[i];  	compilable	timeout	8	1
53	[BUG]  [BUGGY]  final  double  dp  =  p1[i]  -  p2[i];  timeout  [CONTEXT]    [BUGGY]  final  double  dp  =  p1[i]  -  p2[i];  [BUGGY]  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1626	1626	1	replace	final  double  dp  =  p1[i]  -  p2[i];	final  int  dp  =  p1[i]  -  p2[i];  	compilable	timeout	8	1	replace
53	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]  final  int  dp  =  p1[i]  /  p2[i];  [BUGGY]  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1626	1626	1	add	final  int  dp  =  p1[i]  /  p2[i];	final  int  dp  =  p1[i]  -  p2[i];  	compilable	timeout	8	1
54	[BUG]  [BUGGY]  final  int  dp  =  p1[i]  /  p2[i];  timeout  [CONTEXT]    [BUGGY]  final  int  dp  =  p1[i]  /  p2[i];  [BUGGY]  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1626	1626	1	replace	final  int  dp  =  p1[i]  /  p2[i];	final  int  dp  =  p1[i]  -  p2[i];  	compilable	timeout	8	1	replace
54	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]  final  int  dp  =  p1[0]  -  p2[0];  [BUGGY]  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1626	1626	1	add	final  int  dp  =  p1[0]  -  p2[0];	final  int  dp  =  p1[i]  -  p2[i];  	compilable	timeout	8	1
55	[BUG]  [BUGGY]  final  int  dp  =  p1[0]  -  p2[0];  timeout  [CONTEXT]    [BUGGY]  final  int  dp  =  p1[0]  -  p2[0];  [BUGGY]  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1626	1626	1	replace	final  int  dp  =  p1[0]  -  p2[0];	final  int  dp  =  p1[i]  -  p2[i];  	compilable	timeout	8	1	replace
55	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    [BUGGY]  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1626	1626	1	add	  	final  int  dp  =  p1[i]  -  p2[i];  	compilable	timeout	8	1
56	[BUG]  [BUGGY]    timeout  [CONTEXT]    [BUGGY]    [BUGGY]  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1626	1626	1	replace	  	final  int  dp  =  p1[i]  -  p2[i];  	compilable	timeout	8	1	replace
61	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    final  int[]  p1  =  Math.min(p1.length,  p2.length);  [BUGGY]  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1625	1625	1	add	    final  int[]  p1  =  Math.min(p1.length,  p2.length);		compilable	timeout	7	1
62	[BUG]  [BUGGY]    final  int[]  p1  =  Math.min(p1.length,  p2.length);  timeout  [CONTEXT]    [BUGGY]    final  int[]  p1  =  Math.min(p1.length,  p2.length);  [BUGGY]  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1625	1625	1	replace	    final  int[]  p1  =  Math.min(p1.length,  p2.length);		compilable	timeout	7	1	add
62	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    final  int[]  p1  =  Math.sqrt(p1);  [BUGGY]  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1625	1625	1	add	    final  int[]  p1  =  Math.sqrt(p1);		compilable	timeout	7	1
63	[BUG]  [BUGGY]    final  int[]  p1  =  Math.sqrt(p1);  timeout  [CONTEXT]    [BUGGY]    final  int[]  p1  =  Math.sqrt(p1);  [BUGGY]  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1625	1625	1	replace	    final  int[]  p1  =  Math.sqrt(p1);		compilable	timeout	7	1	add
63	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    final  int[]  p1  =  Math.sqrt(p1.length);  [BUGGY]  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1625	1625	1	add	    final  int[]  p1  =  Math.sqrt(p1.length);		compilable	timeout	7	1
64	[BUG]  [BUGGY]    final  int[]  p1  =  Math.sqrt(p1.length);  timeout  [CONTEXT]    [BUGGY]    final  int[]  p1  =  Math.sqrt(p1.length);  [BUGGY]  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1625	1625	1	replace	    final  int[]  p1  =  Math.sqrt(p1.length);		compilable	timeout	7	1	add
64	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    final  int[]  p1  =  Math.min(p1.length,  p2[0]);  [BUGGY]  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1625	1625	1	add	    final  int[]  p1  =  Math.min(p1.length,  p2[0]);		compilable	timeout	7	1
65	[BUG]  [BUGGY]    final  int[]  p1  =  Math.min(p1.length,  p2[0]);  timeout  [CONTEXT]    [BUGGY]    final  int[]  p1  =  Math.min(p1.length,  p2[0]);  [BUGGY]  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1625	1625	1	replace	    final  int[]  p1  =  Math.min(p1.length,  p2[0]);		compilable	timeout	7	1	add
65	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    int[]  p1  =  Math.min(p1.length,  p2.length);  [BUGGY]  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1625	1625	1	add	    int[]  p1  =  Math.min(p1.length,  p2.length);		compilable	timeout	7	1
66	[BUG]  [BUGGY]    int[]  p1  =  Math.min(p1.length,  p2.length);  timeout  [CONTEXT]    [BUGGY]    int[]  p1  =  Math.min(p1.length,  p2.length);  [BUGGY]  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1625	1625	1	replace	    int[]  p1  =  Math.min(p1.length,  p2.length);		compilable	timeout	7	1	add
71	[BUG]  [BUGGY]  super();  [CE]  illegal  start  of  expression  [CONTEXT]    [BUGGY]  super();  [BUGGY]    [CLASS]  MathUtils  [METHOD]  <init>  [RETURN_TYPE]  MathUtils()  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	83	83	1	replace	super();	}  	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
72	[BUG]  [BUGGY]  Preconditions.checkNotNull(MathUtils.WRITE_INIT_ERROR, " ");  [CE]  illegal  start  of  expression  [CONTEXT]    [BUGGY]  Preconditions.checkNotNull(MathUtils.WRITE_INIT_ERROR, " ");  [BUGGY]    [CLASS]  MathUtils  [METHOD]  <init>  [RETURN_TYPE]  MathUtils()  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	83	83	1	replace	Preconditions.checkNotNull(MathUtils.WRITE_INIT_ERROR, " ");	}  	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
73	[BUG]  [BUGGY]  Preconditions.checkArgument(!MathUtils.isEmpty());  [CE]  illegal  start  of  expression  [CONTEXT]    [BUGGY]  Preconditions.checkArgument(!MathUtils.isEmpty());  [BUGGY]    [CLASS]  MathUtils  [METHOD]  <init>  [RETURN_TYPE]  MathUtils()  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	83	83	1	replace	Preconditions.checkArgument(!MathUtils.isEmpty());	}  	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
74	[BUG]  [BUGGY]  Preconditions.checkNotNull(MathUtils.EXTENDS);  [CE]  illegal  start  of  expression  [CONTEXT]    [BUGGY]  Preconditions.checkNotNull(MathUtils.EXTENDS);  [BUGGY]    [CLASS]  MathUtils  [METHOD]  <init>  [RETURN_TYPE]  MathUtils()  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	83	83	1	replace	Preconditions.checkNotNull(MathUtils.EXTENDS);	}  	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
75	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [CONTEXT]    [BUGGY]    [BUGGY]    [CLASS]  MathUtils  [METHOD]  <init>  [RETURN_TYPE]  MathUtils()  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	83	83	1	replace	  	}  	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
82	[BUG]  [BUGGY]  private  static  final  long[]  FACTORIALS  =  new  long[]  }  [CE]  array  dimension  missing  [CONTEXT]    [BUGGY]  private  static  final  long[]  FACTORIALS  =  new  long[]  }  [BUGGY]  1l,1l,  2l,  6l,  24l,  120l,  720l,  5040l,  40320l,  362880l,3628800l,39916800l,  479001600l,  6227020800l,  87178291200l,  1307674368000l,  20922789888000l,  355687428096000l,  6402373705728000l,  121645100408832000l,  2432902008176640000l  };  [CLASS]  MathUtils  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	69	69	1	replace	private  static  final  long[]  FACTORIALS  =  new  long[]  }	private  static  final  long[]  FACTORIALS  =  new  long[]  {  	non-compiled	[CE]  array  dimension  missing	2	None	replace
83	[BUG]  [BUGGY]  private  static  final  long[]  FACTORIALS  =  new  long[]  >>  [CE]  array  dimension  missing  [CONTEXT]    [BUGGY]  private  static  final  long[]  FACTORIALS  =  new  long[]  >>  [BUGGY]  1l,1l,  2l,  6l,  24l,  120l,  720l,  5040l,  40320l,  362880l,3628800l,39916800l,  479001600l,  6227020800l,  87178291200l,  1307674368000l,  20922789888000l,  355687428096000l,  6402373705728000l,  121645100408832000l,  2432902008176640000l  };  [CLASS]  MathUtils  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	69	69	1	replace	private  static  final  long[]  FACTORIALS  =  new  long[]  >>	private  static  final  long[]  FACTORIALS  =  new  long[]  {  	non-compiled	[CE]  array  dimension  missing	2	None	replace
91	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]  int  s  =(int)x  +(int)y;  [BUGGY]  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	96	96	1	add	int  s  =(int)x  +(int)y;	long  s  =  (long)x  +  (long)y;  	compilable	timeout	18	1
92	[BUG]  [BUGGY]  int  s  =(int)x  +(int)y;  timeout  [CONTEXT]    [BUGGY]  int  s  =(int)x  +(int)y;  [BUGGY]  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	96	96	1	replace	int  s  =(int)x  +(int)y;	long  s  =  (long)x  +  (long)y;  	compilable	timeout	18	1	replace
95	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    [BUGGY]  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	96	96	1	add	  	long  s  =  (long)x  +  (long)y;  	compilable	timeout	18	1
96	[BUG]  [BUGGY]    timeout  [CONTEXT]    [BUGGY]    [BUGGY]  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	96	96	1	replace	  	long  s  =  (long)x  +  (long)y;  	compilable	timeout	18	1	replace
101	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    if(dp  >  0)  {  dp  =  Math.pow(10,  dp);  if(dp  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1627	1627	1	add	    if(dp  >  0)  {  dp  =  Math.pow(10,  dp);  if(dp  <  0)  {  throw  new  IllegalArgumentException( " ");  }		compilable	timeout	11	1
102	[BUG]  [BUGGY]    if(dp  >  0)  {  dp  =  Math.pow(10,  dp);  if(dp  <  0)  {  throw  new  IllegalArgumentException( " ");  }  timeout  [CONTEXT]    [BUGGY]    if(dp  >  0)  {  dp  =  Math.pow(10,  dp);  if(dp  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1627	1627	1	replace	    if(dp  >  0)  {  dp  =  Math.pow(10,  dp);  if(dp  <  0)  {  throw  new  IllegalArgumentException( " ");  }		compilable	timeout	11	1	add
102	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    if(dp  >  0)  {  dp  =  Math.sqrt(dp);  if(dp  >  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1627	1627	1	add	    if(dp  >  0)  {  dp  =  Math.sqrt(dp);  if(dp  >  0.0)  {  throw  new  IllegalArgumentException( " ");  }		compilable	timeout	11	1
103	[BUG]  [BUGGY]    if(dp  >  0)  {  dp  =  Math.sqrt(dp);  if(dp  >  0.0)  {  throw  new  IllegalArgumentException( " ");  }  timeout  [CONTEXT]    [BUGGY]    if(dp  >  0)  {  dp  =  Math.sqrt(dp);  if(dp  >  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1627	1627	1	replace	    if(dp  >  0)  {  dp  =  Math.sqrt(dp);  if(dp  >  0.0)  {  throw  new  IllegalArgumentException( " ");  }		compilable	timeout	11	1	add
103	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    if(dp  >  0)  {  dp  =  Math.pow(10,  dp);  if(dp  <  0)  {  return  Math.sqrt(dp);  }  [BUGGY]  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1627	1627	1	add	    if(dp  >  0)  {  dp  =  Math.pow(10,  dp);  if(dp  <  0)  {  return  Math.sqrt(dp);  }		compilable	timeout	11	1
104	[BUG]  [BUGGY]    if(dp  >  0)  {  dp  =  Math.pow(10,  dp);  if(dp  <  0)  {  return  Math.sqrt(dp);  }  timeout  [CONTEXT]    [BUGGY]    if(dp  >  0)  {  dp  =  Math.pow(10,  dp);  if(dp  <  0)  {  return  Math.sqrt(dp);  }  [BUGGY]  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1627	1627	1	replace	    if(dp  >  0)  {  dp  =  Math.pow(10,  dp);  if(dp  <  0)  {  return  Math.sqrt(dp);  }		compilable	timeout	11	1	add
104	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    if(dp  >  0)  {  dp  =  Math.sqrt(dp);  if(dp  >  0.0)  {  return  Math.abs(dp);  }  [BUGGY]  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1627	1627	1	add	    if(dp  >  0)  {  dp  =  Math.sqrt(dp);  if(dp  >  0.0)  {  return  Math.abs(dp);  }		compilable	timeout	11	1
105	[BUG]  [BUGGY]    if(dp  >  0)  {  dp  =  Math.sqrt(dp);  if(dp  >  0.0)  {  return  Math.abs(dp);  }  timeout  [CONTEXT]    [BUGGY]    if(dp  >  0)  {  dp  =  Math.sqrt(dp);  if(dp  >  0.0)  {  return  Math.abs(dp);  }  [BUGGY]  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1627	1627	1	replace	    if(dp  >  0)  {  dp  =  Math.sqrt(dp);  if(dp  >  0.0)  {  return  Math.abs(dp);  }		compilable	timeout	11	1	add
105	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    if(dp  >  0)  {  dp  =  Math.pow(10,  dp);  if(dp  <  0)  {  throw  new  IllegalArgumentException( "Invalid  initial  value ");  }  [BUGGY]  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1627	1627	1	add	    if(dp  >  0)  {  dp  =  Math.pow(10,  dp);  if(dp  <  0)  {  throw  new  IllegalArgumentException( "Invalid  initial  value ");  }		compilable	timeout	11	1
106	[BUG]  [BUGGY]    if(dp  >  0)  {  dp  =  Math.pow(10,  dp);  if(dp  <  0)  {  throw  new  IllegalArgumentException( "Invalid  initial  value ");  }  timeout  [CONTEXT]    [BUGGY]    if(dp  >  0)  {  dp  =  Math.pow(10,  dp);  if(dp  <  0)  {  throw  new  IllegalArgumentException( "Invalid  initial  value ");  }  [BUGGY]  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1627	1627	1	replace	    if(dp  >  0)  {  dp  =  Math.pow(10,  dp);  if(dp  <  0)  {  throw  new  IllegalArgumentException( "Invalid  initial  value ");  }		compilable	timeout	11	1	add
111	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    if(p1  >  p2  ||  p1  <  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1626	1626	1	add	    if(p1  >  p2  ||  p1  <  0.0)  {  throw  new  IllegalArgumentException( " ");  }		compilable	timeout	9	1
112	[BUG]  [BUGGY]    if(p1  >  p2  ||  p1  <  0.0)  {  throw  new  IllegalArgumentException( " ");  }  timeout  [CONTEXT]    [BUGGY]    if(p1  >  p2  ||  p1  <  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1626	1626	1	replace	    if(p1  >  p2  ||  p1  <  0.0)  {  throw  new  IllegalArgumentException( " ");  }		compilable	timeout	9	1	add
112	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    int[]  sum  =  Math.sqrt(Math.log(p1)/  p2);  [BUGGY]  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1626	1626	1	add	    int[]  sum  =  Math.sqrt(Math.log(p1)/  p2);		compilable	timeout	9	1
113	[BUG]  [BUGGY]    int[]  sum  =  Math.sqrt(Math.log(p1)/  p2);  timeout  [CONTEXT]    [BUGGY]    int[]  sum  =  Math.sqrt(Math.log(p1)/  p2);  [BUGGY]  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1626	1626	1	replace	    int[]  sum  =  Math.sqrt(Math.log(p1)/  p2);		compilable	timeout	9	1	add
113	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    int[]  sum  =  Math.sqrt(Math.log(p1)-  p2);  [BUGGY]  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1626	1626	1	add	    int[]  sum  =  Math.sqrt(Math.log(p1)-  p2);		compilable	timeout	9	1
114	[BUG]  [BUGGY]    int[]  sum  =  Math.sqrt(Math.log(p1)-  p2);  timeout  [CONTEXT]    [BUGGY]    int[]  sum  =  Math.sqrt(Math.log(p1)-  p2);  [BUGGY]  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1626	1626	1	replace	    int[]  sum  =  Math.sqrt(Math.log(p1)-  p2);		compilable	timeout	9	1	add
114	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    double  sum  =  Math.sqrt(dp);  [BUGGY]  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1626	1626	1	add	    double  sum  =  Math.sqrt(dp);		compilable	timeout	9	1
115	[BUG]  [BUGGY]    double  sum  =  Math.sqrt(dp);  timeout  [CONTEXT]    [BUGGY]    double  sum  =  Math.sqrt(dp);  [BUGGY]  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1626	1626	1	replace	    double  sum  =  Math.sqrt(dp);		compilable	timeout	9	1	add
115	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    int[]  sum  =  Math.sqrt(Math.log(p1)-  p2[i]);  [BUGGY]  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1626	1626	1	add	    int[]  sum  =  Math.sqrt(Math.log(p1)-  p2[i]);		compilable	timeout	9	1
116	[BUG]  [BUGGY]    int[]  sum  =  Math.sqrt(Math.log(p1)-  p2[i]);  timeout  [CONTEXT]    [BUGGY]    int[]  sum  =  Math.sqrt(Math.log(p1)-  p2[i]);  [BUGGY]  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1626	1626	1	replace	    int[]  sum  =  Math.sqrt(Math.log(p1)-  p2[i]);		compilable	timeout	9	1	add
122	[BUG]  [BUGGY]  if(s  <  Integer.MIN_VALUE  ||  y  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]  if(s  <  Integer.MIN_VALUE  ||  y  >  Integer.MAX_VALUE)  {  [BUGGY]  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	97	97	1	replace	if(s  <  Integer.MIN_VALUE  ||  y  >  Integer.MAX_VALUE)  {	if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  	non-compiled	[CE]  illegal  start  of  type	20	None	replace
123	[BUG]  [BUGGY]  if(s  >=  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]  if(s  >=  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  [BUGGY]  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	97	97	1	replace	if(s  >=  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {	if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  	non-compiled	[CE]  illegal  start  of  type	20	None	replace
124	[BUG]  [BUGGY]  if(s  <=  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]  if(s  <=  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  [BUGGY]  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	97	97	1	replace	if(s  <=  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {	if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  	non-compiled	[CE]  illegal  start  of  type	20	None	replace
131	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]  sum  +=  dp  *  2;  [BUGGY]  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1627	1627	1	add	sum  +=  dp  *  2;	sum  +=  dp  *  dp;  	compilable	timeout	10	1
132	[BUG]  [BUGGY]  sum  +=  dp  *  2;  timeout  [CONTEXT]    [BUGGY]  sum  +=  dp  *  2;  [BUGGY]  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1627	1627	1	replace	sum  +=  dp  *  2;	sum  +=  dp  *  dp;  	compilable	timeout	10	1	replace
132	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]  sum  +=  dp  *  dp2;  [BUGGY]  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1627	1627	1	add	sum  +=  dp  *  dp2;	sum  +=  dp  *  dp;  	compilable	timeout	10	1
133	[BUG]  [BUGGY]  sum  +=  dp  *  dp2;  timeout  [CONTEXT]    [BUGGY]  sum  +=  dp  *  dp2;  [BUGGY]  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1627	1627	1	replace	sum  +=  dp  *  dp2;	sum  +=  dp  *  dp;  	compilable	timeout	10	1	replace
133	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]  sum  +=  1  *  dp;  [BUGGY]  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1627	1627	1	add	sum  +=  1  *  dp;	sum  +=  dp  *  dp;  	compilable	timeout	10	1
134	[BUG]  [BUGGY]  sum  +=  1  *  dp;  timeout  [CONTEXT]    [BUGGY]  sum  +=  1  *  dp;  [BUGGY]  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1627	1627	1	replace	sum  +=  1  *  dp;	sum  +=  dp  *  dp;  	compilable	timeout	10	1	replace
134	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]  sum  +=  2  *  dp;  [BUGGY]  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1627	1627	1	add	sum  +=  2  *  dp;	sum  +=  dp  *  dp;  	compilable	timeout	10	1
135	[BUG]  [BUGGY]  sum  +=  2  *  dp;  timeout  [CONTEXT]    [BUGGY]  sum  +=  2  *  dp;  [BUGGY]  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1627	1627	1	replace	sum  +=  2  *  dp;	sum  +=  dp  *  dp;  	compilable	timeout	10	1	replace
142	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]  for(int  i  =  1;  i  <  p1.length;  i++)  {  [BUGGY]  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1625	1625	1	add	for(int  i  =  1;  i  <  p1.length;  i++)  {	for  (int  i  =  0;  i  <  p1.length;  i++)  {  	compilable	timeout	6	1
143	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  p1.length;  i++)  {  timeout  [CONTEXT]    [BUGGY]  for(int  i  =  1;  i  <  p1.length;  i++)  {  [BUGGY]  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1625	1625	1	replace	for(int  i  =  1;  i  <  p1.length;  i++)  {	for  (int  i  =  0;  i  <  p1.length;  i++)  {  	compilable	timeout	6	1	replace
143	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]  for(int  i  =  0;  i  <  p2.length;  i++)  {  [BUGGY]  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1625	1625	1	add	for(int  i  =  0;  i  <  p2.length;  i++)  {	for  (int  i  =  0;  i  <  p1.length;  i++)  {  	compilable	timeout	6	1
144	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  p2.length;  i++)  {  timeout  [CONTEXT]    [BUGGY]  for(int  i  =  0;  i  <  p2.length;  i++)  {  [BUGGY]  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1625	1625	1	replace	for(int  i  =  0;  i  <  p2.length;  i++)  {	for  (int  i  =  0;  i  <  p1.length;  i++)  {  	compilable	timeout	6	1	replace
144	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]  for(int  i  =  2;  i  <  p1.length;  i++)  {  [BUGGY]  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1625	1625	1	add	for(int  i  =  2;  i  <  p1.length;  i++)  {	for  (int  i  =  0;  i  <  p1.length;  i++)  {  	compilable	timeout	6	1
145	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  p1.length;  i++)  {  timeout  [CONTEXT]    [BUGGY]  for(int  i  =  2;  i  <  p1.length;  i++)  {  [BUGGY]  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1625	1625	1	replace	for(int  i  =  2;  i  <  p1.length;  i++)  {	for  (int  i  =  0;  i  <  p1.length;  i++)  {  	compilable	timeout	6	1	replace
151	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    int  x  =  Math.random();  [BUGGY]  long  s  =  (long)x  +  (long)y;  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	96	96	1	add	    int  x  =  Math.random();		compilable	timeout	19	1
152	[BUG]  [BUGGY]    int  x  =  Math.random();  timeout  [CONTEXT]    [BUGGY]    int  x  =  Math.random();  [BUGGY]  long  s  =  (long)x  +  (long)y;  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	96	96	1	replace	    int  x  =  Math.random();		compilable	timeout	19	1	add
152	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    int  x  =(int)Math.floor(y);  [BUGGY]  long  s  =  (long)x  +  (long)y;  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	96	96	1	add	    int  x  =(int)Math.floor(y);		compilable	timeout	19	1
153	[BUG]  [BUGGY]    int  x  =(int)Math.floor(y);  timeout  [CONTEXT]    [BUGGY]    int  x  =(int)Math.floor(y);  [BUGGY]  long  s  =  (long)x  +  (long)y;  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	96	96	1	replace	    int  x  =(int)Math.floor(y);		compilable	timeout	19	1	add
153	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    int  x  =  Math.min(0,  x  +  1);  [BUGGY]  long  s  =  (long)x  +  (long)y;  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	96	96	1	add	    int  x  =  Math.min(0,  x  +  1);		compilable	timeout	19	1
154	[BUG]  [BUGGY]    int  x  =  Math.min(0,  x  +  1);  timeout  [CONTEXT]    [BUGGY]    int  x  =  Math.min(0,  x  +  1);  [BUGGY]  long  s  =  (long)x  +  (long)y;  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	96	96	1	replace	    int  x  =  Math.min(0,  x  +  1);		compilable	timeout	19	1	add
154	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    int  x  =(int)Math.exp(-1);  [BUGGY]  long  s  =  (long)x  +  (long)y;  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	96	96	1	add	    int  x  =(int)Math.exp(-1);		compilable	timeout	19	1
155	[BUG]  [BUGGY]    int  x  =(int)Math.exp(-1);  timeout  [CONTEXT]    [BUGGY]    int  x  =(int)Math.exp(-1);  [BUGGY]  long  s  =  (long)x  +  (long)y;  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	96	96	1	replace	    int  x  =(int)Math.exp(-1);		compilable	timeout	19	1	add
155	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    int  x  =(int)Math.rint((  int)y);  [BUGGY]  long  s  =  (long)x  +  (long)y;  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	96	96	1	add	    int  x  =(int)Math.rint((  int)y);		compilable	timeout	19	1
156	[BUG]  [BUGGY]    int  x  =(int)Math.rint((  int)y);  timeout  [CONTEXT]    [BUGGY]    int  x  =(int)Math.rint((  int)y);  [BUGGY]  long  s  =  (long)x  +  (long)y;  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	96	96	1	replace	    int  x  =(int)Math.rint((  int)y);		compilable	timeout	19	1	add
161	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    final  int[]  p1  =(int[])Math.rint(p2);  [BUGGY]  int  sum  =  0;  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1624	1624	1	add	    final  int[]  p1  =(int[])Math.rint(p2);		compilable	timeout	5	1
162	[BUG]  [BUGGY]    final  int[]  p1  =(int[])Math.rint(p2);  timeout  [CONTEXT]    [BUGGY]    final  int[]  p1  =(int[])Math.rint(p2);  [BUGGY]  int  sum  =  0;  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1624	1624	1	replace	    final  int[]  p1  =(int[])Math.rint(p2);		compilable	timeout	5	1	add
162	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    double  p1  =  Math.sqrt(Math.random());  [BUGGY]  int  sum  =  0;  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1624	1624	1	add	    double  p1  =  Math.sqrt(Math.random());		compilable	timeout	5	1
163	[BUG]  [BUGGY]    double  p1  =  Math.sqrt(Math.random());  timeout  [CONTEXT]    [BUGGY]    double  p1  =  Math.sqrt(Math.random());  [BUGGY]  int  sum  =  0;  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1624	1624	1	replace	    double  p1  =  Math.sqrt(Math.random());		compilable	timeout	5	1	add
163	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    final  int[]  p1  =  Math.sqrt(p1.length);  [BUGGY]  int  sum  =  0;  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1624	1624	1	add	    final  int[]  p1  =  Math.sqrt(p1.length);		compilable	timeout	5	1
164	[BUG]  [BUGGY]    final  int[]  p1  =  Math.sqrt(p1.length);  timeout  [CONTEXT]    [BUGGY]    final  int[]  p1  =  Math.sqrt(p1.length);  [BUGGY]  int  sum  =  0;  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1624	1624	1	replace	    final  int[]  p1  =  Math.sqrt(p1.length);		compilable	timeout	5	1	add
164	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    final  int[]  p1  =(int[])Math.rint(p1);  [BUGGY]  int  sum  =  0;  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1624	1624	1	add	    final  int[]  p1  =(int[])Math.rint(p1);		compilable	timeout	5	1
165	[BUG]  [BUGGY]    final  int[]  p1  =(int[])Math.rint(p1);  timeout  [CONTEXT]    [BUGGY]    final  int[]  p1  =(int[])Math.rint(p1);  [BUGGY]  int  sum  =  0;  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1624	1624	1	replace	    final  int[]  p1  =(int[])Math.rint(p1);		compilable	timeout	5	1	add
165	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    double  p1  =  Math.sqrt(Math.log(p1)-  p2.length);  [BUGGY]  int  sum  =  0;  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1624	1624	1	add	    double  p1  =  Math.sqrt(Math.log(p1)-  p2.length);		compilable	timeout	5	1
166	[BUG]  [BUGGY]    double  p1  =  Math.sqrt(Math.log(p1)-  p2.length);  timeout  [CONTEXT]    [BUGGY]    double  p1  =  Math.sqrt(Math.log(p1)-  p2.length);  [BUGGY]  int  sum  =  0;  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1624	1624	1	replace	    double  p1  =  Math.sqrt(Math.log(p1)-  p2.length);		compilable	timeout	5	1	add
175	[BUG]  [BUGGY]    Preconditions.checkNotNull(MathUtils.WRITE_INIT_ERROR,  null);  [CE]  cannot  find  symbol  WRITE_INIT_ERROR  [CONTEXT]    [BUGGY]    Preconditions.checkNotNull(MathUtils.WRITE_INIT_ERROR,  null);  [BUGGY]  }  [CLASS]  MathUtils  [METHOD]  <init>  [RETURN_TYPE]  MathUtils()  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	83	83	1	replace	    Preconditions.checkNotNull(MathUtils.WRITE_INIT_ERROR,  null);		non-compiled	[CE]  cannot  find  symbol  WRITE_INIT_ERROR	17	None	add
181	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]  return  Math.sqrt(Math.random());  [BUGGY]  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1629	1629	1	add	return  Math.sqrt(Math.random());	return  Math.sqrt(sum);  	compilable	timeout	12	1
182	[BUG]  [BUGGY]  return  Math.sqrt(Math.random());  timeout  [CONTEXT]    [BUGGY]  return  Math.sqrt(Math.random());  [BUGGY]  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1629	1629	1	replace	return  Math.sqrt(Math.random());	return  Math.sqrt(sum);  	compilable	timeout	12	1	replace
182	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]  return  Math.sqrt(Integer.toString(p1)||  Integer.toString(p2));  [BUGGY]  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1629	1629	1	add	return  Math.sqrt(Integer.toString(p1)||  Integer.toString(p2));	return  Math.sqrt(sum);  	compilable	timeout	12	1
183	[BUG]  [BUGGY]  return  Math.sqrt(Integer.toString(p1)||  Integer.toString(p2));  timeout  [CONTEXT]    [BUGGY]  return  Math.sqrt(Integer.toString(p1)||  Integer.toString(p2));  [BUGGY]  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1629	1629	1	replace	return  Math.sqrt(Integer.toString(p1)||  Integer.toString(p2));	return  Math.sqrt(sum);  	compilable	timeout	12	1	replace
183	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]  return  Math.sqrt(Integer.toHexString(p1)||  Integer.toHexString(p2));  [BUGGY]  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1629	1629	1	add	return  Math.sqrt(Integer.toHexString(p1)||  Integer.toHexString(p2));	return  Math.sqrt(sum);  	compilable	timeout	12	1
184	[BUG]  [BUGGY]  return  Math.sqrt(Integer.toHexString(p1)||  Integer.toHexString(p2));  timeout  [CONTEXT]    [BUGGY]  return  Math.sqrt(Integer.toHexString(p1)||  Integer.toHexString(p2));  [BUGGY]  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1629	1629	1	replace	return  Math.sqrt(Integer.toHexString(p1)||  Integer.toHexString(p2));	return  Math.sqrt(sum);  	compilable	timeout	12	1	replace
184	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]  return  Math.sqrt(Math.PI);  [BUGGY]  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1629	1629	1	add	return  Math.sqrt(Math.PI);	return  Math.sqrt(sum);  	compilable	timeout	12	1
185	[BUG]  [BUGGY]  return  Math.sqrt(Math.PI);  timeout  [CONTEXT]    [BUGGY]  return  Math.sqrt(Math.PI);  [BUGGY]  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1629	1629	1	replace	return  Math.sqrt(Math.PI);	return  Math.sqrt(sum);  	compilable	timeout	12	1	replace
192	[BUG]  [BUGGY]  checkInvariant();  [CE]  cannot  find  symbol  [CONTEXT]    [BUGGY]  checkInvariant();  [BUGGY]  }  [CLASS]  MathUtils  [METHOD]  <init>  [RETURN_TYPE]  MathUtils()  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	82	82	1	replace	checkInvariant();	super();  	non-compiled	[CE]  cannot  find  symbol	14	None	replace
193	[BUG]  [BUGGY]  super( "Math.rint( "  +  getClass().getName())+ ") ");  [CE]  not  a  statement  [CONTEXT]    [BUGGY]  super( "Math.rint( "  +  getClass().getName())+ ") ");  [BUGGY]  }  [CLASS]  MathUtils  [METHOD]  <init>  [RETURN_TYPE]  MathUtils()  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	82	82	1	replace	super( "Math.rint( "  +  getClass().getName())+ ") ");	super();  	non-compiled	[CE]  not  a  statement	14	None	replace
194	[BUG]  [BUGGY]  super( "Math.rint( "  +  getClass().getName())+ ") ";  [CE]  not  a  statement  [CONTEXT]    [BUGGY]  super( "Math.rint( "  +  getClass().getName())+ ") ";  [BUGGY]  }  [CLASS]  MathUtils  [METHOD]  <init>  [RETURN_TYPE]  MathUtils()  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	82	82	1	replace	super( "Math.rint( "  +  getClass().getName())+ ") ";	super();  	non-compiled	[CE]  not  a  statement	14	None	replace
1	[BUG]  [BUGGY]    Integer  s  =  Math.pow(Math.exp(x,  y));  [CE]  cannot  find  symbol  x  [CONTEXT]    [BUGGY]    Integer  s  =  Math.pow(Math.exp(x,  y));  [BUGGY]  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	97	97	1	replace	    Integer  s  =  Math.pow(Math.exp(x,  y));		non-compiled	[CE]  cannot  find  symbol  x	21	None	add
2	[BUG]  [BUGGY]    Integer  s  =  Math.pow(Math.exp(-x),  y);  [CE]  cannot  find  symbol  x  [CONTEXT]    [BUGGY]    Integer  s  =  Math.pow(Math.exp(-x),  y);  [BUGGY]  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	97	97	1	replace	    Integer  s  =  Math.pow(Math.exp(-x),  y);		non-compiled	[CE]  cannot  find  symbol  x	21	None	add
3	[BUG]  [BUGGY]    int  s  =  getIntValue();  [CE]  cannot  find  symbol  [CONTEXT]    [BUGGY]    int  s  =  getIntValue();  [BUGGY]  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	97	97	1	replace	    int  s  =  getIntValue();		non-compiled	[CE]  cannot  find  symbol	21	None	add
4	[BUG]  [BUGGY]    Integer  s  =  Math.pow(Math.exp(x),  y);  [CE]  cannot  find  symbol  x  [CONTEXT]    [BUGGY]    Integer  s  =  Math.pow(Math.exp(x),  y);  [BUGGY]  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	97	97	1	replace	    Integer  s  =  Math.pow(Math.exp(x),  y);		non-compiled	[CE]  cannot  find  symbol  x	21	None	add
5	[BUG]  [BUGGY]    int  s  =  MathUtils.indicator(x,  y);  [CE]  cannot  find  symbol  x  [CONTEXT]    [BUGGY]    int  s  =  MathUtils.indicator(x,  y);  [BUGGY]  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	97	97	1	replace	    int  s  =  MathUtils.indicator(x,  y);		non-compiled	[CE]  cannot  find  symbol  x	21	None	add
24	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]  byte  s  =(byte)x  +(byte)y;  [BUGGY]  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	96	96	1	add	byte  s  =(byte)x  +(byte)y;	long  s  =  (long)x  +  (long)y;  	compilable	timeout	18	1
25	[BUG]  [BUGGY]  byte  s  =(byte)x  +(byte)y;  timeout  [CONTEXT]    [BUGGY]  byte  s  =(byte)x  +(byte)y;  [BUGGY]  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	96	96	1	replace	byte  s  =(byte)x  +(byte)y;	long  s  =  (long)x  +  (long)y;  	compilable	timeout	18	1	replace
41	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]  return  Math.sqrt(distance);  [BUGGY]  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1629	1629	1	add	return  Math.sqrt(distance);	return  Math.sqrt(sum);  	compilable	timeout	12	1
42	[BUG]  [BUGGY]  return  Math.sqrt(distance);  timeout  [CONTEXT]    [BUGGY]  return  Math.sqrt(distance);  [BUGGY]  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1629	1629	1	replace	return  Math.sqrt(distance);	return  Math.sqrt(sum);  	compilable	timeout	12	1	replace
42	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]  return  Math.sqrt(getMean());  [BUGGY]  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1629	1629	1	add	return  Math.sqrt(getMean());	return  Math.sqrt(sum);  	compilable	timeout	12	1
43	[BUG]  [BUGGY]  return  Math.sqrt(getMean());  timeout  [CONTEXT]    [BUGGY]  return  Math.sqrt(getMean());  [BUGGY]  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1629	1629	1	replace	return  Math.sqrt(getMean());	return  Math.sqrt(sum);  	compilable	timeout	12	1	replace
43	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]  return  Math.sqrt(getMeanSquareIndex());  [BUGGY]  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1629	1629	1	add	return  Math.sqrt(getMeanSquareIndex());	return  Math.sqrt(sum);  	compilable	timeout	12	1
44	[BUG]  [BUGGY]  return  Math.sqrt(getMeanSquareIndex());  timeout  [CONTEXT]    [BUGGY]  return  Math.sqrt(getMeanSquareIndex());  [BUGGY]  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1629	1629	1	replace	return  Math.sqrt(getMeanSquareIndex());	return  Math.sqrt(sum);  	compilable	timeout	12	1	replace
44	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]  return  Math.sqrt(Math.abs(p1),  Math.sqrt(p2));  [BUGGY]  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1629	1629	1	add	return  Math.sqrt(Math.abs(p1),  Math.sqrt(p2));	return  Math.sqrt(sum);  	compilable	timeout	12	1
45	[BUG]  [BUGGY]  return  Math.sqrt(Math.abs(p1),  Math.sqrt(p2));  timeout  [CONTEXT]    [BUGGY]  return  Math.sqrt(Math.abs(p1),  Math.sqrt(p2));  [BUGGY]  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1629	1629	1	replace	return  Math.sqrt(Math.abs(p1),  Math.sqrt(p2));	return  Math.sqrt(sum);  	compilable	timeout	12	1	replace
61	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]  sum  +=  dp  *  distance;  [BUGGY]  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1627	1627	1	add	sum  +=  dp  *  distance;	sum  +=  dp  *  dp;  	compilable	timeout	10	1
62	[BUG]  [BUGGY]  sum  +=  dp  *  distance;  timeout  [CONTEXT]    [BUGGY]  sum  +=  dp  *  distance;  [BUGGY]  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1627	1627	1	replace	sum  +=  dp  *  distance;	sum  +=  dp  *  dp;  	compilable	timeout	10	1	replace
63	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]  sum  +=  dp  *  p1;  [BUGGY]  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1627	1627	1	add	sum  +=  dp  *  p1;	sum  +=  dp  *  dp;  	compilable	timeout	10	1
64	[BUG]  [BUGGY]  sum  +=  dp  *  p1;  timeout  [CONTEXT]    [BUGGY]  sum  +=  dp  *  p1;  [BUGGY]  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1627	1627	1	replace	sum  +=  dp  *  p1;	sum  +=  dp  *  dp;  	compilable	timeout	10	1	replace
64	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]  sum  +=  dp  *  dp1;  [BUGGY]  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1627	1627	1	add	sum  +=  dp  *  dp1;	sum  +=  dp  *  dp;  	compilable	timeout	10	1
65	[BUG]  [BUGGY]  sum  +=  dp  *  dp1;  timeout  [CONTEXT]    [BUGGY]  sum  +=  dp  *  dp1;  [BUGGY]  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1627	1627	1	replace	sum  +=  dp  *  dp1;	sum  +=  dp  *  dp;  	compilable	timeout	10	1	replace
84	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]  final  int  dp  =  p1[i]  -  p2[i]  +  1;  [BUGGY]  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1626	1626	1	add	final  int  dp  =  p1[i]  -  p2[i]  +  1;	final  int  dp  =  p1[i]  -  p2[i];  	compilable	timeout	8	1
85	[BUG]  [BUGGY]  final  int  dp  =  p1[i]  -  p2[i]  +  1;  timeout  [CONTEXT]    [BUGGY]  final  int  dp  =  p1[i]  -  p2[i]  +  1;  [BUGGY]  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1626	1626	1	replace	final  int  dp  =  p1[i]  -  p2[i]  +  1;	final  int  dp  =  p1[i]  -  p2[i];  	compilable	timeout	8	1	replace
102	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]  int  sum  =  1;  [BUGGY]  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1624	1624	1	add	int  sum  =  1;	int  sum  =  0;  	compilable	timeout	4	1
103	[BUG]  [BUGGY]  int  sum  =  1;  timeout  [CONTEXT]    [BUGGY]  int  sum  =  1;  [BUGGY]  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1624	1624	1	replace	int  sum  =  1;	int  sum  =  0;  	compilable	timeout	4	1	replace
122	[BUG]  [BUGGY]  private  static  final  long[]  FACTORIALS  =  new  long[0]  {  [CE]  ';'  expected  [CONTEXT]    [BUGGY]  private  static  final  long[]  FACTORIALS  =  new  long[0]  {  [BUGGY]  1l,1l,  2l,  6l,  24l,  120l,  720l,  5040l,  40320l,  362880l,3628800l,39916800l,  479001600l,  6227020800l,  87178291200l,  1307674368000l,  20922789888000l,  355687428096000l,  6402373705728000l,  121645100408832000l,  2432902008176640000l  };  [CLASS]  MathUtils  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	69	69	1	replace	private  static  final  long[]  FACTORIALS  =  new  long[0]  {	private  static  final  long[]  FACTORIALS  =  new  long[]  {  	non-compiled	[CE]  ';'  expected	2	None	replace
123	[BUG]  [BUGGY]  private  static  final  int[]  FACTORIALS  =  new  int[]  {  [CE]  illegal  start  of  expression  [CONTEXT]    [BUGGY]  private  static  final  int[]  FACTORIALS  =  new  int[]  {  [BUGGY]  1l,1l,  2l,  6l,  24l,  120l,  720l,  5040l,  40320l,  362880l,3628800l,39916800l,  479001600l,  6227020800l,  87178291200l,  1307674368000l,  20922789888000l,  355687428096000l,  6402373705728000l,  121645100408832000l,  2432902008176640000l  };  [CLASS]  MathUtils  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	69	69	1	replace	private  static  final  int[]  FACTORIALS  =  new  int[]  {	private  static  final  long[]  FACTORIALS  =  new  long[]  {  	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
124	[BUG]  [BUGGY]  private  static  final  long[]  FACTORIALS  =  new  long[0]  }  [CE]  ';'  expected  [CONTEXT]    [BUGGY]  private  static  final  long[]  FACTORIALS  =  new  long[0]  }  [BUGGY]  1l,1l,  2l,  6l,  24l,  120l,  720l,  5040l,  40320l,  362880l,3628800l,39916800l,  479001600l,  6227020800l,  87178291200l,  1307674368000l,  20922789888000l,  355687428096000l,  6402373705728000l,  121645100408832000l,  2432902008176640000l  };  [CLASS]  MathUtils  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	69	69	1	replace	private  static  final  long[]  FACTORIALS  =  new  long[0]  }	private  static  final  long[]  FACTORIALS  =  new  long[]  {  	non-compiled	[CE]  ';'  expected	2	None	replace
142	[BUG]  [BUGGY]  Preconditions.checkNotNull(MathUtils.isNumeric(getClusterFunction()));  [CE]  illegal  start  of  expression  [CONTEXT]    [BUGGY]  Preconditions.checkNotNull(MathUtils.isNumeric(getClusterFunction()));  [BUGGY]    [CLASS]  MathUtils  [METHOD]  <init>  [RETURN_TYPE]  MathUtils()  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	83	83	1	replace	Preconditions.checkNotNull(MathUtils.isNumeric(getClusterFunction()));	}  	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
143	[BUG]  [BUGGY]  Preconditions.checkNotNull(MathUtils.isNumeric(getCluster()));  [CE]  illegal  start  of  expression  [CONTEXT]    [BUGGY]  Preconditions.checkNotNull(MathUtils.isNumeric(getCluster()));  [BUGGY]    [CLASS]  MathUtils  [METHOD]  <init>  [RETURN_TYPE]  MathUtils()  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	83	83	1	replace	Preconditions.checkNotNull(MathUtils.isNumeric(getCluster()));	}  	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
144	[BUG]  [BUGGY]  Preconditions.checkNotNull(Math.PI);  [CE]  illegal  start  of  expression  [CONTEXT]    [BUGGY]  Preconditions.checkNotNull(Math.PI);  [BUGGY]    [CLASS]  MathUtils  [METHOD]  <init>  [RETURN_TYPE]  MathUtils()  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	83	83	1	replace	Preconditions.checkNotNull(Math.PI);	}  	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
161	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    int  x  =(int)Math.pow(10,  y);  [BUGGY]  long  s  =  (long)x  +  (long)y;  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	96	96	1	add	    int  x  =(int)Math.pow(10,  y);		compilable	timeout	19	1
162	[BUG]  [BUGGY]    int  x  =(int)Math.pow(10,  y);  timeout  [CONTEXT]    [BUGGY]    int  x  =(int)Math.pow(10,  y);  [BUGGY]  long  s  =  (long)x  +  (long)y;  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	96	96	1	replace	    int  x  =(int)Math.pow(10,  y);		compilable	timeout	19	1	add
162	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    int  x  =(int)(Math.pow(10,  y));  [BUGGY]  long  s  =  (long)x  +  (long)y;  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	96	96	1	add	    int  x  =(int)(Math.pow(10,  y));		compilable	timeout	19	1
163	[BUG]  [BUGGY]    int  x  =(int)(Math.pow(10,  y));  timeout  [CONTEXT]    [BUGGY]    int  x  =(int)(Math.pow(10,  y));  [BUGGY]  long  s  =  (long)x  +  (long)y;  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	96	96	1	replace	    int  x  =(int)(Math.pow(10,  y));		compilable	timeout	19	1	add
163	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    int  x  =(int)Math.rint((  int)x);  [BUGGY]  long  s  =  (long)x  +  (long)y;  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	96	96	1	add	    int  x  =(int)Math.rint((  int)x);		compilable	timeout	19	1
164	[BUG]  [BUGGY]    int  x  =(int)Math.rint((  int)x);  timeout  [CONTEXT]    [BUGGY]    int  x  =(int)Math.rint((  int)x);  [BUGGY]  long  s  =  (long)x  +  (long)y;  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	96	96	1	replace	    int  x  =(int)Math.rint((  int)x);		compilable	timeout	19	1	add
165	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    int  x  =  Integer.valueOf(x);  [BUGGY]  long  s  =  (long)x  +  (long)y;  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	96	96	1	add	    int  x  =  Integer.valueOf(x);		compilable	timeout	19	1
166	[BUG]  [BUGGY]    int  x  =  Integer.valueOf(x);  timeout  [CONTEXT]    [BUGGY]    int  x  =  Integer.valueOf(x);  [BUGGY]  long  s  =  (long)x  +  (long)y;  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	96	96	1	replace	    int  x  =  Integer.valueOf(x);		compilable	timeout	19	1	add
181	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    double  sum  =  Math.sum  /(int[])Math.rint(p2);  [BUGGY]  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1629	1629	1	add	    double  sum  =  Math.sum  /(int[])Math.rint(p2);		compilable	timeout	13	1
182	[BUG]  [BUGGY]    double  sum  =  Math.sum  /(int[])Math.rint(p2);  timeout  [CONTEXT]    [BUGGY]    double  sum  =  Math.sum  /(int[])Math.rint(p2);  [BUGGY]  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1629	1629	1	replace	    double  sum  =  Math.sum  /(int[])Math.rint(p2);		compilable	timeout	13	1	add
182	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    double  sum  =  Math.sum  /(int[])Math.rint(p1);  [BUGGY]  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1629	1629	1	add	    double  sum  =  Math.sum  /(int[])Math.rint(p1);		compilable	timeout	13	1
183	[BUG]  [BUGGY]    double  sum  =  Math.sum  /(int[])Math.rint(p1);  timeout  [CONTEXT]    [BUGGY]    double  sum  =  Math.sum  /(int[])Math.rint(p1);  [BUGGY]  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1629	1629	1	replace	    double  sum  =  Math.sum  /(int[])Math.rint(p1);		compilable	timeout	13	1	add
183	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    double  sum  =  Math.sum  /(int[])Math.pow(Math.rint(p2));  [BUGGY]  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1629	1629	1	add	    double  sum  =  Math.sum  /(int[])Math.pow(Math.rint(p2));		compilable	timeout	13	1
184	[BUG]  [BUGGY]    double  sum  =  Math.sum  /(int[])Math.pow(Math.rint(p2));  timeout  [CONTEXT]    [BUGGY]    double  sum  =  Math.sum  /(int[])Math.pow(Math.rint(p2));  [BUGGY]  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1629	1629	1	replace	    double  sum  =  Math.sum  /(int[])Math.pow(Math.rint(p2));		compilable	timeout	13	1	add
184	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    double  sum  =  Math.sum  /(int[]).doubleValue();  [BUGGY]  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1629	1629	1	add	    double  sum  =  Math.sum  /(int[]).doubleValue();		compilable	timeout	13	1
185	[BUG]  [BUGGY]    double  sum  =  Math.sum  /(int[]).doubleValue();  timeout  [CONTEXT]    [BUGGY]    double  sum  =  Math.sum  /(int[]).doubleValue();  [BUGGY]  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1629	1629	1	replace	    double  sum  =  Math.sum  /(int[]).doubleValue();		compilable	timeout	13	1	add
185	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    double  sum  =  Math.sum  /(int[])Math.rint(p1,  p2);  [BUGGY]  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1629	1629	1	add	    double  sum  =  Math.sum  /(int[])Math.rint(p1,  p2);		compilable	timeout	13	1
186	[BUG]  [BUGGY]    double  sum  =  Math.sum  /(int[])Math.rint(p1,  p2);  timeout  [CONTEXT]    [BUGGY]    double  sum  =  Math.sum  /(int[])Math.rint(p1,  p2);  [BUGGY]  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1629	1629	1	replace	    double  sum  =  Math.sum  /(int[])Math.rint(p1,  p2);		compilable	timeout	13	1	add
201	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    final  int[]  p1  =  Math.max(p1.length,  p2.length);  [BUGGY]  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1625	1625	1	add	    final  int[]  p1  =  Math.max(p1.length,  p2.length);		compilable	timeout	7	1
202	[BUG]  [BUGGY]    final  int[]  p1  =  Math.max(p1.length,  p2.length);  timeout  [CONTEXT]    [BUGGY]    final  int[]  p1  =  Math.max(p1.length,  p2.length);  [BUGGY]  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1625	1625	1	replace	    final  int[]  p1  =  Math.max(p1.length,  p2.length);		compilable	timeout	7	1	add
202	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    final  int[]  p1  =(int[])Math.rint(p1.length);  [BUGGY]  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1625	1625	1	add	    final  int[]  p1  =(int[])Math.rint(p1.length);		compilable	timeout	7	1
203	[BUG]  [BUGGY]    final  int[]  p1  =(int[])Math.rint(p1.length);  timeout  [CONTEXT]    [BUGGY]    final  int[]  p1  =(int[])Math.rint(p1.length);  [BUGGY]  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1625	1625	1	replace	    final  int[]  p1  =(int[])Math.rint(p1.length);		compilable	timeout	7	1	add
203	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    int[]  p1  =(int[])Math.rint(p1.length);  [BUGGY]  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1625	1625	1	add	    int[]  p1  =(int[])Math.rint(p1.length);		compilable	timeout	7	1
204	[BUG]  [BUGGY]    int[]  p1  =(int[])Math.rint(p1.length);  timeout  [CONTEXT]    [BUGGY]    int[]  p1  =(int[])Math.rint(p1.length);  [BUGGY]  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1625	1625	1	replace	    int[]  p1  =(int[])Math.rint(p1.length);		compilable	timeout	7	1	add
204	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    int[]  p1  =(int[])Math.floor(p1.length);  [BUGGY]  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1625	1625	1	add	    int[]  p1  =(int[])Math.floor(p1.length);		compilable	timeout	7	1
205	[BUG]  [BUGGY]    int[]  p1  =(int[])Math.floor(p1.length);  timeout  [CONTEXT]    [BUGGY]    int[]  p1  =(int[])Math.floor(p1.length);  [BUGGY]  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1625	1625	1	replace	    int[]  p1  =(int[])Math.floor(p1.length);		compilable	timeout	7	1	add
205	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    int[]  p1  =(int[])Math.rint(p1);  [BUGGY]  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1625	1625	1	add	    int[]  p1  =(int[])Math.rint(p1);		compilable	timeout	7	1
206	[BUG]  [BUGGY]    int[]  p1  =(int[])Math.rint(p1);  timeout  [CONTEXT]    [BUGGY]    int[]  p1  =(int[])Math.rint(p1);  [BUGGY]  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1625	1625	1	replace	    int[]  p1  =(int[])Math.rint(p1);		compilable	timeout	7	1	add
222	[BUG]  [BUGGY]  super( "MathUtils.extractClusterAnalysisDegenerate, ");  [CE]  call  to  super  must  be  first  statement  in  constructor  [CONTEXT]    [BUGGY]  super( "MathUtils.extractClusterAnalysisDegenerate, ");  [BUGGY]  }  [CLASS]  MathUtils  [METHOD]  <init>  [RETURN_TYPE]  MathUtils()  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	82	82	1	replace	super( "MathUtils.extractClusterAnalysisDegenerate, ");	super();  	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	14	None	replace
223	[BUG]  [BUGGY]  super( "MathUtils.extractClusterAnalysisDegenerate  clusters: ");  [CE]  call  to  super  must  be  first  statement  in  constructor  [CONTEXT]    [BUGGY]  super( "MathUtils.extractClusterAnalysisDegenerate  clusters: ");  [BUGGY]  }  [CLASS]  MathUtils  [METHOD]  <init>  [RETURN_TYPE]  MathUtils()  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	82	82	1	replace	super( "MathUtils.extractClusterAnalysisDegenerate  clusters: ");	super();  	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	14	None	replace
224	[BUG]  [BUGGY]  super( "MathUtils.extractClusterAnalysisDeserializer, ");  [CE]  call  to  super  must  be  first  statement  in  constructor  [CONTEXT]    [BUGGY]  super( "MathUtils.extractClusterAnalysisDeserializer, ");  [BUGGY]  }  [CLASS]  MathUtils  [METHOD]  <init>  [RETURN_TYPE]  MathUtils()  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	82	82	1	replace	super( "MathUtils.extractClusterAnalysisDeserializer, ");	super();  	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	14	None	replace
242	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]  for(int  i  =  0;  i  <  p1.length,  p2.length;  i++)  {  [BUGGY]  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1625	1625	1	add	for(int  i  =  0;  i  <  p1.length,  p2.length;  i++)  {	for  (int  i  =  0;  i  <  p1.length;  i++)  {  	compilable	timeout	6	1
243	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  p1.length,  p2.length;  i++)  {  timeout  [CONTEXT]    [BUGGY]  for(int  i  =  0;  i  <  p1.length,  p2.length;  i++)  {  [BUGGY]  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1625	1625	1	replace	for(int  i  =  0;  i  <  p1.length,  p2.length;  i++)  {	for  (int  i  =  0;  i  <  p1.length;  i++)  {  	compilable	timeout	6	1	replace
261	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    final  int[]  p1  =(int[])Math.rint(p2);  [BUGGY]  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1626	1626	1	add	    final  int[]  p1  =(int[])Math.rint(p2);		compilable	timeout	9	1
262	[BUG]  [BUGGY]    final  int[]  p1  =(int[])Math.rint(p2);  timeout  [CONTEXT]    [BUGGY]    final  int[]  p1  =(int[])Math.rint(p2);  [BUGGY]  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1626	1626	1	replace	    final  int[]  p1  =(int[])Math.rint(p2);		compilable	timeout	9	1	add
262	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    final  int[]  p1  =(int[])Math.floor(p2);  [BUGGY]  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1626	1626	1	add	    final  int[]  p1  =(int[])Math.floor(p2);		compilable	timeout	9	1
263	[BUG]  [BUGGY]    final  int[]  p1  =(int[])Math.floor(p2);  timeout  [CONTEXT]    [BUGGY]    final  int[]  p1  =(int[])Math.floor(p2);  [BUGGY]  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1626	1626	1	replace	    final  int[]  p1  =(int[])Math.floor(p2);		compilable	timeout	9	1	add
263	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    long  sum  =  Math.sqrt(Math.abs(p1)-  p2);  [BUGGY]  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1626	1626	1	add	    long  sum  =  Math.sqrt(Math.abs(p1)-  p2);		compilable	timeout	9	1
264	[BUG]  [BUGGY]    long  sum  =  Math.sqrt(Math.abs(p1)-  p2);  timeout  [CONTEXT]    [BUGGY]    long  sum  =  Math.sqrt(Math.abs(p1)-  p2);  [BUGGY]  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1626	1626	1	replace	    long  sum  =  Math.sqrt(Math.abs(p1)-  p2);		compilable	timeout	9	1	add
264	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    int  sum  =  Math.sqrt(Math.abs(p1)-  p2);  [BUGGY]  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1626	1626	1	add	    int  sum  =  Math.sqrt(Math.abs(p1)-  p2);		compilable	timeout	9	1
265	[BUG]  [BUGGY]    int  sum  =  Math.sqrt(Math.abs(p1)-  p2);  timeout  [CONTEXT]    [BUGGY]    int  sum  =  Math.sqrt(Math.abs(p1)-  p2);  [BUGGY]  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1626	1626	1	replace	    int  sum  =  Math.sqrt(Math.abs(p1)-  p2);		compilable	timeout	9	1	add
265	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    final  int[]  p1  =(int[])Math.rint(p1);  [BUGGY]  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1626	1626	1	add	    final  int[]  p1  =(int[])Math.rint(p1);		compilable	timeout	9	1
266	[BUG]  [BUGGY]    final  int[]  p1  =(int[])Math.rint(p1);  timeout  [CONTEXT]    [BUGGY]    final  int[]  p1  =(int[])Math.rint(p1);  [BUGGY]  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1626	1626	1	replace	    final  int[]  p1  =(int[])Math.rint(p1);		compilable	timeout	9	1	add
281	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    double  dp  =  Math.pow(Math.abs(p1),  p2));  [BUGGY]  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1627	1627	1	add	    double  dp  =  Math.pow(Math.abs(p1),  p2));		compilable	timeout	11	1
282	[BUG]  [BUGGY]    double  dp  =  Math.pow(Math.abs(p1),  p2));  timeout  [CONTEXT]    [BUGGY]    double  dp  =  Math.pow(Math.abs(p1),  p2));  [BUGGY]  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1627	1627	1	replace	    double  dp  =  Math.pow(Math.abs(p1),  p2));		compilable	timeout	11	1	add
282	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    int  dp  =  Math.pow(Math.log(p1),  p2));  [BUGGY]  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1627	1627	1	add	    int  dp  =  Math.pow(Math.log(p1),  p2));		compilable	timeout	11	1
283	[BUG]  [BUGGY]    int  dp  =  Math.pow(Math.log(p1),  p2));  timeout  [CONTEXT]    [BUGGY]    int  dp  =  Math.pow(Math.log(p1),  p2));  [BUGGY]  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1627	1627	1	replace	    int  dp  =  Math.pow(Math.log(p1),  p2));		compilable	timeout	11	1	add
283	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    int  dp  =  Math.pow(Math.log(p1),  p2);  [BUGGY]  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1627	1627	1	add	    int  dp  =  Math.pow(Math.log(p1),  p2);		compilable	timeout	11	1
284	[BUG]  [BUGGY]    int  dp  =  Math.pow(Math.log(p1),  p2);  timeout  [CONTEXT]    [BUGGY]    int  dp  =  Math.pow(Math.log(p1),  p2);  [BUGGY]  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1627	1627	1	replace	    int  dp  =  Math.pow(Math.log(p1),  p2);		compilable	timeout	11	1	add
284	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    double  dp  =  Math.pow(Math.exp(-dp)/  dp);  [BUGGY]  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1627	1627	1	add	    double  dp  =  Math.pow(Math.exp(-dp)/  dp);		compilable	timeout	11	1
285	[BUG]  [BUGGY]    double  dp  =  Math.pow(Math.exp(-dp)/  dp);  timeout  [CONTEXT]    [BUGGY]    double  dp  =  Math.pow(Math.exp(-dp)/  dp);  [BUGGY]  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1627	1627	1	replace	    double  dp  =  Math.pow(Math.exp(-dp)/  dp);		compilable	timeout	11	1	add
285	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    double  dp  =  Math.pow(1  -  Math.log(dp)/  p1);  [BUGGY]  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1627	1627	1	add	    double  dp  =  Math.pow(1  -  Math.log(dp)/  p1);		compilable	timeout	11	1
286	[BUG]  [BUGGY]    double  dp  =  Math.pow(1  -  Math.log(dp)/  p1);  timeout  [CONTEXT]    [BUGGY]    double  dp  =  Math.pow(1  -  Math.log(dp)/  p1);  [BUGGY]  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1627	1627	1	replace	    double  dp  =  Math.pow(1  -  Math.log(dp)/  p1);		compilable	timeout	11	1	add
305	[BUG]  [BUGGY]    Preconditions.checkNotNull(MathUtils.getClusterFunction());  [CE]  cannot  find  symbol  [CONTEXT]    [BUGGY]    Preconditions.checkNotNull(MathUtils.getClusterFunction());  [BUGGY]  }  [CLASS]  MathUtils  [METHOD]  <init>  [RETURN_TYPE]  MathUtils()  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	83	83	1	replace	    Preconditions.checkNotNull(MathUtils.getClusterFunction());		non-compiled	[CE]  cannot  find  symbol	17	None	add
321	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    final  int  p1  =  Math.max(p1.length,  p2.length);  [BUGGY]  int  sum  =  0;  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1624	1624	1	add	    final  int  p1  =  Math.max(p1.length,  p2.length);		compilable	timeout	5	1
322	[BUG]  [BUGGY]    final  int  p1  =  Math.max(p1.length,  p2.length);  timeout  [CONTEXT]    [BUGGY]    final  int  p1  =  Math.max(p1.length,  p2.length);  [BUGGY]  int  sum  =  0;  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1624	1624	1	replace	    final  int  p1  =  Math.max(p1.length,  p2.length);		compilable	timeout	5	1	add
322	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    double  p1  =  Math.sqrt(p1.length);  [BUGGY]  int  sum  =  0;  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1624	1624	1	add	    double  p1  =  Math.sqrt(p1.length);		compilable	timeout	5	1
323	[BUG]  [BUGGY]    double  p1  =  Math.sqrt(p1.length);  timeout  [CONTEXT]    [BUGGY]    double  p1  =  Math.sqrt(p1.length);  [BUGGY]  int  sum  =  0;  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1624	1624	1	replace	    double  p1  =  Math.sqrt(p1.length);		compilable	timeout	5	1	add
323	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    final  double  p1.length  =  Math.max(p1.length);  [BUGGY]  int  sum  =  0;  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1624	1624	1	add	    final  double  p1.length  =  Math.max(p1.length);		compilable	timeout	5	1
324	[BUG]  [BUGGY]    final  double  p1.length  =  Math.max(p1.length);  timeout  [CONTEXT]    [BUGGY]    final  double  p1.length  =  Math.max(p1.length);  [BUGGY]  int  sum  =  0;  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1624	1624	1	replace	    final  double  p1.length  =  Math.max(p1.length);		compilable	timeout	5	1	add
324	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    final  double  p1.length  =  Math.max(p1.length,  p2.length);  [BUGGY]  int  sum  =  0;  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1624	1624	1	add	    final  double  p1.length  =  Math.max(p1.length,  p2.length);		compilable	timeout	5	1
325	[BUG]  [BUGGY]    final  double  p1.length  =  Math.max(p1.length,  p2.length);  timeout  [CONTEXT]    [BUGGY]    final  double  p1.length  =  Math.max(p1.length,  p2.length);  [BUGGY]  int  sum  =  0;  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1624	1624	1	replace	    final  double  p1.length  =  Math.max(p1.length,  p2.length);		compilable	timeout	5	1	add
325	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    double  p1.length  =  Math.max(p1.length);  [BUGGY]  int  sum  =  0;  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1624	1624	1	add	    double  p1.length  =  Math.max(p1.length);		compilable	timeout	5	1
326	[BUG]  [BUGGY]    double  p1.length  =  Math.max(p1.length);  timeout  [CONTEXT]    [BUGGY]    double  p1.length  =  Math.max(p1.length);  [BUGGY]  int  sum  =  0;  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1624	1624	1	replace	    double  p1.length  =  Math.max(p1.length);		compilable	timeout	5	1	add
341	[BUG]  [BUGGY]    return(long[])FACTORIALS.clone();  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    return(long[])FACTORIALS.clone();  [BUGGY]  private  static  final  long[]  FACTORIALS  =  new  long[]  {  1l,1l,  2l,  6l,  24l,  120l,  720l,  5040l,  40320l,  362880l,3628800l,39916800l,  479001600l,  6227020800l,  87178291200l,  1307674368000l,  20922789888000l,  355687428096000l,  6402373705728000l,  121645100408832000l,  2432902008176640000l  };  [CLASS]  MathUtils  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	69	69	1	replace	    return(long[])FACTORIALS.clone();		non-compiled	[CE]  illegal  start  of  type	3	None	add
342	[BUG]  [BUGGY]    return(long[])FACTORIALS.cloneTree();  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    return(long[])FACTORIALS.cloneTree();  [BUGGY]  private  static  final  long[]  FACTORIALS  =  new  long[]  {  1l,1l,  2l,  6l,  24l,  120l,  720l,  5040l,  40320l,  362880l,3628800l,39916800l,  479001600l,  6227020800l,  87178291200l,  1307674368000l,  20922789888000l,  355687428096000l,  6402373705728000l,  121645100408832000l,  2432902008176640000l  };  [CLASS]  MathUtils  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	69	69	1	replace	    return(long[])FACTORIALS.cloneTree();		non-compiled	[CE]  illegal  start  of  type	3	None	add
343	[BUG]  [BUGGY]    long[]  FACTORIALS  =  new  long[0l];  [CE]  possible  loss  of  precision  [CONTEXT]    [BUGGY]    long[]  FACTORIALS  =  new  long[0l];  [BUGGY]  private  static  final  long[]  FACTORIALS  =  new  long[]  {  1l,1l,  2l,  6l,  24l,  120l,  720l,  5040l,  40320l,  362880l,3628800l,39916800l,  479001600l,  6227020800l,  87178291200l,  1307674368000l,  20922789888000l,  355687428096000l,  6402373705728000l,  121645100408832000l,  2432902008176640000l  };  [CLASS]  MathUtils  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	69	69	1	replace	    long[]  FACTORIALS  =  new  long[0l];		non-compiled	[CE]  possible  loss  of  precision	3	None	add
344	[BUG]  [BUGGY]    long[]  FACTORIALS  =  MathUtils.indicator(false,  false);  [CE]  no  suitable  method  found  for  indicator(boolean,boolean)  [CONTEXT]    [BUGGY]    long[]  FACTORIALS  =  MathUtils.indicator(false,  false);  [BUGGY]  private  static  final  long[]  FACTORIALS  =  new  long[]  {  1l,1l,  2l,  6l,  24l,  120l,  720l,  5040l,  40320l,  362880l,3628800l,39916800l,  479001600l,  6227020800l,  87178291200l,  1307674368000l,  20922789888000l,  355687428096000l,  6402373705728000l,  121645100408832000l,  2432902008176640000l  };  [CLASS]  MathUtils  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	69	69	1	replace	    long[]  FACTORIALS  =  MathUtils.indicator(false,  false);		non-compiled	[CE]  no  suitable  method  found  for  indicator(boolean,boolean)	3	None	add
345	[BUG]  [BUGGY]    Arrays.sort(false);  [CE]  <identifier>  expected  [CONTEXT]    [BUGGY]    Arrays.sort(false);  [BUGGY]  private  static  final  long[]  FACTORIALS  =  new  long[]  {  1l,1l,  2l,  6l,  24l,  120l,  720l,  5040l,  40320l,  362880l,3628800l,39916800l,  479001600l,  6227020800l,  87178291200l,  1307674368000l,  20922789888000l,  355687428096000l,  6402373705728000l,  121645100408832000l,  2432902008176640000l  };  [CLASS]  MathUtils  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	69	69	1	replace	    Arrays.sort(false);		non-compiled	[CE]  <identifier>  expected	3	None	add
364	[BUG]  [BUGGY]  if(s  ==  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]  if(s  ==  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  [BUGGY]  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	97	97	1	replace	if(s  ==  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {	if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  	non-compiled	[CE]  illegal  start  of  type	20	None	replace
381	[BUG]  [BUGGY]    Preconditions.checkNotNull(Math.PI);  [CE]  cannot  find  symbol  Preconditions  [CONTEXT]    [BUGGY]    Preconditions.checkNotNull(Math.PI);  [BUGGY]  super();  }  [CLASS]  MathUtils  [METHOD]  <init>  [RETURN_TYPE]  MathUtils()  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	82	82	1	replace	    Preconditions.checkNotNull(Math.PI);		non-compiled	[CE]  cannot  find  symbol  Preconditions	15	None	add
382	[BUG]  [BUGGY]    Preconditions.checkNotNull(super);  [CE]  '.'  expected  [CONTEXT]    [BUGGY]    Preconditions.checkNotNull(super);  [BUGGY]  super();  }  [CLASS]  MathUtils  [METHOD]  <init>  [RETURN_TYPE]  MathUtils()  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	82	82	1	replace	    Preconditions.checkNotNull(super);		non-compiled	[CE]  '.'  expected	15	None	add
383	[BUG]  [BUGGY]    Preconditions.checkArgument(this.isCluster());  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [CONTEXT]    [BUGGY]    Preconditions.checkArgument(this.isCluster());  [BUGGY]  super();  }  [CLASS]  MathUtils  [METHOD]  <init>  [RETURN_TYPE]  MathUtils()  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	82	82	1	replace	    Preconditions.checkArgument(this.isCluster());		non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	15	None	add
384	[BUG]  [BUGGY]    Preconditions.checkNotNull(Math.pow(10,  10));  [CE]  cannot  find  symbol  Preconditions  [CONTEXT]    [BUGGY]    Preconditions.checkNotNull(Math.pow(10,  10));  [BUGGY]  super();  }  [CLASS]  MathUtils  [METHOD]  <init>  [RETURN_TYPE]  MathUtils()  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	82	82	1	replace	    Preconditions.checkNotNull(Math.pow(10,  10));		non-compiled	[CE]  cannot  find  symbol  Preconditions	15	None	add
385	[BUG]  [BUGGY]    Preconditions.checkNotNull(Math.pow(10,  1000));  [CE]  cannot  find  symbol  Preconditions  [CONTEXT]    [BUGGY]    Preconditions.checkNotNull(Math.pow(10,  1000));  [BUGGY]  super();  }  [CLASS]  MathUtils  [METHOD]  <init>  [RETURN_TYPE]  MathUtils()  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	82	82	1	replace	    Preconditions.checkNotNull(Math.pow(10,  1000));		non-compiled	[CE]  cannot  find  symbol  Preconditions	15	None	add
2	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    int  x  =  Math.exp(-x  +(int)Integer.MIN_VALUE);  [BUGGY]  long  s  =  (long)x  +  (long)y;  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	96	96	1	add	    int  x  =  Math.exp(-x  +(int)Integer.MIN_VALUE);		compilable	timeout	19	1
3	[BUG]  [BUGGY]    int  x  =  Math.exp(-x  +(int)Integer.MIN_VALUE);  timeout  [CONTEXT]    [BUGGY]    int  x  =  Math.exp(-x  +(int)Integer.MIN_VALUE);  [BUGGY]  long  s  =  (long)x  +  (long)y;  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	96	96	1	replace	    int  x  =  Math.exp(-x  +(int)Integer.MIN_VALUE);		compilable	timeout	19	1	add
3	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    int  x  =  Math.min(x  +  Integer.MIN_VALUE,  Integer.MAX_VALUE);  [BUGGY]  long  s  =  (long)x  +  (long)y;  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	96	96	1	add	    int  x  =  Math.min(x  +  Integer.MIN_VALUE,  Integer.MAX_VALUE);		compilable	timeout	19	1
4	[BUG]  [BUGGY]    int  x  =  Math.min(x  +  Integer.MIN_VALUE,  Integer.MAX_VALUE);  timeout  [CONTEXT]    [BUGGY]    int  x  =  Math.min(x  +  Integer.MIN_VALUE,  Integer.MAX_VALUE);  [BUGGY]  long  s  =  (long)x  +  (long)y;  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	96	96	1	replace	    int  x  =  Math.min(x  +  Integer.MIN_VALUE,  Integer.MAX_VALUE);		compilable	timeout	19	1	add
4	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    int  x  =  Math.exp(-x  +(int)Integer.MAX_VALUE);  [BUGGY]  long  s  =  (long)x  +  (long)y;  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	96	96	1	add	    int  x  =  Math.exp(-x  +(int)Integer.MAX_VALUE);		compilable	timeout	19	1
5	[BUG]  [BUGGY]    int  x  =  Math.exp(-x  +(int)Integer.MAX_VALUE);  timeout  [CONTEXT]    [BUGGY]    int  x  =  Math.exp(-x  +(int)Integer.MAX_VALUE);  [BUGGY]  long  s  =  (long)x  +  (long)y;  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	96	96	1	replace	    int  x  =  Math.exp(-x  +(int)Integer.MAX_VALUE);		compilable	timeout	19	1	add
5	[BUG]  [BUGGY]  timeout  [CONTEXT]    [BUGGY]    int  x  =  Math.min(x  +  Integer.MAX_VALUE);  [BUGGY]  long  s  =  (long)x  +  (long)y;  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	96	96	1	add	    int  x  =  Math.min(x  +  Integer.MAX_VALUE);		compilable	timeout	19	1
6	[BUG]  [BUGGY]    int  x  =  Math.min(x  +  Integer.MAX_VALUE);  timeout  [CONTEXT]    [BUGGY]    int  x  =  Math.min(x  +  Integer.MAX_VALUE);  [BUGGY]  long  s  =  (long)x  +  (long)y;  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	96	96	1	replace	    int  x  =  Math.min(x  +  Integer.MAX_VALUE);		compilable	timeout	19	1	add
33	[BUG]  [BUGGY]  if(x  <  Integer.MIN_VALUE  ||  y  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]  if(x  <  Integer.MIN_VALUE  ||  y  >  Integer.MAX_VALUE)  {  [BUGGY]  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	97	97	1	replace	if(x  <  Integer.MIN_VALUE  ||  y  >  Integer.MAX_VALUE)  {	if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  	non-compiled	[CE]  illegal  start  of  type	20	None	replace
34	[BUG]  [BUGGY]  if(s  >>  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]  if(s  >>  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  [BUGGY]  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	97	97	1	replace	if(s  >>  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {	if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  	non-compiled	[CE]  illegal  start  of  type	20	None	replace
61	[BUG]  [BUGGY]    final  int[]  p1  =(int[])Math.floor(p2);  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    final  int[]  p1  =(int[])Math.floor(p2);  [BUGGY]  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1625	1625	1	replace	    final  int[]  p1  =(int[])Math.floor(p2);		non-compiled	[CE]  illegal  start  of  type	7	None	add
62	[BUG]  [BUGGY]    final  int[]  p1  =(int[])Math.floor(p1);  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    final  int[]  p1  =(int[])Math.floor(p1);  [BUGGY]  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1625	1625	1	replace	    final  int[]  p1  =(int[])Math.floor(p1);		non-compiled	[CE]  illegal  start  of  type	7	None	add
63	[BUG]  [BUGGY]    final  int[]  p1  =(int[])Math.ceil(p2);  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    final  int[]  p1  =(int[])Math.ceil(p2);  [BUGGY]  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1625	1625	1	replace	    final  int[]  p1  =(int[])Math.ceil(p2);		non-compiled	[CE]  illegal  start  of  type	7	None	add
64	[BUG]  [BUGGY]    final  int[]  p1  =(int[])Math.floor(p1.length,  p2.length);  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    final  int[]  p1  =(int[])Math.floor(p1.length,  p2.length);  [BUGGY]  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1625	1625	1	replace	    final  int[]  p1  =(int[])Math.floor(p1.length,  p2.length);		non-compiled	[CE]  illegal  start  of  type	7	None	add
65	[BUG]  [BUGGY]    final  int[]  p1  =(int[])Math.floor(p1.length);  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    final  int[]  p1  =(int[])Math.floor(p1.length);  [BUGGY]  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1625	1625	1	replace	    final  int[]  p1  =(int[])Math.floor(p1.length);		non-compiled	[CE]  illegal  start  of  type	7	None	add
91	[BUG]  [BUGGY]    return  Math.max(Math.abs(false));  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    return  Math.max(Math.abs(false));  [BUGGY]  private  static  final  long[]  FACTORIALS  =  new  long[]  {  1l,1l,  2l,  6l,  24l,  120l,  720l,  5040l,  40320l,  362880l,3628800l,39916800l,  479001600l,  6227020800l,  87178291200l,  1307674368000l,  20922789888000l,  355687428096000l,  6402373705728000l,  121645100408832000l,  2432902008176640000l  };  [CLASS]  MathUtils  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	69	69	1	replace	    return  Math.max(Math.abs(false));		non-compiled	[CE]  illegal  start  of  type	3	None	add
92	[BUG]  [BUGGY]    return  Math.exp(Math.exp(-1),  Math.exp(-8));  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    return  Math.exp(Math.exp(-1),  Math.exp(-8));  [BUGGY]  private  static  final  long[]  FACTORIALS  =  new  long[]  {  1l,1l,  2l,  6l,  24l,  120l,  720l,  5040l,  40320l,  362880l,3628800l,39916800l,  479001600l,  6227020800l,  87178291200l,  1307674368000l,  20922789888000l,  355687428096000l,  6402373705728000l,  121645100408832000l,  2432902008176640000l  };  [CLASS]  MathUtils  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	69	69	1	replace	    return  Math.exp(Math.exp(-1),  Math.exp(-8));		non-compiled	[CE]  illegal  start  of  type	3	None	add
93	[BUG]  [BUGGY]    return  Math.exp(Math.exp(-1),  Math.exp(-3));  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    return  Math.exp(Math.exp(-1),  Math.exp(-3));  [BUGGY]  private  static  final  long[]  FACTORIALS  =  new  long[]  {  1l,1l,  2l,  6l,  24l,  120l,  720l,  5040l,  40320l,  362880l,3628800l,39916800l,  479001600l,  6227020800l,  87178291200l,  1307674368000l,  20922789888000l,  355687428096000l,  6402373705728000l,  121645100408832000l,  2432902008176640000l  };  [CLASS]  MathUtils  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	69	69	1	replace	    return  Math.exp(Math.exp(-1),  Math.exp(-3));		non-compiled	[CE]  illegal  start  of  type	3	None	add
94	[BUG]  [BUGGY]    return  Math.exp(Math.exp(-1),  Math.exp(-2));  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    return  Math.exp(Math.exp(-1),  Math.exp(-2));  [BUGGY]  private  static  final  long[]  FACTORIALS  =  new  long[]  {  1l,1l,  2l,  6l,  24l,  120l,  720l,  5040l,  40320l,  362880l,3628800l,39916800l,  479001600l,  6227020800l,  87178291200l,  1307674368000l,  20922789888000l,  355687428096000l,  6402373705728000l,  121645100408832000l,  2432902008176640000l  };  [CLASS]  MathUtils  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	69	69	1	replace	    return  Math.exp(Math.exp(-1),  Math.exp(-2));		non-compiled	[CE]  illegal  start  of  type	3	None	add
95	[BUG]  [BUGGY]    return  Math.exp(Math.exp(-1),  Math.exp(-4));  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    return  Math.exp(Math.exp(-1),  Math.exp(-4));  [BUGGY]  private  static  final  long[]  FACTORIALS  =  new  long[]  {  1l,1l,  2l,  6l,  24l,  120l,  720l,  5040l,  40320l,  362880l,3628800l,39916800l,  479001600l,  6227020800l,  87178291200l,  1307674368000l,  20922789888000l,  355687428096000l,  6402373705728000l,  121645100408832000l,  2432902008176640000l  };  [CLASS]  MathUtils  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	69	69	1	replace	    return  Math.exp(Math.exp(-1),  Math.exp(-4));		non-compiled	[CE]  illegal  start  of  type	3	None	add
121	[BUG]  [BUGGY]    int  s  =  Math.sqrt(Math.abs(x),  y));  [CE]  ';'  expected  [CONTEXT]    [BUGGY]    int  s  =  Math.sqrt(Math.abs(x),  y));  [BUGGY]  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	97	97	1	replace	    int  s  =  Math.sqrt(Math.abs(x),  y));		non-compiled	[CE]  ';'  expected	21	None	add
122	[BUG]  [BUGGY]    int  s  =  Math.sqrt(Math.abs(x),  y);  [CE]  ';'  expected  [CONTEXT]    [BUGGY]    int  s  =  Math.sqrt(Math.abs(x),  y);  [BUGGY]  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	97	97	1	replace	    int  s  =  Math.sqrt(Math.abs(x),  y);		non-compiled	[CE]  ';'  expected	21	None	add
123	[BUG]  [BUGGY]    int  s  =  Math.sqrt(Math.exp(-x));  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    int  s  =  Math.sqrt(Math.exp(-x));  [BUGGY]  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	97	97	1	replace	    int  s  =  Math.sqrt(Math.exp(-x));		non-compiled	[CE]  illegal  start  of  type	21	None	add
124	[BUG]  [BUGGY]    Integer  s  =  Math.sqrt(Math.exp(-x));  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    Integer  s  =  Math.sqrt(Math.exp(-x));  [BUGGY]  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	97	97	1	replace	    Integer  s  =  Math.sqrt(Math.exp(-x));		non-compiled	[CE]  illegal  start  of  type	21	None	add
125	[BUG]  [BUGGY]    int  s  =  Math.sqrt(Math.exp(-x)*  Math.log(x)),  y);  [CE]  ';'  expected  [CONTEXT]    [BUGGY]    int  s  =  Math.sqrt(Math.exp(-x)*  Math.log(x)),  y);  [BUGGY]  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	97	97	1	replace	    int  s  =  Math.sqrt(Math.exp(-x)*  Math.log(x)),  y);		non-compiled	[CE]  ';'  expected	21	None	add
152	[BUG]  [BUGGY]    this(Math.exp(),  Math.exp(-1));  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    this(Math.exp(),  Math.exp(-1));  [BUGGY]  }  [CLASS]  MathUtils  [METHOD]  <init>  [RETURN_TYPE]  MathUtils()  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	83	83	1	replace	    this(Math.exp(),  Math.exp(-1));		non-compiled	[CE]  illegal  start  of  type	17	None	add
153	[BUG]  [BUGGY]    this(null);  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    this(null);  [BUGGY]  }  [CLASS]  MathUtils  [METHOD]  <init>  [RETURN_TYPE]  MathUtils()  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	83	83	1	replace	    this(null);		non-compiled	[CE]  illegal  start  of  type	17	None	add
154	[BUG]  [BUGGY]    this(null,  null);  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    this(null,  null);  [BUGGY]  }  [CLASS]  MathUtils  [METHOD]  <init>  [RETURN_TYPE]  MathUtils()  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	83	83	1	replace	    this(null,  null);		non-compiled	[CE]  illegal  start  of  type	17	None	add
155	[BUG]  [BUGGY]    this(new  Integer(Math.pow(10,  1)));  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    this(new  Integer(Math.pow(10,  1)));  [BUGGY]  }  [CLASS]  MathUtils  [METHOD]  <init>  [RETURN_TYPE]  MathUtils()  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	83	83	1	replace	    this(new  Integer(Math.pow(10,  1)));		non-compiled	[CE]  illegal  start  of  type	17	None	add
184	[BUG]  [BUGGY]  long  s  =(long)x  +(int)y;  [CE]  illegal  start  of  expression  [CONTEXT]    [BUGGY]  long  s  =(long)x  +(int)y;  [BUGGY]  if  (s  <  Integer.MIN_VALUE  ||  s  >  Integer.MAX_VALUE)  {  throw  new  ArithmeticException( "overflow:  add ");  }  return  (int)s;  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  int  int  x  int  y  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	96	96	1	replace	long  s  =(long)x  +(int)y;	long  s  =  (long)x  +  (long)y;  	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
211	[BUG]  [BUGGY]    sum  +=  Math.sqrt(sum);  [CE]  illegal  start  of  expression  [CONTEXT]    [BUGGY]    sum  +=  Math.sqrt(sum);  [BUGGY]  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1629	1629	1	replace	    sum  +=  Math.sqrt(sum);		non-compiled	[CE]  illegal  start  of  expression	13	None	add
212	[BUG]  [BUGGY]    sum  +=  Math.sum(Math.abs(p1),  Math.abs(p2));  [CE]  illegal  start  of  expression  [CONTEXT]    [BUGGY]    sum  +=  Math.sum(Math.abs(p1),  Math.abs(p2));  [BUGGY]  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1629	1629	1	replace	    sum  +=  Math.sum(Math.abs(p1),  Math.abs(p2));		non-compiled	[CE]  illegal  start  of  expression	13	None	add
213	[BUG]  [BUGGY]    sum  +=  Math.sum(Math.abs(p1)-  Math.abs(p2));  [CE]  illegal  start  of  expression  [CONTEXT]    [BUGGY]    sum  +=  Math.sum(Math.abs(p1)-  Math.abs(p2));  [BUGGY]  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1629	1629	1	replace	    sum  +=  Math.sum(Math.abs(p1)-  Math.abs(p2));		non-compiled	[CE]  illegal  start  of  expression	13	None	add
214	[BUG]  [BUGGY]    int[]  sum  =  Math.sum  /(Math.abs(p1)+  Math.abs(p2));  [CE]  illegal  start  of  expression  [CONTEXT]    [BUGGY]    int[]  sum  =  Math.sum  /(Math.abs(p1)+  Math.abs(p2));  [BUGGY]  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1629	1629	1	replace	    int[]  sum  =  Math.sum  /(Math.abs(p1)+  Math.abs(p2));		non-compiled	[CE]  illegal  start  of  expression	13	None	add
215	[BUG]  [BUGGY]    int[]  sum  =  Math.sum  /(Math.abs(p1)-  Math.abs(p2));  [CE]  illegal  start  of  expression  [CONTEXT]    [BUGGY]    int[]  sum  =  Math.sum  /(Math.abs(p1)-  Math.abs(p2));  [BUGGY]  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1629	1629	1	replace	    int[]  sum  =  Math.sum  /(Math.abs(p1)-  Math.abs(p2));		non-compiled	[CE]  illegal  start  of  expression	13	None	add
241	[BUG]  [BUGGY]    double  dp  =  Math.pow(Math.exp(-dp),  -dp);  [CE]  illegal  start  of  expression  [CONTEXT]    [BUGGY]    double  dp  =  Math.pow(Math.exp(-dp),  -dp);  [BUGGY]  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1627	1627	1	replace	    double  dp  =  Math.pow(Math.exp(-dp),  -dp);		non-compiled	[CE]  illegal  start  of  expression	11	None	add
242	[BUG]  [BUGGY]    double  dp  =  Math.pow(Math.exp(-dp,  -dp));  [CE]  illegal  start  of  expression  [CONTEXT]    [BUGGY]    double  dp  =  Math.pow(Math.exp(-dp,  -dp));  [BUGGY]  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1627	1627	1	replace	    double  dp  =  Math.pow(Math.exp(-dp,  -dp));		non-compiled	[CE]  illegal  start  of  expression	11	None	add
243	[BUG]  [BUGGY]    double  dp  =  Math.pow(-dp,  0.5);  [CE]  illegal  start  of  expression  [CONTEXT]    [BUGGY]    double  dp  =  Math.pow(-dp,  0.5);  [BUGGY]  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1627	1627	1	replace	    double  dp  =  Math.pow(-dp,  0.5);		non-compiled	[CE]  illegal  start  of  expression	11	None	add
244	[BUG]  [BUGGY]    double  dp  =  Math.pow(Math.exp(-dp)*  Math.log(-dp));  [CE]  illegal  start  of  expression  [CONTEXT]    [BUGGY]    double  dp  =  Math.pow(Math.exp(-dp)*  Math.log(-dp));  [BUGGY]  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1627	1627	1	replace	    double  dp  =  Math.pow(Math.exp(-dp)*  Math.log(-dp));		non-compiled	[CE]  illegal  start  of  expression	11	None	add
245	[BUG]  [BUGGY]    double  dp  =  Math.pow(Math.exp(-dp),  0.5);  [CE]  illegal  start  of  expression  [CONTEXT]    [BUGGY]    double  dp  =  Math.pow(Math.exp(-dp),  0.5);  [BUGGY]  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1627	1627	1	replace	    double  dp  =  Math.pow(Math.exp(-dp),  0.5);		non-compiled	[CE]  illegal  start  of  expression	11	None	add
271	[BUG]  [BUGGY]    final  int[]  p1  =(int[])Math.floor(p2);  [CE]  illegal  start  of  expression  [CONTEXT]    [BUGGY]    final  int[]  p1  =(int[])Math.floor(p2);  [BUGGY]  int  sum  =  0;  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1624	1624	1	replace	    final  int[]  p1  =(int[])Math.floor(p2);		non-compiled	[CE]  illegal  start  of  expression	5	None	add
272	[BUG]  [BUGGY]    final  int[]  p1  =(int[])Math.ceil(p2);  [CE]  illegal  start  of  expression  [CONTEXT]    [BUGGY]    final  int[]  p1  =(int[])Math.ceil(p2);  [BUGGY]  int  sum  =  0;  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1624	1624	1	replace	    final  int[]  p1  =(int[])Math.ceil(p2);		non-compiled	[CE]  illegal  start  of  expression	5	None	add
273	[BUG]  [BUGGY]    final  int[]  p1  =(int[])Math.floor(p1);  [CE]  illegal  start  of  expression  [CONTEXT]    [BUGGY]    final  int[]  p1  =(int[])Math.floor(p1);  [BUGGY]  int  sum  =  0;  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1624	1624	1	replace	    final  int[]  p1  =(int[])Math.floor(p1);		non-compiled	[CE]  illegal  start  of  expression	5	None	add
274	[BUG]  [BUGGY]    final  int[]  p1  =(int[])Math.floor(p1.length);  [CE]  illegal  start  of  expression  [CONTEXT]    [BUGGY]    final  int[]  p1  =(int[])Math.floor(p1.length);  [BUGGY]  int  sum  =  0;  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1624	1624	1	replace	    final  int[]  p1  =(int[])Math.floor(p1.length);		non-compiled	[CE]  illegal  start  of  expression	5	None	add
275	[BUG]  [BUGGY]    final  int[]  p1  =(int[])Math.floor(p1.length,  p2.length);  [CE]  illegal  start  of  expression  [CONTEXT]    [BUGGY]    final  int[]  p1  =(int[])Math.floor(p1.length,  p2.length);  [BUGGY]  int  sum  =  0;  for  (int  i  =  0;  i  <  p1.length;  i++)  {  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1624	1624	1	replace	    final  int[]  p1  =(int[])Math.floor(p1.length,  p2.length);		non-compiled	[CE]  illegal  start  of  expression	5	None	add
301	[BUG]  [BUGGY]  final  int  dp  =  p1[i]  -  p2[i]  -  1;  [CE]  illegal  start  of  expression  [CONTEXT]    [BUGGY]  final  int  dp  =  p1[i]  -  p2[i]  -  1;  [BUGGY]  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1626	1626	1	replace	final  int  dp  =  p1[i]  -  p2[i]  -  1;	final  int  dp  =  p1[i]  -  p2[i];  	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
303	[BUG]  [BUGGY]  final  int  dp  =  p1[i]  -  p2[i]  /  2;  [CE]  illegal  start  of  expression  [CONTEXT]    [BUGGY]  final  int  dp  =  p1[i]  -  p2[i]  /  2;  [BUGGY]  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1626	1626	1	replace	final  int  dp  =  p1[i]  -  p2[i]  /  2;	final  int  dp  =  p1[i]  -  p2[i];  	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
304	[BUG]  [BUGGY]  final  int  dp  =  p1[i]  -  p2[i]  /  p2;  [CE]  illegal  start  of  expression  [CONTEXT]    [BUGGY]  final  int  dp  =  p1[i]  -  p2[i]  /  p2;  [BUGGY]  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1626	1626	1	replace	final  int  dp  =  p1[i]  -  p2[i]  /  p2;	final  int  dp  =  p1[i]  -  p2[i];  	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
333	[BUG]  [BUGGY]  sum  +=  distance  *  dp;  [CE]  ';'  expected  [CONTEXT]    [BUGGY]  sum  +=  distance  *  dp;  [BUGGY]  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1627	1627	1	replace	sum  +=  distance  *  dp;	sum  +=  dp  *  dp;  	non-compiled	[CE]  ';'  expected	10	None	replace
334	[BUG]  [BUGGY]  sum  +=  dp  *  10;  [CE]  ';'  expected  [CONTEXT]    [BUGGY]  sum  +=  dp  *  10;  [BUGGY]  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1627	1627	1	replace	sum  +=  dp  *  10;	sum  +=  dp  *  dp;  	non-compiled	[CE]  ';'  expected	10	None	replace
362	[BUG]  [BUGGY]  this(new  Integer(Math.pow(10,  1)),  new  Integer(Math.floor(10,  1)));  [CE]  illegal  start  of  expression  [CONTEXT]    [BUGGY]  this(new  Integer(Math.pow(10,  1)),  new  Integer(Math.floor(10,  1)));  [BUGGY]    [CLASS]  MathUtils  [METHOD]  <init>  [RETURN_TYPE]  MathUtils()  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	83	83	1	replace	this(new  Integer(Math.pow(10,  1)),  new  Integer(Math.floor(10,  1)));	}  	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
363	[BUG]  [BUGGY]  this(new  Integer(Math.pow(10,  1)),  new  Integer(Math.atan(10,  1)));  [CE]  illegal  start  of  expression  [CONTEXT]    [BUGGY]  this(new  Integer(Math.pow(10,  1)),  new  Integer(Math.atan(10,  1)));  [BUGGY]    [CLASS]  MathUtils  [METHOD]  <init>  [RETURN_TYPE]  MathUtils()  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	83	83	1	replace	this(new  Integer(Math.pow(10,  1)),  new  Integer(Math.atan(10,  1)));	}  	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
364	[BUG]  [BUGGY]  this(new  Integer(Math.pow(10,  1)),  new  Integer(Math.exp(10,  1));  [CE]  ')'  expected  [CONTEXT]    [BUGGY]  this(new  Integer(Math.pow(10,  1)),  new  Integer(Math.exp(10,  1));  [BUGGY]    [CLASS]  MathUtils  [METHOD]  <init>  [RETURN_TYPE]  MathUtils()  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	83	83	1	replace	this(new  Integer(Math.pow(10,  1)),  new  Integer(Math.exp(10,  1));	}  	non-compiled	[CE]  ')'  expected	16	None	replace
391	[BUG]  [BUGGY]    Preconditions.checkArgument(!SuperClassUtils.isNumeric());  [CE]  ')'  expected  [CONTEXT]    [BUGGY]    Preconditions.checkArgument(!SuperClassUtils.isNumeric());  [BUGGY]  super();  }  [CLASS]  MathUtils  [METHOD]  <init>  [RETURN_TYPE]  MathUtils()  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	82	82	1	replace	    Preconditions.checkArgument(!SuperClassUtils.isNumeric());		non-compiled	[CE]  ')'  expected	15	None	add
392	[BUG]  [BUGGY]    Preconditions.checkArgument(!Math.abs(generateClusterAnalysis()));  [CE]  ')'  expected  [CONTEXT]    [BUGGY]    Preconditions.checkArgument(!Math.abs(generateClusterAnalysis()));  [BUGGY]  super();  }  [CLASS]  MathUtils  [METHOD]  <init>  [RETURN_TYPE]  MathUtils()  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	82	82	1	replace	    Preconditions.checkArgument(!Math.abs(generateClusterAnalysis()));		non-compiled	[CE]  ')'  expected	15	None	add
393	[BUG]  [BUGGY]    Preconditions.checkArgument(!SuperclassUtils.isNumeric());  [CE]  ')'  expected  [CONTEXT]    [BUGGY]    Preconditions.checkArgument(!SuperclassUtils.isNumeric());  [BUGGY]  super();  }  [CLASS]  MathUtils  [METHOD]  <init>  [RETURN_TYPE]  MathUtils()  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	82	82	1	replace	    Preconditions.checkArgument(!SuperclassUtils.isNumeric());		non-compiled	[CE]  ')'  expected	15	None	add
394	[BUG]  [BUGGY]    Preconditions.checkArgument(!SuperClassUtils.isNumeric(getCluster()));  [CE]  ')'  expected  [CONTEXT]    [BUGGY]    Preconditions.checkArgument(!SuperClassUtils.isNumeric(getCluster()));  [BUGGY]  super();  }  [CLASS]  MathUtils  [METHOD]  <init>  [RETURN_TYPE]  MathUtils()  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	82	82	1	replace	    Preconditions.checkArgument(!SuperClassUtils.isNumeric(getCluster()));		non-compiled	[CE]  ')'  expected	15	None	add
395	[BUG]  [BUGGY]    Preconditions.checkArgument(!Math.abs(generateClusterAnalyses()));  [CE]  ')'  expected  [CONTEXT]    [BUGGY]    Preconditions.checkArgument(!Math.abs(generateClusterAnalyses()));  [BUGGY]  super();  }  [CLASS]  MathUtils  [METHOD]  <init>  [RETURN_TYPE]  MathUtils()  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	82	82	1	replace	    Preconditions.checkArgument(!Math.abs(generateClusterAnalyses()));		non-compiled	[CE]  ')'  expected	15	None	add
452	[BUG]  [BUGGY]  super( "mapping  with  constant  accessors: ");  [CE]  ')'  expected  [CONTEXT]    [BUGGY]  super( "mapping  with  constant  accessors: ");  [BUGGY]  }  [CLASS]  MathUtils  [METHOD]  <init>  [RETURN_TYPE]  MathUtils()  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	82	82	1	replace	super( "mapping  with  constant  accessors: ");	super();  	non-compiled	[CE]  ')'  expected	14	None	replace
453	[BUG]  [BUGGY]  super( "mapping  functions: ");  [CE]  ')'  expected  [CONTEXT]    [BUGGY]  super( "mapping  functions: ");  [BUGGY]  }  [CLASS]  MathUtils  [METHOD]  <init>  [RETURN_TYPE]  MathUtils()  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	82	82	1	replace	super( "mapping  functions: ");	super();  	non-compiled	[CE]  ')'  expected	14	None	replace
454	[BUG]  [BUGGY]  super( "mapping  with  constant  accessors. ");  [CE]  ')'  expected  [CONTEXT]    [BUGGY]  super( "mapping  with  constant  accessors. ");  [BUGGY]  }  [CLASS]  MathUtils  [METHOD]  <init>  [RETURN_TYPE]  MathUtils()  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.0	82	82	1	replace	super( "mapping  with  constant  accessors. ");	super();  	non-compiled	[CE]  ')'  expected	14	None	replace
483	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  p1[i];  i++)  {  [CE]  ')'  expected  [CONTEXT]    [BUGGY]  for(int  i  =  0;  i  <  p1[i];  i++)  {  [BUGGY]  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1625	1625	1	replace	for(int  i  =  0;  i  <  p1[i];  i++)  {	for  (int  i  =  0;  i  <  p1.length;  i++)  {  	non-compiled	[CE]  ')'  expected	6	None	replace
484	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  p1.length,  p2[i];  i++)  {  [CE]  ')'  expected  [CONTEXT]    [BUGGY]  for(int  i  =  0;  i  <  p1.length,  p2[i];  i++)  {  [BUGGY]  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1625	1625	1	replace	for(int  i  =  0;  i  <  p1.length,  p2[i];  i++)  {	for  (int  i  =  0;  i  <  p1.length;  i++)  {  	non-compiled	[CE]  ')'  expected	6	None	replace
512	[BUG]  [BUGGY]  return  Math.sqrt(Math.floor(p1));  [CE]  ')'  expected  [CONTEXT]    [BUGGY]  return  Math.sqrt(Math.floor(p1));  [BUGGY]  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1629	1629	1	replace	return  Math.sqrt(Math.floor(p1));	return  Math.sqrt(sum);  	non-compiled	[CE]  ')'  expected	12	None	replace
513	[BUG]  [BUGGY]  return  Math.sqrt(Math.floor(p2));  [CE]  ')'  expected  [CONTEXT]    [BUGGY]  return  Math.sqrt(Math.floor(p2));  [BUGGY]  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1629	1629	1	replace	return  Math.sqrt(Math.floor(p2));	return  Math.sqrt(sum);  	non-compiled	[CE]  ')'  expected	12	None	replace
514	[BUG]  [BUGGY]  return  Math.sqrt(-Math.log(p1),  p2));  [CE]  ')'  expected  [CONTEXT]    [BUGGY]  return  Math.sqrt(-Math.log(p1),  p2));  [BUGGY]  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1629	1629	1	replace	return  Math.sqrt(-Math.log(p1),  p2));	return  Math.sqrt(sum);  	non-compiled	[CE]  ')'  expected	12	None	replace
544	[BUG]  [BUGGY]  private  static  final  long[]  FACTORIALS  =  new  long[]  &amp;  [CE]  array  dimension  missing  [CONTEXT]    [BUGGY]  private  static  final  long[]  FACTORIALS  =  new  long[]  &amp;  [BUGGY]  1l,1l,  2l,  6l,  24l,  120l,  720l,  5040l,  40320l,  362880l,3628800l,39916800l,  479001600l,  6227020800l,  87178291200l,  1307674368000l,  20922789888000l,  355687428096000l,  6402373705728000l,  121645100408832000l,  2432902008176640000l  };  [CLASS]  MathUtils  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	69	69	1	replace	private  static  final  long[]  FACTORIALS  =  new  long[]  &amp;	private  static  final  long[]  FACTORIALS  =  new  long[]  {  	non-compiled	[CE]  array  dimension  missing	2	None	replace
572	[BUG]  [BUGGY]    final  int[]  p1  =(int[])Math.floor(p2);  sum  +=  Math.sqrt(p1);  [CE]  array  dimension  missing  [CONTEXT]    [BUGGY]    final  int[]  p1  =(int[])Math.floor(p2);  sum  +=  Math.sqrt(p1);  [BUGGY]  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1626	1626	1	replace	    final  int[]  p1  =(int[])Math.floor(p2);  sum  +=  Math.sqrt(p1);		non-compiled	[CE]  array  dimension  missing	9	None	add
573	[BUG]  [BUGGY]    final  int[]  p1  =(int[])Math.ceil(p2);  [CE]  array  dimension  missing  [CONTEXT]    [BUGGY]    final  int[]  p1  =(int[])Math.ceil(p2);  [BUGGY]  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1626	1626	1	replace	    final  int[]  p1  =(int[])Math.ceil(p2);		non-compiled	[CE]  array  dimension  missing	9	None	add
574	[BUG]  [BUGGY]    final  int[]  p1  =(int[])Math.floor(p2));  [CE]  array  dimension  missing  [CONTEXT]    [BUGGY]    final  int[]  p1  =(int[])Math.floor(p2));  [BUGGY]  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1626	1626	1	replace	    final  int[]  p1  =(int[])Math.floor(p2));		non-compiled	[CE]  array  dimension  missing	9	None	add
575	[BUG]  [BUGGY]    final  int[]  p2  =(int[])Math.floor(p1);  [CE]  array  dimension  missing  [CONTEXT]    [BUGGY]    final  int[]  p2  =(int[])Math.floor(p1);  [BUGGY]  final  int  dp  =  p1[i]  -  p2[i];  sum  +=  dp  *  dp;  }  return  Math.sqrt(sum);  }  [CLASS]  MathUtils  [METHOD]  distance  [RETURN_TYPE]  double  int[]  p1  int[]  p2  	projects/Math79/src/main/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	1626	1626	1	replace	    final  int[]  p2  =(int[])Math.floor(p1);		non-compiled	[CE]  array  dimension  missing	9	None	add
