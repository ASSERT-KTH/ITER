projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Minimum=Math.min(minimum,lvalue);maximum=Math.max(maximum,uvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Minimum=Math.min(minimum,lvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765min(minimum,lvalue);maximum=Math.max(maximum,uvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765}
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765NullPointerException.printStackTrace();
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765NullPointerException.setValue(dataset,item);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Integerminimum=Math.min(minimum,lvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Integerminimum=Math.min(minimum,lvalue);maximum=Math.max(maximum,uvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Integerminimum=Math.min(minimum,lvalue);maximum=Math.max(maximum,lvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765if(includeInterval){for(inti=0;i<seriesCount;i++){if(!Double.isNaN(lvalue)){minimum=Math.min(minimum,lvalue);maximum=Math.max(maximum,uvalue);}
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765if(includeInterval){for(inti=0;i<seriesCount;i++){lvalue=dataset.getXValue(series,item);if(!Double.isNaN(lvalue)){minimum=Math.min(minimum,lvalue);maximum=Math.max(maximum,
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765if(includeInterval){for(inti=0;i<seriesCount;i++){minimum=Math.min(minimum,lvalue);maximum=Math.max(maximum,uvalue);}
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765if(includeInterval){for(inti=0;i<itemCount;i++){minimum=Math.min(minimum,lvalue);maximum=Math.max(maximum,uvalue);}
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765if(includeInterval){for(inti=0;i<seriesCount;i++){minimum=Math.min(minimum,lvalue);}
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Integerminimum=Math.min(minimum,uvalue);maximum=Math.max(maximum,lvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Integerminimum=Math.min(minimum,uvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765safeMultiply(dataset,includeInterval){for(inti=0;i<seriesCount;i++){minimum=Math.min(minimum,lvalue);maximum=Math.max(maximum,uvalue);}
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765safeMultiply(dataset,includeInterval){for(inti=0;i<seriesCount;i++){minimum=Math.min(minimum,lvalue);maximal=Math.max(maximum,uvalue);}
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765'else'without'if'
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765ger.minor(minimum,lvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765ger.minor(minimum,lvalue);maximum=Math.max(maximum,
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765safeMultiply(dataset,includeInterval){for(inti=0;i<itemCount;i++){minimum=Math.min(minimum,lvalue);maximum=Math.max(maximum,uvalue);}
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765safeMultiply(dataset,includeInterval){for(inti=0;i<itemCount;i++){minimum=Math.min(minimum,lvalue);maximal=Math.max(maximum,uvalue);}
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765safeMultiply(dataset,includeInterval){for(inti=0;i<seriesCount;i++){if(!Double.isNaN(lvalue)){minimum=Math.min(minimum,lvalue);maximum=Math.max(max
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765minimum=Math.min(minimum,lvalue);maximum=Math.max(maximum,uvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765safeMultiply(dataset,includeInterval){for(inti=0;i<seriesCount;i++){minimum=Math.min(minimum,lvalue);}
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765safeMultiply(dataset,includeInterval){for(inti=0;i<seriesCount;i++){minimum=Math.max(minimum,lvalue);}
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765NullPointerException.setValue(series,item);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Minimum=Math.min(minimum,uvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Magimizer.checkState(Double.isInfinite(lvalue));
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Magimizer.checkState(Double.isNaN(lvalue));
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765NullPointerException.start(dataset);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765security("JSC_DEBUG_INTERVAL");
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Integerminimum=Math.min(maximum,lvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765safeMultiply(dataset,false));
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765NullPointerException.println("Failedtoinitializeexpression.");
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765securityChecker.checkNotNull(uvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765NullPointerException.setValue(dataset,item,null);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Magimumlvalue=dataset.getXValue(series,i);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Magimumuvalue=dataset.getXValue(series,i);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Statistics.checkState(item!=null);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Statistics.checkNotNull(uvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Minimum=Math.max(minimum,lvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Integerminimum=Math.max(minimum,lvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765NullPointerException.fromInteger(minimum,maximum);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765NullPointerException.fromInteger(minimum,maximum));
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765MutableCollection.checkState(lvalue!=null);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765NullPointerException.fromInteger(minimum,lvalue));
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765NullPointerException.fromInteger(i,itemCount);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Magimizer.checkState(Double.isNaN(lvalue)||Double.isInfinite(lvalue));
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Integerminimum=Math.min(minimum,maximum);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765MutableCollection.checkState(lvalue==null);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765safely(dataset,includeInterval){for(inti=0;i<seriesCount;i++){minimum=Math.min(minimum,lvalue);maximum=Math.max(maximum,uvalue);}
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765safely(dataset,includeInterval){for(inti=0;i<seriesCount;i++){minimum=Math.min(minimum,lvalue);maximal=Math.max(maximum,uvalue);}
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Minimum=Math.min(minimum,maximum);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765NullPointerException.fromInteger(minimum,itemCount);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765NullPointerException.fromInteger(series,item);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765ger.minor(minimum,uvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765safeMultiply(dataset,true));
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765safeMultiply(dataset,uvalue){for(inti=0;i<seriesCount;i++){if(!Double.isNaN(lvalue)){minimum=Math.min(minimum,lvalue);maximum=Math.max(max
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765safeMultiply(dataset,uvalue){for(inti=0;i<seriesCount;i++){if(Double.isNaN(lvalue)){minimum=Math.min(minimum,lvalue);maximum=Math.max(max
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765NullPointerException.setCause(includeInterval);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765NullPointerException.start(dataset,false);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Security("JSC_DEBUG_INTERVAL");
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765safely(dataset,includeInterval){for(inti=0;i<itemCount;i++){minimum=Math.min(minimum,lvalue);maximal=Math.max(maximum,uvalue);}
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765safely(dataset,includeInterval){for(inti=0;i<itemCount;i++){minimum=Math.min(minimum,lvalue);maximum=Math.max(maximum,uvalue);}
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Statistics.checkNotNull(minimum);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Magimumlvalue=dataset.getYValue(series,item);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Magimumlvalue=dataset.getXValue(series,item);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765securityChecker.checkNotNull(dataset);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765NullPointerException.setValue(series,item,1);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765NullPointerException.fromInteger(minimum,0));
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765'e'without'if'
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765NullPointerException.setValue(dataset,item,this);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765safely(dataset,includeInterval){for(inti=0;i<seriesCount;i++){minimum=Math.min(minimum,lvalue);}
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765safely(dataset,includeInterval){for(inti=0;i<seriesCount;i++){minimal=Math.min(minimum,lvalue);}
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Statistics.checkState(item==null);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765safely(dataset,includeInterval){for(inti=0;i<seriesCount;i++){minimum=Math.max(minimum,lvalue);}
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Magimumuvalue=dataset.getYValue(series,item);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Magimumuvalue=dataset.getXValue(series,item);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765safely(dataset,null));
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765securityChecker.checkNotNull(minimum);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765ger.maximum(minimum,lvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765NullPointerException.fromInteger(minimum,lvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765NullPointerException.fromInteger(minimum,minimum);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765NullPointerException.setValue(dataset,series,item,null);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Integerminimum=Math.max(minimum,uvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Minimum=Math.max(minimum,uvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765safeAdd(dataset,includeInterval){for(inti=0;i<seriesCount;i++){minimum=Math.min(minimum,lvalue);}
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765NullPointerException.start(dataset,this);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765NullPointerException.println();
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765NullPointerException.setXValue(series,item);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765NullPointerException.fromInteger(minimum,0);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765NullPointerException.println("Failedtoinitializeexpressionfor'else'.");
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765NullPointerException.fromInteger(i,1);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765NullPointerException.fromInteger(minimum,item);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765NullPointerException.setSeriesKey(dataset.getSeriesKey(series,item));
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765NullPointerException.setValue(series,item,0);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765NullPointerException.start(dataset,null);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765securityChecker.checkNotNull(lvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Statistics.checkNotNull(lvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765ger.min(minimum,lvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765safely(dataset,includeInterval));
