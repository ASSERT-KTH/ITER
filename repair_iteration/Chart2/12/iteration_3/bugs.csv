bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Magimizer.checkState(Double.isNaN(lvalue)||  Double.isInfinite(lvalue));  [CE]  'else'  without  'if'  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Magimizer.checkState(Double.isNaN(lvalue)||  Double.isInfinite(lvalue));  [BUGGY]      }  else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	Magimizer.checkState(Double.isNaN(lvalue)||  Double.isInfinite(lvalue));	  Magimizer.checkState(Double.isNaN(lvalue));    	non-compiled	[CE]  'else'  without  'if'	17	None	replace
2	[BUG]  [BUGGY]  Integer  minimum  =  Math.min(minimum,  maximum);  [CE]  'else'  without  'if'  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Integer  minimum  =  Math.min(minimum,  maximum);  [BUGGY]      }  else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	Integer  minimum  =  Math.min(minimum,  maximum);	  Integer    minimum    =    Math.min(minimum,    uvalue);    	non-compiled	[CE]  'else'  without  'if'	2	None	replace
3	[BUG]  [BUGGY]  MutableCollection.checkState(lvalue  ==  null);  [CE]  'else'  without  'if'  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  MutableCollection.checkState(lvalue  ==  null);  [BUGGY]      }  else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	MutableCollection.checkState(lvalue  ==  null);	  MutableCollection.checkState(lvalue!=    null);    	non-compiled	[CE]  'else'  without  'if'	33	None	replace
4	[BUG]  [BUGGY]  safely(dataset,  includeInterval)  {  for(int  i  =  0;  i  <  seriesCount;  i++)  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  safely(dataset,  includeInterval)  {  for(int  i  =  0;  i  <  seriesCount;  i++)  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [BUGGY]      }  else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	safely(dataset,  includeInterval)  {  for(int  i  =  0;  i  <  seriesCount;  i++)  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }	  safeMultiply(dataset,    includeInterval)    {    for(int    i    =    0;    i    <    seriesCount;    i++)    {    minimum    =    Math.min(minimum,    lvalue);    maximum    =    Math.max(maximum,    uvalue);    }    	non-compiled	[CE]  ';'  expected	3	None	replace
5	[BUG]  [BUGGY]  safely(dataset,  includeInterval)  {  for(int  i  =  0;  i  <  seriesCount;  i++)  {  minimum  =  Math.min(minimum,  lvalue);  maximal  =  Math.max(maximum,  uvalue);  }  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  safely(dataset,  includeInterval)  {  for(int  i  =  0;  i  <  seriesCount;  i++)  {  minimum  =  Math.min(minimum,  lvalue);  maximal  =  Math.max(maximum,  uvalue);  }  [BUGGY]      }  else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	safely(dataset,  includeInterval)  {  for(int  i  =  0;  i  <  seriesCount;  i++)  {  minimum  =  Math.min(minimum,  lvalue);  maximal  =  Math.max(maximum,  uvalue);  }	  safeMultiply(dataset,    includeInterval)    {    for(int    i    =    0;    i    <    seriesCount;    i++)    {    minimum    =    Math.min(minimum,    lvalue);    maximum    =    Math.max(maximum,    uvalue);    }    	non-compiled	[CE]  ';'  expected	3	None	replace
6	[BUG]  [BUGGY]  Minimum  =  Math.min(minimum,  maximum);  [CE]  'else'  without  'if'  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Minimum  =  Math.min(minimum,  maximum);  [BUGGY]      }  else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	Minimum  =  Math.min(minimum,  maximum);	  Minimum    =    Math.min(minimum,    uvalue);    	non-compiled	[CE]  'else'  without  'if'	15	None	replace
7	[BUG]  [BUGGY]  NullPointerException.fromInteger(minimum,  itemCount);  [CE]  'else'  without  'if'  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  NullPointerException.fromInteger(minimum,  itemCount);  [BUGGY]      }  else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	NullPointerException.fromInteger(minimum,  itemCount);	  NullPointerException.fromInteger(i,    itemCount);    	non-compiled	[CE]  'else'  without  'if'	35	None	replace
8	[BUG]  [BUGGY]  NullPointerException.fromInteger(series,  item);  [CE]  'else'  without  'if'  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  NullPointerException.fromInteger(series,  item);  [BUGGY]      }  else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	NullPointerException.fromInteger(series,  item);	  NullPointerException.fromInteger(i,    itemCount);    	non-compiled	[CE]  'else'  without  'if'	35	None	replace
9	[BUG]  [BUGGY]  ger.minor(minimum,  uvalue);  [CE]  'else'  without  'if'  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  ger.minor(minimum,  uvalue);  [BUGGY]      else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	ger.minor(minimum,  uvalue);	  ger.minor(minimum,    lvalue);    	non-compiled	[CE]  'else'  without  'if'	6	None	replace
10	[BUG]  [BUGGY]  safeMultiply(dataset,  true));  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  safeMultiply(dataset,  true));  [BUGGY]      else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	safeMultiply(dataset,  true));	  safeMultiply(dataset,    false));    	non-compiled	[CE]  ';'  expected	21	None	replace
11	[BUG]  [BUGGY]  safeMultiply(dataset,  uvalue)  {  for(int  i  =  0;  i  <  seriesCount;  i++)  {  if(!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(max  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  safeMultiply(dataset,  uvalue)  {  for(int  i  =  0;  i  <  seriesCount;  i++)  {  if(!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(max  [BUGGY]      else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	safeMultiply(dataset,  uvalue)  {  for(int  i  =  0;  i  <  seriesCount;  i++)  {  if(!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(max	  safeMultiply(dataset,    includeInterval)    {    for(int    i    =    0;    i    <    seriesCount;    i++)    {    if(!Double.isNaN(lvalue))    {    minimum    =    Math.min(minimum,    lvalue);    maximum    =    Math.max(max    	non-compiled	[CE]  ';'  expected	10	None	replace
12	[BUG]  [BUGGY]  safeMultiply(dataset,  uvalue)  {  for(int  i  =  0;  i  <  seriesCount;  i++)  {  if(Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(max  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  safeMultiply(dataset,  uvalue)  {  for(int  i  =  0;  i  <  seriesCount;  i++)  {  if(Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(max  [BUGGY]      else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	safeMultiply(dataset,  uvalue)  {  for(int  i  =  0;  i  <  seriesCount;  i++)  {  if(Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(max	  safeMultiply(dataset,    includeInterval)    {    for(int    i    =    0;    i    <    seriesCount;    i++)    {    if(!Double.isNaN(lvalue))    {    minimum    =    Math.min(minimum,    lvalue);    maximum    =    Math.max(max    	non-compiled	[CE]  ';'  expected	10	None	replace
13	[BUG]  [BUGGY]  NullPointerException.setCause(includeInterval);  [CE]  'else'  without  'if'  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  NullPointerException.setCause(includeInterval);  [BUGGY]      }  else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	NullPointerException.setCause(includeInterval);	  NullPointerException.start(dataset);    	non-compiled	[CE]  'else'  without  'if'	18	None	replace
14	[BUG]  [BUGGY]  NullPointerException.start(dataset,  false);  [CE]  'else'  without  'if'  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  NullPointerException.start(dataset,  false);  [BUGGY]      }  else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	NullPointerException.start(dataset,  false);	  NullPointerException.start(dataset);    	non-compiled	[CE]  'else'  without  'if'	18	None	replace
15	[BUG]  [BUGGY]  Security( "JSC_DEBUG_INTERVAL ");  [CE]  'else'  without  'if'  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Security( "JSC_DEBUG_INTERVAL ");  [BUGGY]      }  else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	Security( "JSC_DEBUG_INTERVAL ");	  security(   "JSC_DEBUG_INTERVAL   ");    	non-compiled	[CE]  'else'  without  'if'	19	None	replace
16	[BUG]  [BUGGY]  safely(dataset,  includeInterval)  {  for(int  i  =  0;  i  <  itemCount;  i++)  {  minimum  =  Math.min(minimum,  lvalue);  maximal  =  Math.max(maximum,  uvalue);  }  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  safely(dataset,  includeInterval)  {  for(int  i  =  0;  i  <  itemCount;  i++)  {  minimum  =  Math.min(minimum,  lvalue);  maximal  =  Math.max(maximum,  uvalue);  }  [BUGGY]      }  else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	safely(dataset,  includeInterval)  {  for(int  i  =  0;  i  <  itemCount;  i++)  {  minimum  =  Math.min(minimum,  lvalue);  maximal  =  Math.max(maximum,  uvalue);  }	  safeMultiply(dataset,    includeInterval)    {    for(int    i    =    0;    i    <    itemCount;    i++)    {    minimum    =    Math.min(minimum,    lvalue);    maximal    =    Math.max(maximum,    uvalue);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
17	[BUG]  [BUGGY]  safely(dataset,  includeInterval)  {  for(int  i  =  0;  i  <  itemCount;  i++)  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  safely(dataset,  includeInterval)  {  for(int  i  =  0;  i  <  itemCount;  i++)  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [BUGGY]      }  else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	safely(dataset,  includeInterval)  {  for(int  i  =  0;  i  <  itemCount;  i++)  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }	  safeMultiply(dataset,    includeInterval)    {    for(int    i    =    0;    i    <    itemCount;    i++)    {    minimum    =    Math.min(minimum,    lvalue);    maximal    =    Math.max(maximum,    uvalue);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
18	[BUG]  [BUGGY]  Statistics.checkNotNull(minimum);  [CE]  'else'  without  'if'  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Statistics.checkNotNull(minimum);  [BUGGY]      else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	Statistics.checkNotNull(minimum);	  Statistics.checkNotNull(uvalue);    	non-compiled	[CE]  'else'  without  'if'	28	None	replace
19	[BUG]  [BUGGY]  Magimum  lvalue  =  dataset.getYValue(series,  item);  [CE]  'else'  without  'if'  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Magimum  lvalue  =  dataset.getYValue(series,  item);  [BUGGY]      }  else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	Magimum  lvalue  =  dataset.getYValue(series,  item);	  Magimum    lvalue    =    dataset.getXValue(series,    i);    	non-compiled	[CE]  'else'  without  'if'	25	None	replace
20	[BUG]  [BUGGY]  Magimum  lvalue  =  dataset.getXValue(series,  item);  [CE]  'else'  without  'if'  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Magimum  lvalue  =  dataset.getXValue(series,  item);  [BUGGY]      }  else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	Magimum  lvalue  =  dataset.getXValue(series,  item);	  Magimum    lvalue    =    dataset.getXValue(series,    i);    	non-compiled	[CE]  'else'  without  'if'	25	None	replace
21	[BUG]  [BUGGY]  securityChecker.checkNotNull(dataset);  [CE]  'else'  without  'if'  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  securityChecker.checkNotNull(dataset);  [BUGGY]      else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	securityChecker.checkNotNull(dataset);	  securityChecker.checkNotNull(uvalue);    	non-compiled	[CE]  'else'  without  'if'	23	None	replace
22	[BUG]  [BUGGY]  NullPointerException.setValue(series,  item,  1);  [CE]  'else'  without  'if'  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  NullPointerException.setValue(series,  item,  1);  [BUGGY]      else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	NullPointerException.setValue(series,  item,  1);	  NullPointerException.setValue(series,    item);    	non-compiled	[CE]  'else'  without  'if'	14	None	replace
23	[BUG]  [BUGGY]  NullPointerException.fromInteger(minimum,  0));  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  NullPointerException.fromInteger(minimum,  0));  [BUGGY]      else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	NullPointerException.fromInteger(minimum,  0));	  NullPointerException.fromInteger(minimum,    maximum));    	non-compiled	[CE]  ';'  expected	32	None	replace
24	[BUG]  [BUGGY]  'e'  without  'if'  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  'e'  without  'if'  [BUGGY]      else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	'e'  without  'if'	  'else'    without    'if'    	non-compiled	[CE]  not  a  statement	5	None	replace
25	[BUG]  [BUGGY]  NullPointerException.setValue(dataset,  item,  this);  [CE]  'else'  without  'if'  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  NullPointerException.setValue(dataset,  item,  this);  [BUGGY]      else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	NullPointerException.setValue(dataset,  item,  this);	  NullPointerException.setValue(dataset,    item,    null);    	non-compiled	[CE]  'else'  without  'if'	24	None	replace
26	[BUG]  [BUGGY]  safely(dataset,  includeInterval)  {  for(int  i  =  0;  i  <  seriesCount;  i++)  {  minimum  =  Math.min(minimum,  lvalue);  }  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  safely(dataset,  includeInterval)  {  for(int  i  =  0;  i  <  seriesCount;  i++)  {  minimum  =  Math.min(minimum,  lvalue);  }  [BUGGY]      }  else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	safely(dataset,  includeInterval)  {  for(int  i  =  0;  i  <  seriesCount;  i++)  {  minimum  =  Math.min(minimum,  lvalue);  }	  safeMultiply(dataset,    includeInterval)    {    for(int    i    =    0;    i    <    seriesCount;    i++)    {    minimum    =    Math.max(minimum,    lvalue);    }    	non-compiled	[CE]  ';'  expected	13	None	replace
27	[BUG]  [BUGGY]  safely(dataset,  includeInterval)  {  for(int  i  =  0;  i  <  seriesCount;  i++)  {  minimal  =  Math.min(minimum,  lvalue);  }  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  safely(dataset,  includeInterval)  {  for(int  i  =  0;  i  <  seriesCount;  i++)  {  minimal  =  Math.min(minimum,  lvalue);  }  [BUGGY]      }  else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	safely(dataset,  includeInterval)  {  for(int  i  =  0;  i  <  seriesCount;  i++)  {  minimal  =  Math.min(minimum,  lvalue);  }	  safeMultiply(dataset,    includeInterval)    {    for(int    i    =    0;    i    <    seriesCount;    i++)    {    minimum    =    Math.max(minimum,    lvalue);    }    	non-compiled	[CE]  ';'  expected	13	None	replace
28	[BUG]  [BUGGY]  Statistics.checkState(item  ==  null);  [CE]  'else'  without  'if'  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Statistics.checkState(item  ==  null);  [BUGGY]      else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	Statistics.checkState(item  ==  null);	  Statistics.checkState(item!=    null);    	non-compiled	[CE]  'else'  without  'if'	27	None	replace
29	[BUG]  [BUGGY]  safely(dataset,  includeInterval)  {  for(int  i  =  0;  i  <  seriesCount;  i++)  {  minimum  =  Math.max(minimum,  lvalue);  }  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  safely(dataset,  includeInterval)  {  for(int  i  =  0;  i  <  seriesCount;  i++)  {  minimum  =  Math.max(minimum,  lvalue);  }  [BUGGY]      }  else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	safely(dataset,  includeInterval)  {  for(int  i  =  0;  i  <  seriesCount;  i++)  {  minimum  =  Math.max(minimum,  lvalue);  }	  safeMultiply(dataset,    includeInterval)    {    for(int    i    =    0;    i    <    seriesCount;    i++)    {    minimum    =    Math.min(minimum,    lvalue);    }    	non-compiled	[CE]  ';'  expected	12	None	replace
30	[BUG]  [BUGGY]  Magimum  uvalue  =  dataset.getYValue(series,  item);  [CE]  'else'  without  'if'  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Magimum  uvalue  =  dataset.getYValue(series,  item);  [BUGGY]      }  else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	Magimum  uvalue  =  dataset.getYValue(series,  item);	  Magimum    uvalue    =    dataset.getXValue(series,    i);    	non-compiled	[CE]  'else'  without  'if'	26	None	replace
31	[BUG]  [BUGGY]  Magimum  uvalue  =  dataset.getXValue(series,  item);  [CE]  'else'  without  'if'  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Magimum  uvalue  =  dataset.getXValue(series,  item);  [BUGGY]      }  else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	Magimum  uvalue  =  dataset.getXValue(series,  item);	  Magimum    uvalue    =    dataset.getXValue(series,    i);    	non-compiled	[CE]  'else'  without  'if'	26	None	replace
32	[BUG]  [BUGGY]  safely(dataset,  null));  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  safely(dataset,  null));  [BUGGY]      else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	safely(dataset,  null));	  safeMultiply(dataset,    includeInterval)    {    for(int    i    =    0;    i    <    seriesCount;    i++)    {    if(!Double.isNaN(lvalue))    {    minimum    =    Math.min(minimum,    lvalue);    maximum    =    Math.max(max    	non-compiled	[CE]  ';'  expected	10	None	replace
33	[BUG]  [BUGGY]  securityChecker.checkNotNull(minimum);  [CE]  'else'  without  'if'  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  securityChecker.checkNotNull(minimum);  [BUGGY]      else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	securityChecker.checkNotNull(minimum);	  securityChecker.checkNotNull(uvalue);    	non-compiled	[CE]  'else'  without  'if'	23	None	replace
34	[BUG]  [BUGGY]  ger.maximum(minimum,  lvalue);  [CE]  'else'  without  'if'  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  ger.maximum(minimum,  lvalue);  [BUGGY]      else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	ger.maximum(minimum,  lvalue);	  ger.minor(minimum,    lvalue);    	non-compiled	[CE]  'else'  without  'if'	6	None	replace
35	[BUG]  [BUGGY]  NullPointerException.fromInteger(minimum,  lvalue);  [CE]  'else'  without  'if'  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  NullPointerException.fromInteger(minimum,  lvalue);  [BUGGY]      }  else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	NullPointerException.fromInteger(minimum,  lvalue);	  NullPointerException.fromInteger(minimum,    lvalue));    	non-compiled	[CE]  'else'  without  'if'	34	None	replace
36	[BUG]  [BUGGY]  NullPointerException.fromInteger(minimum,  minimum);  [CE]  'else'  without  'if'  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  NullPointerException.fromInteger(minimum,  minimum);  [BUGGY]      else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	NullPointerException.fromInteger(minimum,  minimum);	  NullPointerException.fromInteger(minimum,    maximum);    	non-compiled	[CE]  'else'  without  'if'	31	None	replace
37	[BUG]  [BUGGY]  NullPointerException.setValue(dataset,  series,  item,  null);  [CE]  'else'  without  'if'  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  NullPointerException.setValue(dataset,  series,  item,  null);  [BUGGY]      else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	NullPointerException.setValue(dataset,  series,  item,  null);	  NullPointerException.setValue(dataset,    item,    null);    	non-compiled	[CE]  'else'  without  'if'	24	None	replace
38	[BUG]  [BUGGY]  Integer  minimum  =  Math.max(minimum,  uvalue);  [CE]  'else'  without  'if'  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Integer  minimum  =  Math.max(minimum,  uvalue);  [BUGGY]      }  else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	Integer  minimum  =  Math.max(minimum,  uvalue);	  Integer    minimum    =    Math.min(minimum,    uvalue);    	non-compiled	[CE]  'else'  without  'if'	2	None	replace
39	[BUG]  [BUGGY]  Minimum  =  Math.max(minimum,  uvalue);  [CE]  'else'  without  'if'  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Minimum  =  Math.max(minimum,  uvalue);  [BUGGY]      }  else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	Minimum  =  Math.max(minimum,  uvalue);	  Minimum    =    Math.min(minimum,    uvalue);    	non-compiled	[CE]  'else'  without  'if'	15	None	replace
40	[BUG]  [BUGGY]  safeAdd(dataset,  includeInterval)  {  for(int  i  =  0;  i  <  seriesCount;  i++)  {  minimum  =  Math.min(minimum,  lvalue);  }  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(dataset,  includeInterval)  {  for(int  i  =  0;  i  <  seriesCount;  i++)  {  minimum  =  Math.min(minimum,  lvalue);  }  [BUGGY]      }  else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	safeAdd(dataset,  includeInterval)  {  for(int  i  =  0;  i  <  seriesCount;  i++)  {  minimum  =  Math.min(minimum,  lvalue);  }	  safeMultiply(dataset,    includeInterval)    {    for(int    i    =    0;    i    <    seriesCount;    i++)    {    minimum    =    Math.max(minimum,    lvalue);    }    	non-compiled	[CE]  ';'  expected	13	None	replace
41	[BUG]  [BUGGY]  NullPointerException.start(dataset,  this);  [CE]  'else'  without  'if'  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  NullPointerException.start(dataset,  this);  [BUGGY]      }  else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	NullPointerException.start(dataset,  this);	  NullPointerException.start(dataset);    	non-compiled	[CE]  'else'  without  'if'	18	None	replace
42	[BUG]  [BUGGY]  NullPointerException.println();  [CE]  'else'  without  'if'  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  NullPointerException.println();  [BUGGY]      }  else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	NullPointerException.println();	  NullPointerException.println(   "Failed    to    initialize    expression.   ");    	non-compiled	[CE]  'else'  without  'if'	22	None	replace
43	[BUG]  [BUGGY]  NullPointerException.setXValue(series,  item);  [CE]  'else'  without  'if'  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  NullPointerException.setXValue(series,  item);  [BUGGY]      else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	NullPointerException.setXValue(series,  item);	  NullPointerException.setValue(series,    item);    	non-compiled	[CE]  'else'  without  'if'	14	None	replace
44	[BUG]  [BUGGY]  NullPointerException.fromInteger(minimum,  0);  [CE]  'else'  without  'if'  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  NullPointerException.fromInteger(minimum,  0);  [BUGGY]      else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	NullPointerException.fromInteger(minimum,  0);	  NullPointerException.fromInteger(minimum,    maximum);    	non-compiled	[CE]  'else'  without  'if'	31	None	replace
45	[BUG]  [BUGGY]  NullPointerException.println( "Failed  to  initialize  expression  for  'else'. ");  [CE]  'else'  without  'if'  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  NullPointerException.println( "Failed  to  initialize  expression  for  'else'. ");  [BUGGY]      }  else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	NullPointerException.println( "Failed  to  initialize  expression  for  'else'. ");	  NullPointerException.println(   "Failed    to    initialize    expression.   ");    	non-compiled	[CE]  'else'  without  'if'	22	None	replace
46	[BUG]  [BUGGY]  NullPointerException.fromInteger(i,  1);  [CE]  'else'  without  'if'  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  NullPointerException.fromInteger(i,  1);  [BUGGY]      }  else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	NullPointerException.fromInteger(i,  1);	  NullPointerException.fromInteger(i,    itemCount);    	non-compiled	[CE]  'else'  without  'if'	35	None	replace
47	[BUG]  [BUGGY]  NullPointerException.fromInteger(minimum,  item);  [CE]  'else'  without  'if'  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  NullPointerException.fromInteger(minimum,  item);  [BUGGY]      }  else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	NullPointerException.fromInteger(minimum,  item);	  NullPointerException.fromInteger(i,    itemCount);    	non-compiled	[CE]  'else'  without  'if'	35	None	replace
48	[BUG]  [BUGGY]  NullPointerException.setSeriesKey(dataset.getSeriesKey(series,  item));  [CE]  'else'  without  'if'  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  NullPointerException.setSeriesKey(dataset.getSeriesKey(series,  item));  [BUGGY]      else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	NullPointerException.setSeriesKey(dataset.getSeriesKey(series,  item));	  NullPointerException.setValue(series,    item);    	non-compiled	[CE]  'else'  without  'if'	14	None	replace
49	[BUG]  [BUGGY]  NullPointerException.setValue(series,  item,  0);  [CE]  'else'  without  'if'  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  NullPointerException.setValue(series,  item,  0);  [BUGGY]      else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	NullPointerException.setValue(series,  item,  0);	  NullPointerException.setValue(series,    item);    	non-compiled	[CE]  'else'  without  'if'	14	None	replace
50	[BUG]  [BUGGY]  NullPointerException.start(dataset,  null);  [CE]  'else'  without  'if'  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  NullPointerException.start(dataset,  null);  [BUGGY]      }  else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	NullPointerException.start(dataset,  null);	  NullPointerException.start(dataset);    	non-compiled	[CE]  'else'  without  'if'	18	None	replace
51	[BUG]  [BUGGY]  securityChecker.checkNotNull(lvalue);  [CE]  'else'  without  'if'  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  securityChecker.checkNotNull(lvalue);  [BUGGY]      else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	securityChecker.checkNotNull(lvalue);	  securityChecker.checkNotNull(uvalue);    	non-compiled	[CE]  'else'  without  'if'	23	None	replace
52	[BUG]  [BUGGY]  Statistics.checkNotNull(lvalue);  [CE]  'else'  without  'if'  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Statistics.checkNotNull(lvalue);  [BUGGY]      else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	Statistics.checkNotNull(lvalue);	  Statistics.checkNotNull(uvalue);    	non-compiled	[CE]  'else'  without  'if'	28	None	replace
53	[BUG]  [BUGGY]  ger.min(minimum,  lvalue);  [CE]  'else'  without  'if'  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  ger.min(minimum,  lvalue);  [BUGGY]      else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	ger.min(minimum,  lvalue);	  ger.minor(minimum,    lvalue);    	non-compiled	[CE]  'else'  without  'if'	6	None	replace
54	[BUG]  [BUGGY]  safely(dataset,  includeInterval));  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  safely(dataset,  includeInterval));  [BUGGY]      else  {  for  (int  series  =  0;  series  <  seriesCount;  series++)  {  int  itemCount  =  dataset.getItemCount(series);  for  (int  item  =  0;  item  <  itemCount;  item++)  {  lvalue  =  dataset.getXValue(series,  item);  uvalue  =  lvalue;  if  (!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  maximum  =  Math.max(maximum,  uvalue);  }  [CLASS]  DatasetUtilities  [METHOD]  iterateDomainBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.31622776601683794	765	765	2	replace	safely(dataset,  includeInterval));	  safeMultiply(dataset,    includeInterval)    {    for(int    i    =    0;    i    <    seriesCount;    i++)    {    if(!Double.isNaN(lvalue))    {    minimum    =    Math.min(minimum,    lvalue);    maximum    =    Math.max(max    	non-compiled	[CE]  ';'  expected	10	None	replace
