projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Minimum=Math.min(minimum,lvalue);maximum=Math.max(maximum,uvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Minimum=Math.min(minimum,lvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765min(minimum,lvalue);maximum=Math.max(maximum,uvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765}
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765NullPointerException.printStackTrace();
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765NullPointerException.setValue(dataset,item);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Integerminimum=Math.min(minimum,lvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Integerminimum=Math.min(minimum,lvalue);maximum=Math.max(maximum,uvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Integerminimum=Math.min(minimum,lvalue);maximum=Math.max(maximum,lvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765if(includeInterval){for(inti=0;i<seriesCount;i++){if(!Double.isNaN(lvalue)){minimum=Math.min(minimum,lvalue);maximum=Math.max(maximum,uvalue);}
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765if(includeInterval){for(inti=0;i<seriesCount;i++){lvalue=dataset.getXValue(series,item);if(!Double.isNaN(lvalue)){minimum=Math.min(minimum,lvalue);maximum=Math.max(maximum,
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765if(includeInterval){for(inti=0;i<seriesCount;i++){minimum=Math.min(minimum,lvalue);maximum=Math.max(maximum,uvalue);}
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765if(includeInterval){for(inti=0;i<itemCount;i++){minimum=Math.min(minimum,lvalue);maximum=Math.max(maximum,uvalue);}
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765if(includeInterval){for(inti=0;i<seriesCount;i++){minimum=Math.min(minimum,lvalue);}
