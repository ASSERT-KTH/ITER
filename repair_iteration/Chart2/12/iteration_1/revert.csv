projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Minimum=Math.min(minimum,lvalue);maximum=Math.max(maximum,uvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Minimum=Math.min(minimum,lvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765min(minimum,lvalue);maximum=Math.max(maximum,uvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765}
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765NullPointerException.printStackTrace();
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765NullPointerException.setValue(dataset,item);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Integerminimum=Math.min(minimum,lvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Integerminimum=Math.min(minimum,lvalue);maximum=Math.max(maximum,uvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Integerminimum=Math.min(minimum,lvalue);maximum=Math.max(maximum,lvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765if(includeInterval){for(inti=0;i<seriesCount;i++){if(!Double.isNaN(lvalue)){minimum=Math.min(minimum,lvalue);maximum=Math.max(maximum,uvalue);}
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765if(includeInterval){for(inti=0;i<seriesCount;i++){lvalue=dataset.getXValue(series,item);if(!Double.isNaN(lvalue)){minimum=Math.min(minimum,lvalue);maximum=Math.max(maximum,
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765if(includeInterval){for(inti=0;i<seriesCount;i++){minimum=Math.min(minimum,lvalue);maximum=Math.max(maximum,uvalue);}
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765if(includeInterval){for(inti=0;i<itemCount;i++){minimum=Math.min(minimum,lvalue);maximum=Math.max(maximum,uvalue);}
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765if(includeInterval){for(inti=0;i<seriesCount;i++){minimum=Math.min(minimum,lvalue);}
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Integerminimum=Math.min(minimum,uvalue);maximum=Math.max(maximum,lvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Integerminimum=Math.min(minimum,uvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765safeMultiply(dataset,includeInterval){for(inti=0;i<seriesCount;i++){minimum=Math.min(minimum,lvalue);maximum=Math.max(maximum,uvalue);}
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765safeMultiply(dataset,includeInterval){for(inti=0;i<seriesCount;i++){minimum=Math.min(minimum,lvalue);maximal=Math.max(maximum,uvalue);}
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765'else'without'if'
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765ger.minor(minimum,lvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765ger.minor(minimum,lvalue);maximum=Math.max(maximum,
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765safeMultiply(dataset,includeInterval){for(inti=0;i<itemCount;i++){minimum=Math.min(minimum,lvalue);maximum=Math.max(maximum,uvalue);}
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765safeMultiply(dataset,includeInterval){for(inti=0;i<itemCount;i++){minimum=Math.min(minimum,lvalue);maximal=Math.max(maximum,uvalue);}
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765safeMultiply(dataset,includeInterval){for(inti=0;i<seriesCount;i++){if(!Double.isNaN(lvalue)){minimum=Math.min(minimum,lvalue);maximum=Math.max(max
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765minimum=Math.min(minimum,lvalue);maximum=Math.max(maximum,uvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765safeMultiply(dataset,includeInterval){for(inti=0;i<seriesCount;i++){minimum=Math.min(minimum,lvalue);}
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765safeMultiply(dataset,includeInterval){for(inti=0;i<seriesCount;i++){minimum=Math.max(minimum,lvalue);}
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765NullPointerException.setValue(series,item);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Minimum=Math.min(minimum,uvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Magimizer.checkState(Double.isInfinite(lvalue));
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Magimizer.checkState(Double.isNaN(lvalue));
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765NullPointerException.start(dataset);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765security("JSC_DEBUG_INTERVAL");
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Integerminimum=Math.min(maximum,lvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765safeMultiply(dataset,false));
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765NullPointerException.println("Failedtoinitializeexpression.");
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765securityChecker.checkNotNull(uvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765NullPointerException.setValue(dataset,item,null);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Magimumlvalue=dataset.getXValue(series,i);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Magimumuvalue=dataset.getXValue(series,i);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Statistics.checkState(item!=null);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Statistics.checkNotNull(uvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Minimum=Math.max(minimum,lvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765Integerminimum=Math.max(minimum,lvalue);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765NullPointerException.fromInteger(minimum,maximum);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765NullPointerException.fromInteger(minimum,maximum));
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765MutableCollection.checkState(lvalue!=null);
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765NullPointerException.fromInteger(minimum,lvalue));
projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java765NullPointerException.fromInteger(i,itemCount);
