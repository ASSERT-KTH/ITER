patch is same with buggy,756,replace,, lvalue  =  intervalXYData.getStartXValue(series,  item);  if(!includeInterval)  {  lvalue  =  intervalXYData.getStartXValue(series,  item);  }  ,lvalue = intervalXYData.getStartXValue(series, item); if(!includeInterval) { lvalue = intervalXYData.getStartXValue(series, item); }
patch is same with buggy,756,replace,, lvalue  =  intervalXYData.getStartXValue(series,  item);  if(!includeInterval)  {  lvalue  =  intervalXYData.getStartXValue(series,  item);  }  ,lvalue = intervalXYData.getStartXValue(series, item); if(!includeInterval) { lvalue = intervalXYData.getStartXValue(series, item); }
patch is same with buggy,780,replace,, throw  new  NullPointerException( "  --  1 ");  ,throw new NullPointerException(" -- 1 ");
patch is same with buggy,780,replace,, throw  new  NullPointerException( "  --  1 ");  ,throw new NullPointerException(" -- 1");
compilation error,756,replace,[CE] 'else' without 'if', lvalue  =  intervalXYData.getStartXValue(series,  item);  if(!includeInterval)  {  lvalue  =  intervalXYData.getEndXValue(series,  item);  }  ,if(!includeInterval) { lvalue = intervalXYData.getEndXValue(series, item); if(!includeInterval) { lvalue = intervalXYData.getStartXValue(series, item); }
patch is same with buggy,780,replace,, if(includeInterval)  {  throw  new  NullPointerException( "  -  1   ");  }  ,if(includeInterval) { throw new NullPointerException(" - 1 "); }
compilation error,780,replace,[CE] missing return statement, if(includeInterval)  {  throw  new  NullPointerException( "  -  1   ");  }  ,if(!includeInterval) { throw new NullPointerException(" - 1 "); }
patch is same with buggy,780,replace,, if(includeInterval)  {  throw  new  NullPointerException( "  -  1   ");  }  , 
patch is same with buggy,756,replace,, uvalue  =  intervalXYData.getStartXValue(series,  item);  if(!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  }  ,uvalue = intervalXYData.getStartXValue(series, item); if(!Double.isNaN(lvalue)) { minimum = Math.min(minimum, lvalue); }
patch is same with buggy,756,replace,, uvalue  =  intervalXYData.getStartXValue(series,  item);  if(!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  }  ,uvalue = intervalXYData.getStartXValue(series, item); if(!Double.isNaN(lvalue)) { minimum = Math.min(minimum, lvalue); }
patch is same with buggy,756,replace,, lvalue  =  intervalXYData.getStartXValue(series,  item);  if(!includeInterval)  {  lvalue  =  intervalXYData.getEndXValue(series,  item);  }  ,lvalue = intervalXYData.getStartXValue(series, item); if(!includeInterval) { lvalue = intervalXYData.getEndXValue(series, item); }
patch is same with buggy,756,replace,, lvalue  =  intervalXYData.getStartXValue(series,  item);  if(!includeInterval)  {  lvalue  =  intervalXYData.getEndXValue(series,  item);  }  ,lvalue = intervalXYData.getStartXValue(series, item); if(!includeInterval) { lvalue = intervalXYData.getEndXValue(series, item); }
compilation error,756,add,[CE] 'else' without 'if', ,if(!includeInterval) { lvalue = intervalXYData.getStartXValue(series, item); if(!includeInterval) { lvalue = intervalXYData.getEndXValue(series, item); }
compilation error,756,replace,[CE] 'else' without 'if', lvalue  =  intervalXYData.getStartXValue(series,  item);  if(!includeInterval)  {  lvalue  =  intervalXYData.getEndXValue(series,  item);  }  ,if(!includeInterval) { lvalue = intervalXYData.getEndXValue(series, item); if(!Double.isNaN(lvalue)) { minimum = Math.min(minimum, lvalue); }
compilation error,756,replace,[CE] class expected, lvalue  =  intervalXYData.getStartXValue(series,  item);  if(!includeInterval)  {  lvalue  =  intervalXYData.getEndXValue(series,  item);  }  ,if(!includeInterval) { lvalue = intervalXYData.getEndXValue(series, item); if(!double.isNaN(lvalue)) { minimum = Math.min(minimum, lvalue); }
compilation error,756,replace,[CE] class expected, lvalue  =  intervalXYData.getStartXValue(series,  item);  if(!includeInterval)  {  lvalue  =  intervalXYData.getStartXValue(series,  item);  }  ,if(!includeInterval) { lvalue = intervalXYData.getStartXValue(series, item); if(!double.isNaN(lvalue)) { lvalue = intervalXYData.getEndXValue(series, item); }
compilation error,756,add,[CE] class expected, ,if(!includeInterval) { lvalue = intervalXYData.getStartXValue(series, item); if(!double.isNaN(lvalue)) { minimum = Math.min(minimum, lvalue); }
compilation error,756,add,[CE] 'else' without 'if', ,if(!includeInterval) { lvalue = intervalXYData.getStartXValue(series, item); if(!includeInterval) { lvalue = intervalXYData.getStartXValue(series, item); }
compilation error,780,replace,[CE] incompatible types, throw  new  NullPointerException( "  --  1 ");  ,return new NullPointerException(" -- 1");
patch is same with buggy,760,replace,, if(uvalue  >  0.00)  {  ,if(uvalue > 0.00) {
compilation error,756,replace,[CE] 'else' without 'if', uvalue  =  intervalXYData.getStartXValue(series,  item);  if(!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  }  ,if(includeInterval) { uvalue = intervalXYData.getStartXValue(series, item); if(!Double.isNaN(lvalue)) { minimum = Math.min(minimum, lvalue); }
compilation error,756,replace,[CE] illegal start of expression, uvalue  =  intervalXYData.getStartXValue(series,  item);  if(!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  }  ,if(intervalXYData.isEndXValue(series, item)) { uvalue = intervalXYData.getStartXValue(series, item); if(!Double.isNaN(lvalue)) { minimum = Math.min(minimum,
compilation error,756,add,[CE] 'else' without 'if', ,if(includeInterval) { if(intervalXYData.getEndXValue(series, item)) { minimum = Math.max(minimum, lvalue); }
compilation error,756,add,[CE] 'else' without 'if', ,if(includeInterval) { if(!Double.isNaN(uvalue)) { minimum = Math.max(minimum, lvalue); }
compilation error,756,add,[CE] 'else' without 'if', ,if(includeInterval) { if(!Double.isNaN(uvalue)) { minimum = Math.min(minimum, lvalue); }
patch is same with buggy,756,replace,, lvalue  =  intervalXYData.getStartXValue(series,  item);  if(!includeInterval)  {  lvalue  =  intervalXYData.getEndXValue(series,  item);  }  ,lvalue = intervalXYData.getStartXValue(series, item); if(!includeInterval) { lvalue = intervalXYData.getEndXValue(series, item); }
compilation error,756,replace,[CE] not a statement, lvalue  =  intervalXYData.getStartXValue(series,  item);  if(!includeInterval)  {  lvalue  =  intervalXYData.getEndXValue(series,  item);  }  ,lvalue = intervalXYData.getStartXValue(series, item); if(!includeInterval) { lvalue = intervalXYData.getEndXValue(series, item); bodied
patch is same with buggy,780,replace,, throw  new  NullPointerException( "  --  1 ");  ,throw new NullPointerException(" -- 1 ");
compilation error,756,add,[CE] 'else' without 'if', ,if(item!= 0) { uvalue = intervalXYData.getXValue(series, item); if(!Double.isNaN(uvalue)) { minimum = Math.max(minimum, lvalue); }
compilation error,756,replace,[CE] 'else' without 'if', lvalue  =  intervalXYData.getStartXValue(series,  item);  if(!includeInterval)  {  lvalue  =  intervalXYData.getEndXValue(series,  item);  }  ,if(!includeInterval) { lvalue = intervalXYData.getEndXValue(series, item); if(!includeInterval) { lvalue = intervalXYData.getEndXValue(series, item); }
patch is same with buggy,780,replace,, if(includeInterval)  {  throw  new  NullPointerException( "  -  1   ");  }  ,if(includeInterval) { throw new NullPointerException(" - 1 "); }
patch is same with buggy,780,replace,, if(includeInterval)  {  throw  new  NullPointerException( "  -  1   ");  }  , 
patch is same with buggy,756,replace,, uvalue  =  intervalXYData.getStartXValue(series,  item);  if(!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  }  ,uvalue = intervalXYData.getStartXValue(series, item); if(!Double.isNaN(lvalue)) { minimum = Math.min(minimum, lvalue); }
compilation error,756,replace,[CE] not a statement, uvalue  =  intervalXYData.getStartXValue(series,  item);  if(!Double.isNaN(lvalue))  {  minimum  =  Math.min(minimum,  lvalue);  }  ,uvalue = intervalXYData.getStartXValue(series, item); if(!Double.isNaN(lvalue)) { minimum = Math.min(minimum, lvalue); Afterward
compilation error,756,replace,[CE] not a statement, lvalue  =  intervalXYData.getStartXValue(series,  item);  if(!includeInterval)  {  lvalue  =  intervalXYData.getStartXValue(series,  item);  }  ,lvalue = intervalXYData.getStartXValue(series, item); if(!includeInterval) { lvalue = intervalXYData.getStartXValue(series, item); Afterward
compilation error,756,replace,[CE] not a statement, lvalue  =  intervalXYData.getStartXValue(series,  item);  if(!includeInterval)  {  lvalue  =  intervalXYData.getStartXValue(series,  item);  }  ,lvalue = intervalXYData.getStartXValue(series, item); if(!includeInterval) { lvalue = intervalXYData.getStartXValue(series, item); bodega
