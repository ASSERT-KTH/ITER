bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.min(minimum,  maximum);  if(includeInterval)  {  minimum  =  new  Range(minimum,  maximum);  }  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]        [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.min(minimum,  maximum);  if(includeInterval)  {  minimum  =  new  Range(minimum,  maximum);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                minimum        =        Math.min(minimum,        maximum);        minimum    =    Math.min(minimum,    maximum);    if(includeInterval)  {  minimum  =  new  Range(minimum,  maximum);  }	  	non-compiled	[CE]  incompatible  types	21	None	add
2	[BUG]  [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.min(minimum,  maximum);  if(includeInterval)  {  minimum  =  Math.max(minimum,  includeInterval);  }  [CE]  no  suitable  method  found  for  max(double,boolean)  [FE]      AssertionFailedError    [CONTEXT]        [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.min(minimum,  maximum);  if(includeInterval)  {  minimum  =  Math.max(minimum,  includeInterval);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                minimum        =        Math.min(minimum,        maximum);        minimum    =    Math.min(minimum,    maximum);    if(includeInterval)  {  minimum  =  Math.max(minimum,  includeInterval);  }	  	non-compiled	[CE]  no  suitable  method  found  for  max(double,boolean)	21	None	add
3	[BUG]  [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.min(minimum,  maximum);  NullPointerException.printStackTrace();  [CE]  non-static  method  printStackTrace()  cannot  be  referenced  from  a  static  context  [FE]        AssertionFailedError    [CONTEXT]        [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.min(minimum,  maximum);  NullPointerException.printStackTrace();  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                minimum        =        Math.min(minimum,        maximum);        minimum    =    Math.min(minimum,    maximum);    NullPointerException.printStackTrace();	  	non-compiled	[CE]  non-static  method  printStackTrace()  cannot  be  referenced  from  a  static  context	21	None	add
4	[BUG]  [BUGGY]  Minimum  maximum  =  getMinimum();  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Minimum  maximum  =  getMinimum();  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	Minimum  maximum  =  getMinimum();	  Minimum    maximum    =    getMaximum()    -    1;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
5	[BUG]  [BUGGY]  if(maximum  ==  Double.POSITIVE_INFINITY  ||  minimum  ==  Double.POSITIVE_INFINITY)  {  NullPointerException.printStackTrace();  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(maximum  ==  Double.POSITIVE_INFINITY  ||  minimum  ==  Double.POSITIVE_INFINITY)  {  NullPointerException.printStackTrace();  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(maximum    ==    Double.POSITIVE_INFINITY    ||    minimum    ==    Double.POSITIVE_INFINITY)    {    NullPointerException.printStackTrace();	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
6	[BUG]  [BUGGY]  if(maximum  ==  Double.POSITIVE_INFINITY  ||  minimum  ==  Double.POSITIVE_INFINITY)  {  NullPointerException.setMaximum(minimum);  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(maximum  ==  Double.POSITIVE_INFINITY  ||  minimum  ==  Double.POSITIVE_INFINITY)  {  NullPointerException.setMaximum(minimum);  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(maximum    ==    Double.POSITIVE_INFINITY    ||    minimum    ==    Double.POSITIVE_INFINITY)    {    NullPointerException.setMaximum(minimum);	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
7	[BUG]  [BUGGY]  if(maximum  ==  Double.POSITIVE_INFINITY  ||  minimum  ==  Double.POSITIVE_INFINITY)  {  NullPointerException.this.minimum  =  minimum;  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(maximum  ==  Double.POSITIVE_INFINITY  ||  minimum  ==  Double.POSITIVE_INFINITY)  {  NullPointerException.this.minimum  =  minimum;  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(maximum    ==    Double.POSITIVE_INFINITY    ||    minimum    ==    Double.POSITIVE_INFINITY)    {    NullPointerException.this.minimum  =  minimum;	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
8	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));	  	compilable	  [FE]  NullPointerException  	3	2	add
9	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));	  	compilable	  [FE]  NullPointerException  	3	2	add
10	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.max(minimum,  maximum));  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.max(maximum,  Math.max(minimum,  maximum));	  	compilable	  [FE]  NullPointerException  	3	2	add
11	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.max(minimum,  maximum));  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.max(minimum,  maximum));  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.max(maximum,  Math.max(minimum,  maximum));	  	compilable	  [FE]  NullPointerException  	3	2	add
12	[BUG]  [BUGGY]  maximum  =  Math.min(minimum,  Math.max(maximum));  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  maximum  =  Math.min(minimum,  Math.max(maximum));  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	maximum  =  Math.min(minimum,  Math.max(maximum));	          maximum    =    Math.max(maximum,    maximum);    maximum    =    Math.min(maximum,    Math.max(maximum));    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
13	[BUG]  [BUGGY]  maximum  =  Math.min(maximum,  Math.max(maximum));  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  maximum  =  Math.min(maximum,  Math.max(maximum));  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	maximum  =  Math.min(maximum,  Math.max(maximum));	          maximum    =    Math.max(maximum,    maximum);    maximum    =    Math.min(maximum,    Math.max(maximum));    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
14	[BUG]  [BUGGY]  maximum  =  getMaximumInFINITY()  +  1;  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  maximum  =  getMaximumInFINITY()  +  1;  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	maximum  =  getMaximumInFINITY()  +  1;	  maximum    =    getMaximumInFINITY();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
15	[BUG]  [BUGGY]  maximum  =  getMaximumInFINITY()  -  1;  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  maximum  =  getMaximumInFINITY()  -  1;  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	maximum  =  getMaximumInFINITY()  -  1;	  maximum    =    getMaximumInFINITY();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
16	[BUG]  [BUGGY]  Parchet.checkState(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY);  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkState(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY);  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	Parchet.checkState(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY);	  if(maximum    ==    Double.POSITIVE_INFINITY)    {    if(minimum    ==    Double.POSITIVE_INFINITY    ||    maximum    ==    Double.POSITIVE_INFINITY)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
17	[BUG]  [BUGGY]  Parchet.checkState(minimum  ==  Double.POSITIVE_INFINITY);  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkState(minimum  ==  Double.POSITIVE_INFINITY);  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	Parchet.checkState(minimum  ==  Double.POSITIVE_INFINITY);	  if(maximum    ==    Double.POSITIVE_INFINITY)    {    if(minimum    ==    Double.POSITIVE_INFINITY    ||    maximum    ==    Double.POSITIVE_INFINITY)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
18	[BUG]  [BUGGY]  NullPointerException.this.minimum  =  null;  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  NullPointerException.this.minimum  =  null;  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	NullPointerException.this.minimum  =  null;	  if(minimum    ==    Double.POSITIVE_INFINITY    ||    maximum    ==    Double.POSITIVE_INFINITY)    {    NullPointerException.this.minimum    =    null;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
19	[BUG]  [BUGGY]  if(maximum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY)  {  NullPointerException.this.minimum  =  null;  }  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(maximum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY)  {  NullPointerException.this.minimum  =  null;  }  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(maximum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY)  {  NullPointerException.this.minimum  =  null;  }	  if(minimum    ==    Double.POSITIVE_INFINITY    ||    maximum    ==    Double.POSITIVE_INFINITY)    {    NullPointerException.this.minimum    =    null;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
20	[BUG]  [BUGGY]  minimum  =  Math.min(minimum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  minimum  =  Math.min(minimum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	minimum  =  Math.min(minimum,  Math.max(maximum,  Double.POSITIVE_INFINITY));	  minimum    =    Math.min(minimum,    Math.min(maximum,    Double.POSITIVE_INFINITY));    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
21	[BUG]  [BUGGY]  maximum  =  Math.max(maximum,  Math.min(minimum,  max));  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  maximum  =  Math.max(maximum,  Math.min(minimum,  max));  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	maximum  =  Math.max(maximum,  Math.min(minimum,  max));	          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum    =    Math.max(maximum,    Math.min(minimum,    max));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
22	[BUG]  [BUGGY]  Parchet.getInstance().setMaximum(maximum);  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  Parchet.getInstance().setMaximum(maximum);  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	Parchet.getInstance().setMaximum(maximum);	  if(maximum    ==    Double.POSITIVE_INFINITY)    {    if(minimum    ==    Double.POSITIVE_INFINITY)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
23	[BUG]  [BUGGY]  Parchet.getInstance().setMaximum(minimum);  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  Parchet.getInstance().setMaximum(minimum);  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	Parchet.getInstance().setMaximum(minimum);	  if(maximum    ==    Double.POSITIVE_INFINITY)    {    if(minimum    ==    Double.POSITIVE_INFINITY)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
24	[BUG]  [BUGGY]  this.minimum  =  new  Range(minimum,  maximum);  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  this.minimum  =  new  Range(minimum,  maximum);  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	this.minimum  =  new  Range(minimum,  maximum);	  if(minimum    ==    Double.POSITIVE_INFINITY    ||    maximum    ==    Double.POSITIVE_INFINITY)    {    if(minimum    ==    Double.POSITIVE_INFINITY    ||    maximum    ==    Double.POSITIVE_INFINITY)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
25	[BUG]  [BUGGY]  this.minimum  =  Math.max(minimum,  maximum);  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  this.minimum  =  Math.max(minimum,  maximum);  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	this.minimum  =  Math.max(minimum,  maximum);	  if(minimum    ==    Double.POSITIVE_INFINITY    ||    maximum    ==    Double.POSITIVE_INFINITY)    {    if(minimum    ==    Double.POSITIVE_INFINITY    ||    maximum    ==    Double.POSITIVE_INFINITY)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
26	[BUG]  [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.max(minimum,  maximum);  Minimum  minimum  =  Math.min(minimum,  maximum);  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.max(minimum,  maximum);  Minimum  minimum  =  Math.min(minimum,  maximum);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                minimum        =        Math.min(minimum,        maximum);        minimum    =    Math.max(minimum,    maximum);    Minimum  minimum  =  Math.min(minimum,  maximum);	  	non-compiled	[CE]  cannot  find  symbol	74	None	add
27	[BUG]  [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.max(minimum,  maximum);  Minimum  minimum  =  Math.max(minimum,  Double.POSITIVE_INFINITY);  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.max(minimum,  maximum);  Minimum  minimum  =  Math.max(minimum,  Double.POSITIVE_INFINITY);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                minimum        =        Math.min(minimum,        maximum);        minimum    =    Math.max(minimum,    maximum);    Minimum  minimum  =  Math.max(minimum,  Double.POSITIVE_INFINITY);	  	non-compiled	[CE]  cannot  find  symbol	74	None	add
28	[BUG]  [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.max(minimum,  maximum);  Minimum  minimum  =  Math.max(minimum,  maximum);  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]        [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.max(minimum,  maximum);  Minimum  minimum  =  Math.max(minimum,  maximum);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                minimum        =        Math.min(minimum,        maximum);        minimum    =    Math.max(minimum,    maximum);    Minimum  minimum  =  Math.max(minimum,  maximum);	  	non-compiled	[CE]  cannot  find  symbol	74	None	add
29	[BUG]  [BUGGY]  if(maximum!=  null)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.max(minimum,  maximum);  }  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(maximum!=  null)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.max(minimum,  maximum);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(maximum!=  null)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.max(minimum,  maximum);  }	          minimum    =    Math.max(minimum,    maximum);    minimum    =    Math.max(minimum,    maximum);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
30	[BUG]  [BUGGY]  if(maximum!=  null)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.max(minimum,  maximum);  }  else  {  return  new  Range(minimum,  maximum);  }  [CE]  illegal  start  of  type  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(maximum!=  null)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.max(minimum,  maximum);  }  else  {  return  new  Range(minimum,  maximum);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(maximum!=  null)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.max(minimum,  maximum);  }  else  {  return  new  Range(minimum,  maximum);  }	          minimum    =    Math.max(minimum,    maximum);    minimum    =    Math.max(minimum,    maximum);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
31	[BUG]  [BUGGY]  NullPointerException.setMinimum(maximum);  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  NullPointerException.setMinimum(maximum);  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	NullPointerException.setMinimum(maximum);	  if(minimum    ==    Double.POSITIVE_INFINITY    ||    maximum    ==    Double.POSITIVE_INFINITY)    {    NullPointerException.setMinimum(maximum);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
32	[BUG]  [BUGGY]  if(maximum  ==  Double.POSITIVE_INFINITY  ||  minimum  ==  Double.POSITIVE_INFINITY)  {  NullPointerException.setMinimum(maximum);  }  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(maximum  ==  Double.POSITIVE_INFINITY  ||  minimum  ==  Double.POSITIVE_INFINITY)  {  NullPointerException.setMinimum(maximum);  }  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(maximum  ==  Double.POSITIVE_INFINITY  ||  minimum  ==  Double.POSITIVE_INFINITY)  {  NullPointerException.setMinimum(maximum);  }	  if(minimum    ==    Double.POSITIVE_INFINITY    ||    maximum    ==    Double.POSITIVE_INFINITY)    {    NullPointerException.setMinimum(maximum);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
33	[BUG]  [BUGGY]  Minimum  maximum  =  getMaximumInFINITY()  -  1;  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Minimum  maximum  =  getMaximumInFINITY()  -  1;  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	Minimum  maximum  =  getMaximumInFINITY()  -  1;	  Minimum    maximum    =    getMaximumInFINITY();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
34	[BUG]  [BUGGY]  maximum  =  getMaximumMinimum()  -  1;  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  maximum  =  getMaximumMinimum()  -  1;  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	maximum  =  getMaximumMinimum()  -  1;	  maximum    =    getMaximumMinimum();    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
35	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(minimum,  maximum);  maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(minimum,    maximum);    maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));	  	compilable	  [FE]  NullPointerException  	44	6	add
36	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(minimum,  maximum);  maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(minimum,  maximum);  maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(minimum,    maximum);    maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));	  	compilable	  [FE]  NullPointerException  	44	6	add
37	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(minimum,  maximum);  maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(minimum,    maximum);    maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));	  	compilable	  [FE]  AssertionFailedError  	44	7	add
38	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(minimum,  maximum);  maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(minimum,  maximum);  maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(minimum,    maximum);    maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));	  	compilable	  [FE]  AssertionFailedError  	44	7	add
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(minimum,  maximum);  maximum  =  Math.max(maximum,  Math.max(minimum,  maximum));  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(minimum,    maximum);    maximum  =  Math.max(maximum,  Math.max(minimum,  maximum));	  	compilable	  [FE]  AssertionFailedError  	44	6	add
40	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(minimum,  maximum);  maximum  =  Math.max(maximum,  Math.max(minimum,  maximum));  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(minimum,  maximum);  maximum  =  Math.max(maximum,  Math.max(minimum,  maximum));  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(minimum,    maximum);    maximum  =  Math.max(maximum,  Math.max(minimum,  maximum));	  	compilable	  [FE]  AssertionFailedError  	44	6	add
41	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(maximum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	if(maximum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY)  {	  if(minimum    ==    Double.POSITIVE_INFINITY    ||    maximum    ==    Double.POSITIVE_INFINITY)    {    if(minimum    ==    Double.POSITIVE_INFINITY    ||    maximum    ==    Double.POSITIVE_INFINITY)    {    	compilable	  [FE]  NullPointerException  	77	5	replace
42	[BUG]  [BUGGY]  if(maximum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY)  {  [FE]  NullPointerException  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(maximum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(maximum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY)  {	  if(minimum    ==    Double.POSITIVE_INFINITY    ||    maximum    ==    Double.POSITIVE_INFINITY)    {    if(minimum    ==    Double.POSITIVE_INFINITY    ||    maximum    ==    Double.POSITIVE_INFINITY)    {    	compilable	  [FE]  NullPointerException  	77	5	replace
43	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.max(maximum,    Double.POSITIVE_INFINITY);    maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);	  	compilable	  [FE]  NullPointerException  	12	7	add
44	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.max(maximum,    Double.POSITIVE_INFINITY);    maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);	  	compilable	  [FE]  NullPointerException  	12	7	add
45	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.max(maximum,    Double.POSITIVE_INFINITY);    maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);	  	compilable	  [FE]  AssertionFailedError  	12	7	add
46	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  [FE]  AssertionFailedError  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.max(maximum,    Double.POSITIVE_INFINITY);    maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);	  	compilable	  [FE]  AssertionFailedError  	12	7	add
47	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  NullPointerException.printStackTrace();  [CE]  non-static  method  printStackTrace()  cannot  be  referenced  from  a  static  context  [FE]        NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  NullPointerException.printStackTrace();  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.max(maximum,    Double.POSITIVE_INFINITY);    NullPointerException.printStackTrace();	  	non-compiled	[CE]  non-static  method  printStackTrace()  cannot  be  referenced  from  a  static  context	12	None	add
48	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.max(maximum,    Math.max(maximum,    Double.POSITIVE_INFINITY));    if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }	  	compilable	  [FE]  AssertionFailedError  	14	7	add
49	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.max(maximum,    Math.max(maximum,    Double.POSITIVE_INFINITY));    if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }	  	compilable	  [FE]  AssertionFailedError  	14	7	add
50	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }  else  {  return  new  Range(minimum,  maximum);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.max(maximum,    Math.max(maximum,    Double.POSITIVE_INFINITY));    if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }  else  {  return  new  Range(minimum,  maximum);  }	  	compilable	  [FE]  AssertionFailedError  	14	7	add
51	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }  else  {  return  new  Range(minimum,  maximum);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }  else  {  return  new  Range(minimum,  maximum);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.max(maximum,    Math.max(maximum,    Double.POSITIVE_INFINITY));    if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }  else  {  return  new  Range(minimum,  maximum);  }	  	compilable	  [FE]  AssertionFailedError  	14	7	add
52	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        AssertionFailedError    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  maximum  =  Math.max(minimum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.max(maximum,    Math.max(maximum,    Double.POSITIVE_INFINITY));    if(includeInterval)  {  maximum  =  Math.max(minimum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }	  	compilable	  [FE]  NullPointerException  	14	7	add
53	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  maximum  =  Math.max(minimum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }  [FE]  NullPointerException  [FE]        AssertionFailedError    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  maximum  =  Math.max(minimum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.max(maximum,    Math.max(maximum,    Double.POSITIVE_INFINITY));    if(includeInterval)  {  maximum  =  Math.max(minimum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }	  	compilable	  [FE]  NullPointerException  	14	7	add
54	[BUG]  [BUGGY]  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.min(minimum,  Double.POSITIVE_INFINITY));  maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.min(minimum,  Double.POSITIVE_INFINITY));  maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.min(minimum,  Double.POSITIVE_INFINITY));  maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }	          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum    =    Math.min(maximum,    Math.max(maximum,    Double.POSITIVE_INFINITY));    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
55	[BUG]  [BUGGY]  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(minimum,  Double.POSITIVE_INFINITY));  maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }  [CE]  illegal  start  of  type  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(minimum,  Double.POSITIVE_INFINITY));  maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(minimum,  Double.POSITIVE_INFINITY));  maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }	          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum    =    Math.min(maximum,    Math.max(maximum,    Double.POSITIVE_INFINITY));    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
56	[BUG]  [BUGGY]  Minimum  maximum  =  getMaximumMinimum()  -  1;  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Minimum  maximum  =  getMaximumMinimum()  -  1;  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	Minimum  maximum  =  getMaximumMinimum()  -  1;	  Minimum    maximum    =    getMaximumMinimum();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
57	[BUG]  [BUGGY]  minimum  =  Math.min(minimum,  this.maximum  -  1);  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  minimum  =  Math.min(minimum,  this.maximum  -  1);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	minimum  =  Math.min(minimum,  this.maximum  -  1);	  minimum    =    Math.min(minimum,    this.maximum);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
58	[BUG]  [BUGGY]  NullPointerException.printStackTrace();  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  NullPointerException.printStackTrace();  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	NullPointerException.printStackTrace();	          maximum    =    Math.max(maximum,    maximum);    maximum    =    Math.min(maximum,    Math.max(maximum,    maximum));    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
59	[BUG]  [BUGGY]  if(maximum  ==  null)  {  minimum  =  Math.min(minimum,  maximum);  }  else  {  minimum  =  Math.max(minimum,  maximum);  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]        [BUGGY]  if(maximum  ==  null)  {  minimum  =  Math.min(minimum,  maximum);  }  else  {  minimum  =  Math.max(minimum,  maximum);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(maximum  ==  null)  {  minimum  =  Math.min(minimum,  maximum);  }  else  {  minimum  =  Math.max(minimum,  maximum);  }	          minimum    =    Math.min(minimum,    maximum);    minimum    =    Math.min(minimum,    maximum);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
60	[BUG]  [BUGGY]  if(maximum  ==  null)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.min(minimum,  maximum);  }  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]        [BUGGY]  if(maximum  ==  null)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.min(minimum,  maximum);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(maximum  ==  null)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.min(minimum,  maximum);  }	          minimum    =    Math.min(minimum,    maximum);    minimum    =    Math.min(minimum,    maximum);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
61	[BUG]  [BUGGY]  minimum  =  Math.max(minimum,  maximum,  Double.POSITIVE_INFINITY);  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  minimum  =  Math.max(minimum,  maximum,  Double.POSITIVE_INFINITY);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	minimum  =  Math.max(minimum,  maximum,  Double.POSITIVE_INFINITY);	          minimum    =    Math.max(minimum,    maximum);    NullPointerException.printStackTrace();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
62	[BUG]  [BUGGY]  minimum  =  Math.max(minimum,  maximum  -  1);  NullPointerException.printStackTrace();  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  minimum  =  Math.max(minimum,  maximum  -  1);  NullPointerException.printStackTrace();  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	minimum  =  Math.max(minimum,  maximum  -  1);  NullPointerException.printStackTrace();	          minimum    =    Math.max(minimum,    maximum);    NullPointerException.printStackTrace();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
63	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          minimum    =    Math.max(minimum,    maximum);    minimum  =  Math.max(minimum,  maximum);  if(includeInterval)  {  minimum  =  Math.max(minimum,  maximum);  minimum  =  Math.min(minimum,  maximum);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                minimum        =        Math.max(minimum,        maximum);        minimum    =    Math.max(minimum,    maximum);    if(includeInterval)  {  minimum  =  Math.max(minimum,  maximum);  minimum  =  Math.min(minimum,  maximum);  }	  	compilable	  [FE]  AssertionFailedError  	39	7	add
64	[BUG]  [BUGGY]          minimum    =    Math.max(minimum,    maximum);    minimum  =  Math.max(minimum,  maximum);  if(includeInterval)  {  minimum  =  Math.max(minimum,  maximum);  minimum  =  Math.min(minimum,  maximum);  }  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          minimum    =    Math.max(minimum,    maximum);    minimum  =  Math.max(minimum,  maximum);  if(includeInterval)  {  minimum  =  Math.max(minimum,  maximum);  minimum  =  Math.min(minimum,  maximum);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                minimum        =        Math.max(minimum,        maximum);        minimum    =    Math.max(minimum,    maximum);    if(includeInterval)  {  minimum  =  Math.max(minimum,  maximum);  minimum  =  Math.min(minimum,  maximum);  }	  	compilable	  [FE]  AssertionFailedError  	39	7	add
65	[BUG]  [BUGGY]          minimum    =    Math.max(minimum,    maximum);    minimum  =  Math.max(minimum,  maximum);  if(includeInterval)  {  minimum  =  Math.min(minimum,  false);  minimum  =  Math.max(minimum,  false);  }  [CE]  no  suitable  method  found  for  min(double,boolean)  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          minimum    =    Math.max(minimum,    maximum);    minimum  =  Math.max(minimum,  maximum);  if(includeInterval)  {  minimum  =  Math.min(minimum,  false);  minimum  =  Math.max(minimum,  false);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                minimum        =        Math.max(minimum,        maximum);        minimum    =    Math.max(minimum,    maximum);    if(includeInterval)  {  minimum  =  Math.min(minimum,  false);  minimum  =  Math.max(minimum,  false);  }	  	non-compiled	[CE]  no  suitable  method  found  for  min(double,boolean)	39	None	add
66	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        NullPointerException    [CONTEXT]        [BUGGY]          minimum    =    Math.max(minimum,    maximum);    minimum  =  Math.max(minimum,  maximum);  if(includeInterval)  {  minimum  =  Math.max(minimum,  maximum);  minimum  =  Math.max(minimum,  maximum);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                minimum        =        Math.max(minimum,        maximum);        minimum    =    Math.max(minimum,    maximum);    if(includeInterval)  {  minimum  =  Math.max(minimum,  maximum);  minimum  =  Math.max(minimum,  maximum);  }	  	compilable	  [FE]  AssertionFailedError  	39	6	add
67	[BUG]  [BUGGY]          minimum    =    Math.max(minimum,    maximum);    minimum  =  Math.max(minimum,  maximum);  if(includeInterval)  {  minimum  =  Math.max(minimum,  maximum);  minimum  =  Math.max(minimum,  maximum);  }  [FE]  AssertionFailedError  [FE]        NullPointerException    [CONTEXT]        [BUGGY]          minimum    =    Math.max(minimum,    maximum);    minimum  =  Math.max(minimum,  maximum);  if(includeInterval)  {  minimum  =  Math.max(minimum,  maximum);  minimum  =  Math.max(minimum,  maximum);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                minimum        =        Math.max(minimum,        maximum);        minimum    =    Math.max(minimum,    maximum);    if(includeInterval)  {  minimum  =  Math.max(minimum,  maximum);  minimum  =  Math.max(minimum,  maximum);  }	  	compilable	  [FE]  AssertionFailedError  	39	6	add
68	[BUG]  [BUGGY]  maximum  =  Double.POSITIVE_INFINITY;  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  maximum  =  Double.POSITIVE_INFINITY;  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	maximum  =  Double.POSITIVE_INFINITY;	  if(maximum    ==    Double.POSITIVE_INFINITY)    {    if(minimum    ==    Double.POSITIVE_INFINITY)    {    maximum    =    Double.POSITIVE_INFINITY;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
69	[BUG]  [BUGGY]  nisipToFront(maximum);  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  nisipToFront(maximum);  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	nisipToFront(maximum);	  if(maximum    ==    Double.POSITIVE_INFINITY)    {    if(minimum    ==    Double.POSITIVE_INFINITY)    {    maximum    =    Double.POSITIVE_INFINITY;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
70	[BUG]  [BUGGY]  NullPointerException.setMinimum(minimum);  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  NullPointerException.setMinimum(minimum);  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	NullPointerException.setMinimum(minimum);	  if(maximum    ==    Double.POSITIVE_INFINITY)    {    NullPointerException.setMinimum(minimum);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
71	[BUG]  [BUGGY]  Maximum  minimum  =  getMinimum();  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Maximum  minimum  =  getMinimum();  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	Maximum  minimum  =  getMinimum();  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);	  Minimum    minimum    =    getMinimum();    maximum    =    Math.max(maximum,    Double.POSITIVE_INFINITY);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
72	[BUG]  [BUGGY]  minimum  =  getMinimum();  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  minimum  =  getMinimum();  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	minimum  =  getMinimum();  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);	  Minimum    minimum    =    getMinimum();    maximum    =    Math.max(maximum,    maximum);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
73	[BUG]  [BUGGY]          minimum    =    Math.max(minimum,    maximum);    minimum  =  Math.min(minimum,  maximum);  Minimum  minimum  =  Math.min(minimum,  maximum);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]        [BUGGY]          minimum    =    Math.max(minimum,    maximum);    minimum  =  Math.min(minimum,  maximum);  Minimum  minimum  =  Math.min(minimum,  maximum);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                minimum        =        Math.max(minimum,        maximum);        minimum    =    Math.min(minimum,    maximum);    Minimum  minimum  =  Math.min(minimum,  maximum);	  	non-compiled	[CE]  cannot  find  symbol	37	None	add
74	[BUG]  [BUGGY]          minimum    =    Math.max(minimum,    maximum);    minimum  =  Math.min(minimum,  maximum);  NullPointerException.printStackTrace();  [CE]  non-static  method  printStackTrace()  cannot  be  referenced  from  a  static  context  [FE]      AssertionFailedError    [CONTEXT]        [BUGGY]          minimum    =    Math.max(minimum,    maximum);    minimum  =  Math.min(minimum,  maximum);  NullPointerException.printStackTrace();  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                minimum        =        Math.max(minimum,        maximum);        minimum    =    Math.min(minimum,    maximum);    NullPointerException.printStackTrace();	  	non-compiled	[CE]  non-static  method  printStackTrace()  cannot  be  referenced  from  a  static  context	37	None	add
75	[BUG]  [BUGGY]          minimum    =    Math.max(minimum,    maximum);    minimum  =  Math.min(minimum,  maximum);  Minimum  minimum  =  Math.min(minimum,  max);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]        [BUGGY]          minimum    =    Math.max(minimum,    maximum);    minimum  =  Math.min(minimum,  maximum);  Minimum  minimum  =  Math.min(minimum,  max);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                minimum        =        Math.max(minimum,        maximum);        minimum    =    Math.min(minimum,    maximum);    Minimum  minimum  =  Math.min(minimum,  max);	  	non-compiled	[CE]  cannot  find  symbol	37	None	add
76	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Math.max(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(maximum,    Math.max(minimum,    maximum));    maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));	  	compilable	  [FE]  NullPointerException  	7	7	add
77	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Math.max(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Math.max(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(maximum,    Math.max(minimum,    maximum));    maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));	  	compilable	  [FE]  NullPointerException  	7	7	add
78	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Math.max(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.max(minimum,  maximum));  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(maximum,    Math.max(minimum,    maximum));    maximum  =  Math.max(maximum,  Math.max(minimum,  maximum));	  	compilable	  [FE]  NullPointerException  	7	2	add
79	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Math.max(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.max(minimum,  maximum));  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Math.max(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.max(minimum,  maximum));  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(maximum,    Math.max(minimum,    maximum));    maximum  =  Math.max(maximum,  Math.max(minimum,  maximum));	  	compilable	  [FE]  NullPointerException  	7	2	add
80	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(maximum,    Math.max(maximum,    Double.POSITIVE_INFINITY));    maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));	  	compilable	  [FE]  NullPointerException  	5	7	add
81	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(maximum,    Math.max(maximum,    Double.POSITIVE_INFINITY));    maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));	  	compilable	  [FE]  NullPointerException  	5	7	add
82	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  maximum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(maximum,    Math.max(maximum,    Double.POSITIVE_INFINITY));    if(includeInterval)  {  maximum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  }	  	compilable	  [FE]  NullPointerException  	5	2	add
83	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  maximum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  }  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  maximum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(maximum,    Math.max(maximum,    Double.POSITIVE_INFINITY));    if(includeInterval)  {  maximum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  }	  	compilable	  [FE]  NullPointerException  	5	2	add
84	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.min(minimum,  Double.POSITIVE_INFINITY));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(maximum,    Math.max(maximum,    Double.POSITIVE_INFINITY));    if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.min(minimum,  Double.POSITIVE_INFINITY));  }	  	compilable	  [FE]  NullPointerException  	5	2	add
85	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.min(minimum,  Double.POSITIVE_INFINITY));  }  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.min(minimum,  Double.POSITIVE_INFINITY));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(maximum,    Math.max(maximum,    Double.POSITIVE_INFINITY));    if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.min(minimum,  Double.POSITIVE_INFINITY));  }	  	compilable	  [FE]  NullPointerException  	5	2	add
86	[BUG]  [BUGGY]  maximum  =  Math.max(maximum,  minimum);  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  maximum  =  Math.max(maximum,  minimum);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	maximum  =  Math.max(maximum,  minimum);	          maximum    =    Math.max(maximum,    maximum);    NullPointerException.printStackTrace();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
87	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  maximum  =  Math.min(minimum,  Double.POSITIVE_INFINITY);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.min(maximum,    Double.POSITIVE_INFINITY);    maximum  =  Math.min(minimum,  Double.POSITIVE_INFINITY);	  	compilable	  [FE]  AssertionFailedError  	56	6	add
88	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  maximum  =  Math.min(minimum,  Double.POSITIVE_INFINITY);  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  maximum  =  Math.min(minimum,  Double.POSITIVE_INFINITY);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.min(maximum,    Double.POSITIVE_INFINITY);    maximum  =  Math.min(minimum,  Double.POSITIVE_INFINITY);	  	compilable	  [FE]  AssertionFailedError  	56	6	add
89	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  maximum  =  Math.min(minimum,  Double.POSITIVE_INFINITY);  maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.min(maximum,    Double.POSITIVE_INFINITY);    maximum  =  Math.min(minimum,  Double.POSITIVE_INFINITY);  maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);	  	compilable	  [FE]  NullPointerException  	56	6	add
90	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  maximum  =  Math.min(minimum,  Double.POSITIVE_INFINITY);  maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  maximum  =  Math.min(minimum,  Double.POSITIVE_INFINITY);  maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.min(maximum,    Double.POSITIVE_INFINITY);    maximum  =  Math.min(minimum,  Double.POSITIVE_INFINITY);  maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);	  	compilable	  [FE]  NullPointerException  	56	6	add
91	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  NullPointerException.printStackTrace();  [CE]  non-static  method  printStackTrace()  cannot  be  referenced  from  a  static  context  [FE]        NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  NullPointerException.printStackTrace();  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.min(maximum,    Double.POSITIVE_INFINITY);    NullPointerException.printStackTrace();	  	non-compiled	[CE]  non-static  method  printStackTrace()  cannot  be  referenced  from  a  static  context	56	None	add
92	[BUG]  [BUGGY]  maximum  =  Math.max(maximum,  Math.max(0,  Math.max(minimum,  maximum)));  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]        [BUGGY]  maximum  =  Math.max(maximum,  Math.max(0,  Math.max(minimum,  maximum)));  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	maximum  =  Math.max(maximum,  Math.max(0,  Math.max(minimum,  maximum)));	          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum    =    Math.min(minimum,    maximum);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
93	[BUG]  [BUGGY]  Maximum  minimum  =  getMaximum();  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Maximum  minimum  =  getMaximum();  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	Maximum  minimum  =  getMaximum();  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);	  Minimum    minimum    =    getMaximum();    maximum    =    Math.max(maximum,    Double.POSITIVE_INFINITY);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
94	[BUG]  [BUGGY]  NullPointerException.setMaximum(maximum);  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  NullPointerException.setMaximum(maximum);  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	NullPointerException.setMaximum(maximum);	  if(maximum    ==    Double.POSITIVE_INFINITY)    {    NullPointerException.setMaximum(maximum);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
95	[BUG]  [BUGGY]  NullPointerException.setMaximum(minimum);  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  NullPointerException.setMaximum(minimum);  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	NullPointerException.setMaximum(minimum);	  if(maximum    ==    Double.POSITIVE_INFINITY)    {    NullPointerException.setMaximum(maximum);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
96	[BUG]  [BUGGY]  AssertionFailedError.this.reportUnsupportedOperation();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]        [BUGGY]  AssertionFailedError.this.reportUnsupportedOperation();  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	AssertionFailedError.this.reportUnsupportedOperation();	          maximum    =    Math.max(maximum,    maximum);    maximum    =    Math.max(maximum,    Math.max(maximum,    Double.POSITIVE_INFINITY));    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
97	[BUG]  [BUGGY]  AssertionFailedError.this.reportUnexpectedException( " ");  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]        [BUGGY]  AssertionFailedError.this.reportUnexpectedException( " ");  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	AssertionFailedError.this.reportUnexpectedException( " ");	          maximum    =    Math.max(maximum,    maximum);    maximum    =    Math.max(maximum,    Math.max(maximum,    Double.POSITIVE_INFINITY));    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
98	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.min(minimum,  maximum);  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.min(minimum,    maximum);    maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);	  	compilable	  [FE]  AssertionFailedError  	61	7	add
99	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.min(minimum,  maximum);  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.min(minimum,  maximum);  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.min(minimum,    maximum);    maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);	  	compilable	  [FE]  AssertionFailedError  	61	7	add
100	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.min(minimum,  maximum);  maximum  =  Math.max(maximum,  maximum);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.min(minimum,    maximum);    maximum  =  Math.max(maximum,  maximum);	  	compilable	  [FE]  NullPointerException  	61	6	add
101	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.min(minimum,  maximum);  maximum  =  Math.max(maximum,  maximum);  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.min(minimum,  maximum);  maximum  =  Math.max(maximum,  maximum);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.min(minimum,    maximum);    maximum  =  Math.max(maximum,  maximum);	  	compilable	  [FE]  NullPointerException  	61	6	add
102	[BUG]  [BUGGY]  maximum  =  Math.max(maximum,  Math.max(minimum,  0.0));  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  maximum  =  Math.max(maximum,  Math.max(minimum,  0.0));  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	maximum  =  Math.max(maximum,  Math.max(minimum,  0.0));	          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum    =    Math.min(maximum,    Math.max(minimum,    maximum));    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
103	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.min(maximum,  Math.max(maximum,  maximum));  maximum  =  Math.min(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.min(maximum,    Math.max(maximum,    maximum));    maximum  =  Math.min(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));	  	compilable	  [FE]  NullPointerException  	16	2	add
104	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.min(maximum,  Math.max(maximum,  maximum));  maximum  =  Math.min(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.min(maximum,  Math.max(maximum,  maximum));  maximum  =  Math.min(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.min(maximum,    Math.max(maximum,    maximum));    maximum  =  Math.min(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));	  	compilable	  [FE]  NullPointerException  	16	2	add
105	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.min(maximum,  Math.max(maximum,  maximum));  maximum  =  Math.min(minimum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.min(maximum,    Math.max(maximum,    maximum));    maximum  =  Math.min(minimum,  Math.max(maximum,  Double.POSITIVE_INFINITY));	  	compilable	  [FE]  AssertionFailedError  	16	6	add
106	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.min(maximum,  Math.max(maximum,  maximum));  maximum  =  Math.min(minimum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  [FE]  AssertionFailedError  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.min(maximum,  Math.max(maximum,  maximum));  maximum  =  Math.min(minimum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.min(maximum,    Math.max(maximum,    maximum));    maximum  =  Math.min(minimum,  Math.max(maximum,  Double.POSITIVE_INFINITY));	  	compilable	  [FE]  AssertionFailedError  	16	6	add
107	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.min(maximum,  Math.max(maximum,  maximum));  if(includeInterval)  {  maximum  =  Math.min(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.min(maximum,    Math.max(maximum,    maximum));    if(includeInterval)  {  maximum  =  Math.min(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }	  	compilable	  [FE]  NullPointerException  	16	2	add
108	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.min(maximum,  Math.max(maximum,  maximum));  if(includeInterval)  {  maximum  =  Math.min(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.min(maximum,  Math.max(maximum,  maximum));  if(includeInterval)  {  maximum  =  Math.min(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.min(maximum,    Math.max(maximum,    maximum));    if(includeInterval)  {  maximum  =  Math.min(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }	  	compilable	  [FE]  NullPointerException  	16	2	add
109	[BUG]  [BUGGY]  if(includeInterval)  {  minimum  =  Math.min(minimum,  false);  minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  }  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(includeInterval)  {  minimum  =  Math.min(minimum,  false);  minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(includeInterval)  {  minimum  =  Math.min(minimum,  false);  minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  }	          minimum    =    Math.min(minimum,    maximum);    minimum    =    Math.max(minimum,    Math.min(maximum,    Double.POSITIVE_INFINITY));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
110	[BUG]  [BUGGY]  if(includeInterval)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  }  [CE]  illegal  start  of  type  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(includeInterval)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(includeInterval)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  }	          minimum    =    Math.min(minimum,    maximum);    minimum    =    Math.max(minimum,    Math.min(maximum,    Double.POSITIVE_INFINITY));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
111	[BUG]  [BUGGY]  if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum!=  Double.POSITIVE_INFINITY)  {  NullPointerException.printStackTrace();  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum!=  Double.POSITIVE_INFINITY)  {  NullPointerException.printStackTrace();  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(minimum    ==    Double.POSITIVE_INFINITY    ||    maximum!=    Double.POSITIVE_INFINITY)    {    NullPointerException.printStackTrace();	  	non-compiled	[CE]  illegal  start  of  expression	80	None	add
112	[BUG]  [BUGGY]  if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum!=  Double.POSITIVE_INFINITY)  {  NullPointerException.this.minimum  =  null;  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum!=  Double.POSITIVE_INFINITY)  {  NullPointerException.this.minimum  =  null;  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(minimum    ==    Double.POSITIVE_INFINITY    ||    maximum!=    Double.POSITIVE_INFINITY)    {    NullPointerException.this.minimum  =  null;	  	non-compiled	[CE]  illegal  start  of  expression	80	None	add
113	[BUG]  [BUGGY]  if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum!=  Double.POSITIVE_INFINITY)  {  NullPointerException.this.minimum  =  minimum;  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum!=  Double.POSITIVE_INFINITY)  {  NullPointerException.this.minimum  =  minimum;  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(minimum    ==    Double.POSITIVE_INFINITY    ||    maximum!=    Double.POSITIVE_INFINITY)    {    NullPointerException.this.minimum  =  minimum;	  	non-compiled	[CE]  illegal  start  of  expression	80	None	add
114	[BUG]  [BUGGY]  minimum  =  Math.min(minimum,  double.POSITIVE_INFINITY);  [CE]  class  expected  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  minimum  =  Math.min(minimum,  double.POSITIVE_INFINITY);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	minimum  =  Math.min(minimum,  double.POSITIVE_INFINITY);	          minimum    =    Math.min(minimum,    maximum);    minimum    =    Math.min(minimum,    max);    	non-compiled	[CE]  class  expected	76	None	replace
115	[BUG]  [BUGGY]  maximum  =  Math.max(maximum,  this.maximum  -  1);  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  maximum  =  Math.max(maximum,  this.maximum  -  1);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	maximum  =  Math.max(maximum,  this.maximum  -  1);	  maximum    =    Math.max(maximum,    this.maximum);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
116	[BUG]  [BUGGY]  maximum  =  Math.max(maximum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  maximum  =  Math.max(maximum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	maximum  =  Math.max(maximum,  Math.min(maximum,  Double.POSITIVE_INFINITY));	  maximum    =    Math.max(maximum,    Math.max(maximum,    Double.POSITIVE_INFINITY));    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
117	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(maximum,    Double.POSITIVE_INFINITY);    maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);	  	compilable	  [FE]  NullPointerException  	42	7	add
118	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(maximum,    Double.POSITIVE_INFINITY);    maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);	  	compilable	  [FE]  NullPointerException  	42	7	add
119	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(minimum,  Double.POSITIVE_INFINITY));  maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(maximum,    Double.POSITIVE_INFINITY);    if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(minimum,  Double.POSITIVE_INFINITY));  maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  }	  	compilable	  [FE]  AssertionFailedError  	42	7	add
120	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(minimum,  Double.POSITIVE_INFINITY));  maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  }  [FE]  AssertionFailedError  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(minimum,  Double.POSITIVE_INFINITY));  maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(maximum,    Double.POSITIVE_INFINITY);    if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(minimum,  Double.POSITIVE_INFINITY));  maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  }	  	compilable	  [FE]  AssertionFailedError  	42	7	add
121	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(minimum,  Double.POSITIVE_INFINITY));  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(maximum,    Double.POSITIVE_INFINITY);    if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(minimum,  Double.POSITIVE_INFINITY));  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  }	  	compilable	  [FE]  AssertionFailedError  	42	7	add
122	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(minimum,  Double.POSITIVE_INFINITY));  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  }  [FE]  AssertionFailedError  [FE]        NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(minimum,  Double.POSITIVE_INFINITY));  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(maximum,    Double.POSITIVE_INFINITY);    if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(minimum,  Double.POSITIVE_INFINITY));  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  }	  	compilable	  [FE]  AssertionFailedError  	42	7	add
123	[BUG]  [BUGGY]  if(maximum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY)  {  NullPointerException.setMinimum(minimum);  }  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(maximum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY)  {  NullPointerException.setMinimum(minimum);  }  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(maximum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY)  {  NullPointerException.setMinimum(minimum);  }	  if(minimum    ==    Double.POSITIVE_INFINITY    ||    maximum    ==    Double.POSITIVE_INFINITY)    {    NullPointerException.setMinimum(minimum);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
124	[BUG]  [BUGGY]  if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY)  {  NullPointerException.printStackTrace();  }  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY)  {  NullPointerException.printStackTrace();  }  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY)  {  NullPointerException.printStackTrace();  }	  if(minimum    ==    Double.POSITIVE_INFINITY    ||    maximum    ==    Double.POSITIVE_INFINITY)    {    NullPointerException.printStackTrace();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
125	[BUG]  [BUGGY]  if(maximum  ==  Double.POSITIVE_INFINITY  ||  minimum  ==  Double.POSITIVE_INFINITY)  {  NullPointerException.printStackTrace();  }  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(maximum  ==  Double.POSITIVE_INFINITY  ||  minimum  ==  Double.POSITIVE_INFINITY)  {  NullPointerException.printStackTrace();  }  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(maximum  ==  Double.POSITIVE_INFINITY  ||  minimum  ==  Double.POSITIVE_INFINITY)  {  NullPointerException.printStackTrace();  }	  if(minimum    ==    Double.POSITIVE_INFINITY    ||    maximum    ==    Double.POSITIVE_INFINITY)    {    NullPointerException.printStackTrace();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
126	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                minimum        =        Math.min(minimum,        maximum);        minimum    =    Math.max(minimum,    Math.min(maximum,    Double.POSITIVE_INFINITY));    if(includeInterval)  {  minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  }	  	compilable	  [FE]  NullPointerException  	18	7	add
127	[BUG]  [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  }  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                minimum        =        Math.min(minimum,        maximum);        minimum    =    Math.max(minimum,    Math.min(maximum,    Double.POSITIVE_INFINITY));    if(includeInterval)  {  minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  }	  	compilable	  [FE]  NullPointerException  	18	7	add
128	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  }  else  {  return  new  Range(minimum,  maximum);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                minimum        =        Math.min(minimum,        maximum);        minimum    =    Math.max(minimum,    Math.min(maximum,    Double.POSITIVE_INFINITY));    if(includeInterval)  {  minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  }  else  {  return  new  Range(minimum,  maximum);  }	  	compilable	  [FE]  AssertionFailedError  	18	7	add
129	[BUG]  [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  }  else  {  return  new  Range(minimum,  maximum);  }  [FE]  AssertionFailedError  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  }  else  {  return  new  Range(minimum,  maximum);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                minimum        =        Math.min(minimum,        maximum);        minimum    =    Math.max(minimum,    Math.min(maximum,    Double.POSITIVE_INFINITY));    if(includeInterval)  {  minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  }  else  {  return  new  Range(minimum,  maximum);  }	  	compilable	  [FE]  AssertionFailedError  	18	7	add
130	[BUG]  [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  minimum  =  new  Range(minimum,  maximum);  minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  }  [CE]  incompatible  types  [FE]        NullPointerException    [CONTEXT]        [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  minimum  =  new  Range(minimum,  maximum);  minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                minimum        =        Math.min(minimum,        maximum);        minimum    =    Math.max(minimum,    Math.min(maximum,    Double.POSITIVE_INFINITY));    if(includeInterval)  {  minimum  =  new  Range(minimum,  maximum);  minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  }	  	non-compiled	[CE]  incompatible  types	18	None	add
131	[BUG]  [BUGGY]  if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY)  {  NullPointerException.this.minimum  =  minimum;  }  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY)  {  NullPointerException.this.minimum  =  minimum;  }  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY)  {  NullPointerException.this.minimum  =  minimum;  }	  if(minimum    ==    Double.POSITIVE_INFINITY    ||    maximum    ==    Double.POSITIVE_INFINITY)    {    NullPointerException.this.minimum    =    minimum;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
132	[BUG]  [BUGGY]  NullPointerException.this.minimum  =  minimum;  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  NullPointerException.this.minimum  =  minimum;  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	NullPointerException.this.minimum  =  minimum;	  if(minimum    ==    Double.POSITIVE_INFINITY    ||    maximum    ==    Double.POSITIVE_INFINITY)    {    NullPointerException.this.minimum    =    minimum;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
133	[BUG]  [BUGGY]  Minimum  minimum  =  Math.min(minimum,  maximum);  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  Minimum  minimum  =  Math.min(minimum,  maximum);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	Minimum  minimum  =  Math.min(minimum,  maximum);	          minimum    =    Math.min(minimum,    maximum);    Minimum    minimum    =    Math.min(minimum,    maximum);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
134	[BUG]  [BUGGY]  Minimum  =  Math.min(minimum,  maximum);  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  Minimum  =  Math.min(minimum,  maximum);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	Minimum  =  Math.min(minimum,  maximum);	          minimum    =    Math.max(minimum,    maximum);    Minimum    =    Math.min(minimum,    maximum);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
135	[BUG]  [BUGGY]  Parchet.checkState(maximum  ==  Double.POSITIVE_INFINITY);  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkState(maximum  ==  Double.POSITIVE_INFINITY);  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	Parchet.checkState(maximum  ==  Double.POSITIVE_INFINITY);	  if(maximum    ==    Double.POSITIVE_INFINITY)    {    if(minimum    ==    Double.POSITIVE_INFINITY)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
136	[BUG]  [BUGGY]  maximum  =  getMaximumValue();  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  maximum  =  getMaximumValue();  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	maximum  =  getMaximumValue();	  maximum    =    getMaximum()    -    1;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
137	[BUG]  [BUGGY]  if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY)  {  NullPointerException.setMinimum(minimum);  }  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY)  {  NullPointerException.setMinimum(minimum);  }  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY)  {  NullPointerException.setMinimum(minimum);  }	  if(minimum    ==    Double.POSITIVE_INFINITY    ||    maximum    ==    Double.POSITIVE_INFINITY)    {    NullPointerException.setMinimum(minimum);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
138	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  NullPointerException.printStackTrace();  [CE]  non-static  method  printStackTrace()  cannot  be  referenced  from  a  static  context  [FE]    AssertionFailedError    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  NullPointerException.printStackTrace();  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.max(maximum,    Math.max(maximum,    Double.POSITIVE_INFINITY));    NullPointerException.printStackTrace();	  	non-compiled	[CE]  non-static  method  printStackTrace()  cannot  be  referenced  from  a  static  context	14	None	add
139	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  XYDataset  dataset  =  getDataset( "org.joda.switchfield.RangeBounds ");  [CE]  variable  dataset  is  already  defined  in  method  iterateRangeBounds(XYDataset,boolean)  [FE]      AssertionFailedError    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  XYDataset  dataset  =  getDataset( "org.joda.switchfield.RangeBounds ");  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.max(maximum,    Math.max(maximum,    Double.POSITIVE_INFINITY));    XYDataset  dataset  =  getDataset( "org.joda.switchfield.RangeBounds ");	  	non-compiled	[CE]  variable  dataset  is  already  defined  in  method  iterateRangeBounds(XYDataset,boolean)	14	None	add
140	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  XYDataset  dataset  =  getDataset( "org.mockito.data.RangeBounds ");  [CE]  variable  dataset  is  already  defined  in  method  iterateRangeBounds(XYDataset,boolean)  [FE]        AssertionFailedError    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  XYDataset  dataset  =  getDataset( "org.mockito.data.RangeBounds ");  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.max(maximum,    Math.max(maximum,    Double.POSITIVE_INFINITY));    XYDataset  dataset  =  getDataset( "org.mockito.data.RangeBounds ");	  	non-compiled	[CE]  variable  dataset  is  already  defined  in  method  iterateRangeBounds(XYDataset,boolean)	14	None	add
141	[BUG]  [BUGGY]  NullPointerException.println( "Failed  to  instantiate  range. ");  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  NullPointerException.println( "Failed  to  instantiate  range. ");  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	NullPointerException.println( "Failed  to  instantiate  range. ");	  if(maximum    ==    Double.POSITIVE_INFINITY)    {    if(minimum    ==    Double.POSITIVE_INFINITY)    {    maximum    =    Double.POSITIVE_INFINITY;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
142	[BUG]  [BUGGY]          minimum    =    Math.max(minimum,    maximum);    minimum  =  Math.max(minimum,  maximum);  NullPointerException.printStackTrace();  [CE]  non-static  method  printStackTrace()  cannot  be  referenced  from  a  static  context  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          minimum    =    Math.max(minimum,    maximum);    minimum  =  Math.max(minimum,  maximum);  NullPointerException.printStackTrace();  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                minimum        =        Math.max(minimum,        maximum);        minimum    =    Math.max(minimum,    maximum);    NullPointerException.printStackTrace();	  	non-compiled	[CE]  non-static  method  printStackTrace()  cannot  be  referenced  from  a  static  context	39	None	add
143	[BUG]  [BUGGY]          minimum    =    Math.max(minimum,    maximum);    minimum  =  Math.max(minimum,  maximum);  NullPointerException.println( "Unable  to  instantiate  range: "  +  minimum);  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          minimum    =    Math.max(minimum,    maximum);    minimum  =  Math.max(minimum,  maximum);  NullPointerException.println( "Unable  to  instantiate  range: "  +  minimum);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                minimum        =        Math.max(minimum,        maximum);        minimum    =    Math.max(minimum,    maximum);    NullPointerException.println( "Unable  to  instantiate  range: "  +  minimum);	  	non-compiled	[CE]  cannot  find  symbol	39	None	add
144	[BUG]  [BUGGY]          minimum    =    Math.max(minimum,    maximum);    minimum  =  Math.max(minimum,  maximum);  NullPointerException.println( "Unable  to  instantiate  range: "  +  maximum);  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]        [BUGGY]          minimum    =    Math.max(minimum,    maximum);    minimum  =  Math.max(minimum,  maximum);  NullPointerException.println( "Unable  to  instantiate  range: "  +  maximum);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                minimum        =        Math.max(minimum,        maximum);        minimum    =    Math.max(minimum,    maximum);    NullPointerException.println( "Unable  to  instantiate  range: "  +  maximum);	  	non-compiled	[CE]  cannot  find  symbol	39	None	add
145	[BUG]  [BUGGY]  if(maximum  ==  Double.POSITIVE_INFINITY)  {  NullPointerException.setMinimum(maximum);  }  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(maximum  ==  Double.POSITIVE_INFINITY)  {  NullPointerException.setMinimum(maximum);  }  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(maximum  ==  Double.POSITIVE_INFINITY)  {  NullPointerException.setMinimum(maximum);  }	  if(maximum    ==    Double.POSITIVE_INFINITY)    {    NullPointerException.setMinimum(maximum);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
146	[BUG]  [BUGGY]  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.min(minimum,  false));  maximum  =  Math.min(maximum,  Math.max(minimum,  false));  }  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.min(minimum,  false));  maximum  =  Math.min(maximum,  Math.max(minimum,  false));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.min(minimum,  false));  maximum  =  Math.min(maximum,  Math.max(minimum,  false));  }	          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum    =    Math.min(maximum,    Math.max(minimum,    maximum));    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
147	[BUG]  [BUGGY]  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.min(minimum,  true));  maximum  =  Math.min(maximum,  Math.max(minimum,  false));  }  [CE]  illegal  start  of  type  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.min(minimum,  true));  maximum  =  Math.min(maximum,  Math.max(minimum,  false));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.min(minimum,  true));  maximum  =  Math.min(maximum,  Math.max(minimum,  false));  }	          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum    =    Math.min(maximum,    Math.max(minimum,    maximum));    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
148	[BUG]  [BUGGY]          minimum    =    Math.max(minimum,    maximum);    minimum  =  Math.min(minimum,  maximum);  NullPointerException.println( "Invalid  range: "  +  minimum);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]        [BUGGY]          minimum    =    Math.max(minimum,    maximum);    minimum  =  Math.min(minimum,  maximum);  NullPointerException.println( "Invalid  range: "  +  minimum);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                minimum        =        Math.max(minimum,        maximum);        minimum    =    Math.min(minimum,    maximum);    NullPointerException.println( "Invalid  range: "  +  minimum);	  	non-compiled	[CE]  cannot  find  symbol	37	None	add
149	[BUG]  [BUGGY]          minimum    =    Math.max(minimum,    maximum);    minimum  =  Math.min(minimum,  maximum);  NullPointerException.println( "Invalid  range: "  +  maximum);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]        [BUGGY]          minimum    =    Math.max(minimum,    maximum);    minimum  =  Math.min(minimum,  maximum);  NullPointerException.println( "Invalid  range: "  +  maximum);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                minimum        =        Math.max(minimum,        maximum);        minimum    =    Math.min(minimum,    maximum);    NullPointerException.println( "Invalid  range: "  +  maximum);	  	non-compiled	[CE]  cannot  find  symbol	37	None	add
150	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.min(minimum,  maximum);  NullPointerException.printStackTrace();  [CE]  non-static  method  printStackTrace()  cannot  be  referenced  from  a  static  context  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.min(minimum,  maximum);  NullPointerException.printStackTrace();  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.min(minimum,    maximum);    NullPointerException.printStackTrace();	  	non-compiled	[CE]  non-static  method  printStackTrace()  cannot  be  referenced  from  a  static  context	61	None	add
151	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.min(minimum,  maximum);  NullPointerException.checkState(maximum  ==  null);  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.min(minimum,  maximum);  NullPointerException.checkState(maximum  ==  null);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.min(minimum,    maximum);    NullPointerException.checkState(maximum  ==  null);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	61	None	add
152	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.min(minimum,  maximum);  NullPointerException.checkState(maximum!=  null);  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]        NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.min(minimum,  maximum);  NullPointerException.checkState(maximum!=  null);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.min(minimum,    maximum);    NullPointerException.checkState(maximum!=  null);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	61	None	add
153	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  NullPointerException.printStackTrace();  [CE]  non-static  method  printStackTrace()  cannot  be  referenced  from  a  static  context  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  NullPointerException.printStackTrace();  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    NullPointerException.printStackTrace();	  	non-compiled	[CE]  non-static  method  printStackTrace()  cannot  be  referenced  from  a  static  context	3	None	add
154	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  if(includeInterval)  {  return  null;  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    if(includeInterval)  {  return  null;  }	  	compilable	  [FE]  NullPointerException  	3	7	add
155	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  if(includeInterval)  {  return  null;  }  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  if(includeInterval)  {  return  null;  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    if(includeInterval)  {  return  null;  }	  	compilable	  [FE]  NullPointerException  	3	7	add
156	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  if(includeInterval)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  [CE]  unreachable  statement  [FE]        NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  if(includeInterval)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    if(includeInterval)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }	  	non-compiled	[CE]  unreachable  statement	3	None	add
157	[BUG]  [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.min(minimum,  maximum);  NullPointerException.println( "Invalid  range: "  +  minimum);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]        [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.min(minimum,  maximum);  NullPointerException.println( "Invalid  range: "  +  minimum);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                minimum        =        Math.min(minimum,        maximum);        minimum    =    Math.min(minimum,    maximum);    NullPointerException.println( "Invalid  range: "  +  minimum);	  	non-compiled	[CE]  cannot  find  symbol	21	None	add
158	[BUG]  [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.min(minimum,  maximum);  NullPointerException.println( "Unexpected  value ");  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]        [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.min(minimum,  maximum);  NullPointerException.println( "Unexpected  value ");  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                minimum        =        Math.min(minimum,        maximum);        minimum    =    Math.min(minimum,    maximum);    NullPointerException.println( "Unexpected  value ");	  	non-compiled	[CE]  cannot  find  symbol	21	None	add
159	[BUG]  [BUGGY]  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.min(minimum,  false));  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  }  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.min(minimum,  false));  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.min(minimum,  false));  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  }	          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum    =    Math.min(maximum,    Double.POSITIVE_INFINITY);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
160	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(maximum  ==  Double.POSITIVE_INFINITY  ||  minimum  ==  Double.POSITIVE_INFINITY)  {  if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	if(maximum  ==  Double.POSITIVE_INFINITY  ||  minimum  ==  Double.POSITIVE_INFINITY)  {  if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }	  if(minimum    ==    Double.POSITIVE_INFINITY    ||    maximum    ==    Double.POSITIVE_INFINITY)    {    if(minimum    ==    Double.POSITIVE_INFINITY    ||    maximum    ==    Double.POSITIVE_INFINITY)    {    return    null;    }    	compilable	  [FE]  NullPointerException  	78	2	replace
161	[BUG]  [BUGGY]  if(maximum  ==  Double.POSITIVE_INFINITY  ||  minimum  ==  Double.POSITIVE_INFINITY)  {  if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(maximum  ==  Double.POSITIVE_INFINITY  ||  minimum  ==  Double.POSITIVE_INFINITY)  {  if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(maximum  ==  Double.POSITIVE_INFINITY  ||  minimum  ==  Double.POSITIVE_INFINITY)  {  if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }	  if(minimum    ==    Double.POSITIVE_INFINITY    ||    maximum    ==    Double.POSITIVE_INFINITY)    {    if(minimum    ==    Double.POSITIVE_INFINITY    ||    maximum    ==    Double.POSITIVE_INFINITY)    {    return    null;    }    	compilable	  [FE]  NullPointerException  	78	2	replace
162	[BUG]  [BUGGY]  null  =  new  Double(maximum);  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]        [BUGGY]  null  =  new  Double(maximum);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	null  =  new  Double(maximum);	          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum    =    Math.min(minimum,    maximum);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
163	[BUG]  [BUGGY]  if(!includeInterval)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  }  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(!includeInterval)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(!includeInterval)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  }	          minimum    =    Math.min(minimum,    maximum);    minimum    =    Math.max(minimum,    Math.min(maximum,    Double.POSITIVE_INFINITY));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
164	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  NullPointerException.println( "Unable  to  instantiate  range: "  +  dataset.getRangeIndex());  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  NullPointerException.println( "Unable  to  instantiate  range: "  +  dataset.getRangeIndex());  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.min(maximum,    Double.POSITIVE_INFINITY);    NullPointerException.println( "Unable  to  instantiate  range: "  +  dataset.getRangeIndex());	  	non-compiled	[CE]  cannot  find  symbol	56	None	add
165	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  NullPointerException.println( "Unable  to  instantiate  range: "  +  dataset.getClass());  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  NullPointerException.println( "Unable  to  instantiate  range: "  +  dataset.getClass());  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.min(maximum,    Double.POSITIVE_INFINITY);    NullPointerException.println( "Unable  to  instantiate  range: "  +  dataset.getClass());	  	non-compiled	[CE]  cannot  find  symbol	56	None	add
166	[BUG]  [BUGGY]  if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY)  {  NullPointerException.setMinimum(maximum);  }  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY)  {  NullPointerException.setMinimum(maximum);  }  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY)  {  NullPointerException.setMinimum(maximum);  }	  if(minimum    ==    Double.POSITIVE_INFINITY    ||    maximum    ==    Double.POSITIVE_INFINITY)    {    NullPointerException.setMinimum(maximum);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
167	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  maximum  =  Math.max(maximum,  Math.min(minimum,  Double.POSITIVE_INFINITY));  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(maximum,    Double.POSITIVE_INFINITY);    maximum  =  Math.max(maximum,  Math.min(minimum,  Double.POSITIVE_INFINITY));	  	compilable	  [FE]  NullPointerException  	42	2	add
168	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  maximum  =  Math.max(maximum,  Math.min(minimum,  Double.POSITIVE_INFINITY));  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  maximum  =  Math.max(maximum,  Math.min(minimum,  Double.POSITIVE_INFINITY));  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(maximum,    Double.POSITIVE_INFINITY);    maximum  =  Math.max(maximum,  Math.min(minimum,  Double.POSITIVE_INFINITY));	  	compilable	  [FE]  NullPointerException  	42	2	add
169	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  NullPointerException.printStackTrace();  [CE]  non-static  method  printStackTrace()  cannot  be  referenced  from  a  static  context  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  NullPointerException.printStackTrace();  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(maximum,    Double.POSITIVE_INFINITY);    NullPointerException.printStackTrace();	  	non-compiled	[CE]  non-static  method  printStackTrace()  cannot  be  referenced  from  a  static  context	42	None	add
170	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  maximum  =  Math.max(maximum,  Math.max(minimum,  Double.POSITIVE_INFINITY));  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(maximum,    Double.POSITIVE_INFINITY);    maximum  =  Math.max(maximum,  Math.max(minimum,  Double.POSITIVE_INFINITY));	  	compilable	  [FE]  NullPointerException  	42	7	add
171	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  maximum  =  Math.max(maximum,  Math.max(minimum,  Double.POSITIVE_INFINITY));  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  maximum  =  Math.max(maximum,  Math.max(minimum,  Double.POSITIVE_INFINITY));  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(maximum,    Double.POSITIVE_INFINITY);    maximum  =  Math.max(maximum,  Math.max(minimum,  Double.POSITIVE_INFINITY));	  	compilable	  [FE]  NullPointerException  	42	7	add
172	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(minimum,  maximum);  NullPointerException.printStackTrace();  [CE]  non-static  method  printStackTrace()  cannot  be  referenced  from  a  static  context  [FE]    AssertionFailedError    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(minimum,  maximum);  NullPointerException.printStackTrace();  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(minimum,    maximum);    NullPointerException.printStackTrace();	  	non-compiled	[CE]  non-static  method  printStackTrace()  cannot  be  referenced  from  a  static  context	44	None	add
173	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(minimum,  maximum);  NullPointerException.println( "Can  not  instantiate  range: "  +  dataset.getRangeIndex());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(minimum,  maximum);  NullPointerException.println( "Can  not  instantiate  range: "  +  dataset.getRangeIndex());  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(minimum,    maximum);    NullPointerException.println( "Can  not  instantiate  range: "  +  dataset.getRangeIndex());	  	non-compiled	[CE]  cannot  find  symbol	44	None	add
174	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(minimum,  maximum);  NullPointerException.println( "Can  not  instantiate  range: "  +  dataset.getClass());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(minimum,  maximum);  NullPointerException.println( "Can  not  instantiate  range: "  +  dataset.getClass());  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(minimum,    maximum);    NullPointerException.println( "Can  not  instantiate  range: "  +  dataset.getClass());	  	non-compiled	[CE]  cannot  find  symbol	44	None	add
175	[BUG]  [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  minimum  =  null;  maximum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  }  [CE]  incompatible  types  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  minimum  =  null;  maximum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                minimum        =        Math.min(minimum,        maximum);        minimum    =    Math.max(minimum,    Math.min(maximum,    Double.POSITIVE_INFINITY));    if(includeInterval)  {  minimum  =  null;  maximum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  }	  	non-compiled	[CE]  incompatible  types	18	None	add
176	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  }  else  {  return  null;  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                minimum        =        Math.min(minimum,        maximum);        minimum    =    Math.max(minimum,    Math.min(maximum,    Double.POSITIVE_INFINITY));    if(includeInterval)  {  minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  }  else  {  return  null;  }	  	compilable	  [FE]  NullPointerException  	18	7	add
177	[BUG]  [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  }  else  {  return  null;  }  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  }  else  {  return  null;  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                minimum        =        Math.min(minimum,        maximum);        minimum    =    Math.max(minimum,    Math.min(maximum,    Double.POSITIVE_INFINITY));    if(includeInterval)  {  minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  }  else  {  return  null;  }	  	compilable	  [FE]  NullPointerException  	18	7	add
178	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Math.max(minimum,  maximum));  NullPointerException.printStackTrace();  [CE]  non-static  method  printStackTrace()  cannot  be  referenced  from  a  static  context  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Math.max(minimum,  maximum));  NullPointerException.printStackTrace();  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(maximum,    Math.max(minimum,    maximum));    NullPointerException.printStackTrace();	  	non-compiled	[CE]  non-static  method  printStackTrace()  cannot  be  referenced  from  a  static  context	7	None	add
179	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Math.max(minimum,  maximum));  if(includeInterval)  {  return  null;  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(maximum,    Math.max(minimum,    maximum));    if(includeInterval)  {  return  null;  }	  	compilable	  [FE]  NullPointerException  	7	7	add
180	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Math.max(minimum,  maximum));  if(includeInterval)  {  return  null;  }  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Math.max(minimum,  maximum));  if(includeInterval)  {  return  null;  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(maximum,    Math.max(minimum,    maximum));    if(includeInterval)  {  return  null;  }	  	compilable	  [FE]  NullPointerException  	7	7	add
181	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Math.max(minimum,  maximum));  if(includeInterval)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  [CE]  unreachable  statement  [FE]        NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Math.max(minimum,  maximum));  if(includeInterval)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(maximum,    Math.max(minimum,    maximum));    if(includeInterval)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }	  	non-compiled	[CE]  unreachable  statement	7	None	add
182	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  NullPointerException.println( "Unable  to  instantiate  range: "  +  dataset.getRangeIndex());  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  NullPointerException.println( "Unable  to  instantiate  range: "  +  dataset.getRangeIndex());  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.max(maximum,    Double.POSITIVE_INFINITY);    NullPointerException.println( "Unable  to  instantiate  range: "  +  dataset.getRangeIndex());	  	non-compiled	[CE]  cannot  find  symbol	12	None	add
183	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  NullPointerException.println( "Unable  to  instantiate  range: "  +  dataset.getClass());  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  NullPointerException.println( "Unable  to  instantiate  range: "  +  dataset.getClass());  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.max(maximum,    Double.POSITIVE_INFINITY);    NullPointerException.println( "Unable  to  instantiate  range: "  +  dataset.getClass());	  	non-compiled	[CE]  cannot  find  symbol	12	None	add
184	[BUG]  [BUGGY]  Minimum  minimum  =  Math.max(minimum,  maximum);  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  Minimum  minimum  =  Math.max(minimum,  maximum);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	Minimum  minimum  =  Math.max(minimum,  maximum);	          minimum    =    Math.min(minimum,    maximum);    Minimum    minimum    =    Math.max(minimum,    maximum);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
185	[BUG]  [BUGGY]  minimum  =  Math.min(minimum,  Double.POSITIVE_INFINITY);  minimum  =  Math.min(minimum,  Double.POSITIVE_INFINITY);  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  minimum  =  Math.min(minimum,  Double.POSITIVE_INFINITY);  minimum  =  Math.min(minimum,  Double.POSITIVE_INFINITY);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	minimum  =  Math.min(minimum,  Double.POSITIVE_INFINITY);  minimum  =  Math.min(minimum,  Double.POSITIVE_INFINITY);	          minimum    =    Math.min(minimum,    maximum);    minimum    =    Math.min(minimum,    max);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
186	[BUG]  [BUGGY]  if(maximum!=  null)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.min(minimum,  maximum);  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]        [BUGGY]  if(maximum!=  null)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.min(minimum,  maximum);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(maximum!=  null)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.min(minimum,  maximum);  }	          minimum    =    Math.min(minimum,    maximum);    minimum    =    Math.min(minimum,    maximum);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
187	[BUG]  [BUGGY]  if(includeInterval)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.min(minimum,  maximum);  }  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]        [BUGGY]  if(includeInterval)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.min(minimum,  maximum);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(includeInterval)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.min(minimum,  maximum);  }	          minimum    =    Math.min(minimum,    maximum);    minimum    =    Math.min(minimum,    maximum);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
188	[BUG]  [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.max(minimum,  maximum);  NullPointerException.printStackTrace();  [CE]  non-static  method  printStackTrace()  cannot  be  referenced  from  a  static  context  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.max(minimum,  maximum);  NullPointerException.printStackTrace();  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                minimum        =        Math.min(minimum,        maximum);        minimum    =    Math.max(minimum,    maximum);    NullPointerException.printStackTrace();	  	non-compiled	[CE]  non-static  method  printStackTrace()  cannot  be  referenced  from  a  static  context	74	None	add
189	[BUG]  [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.max(minimum,  maximum);  NullPointerException.checkState(minimum  ==  null);  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.max(minimum,  maximum);  NullPointerException.checkState(minimum  ==  null);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                minimum        =        Math.min(minimum,        maximum);        minimum    =    Math.max(minimum,    maximum);    NullPointerException.checkState(minimum  ==  null);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	74	None	add
190	[BUG]  [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.max(minimum,  maximum);  NullPointerException.checkState(minimum!=  null);  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]        NullPointerException    [CONTEXT]        [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.max(minimum,  maximum);  NullPointerException.checkState(minimum!=  null);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                minimum        =        Math.min(minimum,        maximum);        minimum    =    Math.max(minimum,    maximum);    NullPointerException.checkState(minimum!=  null);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	74	None	add
191	[BUG]  [BUGGY]  if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY)  {  NullPointerException.this.minimum  =  null;  }  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY)  {  NullPointerException.this.minimum  =  null;  }  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY)  {  NullPointerException.this.minimum  =  null;  }	  if(minimum    ==    Double.POSITIVE_INFINITY    ||    maximum    ==    Double.POSITIVE_INFINITY)    {    NullPointerException.this.minimum    =    null;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
192	[BUG]  [BUGGY]  maximum  =  Math.max(maximum,  Math.min(minimum,  0));  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  maximum  =  Math.max(maximum,  Math.min(minimum,  0));  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	maximum  =  Math.max(maximum,  Math.min(minimum,  0));	          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum    =    Math.max(maximum,    Math.min(minimum,    max));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
193	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(maximum  ==  Double.POSITIVE_INFINITY  ||  minimum!=  Double.POSITIVE_INFINITY)  {  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	if(maximum  ==  Double.POSITIVE_INFINITY  ||  minimum!=  Double.POSITIVE_INFINITY)  {	  if(minimum    ==    Double.POSITIVE_INFINITY    ||    maximum!=    Double.POSITIVE_INFINITY)    {    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	81	7	replace
194	[BUG]  [BUGGY]  if(maximum  ==  Double.POSITIVE_INFINITY  ||  minimum!=  Double.POSITIVE_INFINITY)  {  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(maximum  ==  Double.POSITIVE_INFINITY  ||  minimum!=  Double.POSITIVE_INFINITY)  {  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(maximum  ==  Double.POSITIVE_INFINITY  ||  minimum!=  Double.POSITIVE_INFINITY)  {	  if(minimum    ==    Double.POSITIVE_INFINITY    ||    maximum!=    Double.POSITIVE_INFINITY)    {    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	81	7	replace
195	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.min(maximum,  Math.max(maximum,  maximum));  NullPointerException.printStackTrace();  [CE]  non-static  method  printStackTrace()  cannot  be  referenced  from  a  static  context  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.min(maximum,  Math.max(maximum,  maximum));  NullPointerException.printStackTrace();  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.min(maximum,    Math.max(maximum,    maximum));    NullPointerException.printStackTrace();	  	non-compiled	[CE]  non-static  method  printStackTrace()  cannot  be  referenced  from  a  static  context	16	None	add
196	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.min(maximum,  Math.max(maximum,  maximum));  NullPointerException.setMinimum(minimum);  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.min(maximum,  Math.max(maximum,  maximum));  NullPointerException.setMinimum(minimum);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.min(maximum,    Math.max(maximum,    maximum));    NullPointerException.setMinimum(minimum);	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
197	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.min(maximum,  Math.max(maximum,  maximum));  NullPointerException.println( "Invalid  Range: "  +  minimum);  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.min(maximum,  Math.max(maximum,  maximum));  NullPointerException.println( "Invalid  Range: "  +  minimum);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.min(maximum,    Math.max(maximum,    maximum));    NullPointerException.println( "Invalid  Range: "  +  minimum);	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
198	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  return  null;  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(maximum,    Math.max(maximum,    Double.POSITIVE_INFINITY));    if(includeInterval)  {  return  null;  }	  	compilable	  [FE]  NullPointerException  	5	7	add
199	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  return  null;  }  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  return  null;  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(maximum,    Math.max(maximum,    Double.POSITIVE_INFINITY));    if(includeInterval)  {  return  null;  }	  	compilable	  [FE]  NullPointerException  	5	7	add
200	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  NullPointerException.printStackTrace();  [CE]  non-static  method  printStackTrace()  cannot  be  referenced  from  a  static  context  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  NullPointerException.printStackTrace();  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(maximum,    Math.max(maximum,    Double.POSITIVE_INFINITY));    NullPointerException.printStackTrace();	  	non-compiled	[CE]  non-static  method  printStackTrace()  cannot  be  referenced  from  a  static  context	5	None	add
201	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  [CE]  unreachable  statement  [FE]        NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(maximum,    Math.max(maximum,    Double.POSITIVE_INFINITY));    if(includeInterval)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }	  	non-compiled	[CE]  unreachable  statement	5	None	add
202	[BUG]  [BUGGY]  if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum!=  Double.POSITIVE_INFINITY)  {  NullPointerException.setMinimum(minimum);  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum!=  Double.POSITIVE_INFINITY)  {  NullPointerException.setMinimum(minimum);  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(minimum    ==    Double.POSITIVE_INFINITY    ||    maximum!=    Double.POSITIVE_INFINITY)    {    NullPointerException.setMinimum(minimum);	  	non-compiled	[CE]  illegal  start  of  expression	80	None	add
203	[BUG]  [BUGGY]  if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum!=  Double.POSITIVE_INFINITY)  {  NullPointerException.setMinimum(maximum);  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum!=  Double.POSITIVE_INFINITY)  {  NullPointerException.setMinimum(maximum);  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(minimum    ==    Double.POSITIVE_INFINITY    ||    maximum!=    Double.POSITIVE_INFINITY)    {    NullPointerException.setMinimum(maximum);	  	non-compiled	[CE]  illegal  start  of  expression	80	None	add
204	[BUG]  [BUGGY]  if(maximum  ==  Double.POSITIVE_INFINITY  ||  minimum  ==  Double.POSITIVE_INFINITY)  {  NullPointerException.setMinimum(minimum);  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(maximum  ==  Double.POSITIVE_INFINITY  ||  minimum  ==  Double.POSITIVE_INFINITY)  {  NullPointerException.setMinimum(minimum);  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(maximum    ==    Double.POSITIVE_INFINITY    ||    minimum    ==    Double.POSITIVE_INFINITY)    {    NullPointerException.setMinimum(minimum);	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
205	[BUG]  [BUGGY]  if(maximum  ==  Double.POSITIVE_INFINITY  ||  minimum  ==  Double.POSITIVE_INFINITY)  {  NullPointerException.setMinimum(maximum);  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(maximum  ==  Double.POSITIVE_INFINITY  ||  minimum  ==  Double.POSITIVE_INFINITY)  {  NullPointerException.setMinimum(maximum);  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(maximum    ==    Double.POSITIVE_INFINITY    ||    minimum    ==    Double.POSITIVE_INFINITY)    {    NullPointerException.setMinimum(maximum);	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
206	[BUG]  [BUGGY]  if(maximum  ==  Double.POSITIVE_INFINITY  ||  minimum  ==  Double.POSITIVE_INFINITY)  {  NullPointerException.setMaximum(maximum);  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(maximum  ==  Double.POSITIVE_INFINITY  ||  minimum  ==  Double.POSITIVE_INFINITY)  {  NullPointerException.setMaximum(maximum);  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(maximum    ==    Double.POSITIVE_INFINITY    ||    minimum    ==    Double.POSITIVE_INFINITY)    {    NullPointerException.setMaximum(maximum);	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
207	[BUG]  [BUGGY]  minimum  =  Math.min(minimum,  Integer.MAX_VALUE);  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  minimum  =  Math.min(minimum,  Integer.MAX_VALUE);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	minimum  =  Math.min(minimum,  Integer.MAX_VALUE);	          minimum    =    Math.min(minimum,    maximum);    minimum    =    Math.max(minimum,    maximum);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
208	[BUG]  [BUGGY]  if(!includeInterval)  {  maximum  =  Math.max(maximum,  Math.min(minimum,  false));  maximum  =  Math.min(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(!includeInterval)  {  maximum  =  Math.max(maximum,  Math.min(minimum,  false));  maximum  =  Math.min(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(!includeInterval)  {  maximum  =  Math.max(maximum,  Math.min(minimum,  false));  maximum  =  Math.min(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }	          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum    =    Math.min(maximum,    Math.max(maximum,    Double.POSITIVE_INFINITY));    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
209	[BUG]  [BUGGY]  if(includeInterval)  {  minimum  =  Math.max(minimum,  maximum);  minimum  =  Math.min(minimum,  maximum);  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]        [BUGGY]  if(includeInterval)  {  minimum  =  Math.max(minimum,  maximum);  minimum  =  Math.min(minimum,  maximum);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(includeInterval)  {  minimum  =  Math.max(minimum,  maximum);  minimum  =  Math.min(minimum,  maximum);  }	          minimum    =    Math.max(minimum,    maximum);    minimum    =    Math.min(minimum,    maximum);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
210	[BUG]  [BUGGY]  minimum  =  Math.min(minimum,  maximum);  NullPointerException.printStackTrace();  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  minimum  =  Math.min(minimum,  maximum);  NullPointerException.printStackTrace();  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	minimum  =  Math.min(minimum,  maximum);  NullPointerException.printStackTrace();	          minimum    =    Math.max(minimum,    maximum);    NullPointerException.printStackTrace();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
211	[BUG]  [BUGGY]  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.min(minimum,  false));  maximum  =  Math.max(maximum,  Math.min(minimum,  false));  }  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.min(minimum,  false));  maximum  =  Math.max(maximum,  Math.min(minimum,  false));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.min(minimum,  false));  maximum  =  Math.max(maximum,  Math.min(minimum,  false));  }	          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
212	[BUG]  [BUGGY]  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.min(minimum,  true));  maximum  =  Math.max(maximum,  Math.min(minimum,  false));  }  [CE]  illegal  start  of  type  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.min(minimum,  true));  maximum  =  Math.max(maximum,  Math.min(minimum,  false));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.min(minimum,  true));  maximum  =  Math.max(maximum,  Math.min(minimum,  false));  }	          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
213	[BUG]  [BUGGY]  Minimum  maximum  =  getMaximumValue();  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Minimum  maximum  =  getMaximumValue();  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	Minimum  maximum  =  getMaximumValue();	  Minimum    maximum    =    getMaximum()    -    1;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
214	[BUG]  [BUGGY]  minimum  =  Math.min(minimum,  Double.POSITIVE_INFINITY  -  1);  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  minimum  =  Math.min(minimum,  Double.POSITIVE_INFINITY  -  1);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	minimum  =  Math.min(minimum,  Double.POSITIVE_INFINITY  -  1);	  minimum    =    Math.min(minimum,    Double.POSITIVE_INFINITY);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
215	[BUG]  [BUGGY]  maximum  =  Math.max(minimum,  Double.POSITIVE_INFINITY);  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  maximum  =  Math.max(minimum,  Double.POSITIVE_INFINITY);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	maximum  =  Math.max(minimum,  Double.POSITIVE_INFINITY);	          maximum    =    Math.max(maximum,    maximum);    maximum    =    Math.min(maximum,    Double.POSITIVE_INFINITY);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
216	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  minimum  =  Math.min(minimum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  maximum  =  Math.min(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(maximum,    Math.max(maximum,    Double.POSITIVE_INFINITY));    if(includeInterval)  {  minimum  =  Math.min(minimum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  maximum  =  Math.min(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }	  	compilable	  [FE]  NullPointerException  	5	2	add
217	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  minimum  =  Math.min(minimum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  maximum  =  Math.min(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  minimum  =  Math.min(minimum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  maximum  =  Math.min(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(maximum,    Math.max(maximum,    Double.POSITIVE_INFINITY));    if(includeInterval)  {  minimum  =  Math.min(minimum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  maximum  =  Math.min(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }	  	compilable	  [FE]  NullPointerException  	5	2	add
218	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  minimum  =  Math.max(minimum,  Math.min(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(maximum,    Math.max(maximum,    Double.POSITIVE_INFINITY));    if(includeInterval)  {  minimum  =  Math.max(minimum,  Math.min(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }	  	compilable	  [FE]  NullPointerException  	5	7	add
219	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  minimum  =  Math.max(minimum,  Math.min(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  minimum  =  Math.max(minimum,  Math.min(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(maximum,    Math.max(maximum,    Double.POSITIVE_INFINITY));    if(includeInterval)  {  minimum  =  Math.max(minimum,  Math.min(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }	  	compilable	  [FE]  NullPointerException  	5	7	add
220	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  minimum  =  Math.max(minimum,  Math.min(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.max(Maximum,  Double.POSITIVE_INFINITY));  }  [CE]  cannot  find  symbol  Maximum  [FE]        NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  minimum  =  Math.max(minimum,  Math.min(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.max(Maximum,  Double.POSITIVE_INFINITY));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(maximum,    Math.max(maximum,    Double.POSITIVE_INFINITY));    if(includeInterval)  {  minimum  =  Math.max(minimum,  Math.min(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.max(Maximum,  Double.POSITIVE_INFINITY));  }	  	non-compiled	[CE]  cannot  find  symbol  Maximum	5	None	add
221	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  }	  	compilable	  [FE]  NullPointerException  	3	2	add
222	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  }  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  }	  	compilable	  [FE]  NullPointerException  	3	2	add
223	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  }	  	compilable	  [FE]  NullPointerException  	3	2	add
224	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  }  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  }	  	compilable	  [FE]  NullPointerException  	3	2	add
225	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  if(includeInterval)  {  maximum  =  Math.max(minimum,  Math.min(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    if(includeInterval)  {  maximum  =  Math.max(minimum,  Math.min(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  }	  	compilable	  [FE]  AssertionFailedError  	3	6	add
226	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  if(includeInterval)  {  maximum  =  Math.max(minimum,  Math.min(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  }  [FE]  AssertionFailedError  [FE]        NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  if(includeInterval)  {  maximum  =  Math.max(minimum,  Math.min(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    if(includeInterval)  {  maximum  =  Math.max(minimum,  Math.min(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  }	  	compilable	  [FE]  AssertionFailedError  	3	6	add
227	[BUG]  [BUGGY]  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.min(minimum,  false));  maximum  =  Math.max(maximum,  Math.max(minimum,  false));  }  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.min(minimum,  false));  maximum  =  Math.max(maximum,  Math.max(minimum,  false));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.min(minimum,  false));  maximum  =  Math.max(maximum,  Math.max(minimum,  false));  }	          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
228	[BUG]  [BUGGY]  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.min(minimum,  false));  maximum  =  Math.max(maximum,  Math.max(minimum,  true));  }  [CE]  illegal  start  of  type  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.min(minimum,  false));  maximum  =  Math.max(maximum,  Math.max(minimum,  true));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.min(minimum,  false));  maximum  =  Math.max(maximum,  Math.max(minimum,  true));  }	          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
229	[BUG]  [BUGGY]  if(minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }	  if(maximum    ==    Double.POSITIVE_INFINITY)    {    if(minimum    ==    Double.POSITIVE_INFINITY)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
230	[BUG]  [BUGGY]  if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }	  if(maximum    ==    Double.POSITIVE_INFINITY)    {    if(minimum    ==    Double.POSITIVE_INFINITY)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
231	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  if(includeInterval)  {  minimum  =  Math.max(minimum,  Double.POSITIVE_INFINITY);  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(maximum,    Double.POSITIVE_INFINITY);    if(includeInterval)  {  minimum  =  Math.max(minimum,  Double.POSITIVE_INFINITY);  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  }	  	compilable	  [FE]  NullPointerException  	42	7	add
232	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  if(includeInterval)  {  minimum  =  Math.max(minimum,  Double.POSITIVE_INFINITY);  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  }  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  if(includeInterval)  {  minimum  =  Math.max(minimum,  Double.POSITIVE_INFINITY);  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(maximum,    Double.POSITIVE_INFINITY);    if(includeInterval)  {  minimum  =  Math.max(minimum,  Double.POSITIVE_INFINITY);  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  }	  	compilable	  [FE]  NullPointerException  	42	7	add
233	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  if(includeInterval)  {  minimum  =  Math.max(minimum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(maximum,    Double.POSITIVE_INFINITY);    if(includeInterval)  {  minimum  =  Math.max(minimum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  }	  	compilable	  [FE]  NullPointerException  	42	7	add
234	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  if(includeInterval)  {  minimum  =  Math.max(minimum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  }  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  if(includeInterval)  {  minimum  =  Math.max(minimum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(maximum,    Double.POSITIVE_INFINITY);    if(includeInterval)  {  minimum  =  Math.max(minimum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  }	  	compilable	  [FE]  NullPointerException  	42	7	add
235	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  if(includeInterval)  {  minimum  =  Math.max(minimum,  Math.min(minimum,  maximum));  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(maximum,    Double.POSITIVE_INFINITY);    if(includeInterval)  {  minimum  =  Math.max(minimum,  Math.min(minimum,  maximum));  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  }	  	compilable	  [FE]  AssertionFailedError  	42	7	add
236	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  if(includeInterval)  {  minimum  =  Math.max(minimum,  Math.min(minimum,  maximum));  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  }  [FE]  AssertionFailedError  [FE]        NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  if(includeInterval)  {  minimum  =  Math.max(minimum,  Math.min(minimum,  maximum));  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(maximum,    Double.POSITIVE_INFINITY);    if(includeInterval)  {  minimum  =  Math.max(minimum,  Math.min(minimum,  maximum));  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  }	  	compilable	  [FE]  AssertionFailedError  	42	7	add
237	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          minimum    =    Math.max(minimum,    maximum);    minimum  =  Math.max(minimum,  maximum);  if(includeInterval)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.min(minimum,  maximum);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                minimum        =        Math.max(minimum,        maximum);        minimum    =    Math.max(minimum,    maximum);    if(includeInterval)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.min(minimum,  maximum);  }	  	compilable	  [FE]  AssertionFailedError  	39	7	add
238	[BUG]  [BUGGY]          minimum    =    Math.max(minimum,    maximum);    minimum  =  Math.max(minimum,  maximum);  if(includeInterval)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.min(minimum,  maximum);  }  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          minimum    =    Math.max(minimum,    maximum);    minimum  =  Math.max(minimum,  maximum);  if(includeInterval)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.min(minimum,  maximum);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                minimum        =        Math.max(minimum,        maximum);        minimum    =    Math.max(minimum,    maximum);    if(includeInterval)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.min(minimum,  maximum);  }	  	compilable	  [FE]  AssertionFailedError  	39	7	add
239	[BUG]  [BUGGY]          minimum    =    Math.max(minimum,    maximum);    minimum  =  Math.max(minimum,  maximum);  if(includeInterval)  {  minimum  =  Math.min(minimum,  false);  minimum  =  Math.min(minimum,  false);  }  [CE]  no  suitable  method  found  for  min(double,boolean)  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          minimum    =    Math.max(minimum,    maximum);    minimum  =  Math.max(minimum,  maximum);  if(includeInterval)  {  minimum  =  Math.min(minimum,  false);  minimum  =  Math.min(minimum,  false);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                minimum        =        Math.max(minimum,        maximum);        minimum    =    Math.max(minimum,    maximum);    if(includeInterval)  {  minimum  =  Math.min(minimum,  false);  minimum  =  Math.min(minimum,  false);  }	  	non-compiled	[CE]  no  suitable  method  found  for  min(double,boolean)	39	None	add
240	[BUG]  [BUGGY]  if(includeInterval)  {  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  }  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(includeInterval)  {  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(includeInterval)  {  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  }	          maximum    =    Math.max(maximum,    maximum);    maximum    =    Math.max(maximum,    Double.POSITIVE_INFINITY);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
241	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  NullPointerException.println( "Unknown  range: "  +  minimum);  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.min(maximum,  Double.POSITIVE_INFINITY);  NullPointerException.println( "Unknown  range: "  +  minimum);  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.min(maximum,    Double.POSITIVE_INFINITY);    NullPointerException.println( "Unknown  range: "  +  minimum);	  	non-compiled	[CE]  cannot  find  symbol	56	None	add
242	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  minimum  =  Math.min(minimum,  null);  }  [CE]  no  suitable  method  found  for  min(double,<null>)  [FE]    AssertionFailedError    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  minimum  =  Math.min(minimum,  null);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.max(maximum,    Math.max(maximum,    Double.POSITIVE_INFINITY));    if(includeInterval)  {  minimum  =  Math.min(minimum,  null);  }	  	non-compiled	[CE]  no  suitable  method  found  for  min(double,<null>)	14	None	add
243	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  minimum  =  Math.min(minimum,  false);  }  [CE]  no  suitable  method  found  for  min(double,boolean)  [FE]      AssertionFailedError    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  minimum  =  Math.min(minimum,  false);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.max(maximum,    Math.max(maximum,    Double.POSITIVE_INFINITY));    if(includeInterval)  {  minimum  =  Math.min(minimum,  false);  }	  	non-compiled	[CE]  no  suitable  method  found  for  min(double,boolean)	14	None	add
244	[BUG]  [BUGGY]  if(minimum  ==  Double.POSITIVE_INFINITY)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.max(minimum,  maximum);  }  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(minimum  ==  Double.POSITIVE_INFINITY)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.max(minimum,  maximum);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(minimum  ==  Double.POSITIVE_INFINITY)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.max(minimum,  maximum);  }	          minimum    =    Math.max(minimum,    maximum);    minimum    =    Math.max(minimum,    maximum);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
245	[BUG]  [BUGGY]  if(minimum  ==  Double.POSITIVE_INFINITY)  {  NullPointerException.setMinimum(maximum);  }  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(minimum  ==  Double.POSITIVE_INFINITY)  {  NullPointerException.setMinimum(maximum);  }  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(minimum  ==  Double.POSITIVE_INFINITY)  {  NullPointerException.setMinimum(maximum);  }	  if(maximum    ==    Double.POSITIVE_INFINITY)    {    NullPointerException.setMinimum(minimum);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
246	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Math.max(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(maximum,    Math.max(minimum,    maximum));    maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));	  	compilable	  [FE]  NullPointerException  	7	2	add
247	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Math.max(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(maximum,  Math.max(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(maximum,    Math.max(minimum,    maximum));    maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));	  	compilable	  [FE]  NullPointerException  	7	2	add
248	[BUG]  [BUGGY]  if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum!=  Double.POSITIVE_INFINITY)  {  if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum!=  Double.POSITIVE_INFINITY)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum!=  Double.POSITIVE_INFINITY)  {  if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum!=  Double.POSITIVE_INFINITY)  {  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(minimum    ==    Double.POSITIVE_INFINITY    ||    maximum!=    Double.POSITIVE_INFINITY)    {    if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum!=  Double.POSITIVE_INFINITY)  {	  	non-compiled	[CE]  illegal  start  of  expression	80	None	add
249	[BUG]  [BUGGY]  if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum!=  Double.POSITIVE_INFINITY)  {  if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY)  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum!=  Double.POSITIVE_INFINITY)  {  if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(minimum    ==    Double.POSITIVE_INFINITY    ||    maximum!=    Double.POSITIVE_INFINITY)    {    if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY)  {	  	non-compiled	[CE]  illegal  start  of  expression	80	None	add
250	[BUG]  [BUGGY]  maximum  =  Math.max(maximum,  minimum);  NullPointerException.printStackTrace();  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  maximum  =  Math.max(maximum,  minimum);  NullPointerException.printStackTrace();  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	maximum  =  Math.max(maximum,  minimum);  NullPointerException.printStackTrace();	          maximum    =    Math.max(maximum,    maximum);    NullPointerException.printStackTrace();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
251	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.min(maximum,  Math.max(maximum,  maximum));  maximum  =  Math.min(minimum,  Math.max(minimum,  maximum));  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.min(maximum,    Math.max(maximum,    maximum));    maximum  =  Math.min(minimum,  Math.max(minimum,  maximum));	  	compilable	  [FE]  AssertionFailedError  	16	6	add
252	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.min(maximum,  Math.max(maximum,  maximum));  maximum  =  Math.min(minimum,  Math.max(minimum,  maximum));  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.min(maximum,  Math.max(maximum,  maximum));  maximum  =  Math.min(minimum,  Math.max(minimum,  maximum));  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.min(maximum,    Math.max(maximum,    maximum));    maximum  =  Math.min(minimum,  Math.max(minimum,  maximum));	  	compilable	  [FE]  AssertionFailedError  	16	6	add
253	[BUG]  [BUGGY]  if(includeInterval)  {  maximum  =  Math.min(minimum,  Math.max(maximum,  false));  }  else  {  maximum  =  Math.min(minimum,  Math.max(maximum,  false));  }  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(includeInterval)  {  maximum  =  Math.min(minimum,  Math.max(maximum,  false));  }  else  {  maximum  =  Math.min(minimum,  Math.max(maximum,  false));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(includeInterval)  {  maximum  =  Math.min(minimum,  Math.max(maximum,  false));  }  else  {  maximum  =  Math.min(minimum,  Math.max(maximum,  false));  }	          maximum    =    Math.max(maximum,    maximum);    maximum    =    Math.min(maximum,    Math.max(maximum,    maximum));    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
254	[BUG]  [BUGGY]  Minimum  maximum  =  getMaximumValue()  -  1;  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Minimum  maximum  =  getMaximumValue()  -  1;  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	Minimum  maximum  =  getMaximumValue()  -  1;	  Minimum    maximum    =    getMaximum()    -    1;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
255	[BUG]  [BUGGY]  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.max(maximum,  Math.maximum));  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]        [BUGGY]  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.max(maximum,  Math.maximum));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.max(maximum,  Math.maximum));  }	          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum    =    Math.min(minimum,    maximum);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
256	[BUG]  [BUGGY]  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.max(maximum,  Math.max(maximum));  }  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]        [BUGGY]  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.max(maximum,  Math.max(maximum));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.max(maximum,  Math.max(maximum));  }	          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum    =    Math.min(minimum,    maximum);    	non-compiled	[CE]  ')'  expected	45	None	replace
257	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.max(minimum,  maximum);  if(includeInterval)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.max(minimum,  maximum);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                minimum        =        Math.min(minimum,        maximum);        minimum    =    Math.max(minimum,    maximum);    if(includeInterval)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.max(minimum,  maximum);  }	  	compilable	  [FE]  AssertionFailedError  	74	7	add
258	[BUG]  [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.max(minimum,  maximum);  if(includeInterval)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.max(minimum,  maximum);  }  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.max(minimum,  maximum);  if(includeInterval)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.max(minimum,  maximum);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                minimum        =        Math.min(minimum,        maximum);        minimum    =    Math.max(minimum,    maximum);    if(includeInterval)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.max(minimum,  maximum);  }	  	compilable	  [FE]  AssertionFailedError  	74	7	add
259	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.max(minimum,  maximum);  if(includeInterval)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.max(minimum,  maximum);  }  else  {  return  new  Range(minimum,  maximum);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                minimum        =        Math.min(minimum,        maximum);        minimum    =    Math.max(minimum,    maximum);    if(includeInterval)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.max(minimum,  maximum);  }  else  {  return  new  Range(minimum,  maximum);  }	  	compilable	  [FE]  NullPointerException  	74	7	add
260	[BUG]  [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.max(minimum,  maximum);  if(includeInterval)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.max(minimum,  maximum);  }  else  {  return  new  Range(minimum,  maximum);  }  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.max(minimum,  maximum);  if(includeInterval)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.max(minimum,  maximum);  }  else  {  return  new  Range(minimum,  maximum);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                minimum        =        Math.min(minimum,        maximum);        minimum    =    Math.max(minimum,    maximum);    if(includeInterval)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.max(minimum,  maximum);  }  else  {  return  new  Range(minimum,  maximum);  }	  	compilable	  [FE]  NullPointerException  	74	7	add
261	[BUG]  [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.max(minimum,  maximum);  if(includeInterval)  {  minimum  =  Math.min(minimum,  false);  minimum  =  Math.max(minimum,  false);  }  [CE]  no  suitable  method  found  for  min(double,boolean)  [FE]        NullPointerException    [CONTEXT]        [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.max(minimum,  maximum);  if(includeInterval)  {  minimum  =  Math.min(minimum,  false);  minimum  =  Math.max(minimum,  false);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                minimum        =        Math.min(minimum,        maximum);        minimum    =    Math.max(minimum,    maximum);    if(includeInterval)  {  minimum  =  Math.min(minimum,  false);  minimum  =  Math.max(minimum,  false);  }	  	non-compiled	[CE]  no  suitable  method  found  for  min(double,boolean)	74	None	add
262	[BUG]  [BUGGY]  maximum  =  getMaximumNumber()  -  1;  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  maximum  =  getMaximumNumber()  -  1;  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	maximum  =  getMaximumNumber()  -  1;	  maximum    =    getMaximum()    -    1;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
263	[BUG]  [BUGGY]  if(includeInterval)  {  maximum  =  Math.max(minimum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(includeInterval)  {  maximum  =  Math.max(minimum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(includeInterval)  {  maximum  =  Math.max(minimum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  maximum  =  Math.max(maximum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }	          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum    =    Math.min(maximum,    Math.max(maximum,    Double.POSITIVE_INFINITY));    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
264	[BUG]  [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.min(minimum,  maximum);  if(includeInterval)  {  minimum  =  Math.max(minimum,  includeInterval);  minimum  =  Math.min(minimum,  includeInterval);  }  [CE]  no  suitable  method  found  for  max(double,boolean)  [FE]    AssertionFailedError    [CONTEXT]        [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.min(minimum,  maximum);  if(includeInterval)  {  minimum  =  Math.max(minimum,  includeInterval);  minimum  =  Math.min(minimum,  includeInterval);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                minimum        =        Math.min(minimum,        maximum);        minimum    =    Math.min(minimum,    maximum);    if(includeInterval)  {  minimum  =  Math.max(minimum,  includeInterval);  minimum  =  Math.min(minimum,  includeInterval);  }	  	non-compiled	[CE]  no  suitable  method  found  for  max(double,boolean)	21	None	add
265	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      AssertionFailedError    [CONTEXT]        [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.min(minimum,  maximum);  if(includeInterval)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.min(minimum,  maximum);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                minimum        =        Math.min(minimum,        maximum);        minimum    =    Math.min(minimum,    maximum);    if(includeInterval)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.min(minimum,  maximum);  }	  	compilable	  [FE]  NullPointerException  	21	5	add
266	[BUG]  [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.min(minimum,  maximum);  if(includeInterval)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.min(minimum,  maximum);  }  [FE]  NullPointerException  [FE]      AssertionFailedError    [CONTEXT]        [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.min(minimum,  maximum);  if(includeInterval)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.min(minimum,  maximum);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                minimum        =        Math.min(minimum,        maximum);        minimum    =    Math.min(minimum,    maximum);    if(includeInterval)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.min(minimum,  maximum);  }	  	compilable	  [FE]  NullPointerException  	21	5	add
267	[BUG]  [BUGGY]  if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum!=  Double.POSITIVE_INFINITY)  {  NullPointerException.this.minimum  =  null;  }  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum!=  Double.POSITIVE_INFINITY)  {  NullPointerException.this.minimum  =  null;  }  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum!=  Double.POSITIVE_INFINITY)  {  NullPointerException.this.minimum  =  null;  }	  if(minimum    ==    Double.POSITIVE_INFINITY    ||    maximum    ==    Double.POSITIVE_INFINITY)    {    NullPointerException.this.minimum    =    null;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
268	[BUG]  [BUGGY]  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(minimum,  Double.POSITIVE_INFINITY));  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  }  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(minimum,  Double.POSITIVE_INFINITY));  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(minimum,  Double.POSITIVE_INFINITY));  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  }	          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum    =    Math.min(maximum,    Double.POSITIVE_INFINITY);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
269	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  if(includeInterval)  {  minimum  =  Math.min(minimum,  null);  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  }  [CE]  no  suitable  method  found  for  min(double,<null>)  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  if(includeInterval)  {  minimum  =  Math.min(minimum,  null);  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.max(maximum,    Double.POSITIVE_INFINITY);    if(includeInterval)  {  minimum  =  Math.min(minimum,  null);  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  }	  	non-compiled	[CE]  no  suitable  method  found  for  min(double,<null>)	12	None	add
270	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  if(includeInterval)  {  minimum  =  Math.min(minimum,  false);  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  }  [CE]  no  suitable  method  found  for  min(double,boolean)  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    maximum);    maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  if(includeInterval)  {  minimum  =  Math.min(minimum,  false);  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        maximum);        maximum    =    Math.max(maximum,    Double.POSITIVE_INFINITY);    if(includeInterval)  {  minimum  =  Math.min(minimum,  false);  maximum  =  Math.max(maximum,  Double.POSITIVE_INFINITY);  }	  	non-compiled	[CE]  no  suitable  method  found  for  min(double,boolean)	12	None	add
271	[BUG]  [BUGGY]  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(minimum,  maximum));  }  else  {  maximum  =  Math.max(maximum,  Math.max(minimum,  maximum));  }  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(minimum,  maximum));  }  else  {  maximum  =  Math.max(maximum,  Math.max(minimum,  maximum));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(minimum,  maximum));  }  else  {  maximum  =  Math.max(maximum,  Math.max(minimum,  maximum));  }	          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum    =    Math.min(maximum,    Math.max(minimum,    maximum));    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
272	[BUG]  [BUGGY]  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(minimum,  false));  maximum  =  Math.max(maximum,  Math.max(minimum,  false));  }  [CE]  illegal  start  of  type  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(minimum,  false));  maximum  =  Math.max(maximum,  Math.max(minimum,  false));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(minimum,  false));  maximum  =  Math.max(maximum,  Math.max(minimum,  false));  }	          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum    =    Math.min(maximum,    Math.max(minimum,    maximum));    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
273	[BUG]  [BUGGY]  if(includeInterval)  {  minimum  =  Math.max(minimum,  maximum);  minimum  =  Math.min(minimum,  maximum);  }  else  {  return  new  Range(minimum,  maximum);  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]        [BUGGY]  if(includeInterval)  {  minimum  =  Math.max(minimum,  maximum);  minimum  =  Math.min(minimum,  maximum);  }  else  {  return  new  Range(minimum,  maximum);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(includeInterval)  {  minimum  =  Math.max(minimum,  maximum);  minimum  =  Math.min(minimum,  maximum);  }  else  {  return  new  Range(minimum,  maximum);  }	          minimum    =    Math.max(minimum,    maximum);    minimum    =    Math.min(minimum,    maximum);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
274	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(minimum,  maximum);  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(minimum,    maximum);    if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  }	  	compilable	  [FE]  NullPointerException  	44	6	add
275	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(minimum,  maximum);  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  }  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(minimum,  maximum);  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(minimum,    maximum);    if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  }	  	compilable	  [FE]  NullPointerException  	44	6	add
276	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(minimum,  maximum);  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.max(maximum,  Math.max(maximum));  }  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(minimum,  maximum);  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.max(maximum,  Math.max(maximum));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(minimum,    maximum);    if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.max(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.max(maximum,  Math.max(maximum));  }	  	non-compiled	[CE]  ')'  expected	44	None	add
277	[BUG]  [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(minimum,  maximum);  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.max(maximum,  Math.max(maximum));  }  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]        [BUGGY]          maximum    =    Math.max(maximum,    Math.min(minimum,    maximum));    maximum  =  Math.min(minimum,  maximum);  if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.max(maximum,  Math.max(maximum));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                maximum        =        Math.max(maximum,        Math.min(minimum,        maximum));        maximum    =    Math.min(minimum,    maximum);    if(includeInterval)  {  maximum  =  Math.max(maximum,  Math.min(minimum,  maximum));  maximum  =  Math.max(maximum,  Math.max(maximum,  Math.max(maximum));  }	  	non-compiled	[CE]  ')'  expected	44	None	add
278	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]        [BUGGY]          minimum    =    Math.max(minimum,    maximum);    minimum  =  Math.min(minimum,  maximum);  if(includeInterval)  {  minimum  =  Math.max(minimum,  maximum);  minimum  =  Math.min(minimum,  maximum);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                minimum        =        Math.max(minimum,        maximum);        minimum    =    Math.min(minimum,    maximum);    if(includeInterval)  {  minimum  =  Math.max(minimum,  maximum);  minimum  =  Math.min(minimum,  maximum);  }	  	compilable	  [FE]  NullPointerException  	37	7	add
279	[BUG]  [BUGGY]          minimum    =    Math.max(minimum,    maximum);    minimum  =  Math.min(minimum,  maximum);  if(includeInterval)  {  minimum  =  Math.max(minimum,  maximum);  minimum  =  Math.min(minimum,  maximum);  }  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]        [BUGGY]          minimum    =    Math.max(minimum,    maximum);    minimum  =  Math.min(minimum,  maximum);  if(includeInterval)  {  minimum  =  Math.max(minimum,  maximum);  minimum  =  Math.min(minimum,  maximum);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                minimum        =        Math.max(minimum,        maximum);        minimum    =    Math.min(minimum,    maximum);    if(includeInterval)  {  minimum  =  Math.max(minimum,  maximum);  minimum  =  Math.min(minimum,  maximum);  }	  	compilable	  [FE]  NullPointerException  	37	7	add
280	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      AssertionFailedError    [CONTEXT]        [BUGGY]          minimum    =    Math.max(minimum,    maximum);    minimum  =  Math.min(minimum,  maximum);  if(includeInterval)  {  minimum  =  Math.max(minimum,  maximum);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                minimum        =        Math.max(minimum,        maximum);        minimum    =    Math.min(minimum,    maximum);    if(includeInterval)  {  minimum  =  Math.max(minimum,  maximum);  }	  	compilable	  [FE]  NullPointerException  	37	7	add
281	[BUG]  [BUGGY]          minimum    =    Math.max(minimum,    maximum);    minimum  =  Math.min(minimum,  maximum);  if(includeInterval)  {  minimum  =  Math.max(minimum,  maximum);  }  [FE]  NullPointerException  [FE]      AssertionFailedError    [CONTEXT]        [BUGGY]          minimum    =    Math.max(minimum,    maximum);    minimum  =  Math.min(minimum,  maximum);  if(includeInterval)  {  minimum  =  Math.max(minimum,  maximum);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                minimum        =        Math.max(minimum,        maximum);        minimum    =    Math.min(minimum,    maximum);    if(includeInterval)  {  minimum  =  Math.max(minimum,  maximum);  }	  	compilable	  [FE]  NullPointerException  	37	7	add
282	[BUG]  [BUGGY]  if(includeInterval)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.min(minimum,  maximum);  }  else  {  return  new  Range(minimum,  maximum);  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]        [BUGGY]  if(includeInterval)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.min(minimum,  maximum);  }  else  {  return  new  Range(minimum,  maximum);  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(includeInterval)  {  minimum  =  Math.min(minimum,  maximum);  minimum  =  Math.min(minimum,  maximum);  }  else  {  return  new  Range(minimum,  maximum);  }	          minimum    =    Math.min(minimum,    maximum);    minimum    =    Math.min(minimum,    maximum);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
283	[BUG]  [BUGGY]  if(maximum  ==  Double.POSITIVE_INFINITY  ||  minimum  ==  Double.POSITIVE_INFINITY)  {  if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(maximum  ==  Double.POSITIVE_INFINITY  ||  minimum  ==  Double.POSITIVE_INFINITY)  {  if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(maximum    ==    Double.POSITIVE_INFINITY    ||    minimum    ==    Double.POSITIVE_INFINITY)    {    if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY)  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
284	[BUG]  [BUGGY]  if(maximum  ==  Double.POSITIVE_INFINITY  ||  minimum  ==  Double.POSITIVE_INFINITY)  {  if(minimum  ==  Double.POSITIVE_INFINITY  ||  minimum  ==  Double.POSITIVE_INFINITY)  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(maximum  ==  Double.POSITIVE_INFINITY  ||  minimum  ==  Double.POSITIVE_INFINITY)  {  if(minimum  ==  Double.POSITIVE_INFINITY  ||  minimum  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(maximum    ==    Double.POSITIVE_INFINITY    ||    minimum    ==    Double.POSITIVE_INFINITY)    {    if(minimum  ==  Double.POSITIVE_INFINITY  ||  minimum  ==  Double.POSITIVE_INFINITY)  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
285	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  minimum  =  Math.max(minimum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                minimum        =        Math.min(minimum,        maximum);        minimum    =    Math.max(minimum,    Math.min(maximum,    Double.POSITIVE_INFINITY));    if(includeInterval)  {  minimum  =  Math.max(minimum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }	  	compilable	  [FE]  NullPointerException  	18	7	add
286	[BUG]  [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  minimum  =  Math.max(minimum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  minimum  =  Math.max(minimum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                minimum        =        Math.min(minimum,        maximum);        minimum    =    Math.max(minimum,    Math.min(maximum,    Double.POSITIVE_INFINITY));    if(includeInterval)  {  minimum  =  Math.max(minimum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }	  	compilable	  [FE]  NullPointerException  	18	7	add
287	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  minimum  =  Math.max(minimum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }  else  {  return  null;  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	add	                minimum        =        Math.min(minimum,        maximum);        minimum    =    Math.max(minimum,    Math.min(maximum,    Double.POSITIVE_INFINITY));    if(includeInterval)  {  minimum  =  Math.max(minimum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }  else  {  return  null;  }	  	compilable	  [FE]  NullPointerException  	18	7	add
288	[BUG]  [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  minimum  =  Math.max(minimum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }  else  {  return  null;  }  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]          minimum    =    Math.min(minimum,    maximum);    minimum  =  Math.max(minimum,  Math.min(maximum,  Double.POSITIVE_INFINITY));  if(includeInterval)  {  minimum  =  Math.max(minimum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }  else  {  return  null;  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	                minimum        =        Math.min(minimum,        maximum);        minimum    =    Math.max(minimum,    Math.min(maximum,    Double.POSITIVE_INFINITY));    if(includeInterval)  {  minimum  =  Math.max(minimum,  Math.max(maximum,  Double.POSITIVE_INFINITY));  }  else  {  return  null;  }	  	compilable	  [FE]  NullPointerException  	18	7	add
289	[BUG]  [BUGGY]  if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum!=  Double.POSITIVE_INFINITY)  {  return  null;  }  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum!=  Double.POSITIVE_INFINITY)  {  return  null;  }  [BUGGY]      return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum!=  Double.POSITIVE_INFINITY)  {  return  null;  }	  if(maximum    ==    Double.POSITIVE_INFINITY)    {    if(minimum    ==    Double.POSITIVE_INFINITY    ||    maximum    ==    Double.POSITIVE_INFINITY)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
290	[BUG]  [BUGGY]  if(includeInterval)  {  maximum  =  Math.max(minimum,  null);  maximum  =  Math.max(maximum,  Math.min(minimum,  Double.POSITIVE_INFINITY));  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]        [BUGGY]  if(includeInterval)  {  maximum  =  Math.max(minimum,  null);  maximum  =  Math.max(maximum,  Math.min(minimum,  Double.POSITIVE_INFINITY));  }  [BUGGY]      if  (minimum  ==  Double.POSITIVE_INFINITY)  {  return  null;  }  else  {  return  new  Range(minimum,  maximum);  }  }  [CLASS]  DatasetUtilities  [METHOD]  iterateRangeBounds  [RETURN_TYPE]  Range  XYDataset  dataset  boolean  includeInterval  	projects/Chart2/source/org/jfree/data/general/DatasetUtilities.java	0.2886751345948129	1283	1283	2	replace	if(includeInterval)  {  maximum  =  Math.max(minimum,  null);  maximum  =  Math.max(maximum,  Math.min(minimum,  Double.POSITIVE_INFINITY));  }	          maximum    =    Math.max(maximum,    maximum);    maximum    =    Math.max(maximum,    Math.max(maximum,    Double.POSITIVE_INFINITY));    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
