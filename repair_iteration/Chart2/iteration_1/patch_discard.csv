compilation error,757,add,[CE] 'else' without 'if', ,if(!Double.isNaN(lvalue)&&!Double.isInfinite(uvalue)) {
compilation error,757,add,[CE] 'else' without 'if', ,if(!Double.isNaN(lvalue)|| Double.isNaN(uvalue)) {
patch is same with buggy,756,replace,, intervalXYData.getStartXValue(series,  item);  lvalue  =  intervalXYData.getStartXValue(series,  item);  ,intervalXYData.getStartXValue(series, item); lvalue = intervalXYData.getStartXValue(series, item);
compilation error,756,replace,[CE] variable uvalue might not have been initialized, intervalXYData.getStartXValue(series,  item);  lvalue  =  intervalXYData.getStartXValue(series,  item);  ,intervalXYData.getStartXValue(series, item); lvalue = intervalXYData.getEndXValue(series, item);
compilation error,746,add,[CE] variable minimum is already defined in method iterateDomainBounds(XYDataset,boolean), ,double minimum = Math.min(0.0, 0.0);
compilation error,746,add,[CE] variable minimum is already defined in method iterateDomainBounds(XYDataset,boolean), ,double minimum = Math.max(0.0, 0.0);
patch is same with buggy,746,replace,, double  maximum  =  Math.max(0.0,  0.0);  ,double maximum = Math.max(0.0, 0.0);
increase failing tests,760,replace, [FE] AssertionFailedError, if(!Double.isNaN(uvalue)&&!Double.isNaN(maximum))  {  ,if(!Double.isNaN(uvalue)|| Double.isNaN(lvalue)) {
compilation error,760,add,[CE] 'else' without 'if', ,if(!Double.isNaN(uvalue)&& Double.isInfinite(uvalue)) {
compilation error,745,add,[CE] variable minimum is already defined in method iterateDomainBounds(XYDataset,boolean), ,double minimum = Double.POSITIVE_INFINITY + 2;
patch is same with buggy,756,replace,, lvalue  =  intervalXYData.getStartXValue(series,  item);  ,lvalue = intervalXYData.getStartXValue(series, item);
compilation error,756,replace,[CE] cannot find symbol, lvalue  =  intervalXYData.getStartXValue(series,  item);  ,lvalue = intervalXYData.getstartXValue(series, item);
patch is same with buggy,760,replace,, if(!Double.isNaN(uvalue)||  Double.isInfinite(uvalue))  {  ,if(!Double.isNaN(uvalue)|| Double.isInfinite(uvalue)) {
increase failing tests,742,add, [FE] IllegalArgumentException, ,if(dataset == null || dataset.getSeriesCount() > 0) { throw new IllegalArgumentException("Null 'dataset' argument. "); }
compilation error,779,replace,[CE] cannot find symbol maximal, if(minimum  >=  maximum)  {  ,if(minimum > maximal) {
compilation error,756,replace,[CE] variable uvalue might not have been initialized, lvalue  =  intervalXYData.getStartXValue(series,  item);  ,lvalue = intervalXYData.getEndXValue(series, item);
compilation error,756,replace,[CE] 'else' without 'if', lvalue  =  intervalXYData.getStartXValue(series,  item);  ,if(!Double.isNaN(lvalue)) { minimum = Math.min(minimum, lvalue); if(!Double.isNaN(uvalue)) { minimum = Math.min(minimum, lvalue); }
compilation error,747,add,[CE] cannot find symbol, ,double seriesCount = dataset.getRowCount();
compilation error,747,add,[CE] variable seriesCount is already defined in method iterateDomainBounds(XYDataset,boolean), ,double seriesCount = dataset.getSeriesCount() - 1;
increase failing tests,1247,replace, [FE] AssertionFailedError, if(!Double.isNaN(uvalue)||  Double.isInfinite(uvalue))  {  ,if(!Double.isNaN(maximum)&&!Double.isNaN(minimum)) {
patch is same with buggy,757,replace,, if(!Double.isNaN(lvalue)&&!Double.isNaN(uvalue))  {  ,if(!Double.isNaN(lvalue)&&!Double.isNaN(uvalue)) {
patch is same with buggy,1247,replace,, if(!Double.isNaN(uvalue)||  Double.isInfinite(uvalue))  {  ,if(!Double.isNaN(uvalue)|| Double.isInfinite(uvalue)) {
increase failing tests,1247,replace, [FE] NullPointerException, if(!Double.isNaN(uvalue)||  Double.isInfinite(uvalue))  {  ,if(!Double.isNaN(uvalue)&& Double.isInfinite(uvalue)) {
increase failing tests,760,replace, [FE] AssertionFailedError, if(!Double.isNaN(uvalue)||  Double.isInfinite(uvalue))  {  ,if(!Double.isNaN(maximum)&&!Double.isNaN(minimum)) {
patch is same with buggy,1231,replace,, double  minimum  =  Double.POSITIVE_INFINITY  +  1;  ,double minimum = Double.POSITIVE_INFINITY + 1;
patch is same with buggy,1283,replace,, if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY)  {  ,if(minimum == Double.POSITIVE_INFINITY || maximum == Double.POSITIVE_INFINITY) {
increase failing tests,1283,replace, [FE] NullPointerException, if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY)  {  ,if(minimum == Double.POSITIVE_INFINITY || maximum < Double.POSITIVE_INFINITY) {
compilation error,780,add,[CE] incompatible types, ,return new NullPointerException(" ");
compilation error,1231,add,[CE] variable minimum is already defined in method iterateRangeBounds(XYDataset,boolean), ,double minimum = Double.POSITIVE_INFINITY * Integer.MAX_VALUE;
compilation error,1231,add,[CE] variable minimum is already defined in method iterateRangeBounds(XYDataset,boolean), ,double minimum = Double.POSITIVE_INFINITY - Integer.MAX_VALUE;
patch is same with buggy,760,replace,, if(!Double.isNaN(uvalue)&&!Double.isNaN(maximum))  {  ,if(!Double.isNaN(uvalue)&&!Double.isNaN(maximum)) {
compilation error,1231,add,[CE] variable minimum is already defined in method iterateRangeBounds(XYDataset,boolean), ,double minimum = Double.POSITIVE_INFINITY + 2;
compilation error,1283,add,[CE] illegal start of expression, ,if(minimum!= Double.POSITIVE_INFINITY || maximum == Double.POSITIVE_INFINITY) {
compilation error,1283,add,[CE] illegal start of expression, ,if(minimum == Double.POSITIVE_INFINITY || maximum >= Double.POSITIVE_INFINITY) {
increase failing tests,1247,replace, [FE] NullPointerException, if(!Double.isNaN(uvalue)&&!Double.isNaN(maximum))  {  ,if(!Double.isNaN(uvalue)|| Double.isNaN(uvalue)) {
patch is same with buggy,1247,replace,, if(!Double.isNaN(uvalue)&&!Double.isNaN(maximum))  {  , 
patch is same with buggy,1247,replace,, if(!Double.isNaN(uvalue)&&!Double.isNaN(maximum))  {  , 
compilation error,780,add,[CE] illegal start of expression, ,if(minimum > maximum) { if(includeInterval) { return new Range(minimum, maximum); }
compilation error,780,add,[CE] illegal start of expression, ,if(includeInterval) { if(minimum > maximum) { return new Range(minimum, maximum); }
patch is same with buggy,745,replace,, double  minimum  =  Double.POSITIVE_INFINITY  +  1;  ,double minimum = Double.POSITIVE_INFINITY + 1;
increase failing tests,742,replace, [FE] IllegalArgumentException, if(dataset  ==  null  ||  dataset.getSeriesCount()  <  0)  {  ,if(dataset == null || dataset.getSeriesCount() > 0) {
patch is same with buggy,742,replace,, if(dataset  ==  null  ||  dataset.getSeriesCount()  <  0)  {  ,if(dataset == null || dataset.getSeriesCount() < 0) {
compilation error,1244,add,[CE] 'else' without 'if', ,if(!Double.isNaN(lvalue)&&!Double.isInfinite(uvalue)) {
compilation error,726,add,[CE] variable dataset is already defined in method iterateDomainBounds(XYDataset), ,XYDataset dataset = getDataset(dataset); iterateDomainBounds(dataset, true);
compilation error,726,add,[CE] variable dataset is already defined in method iterateDomainBounds(XYDataset), ,XYDataset dataset = getDataset(dataset); iterateDomainBounds(dataset, false);
patch is same with buggy,747,replace,, double  seriesCount  =  dataset.getSeriesCount();  ,double seriesCount = dataset.getSeriesCount();
compilation error,726,replace,[CE] non-static variable this cannot be referenced from a static context, return  iterateDomainBounds(dataset,  false);  ,return iterateDomainBounds(this.dataset, false);
patch is same with buggy,1244,replace,, if(!Double.isNaN(lvalue)&&!Double.isNaN(uvalue))  {  ,if(!Double.isNaN(lvalue)&&!Double.isNaN(uvalue)) {
patch is same with buggy,780,replace,, return  new  Range(minimum,  maximum);  ,return new Range(minimum, maximum);
patch is same with buggy,742,replace,, if(dataset  ==  null  ||  dataset.getSeriesCount()  <  0)  {  ,if(dataset == null || dataset.getSeriesCount() < 0) {
patch is same with buggy,760,replace,, if(!Double.isNaN(uvalue)||  Double.isInfinite(uvalue))  {  ,if(!Double.isNaN(uvalue)|| Double.isInfinite(uvalue)) {
compilation error,760,replace,[CE] illegal start of type, if(!Double.isNaN(uvalue)||  Double.isInfinite(uvalue))  {  ,double uvalue = getItemCount();
increase failing tests,760,replace, [FE] AssertionFailedError, if(!Double.isNaN(uvalue)&&!Double.isNaN(maximum))  {  ,if(!Double.isNaN(uvalue)||!Double.isNaN(seriesCount)) {
compilation error,760,replace,[CE] 'else' without 'if', if(!Double.isNaN(uvalue)||  Double.isInfinite(uvalue))  {  ,if(uvalue!= null) { if(!Double.isNaN(uvalue)&&!Double.isNaN(lvalue)) {
increase failing tests,779,replace, [FE]  double), if(minimum  >=  maximum)  {  ,if(maximum > minimum) {
patch is same with buggy,756,replace,, lvalue  =  intervalXYData.getStartXValue(series,  item);  ,lvalue = intervalXYData.getStartXValue(series, item);
compilation error,756,replace,[CE] variable uvalue might not have been initialized, lvalue  =  intervalXYData.getStartXValue(series,  item);  ,lvalue = intervalXYData.getStartXValue(series, item)- 1;
patch is same with buggy,1247,replace,, if(!Double.isNaN(uvalue)||  Double.isInfinite(uvalue))  {  ,if(!Double.isNaN(uvalue)|| Double.isInfinite(uvalue)) {
compilation error,780,add,[CE] illegal start of expression, ,if(includeInterval) { if(minimum > maximum) { return new Range(minimum); }
compilation error,780,add,[CE] illegal start of expression, ,if(includeInterval) { if(this.minimum > maximum) { return new Range(minimum, maximum); }
compilation error,1283,add,[CE] illegal start of expression, ,if(minimum == Double.NEGATIVE_INFINITY || maximum == Double.POSITIVE_INFINITY) {
increase failing tests,760,replace, [FE] AssertionFailedError, if(!Double.isNaN(uvalue)&&!Double.isNaN(maximum))  {  ,if(!Double.isNaN(uvalue)||!Double.isNaN(maximum)) {
patch is same with buggy,760,replace,, if(!Double.isNaN(uvalue)&&!Double.isNaN(maximum))  {  , 
patch is same with buggy,1231,replace,, double  minimum  =  Double.POSITIVE_INFINITY  +  1;  , 
compilation error,780,replace,[CE] missing return statement, return  new  Range(minimum,  maximum);  ,if(includeInterval) { return new Range(minimum, maximum); }
compilation error,780,replace,[CE] constructor Range in class Range cannot be applied to given types;, return  new  Range(minimum,  maximum);  ,if(includeInterval) { return new Range(minimum, maximum); } else { return new Range(includeInterval); }
compilation error,1247,add,[CE] 'else' without 'if', ,if(includeInterval ||!Double.isNaN(uvalue)|| Double.isInfinite(uvalue)) {
increase failing tests,1247,replace, [FE] AssertionFailedError, if(!Double.isNaN(uvalue)&&!Double.isNaN(maximum))  {  ,if(!Double.isNaN(uvalue)||!Double.isNaN(maximum)) {
patch is same with buggy,1247,replace,, if(!Double.isNaN(uvalue)&&!Double.isNaN(maximum))  {  ,if(!Double.isNaN(uvalue)&&!Double.isNaN(maximum)) {
compilation error,760,add,[CE] 'else' without 'if', ,if(Double.isNaN(uvalue)|| Double.isInfinite(uvalue)) {
compilation error,779,add,[CE] illegal start of expression, ,if(maximum > 0) {
patch is same with buggy,1247,replace,, if(!Double.isNaN(uvalue)&&!Double.isNaN(maximum))  {  ,if(!Double.isNaN(uvalue)&&!Double.isNaN(maximum)) {
patch is same with buggy,757,replace,, if(!Double.isNaN(lvalue)&&!Double.isNaN(uvalue))  {  ,if(!Double.isNaN(lvalue)&&!Double.isNaN(uvalue)) {
increase failing tests,747,replace, [FE] NullPointerException, double  seriesCount  =  dataset.getSeriesCount();  ,double seriesCount = dataset.getSeriesCount() / 2;
patch is same with buggy,1244,replace,, if(!Double.isNaN(lvalue)&&!Double.isNaN(uvalue))  {  ,if(!Double.isNaN(lvalue)&&!Double.isNaN(uvalue)) {
compilation error,1247,replace,[CE] cannot find symbol ohlc, if(!Double.isNaN(uvalue)||  Double.isInfinite(uvalue))  {  ,if(!Double.isNaN(uvalue)&&!Double.isNaN(ohlc)) {
patch is same with buggy,1247,replace,, if(!Double.isNaN(uvalue)||  Double.isInfinite(uvalue))  {  , 
patch is same with buggy,745,replace,, double  minimum  =  Double.POSITIVE_INFINITY  +  1;  , 
compilation error,1244,add,[CE] 'else' without 'if', ,if(includeInterval) { if(!Double.isNaN(lvalue)&&!Double.isNaN(uvalue)) {
compilation error,746,add,[CE] variable includeInterval is already defined in method iterateDomainBounds(XYDataset,boolean), ,boolean includeInterval = dataset.isIncludeInterval();
compilation error,757,add,[CE] 'else' without 'if', ,if(lvalue < 0.0) { if(!Double.isNaN(lvalue)&&!Double.isNaN(uvalue)) {
patch is same with buggy,746,replace,, double  maximum  =  Math.max(0.0,  0.0);  ,double maximum = Math.max(0.0, 0.0);
compilation error,742,add,[CE] illegal start of expression, ,if(dataset == null || dataset.getSeriesCount() < 2) {
compilation error,742,add,[CE] illegal start of expression, ,if(dataset == null || dataset.getSeriesCount() <= 0) {
patch is same with buggy,1283,replace,, if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY)  {  ,if(minimum == Double.POSITIVE_INFINITY || maximum == Double.POSITIVE_INFINITY) {
patch is same with buggy,1283,replace,, if(minimum  ==  Double.POSITIVE_INFINITY  ||  maximum  ==  Double.POSITIVE_INFINITY)  {  ,if(minimum == Double.POSITIVE_INFINITY || maximum == Double.POSITIVE_INFINITY) {
compilation error,756,replace,[CE] variable uvalue might not have been initialized, intervalXYData.getStartXValue(series,  item);  lvalue  =  intervalXYData.getStartXValue(series,  item);  ,intervalXYData.getStartXValue(series, item);
patch is same with buggy,760,replace,, if(!Double.isNaN(uvalue)||  Double.isInfinite(uvalue))  {  ,if(!Double.isNaN(uvalue)|| Double.isInfinite(uvalue)) {
compilation error,746,add,[CE] cannot find symbol, ,double maximum = dataset.getMaximumBounds();
patch is same with buggy,1247,replace,, if(!Double.isNaN(uvalue)&&!Double.isNaN(maximum))  {  ,if(!Double.isNaN(uvalue)&&!Double.isNaN(maximum)) {
compilation error,756,replace,[CE] cannot find symbol mvalue, lvalue  =  intervalXYData.getStartXValue(series,  item);  ,mvalue = intervalXYData.getEndXValue(series, item);
compilation error,756,replace,[CE] cannot find symbol rvalue, lvalue  =  intervalXYData.getStartXValue(series,  item);  ,rvalue = intervalXYData.getRangeXValue(series, item);
patch is same with buggy,1231,replace,, double  minimum  =  Double.POSITIVE_INFINITY  +  1;  , 
compilation error,1283,add,[CE] illegal start of expression, ,if(minimum == Double.NaN || maximum == Double.POSITIVE_INFINITY) {
patch is same with buggy,747,replace,, double  seriesCount  =  dataset.getSeriesCount();  , 
patch is same with buggy,756,replace,, lvalue  =  intervalXYData.getStartXValue(series,  item);  ,lvalue = intervalXYData.getStartXValue(series, item);
compilation error,780,add,[CE] illegal start of expression, ,if(includeInterval) { if(maximum > 0) { return new Range(minimum, maximum); }
compilation error,780,add,[CE] illegal start of expression, ,if(includeInterval) { if(!isExported(minimum, maximum)) { return new Range(minimum, maximum); }
patch is same with buggy,757,replace,, if(!Double.isNaN(lvalue)&&!Double.isNaN(uvalue))  {  ,if(!Double.isNaN(lvalue)&&!Double.isNaN(uvalue)) {
compilation error,726,add,[CE] illegal start of expression, ,if(isGlobal()) { XYDataset dataset = loadDataset(dataset); if(dataset!= null) { return null; }
compilation error,726,add,[CE] illegal start of expression, ,if(isGlobal()) { XYDataset dataset = loadDataset(dataset); if(dataset!= null) { return new Range(dataset, false); }
patch is same with buggy,760,replace,, if(!Double.isNaN(uvalue)&&!Double.isNaN(maximum))  {  ,if(!Double.isNaN(uvalue)&&!Double.isNaN(maximum)) {
patch is same with buggy,1244,replace,, if(!Double.isNaN(lvalue)&&!Double.isNaN(uvalue))  {  ,if(!Double.isNaN(lvalue) &&!Double.isNaN(uvalue)) {
patch is same with buggy,1244,replace,, if(!Double.isNaN(lvalue)&&!Double.isNaN(uvalue))  {  ,if(!Double.isNaN(lvalue)&&!Double.isNaN(uvalue)) {
patch is same with buggy,1247,replace,, if(!Double.isNaN(uvalue)&&!Double.isNaN(maximum))  {  ,if(!Double.isNaN(uvalue)&&!Double.isNaN(maximum)) {
increase failing tests,756,add, [FE] ArrayIndexOutOfBoundsException, ,item = intervalXYData.getItemCount(series);
patch is same with buggy,780,replace,, return  new  Range(minimum,  maximum);  ,return new Range(minimum, maximum);
compilation error,780,replace,[CE] missing return statement, return  new  Range(minimum,  maximum);  ,if(includeInterval) { return new Range(minimum, maximum); } else if(includeInterval) { return new Range(minimum, maximum); }
patch is same with buggy,742,replace,, if(dataset  ==  null  ||  dataset.getSeriesCount()  <  0)  {  ,if(dataset == null || dataset.getSeriesCount() < 0) {
increase failing tests,742,replace, [FE] IllegalArgumentException, if(dataset  ==  null  ||  dataset.getSeriesCount()  <  0)  {  ,if(dataset == null || dataset.getSeriesCount()!= 0) {
patch is same with buggy,1247,replace,, if(!Double.isNaN(uvalue)||  Double.isInfinite(uvalue))  {  ,if(!Double.isNaN(uvalue)|| Double.isInfinite(uvalue)) {
patch is same with buggy,746,replace,, double  maximum  =  Math.max(0.0,  0.0);  ,double maximum = Math.max(0.0, 0.0);
