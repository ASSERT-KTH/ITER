bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  type,  value);  [CE]  cannot  find  symbol  compiler  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  type,  value);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  qualifiedName,  type,  value);	  NodeTraversal.traverse(compiler,    node,    type,    resultEqualsValue,    value);    	non-compiled	[CE]  cannot  find  symbol  compiler	301	None	replace
2	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  resultEqualsValue,  value);  [CE]  cannot  find  symbol  compiler  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  resultEqualsValue,  value);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  qualifiedName,  resultEqualsValue,  value);	  NodeTraversal.traverse(compiler,    node,    type,    resultEqualsValue,    value);    	non-compiled	[CE]  cannot  find  symbol  compiler	301	None	replace
3	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  type,  resultEqualsValue,  value);  [CE]  cannot  find  symbol  compiler  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  type,  resultEqualsValue,  value);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  qualifiedName,  type,  resultEqualsValue,  value);	  NodeTraversal.traverse(compiler,    node,    type,    resultEqualsValue,    value);    	non-compiled	[CE]  cannot  find  symbol  compiler	301	None	replace
4	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  value,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  value,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  qualifiedName,  value,  resultEqualsValue);	  NodeTraversal.traverse(compiler,    node,    type,    resultEqualsValue,    value);    	non-compiled	[CE]  cannot  find  symbol  compiler	301	None	replace
5	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  value,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  value,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  type,  value,  resultEqualsValue);	  NodeTraversal.traverse(compiler,    node,    type,    resultEqualsValue,    value);    	non-compiled	[CE]  cannot  find  symbol  compiler	301	None	replace
6	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  scope,  value);  [CE]  cannot  find  symbol  compiler  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  scope,  value);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  scope,  value);	  NodeTraversal.traverse(compiler,    node,    type,    resultEqualsValue,    value);    	non-compiled	[CE]  cannot  find  symbol  compiler	301	None	replace
7	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  resultEqualsValue,  type);  [CE]  cannot  find  symbol  compiler  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  resultEqualsValue,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  qualifiedName,  resultEqualsValue,  type);	  NodeTraversal.traverse(compiler,    node,    type,    resultEqualsValue,    value);    	non-compiled	[CE]  cannot  find  symbol  compiler	301	None	replace
8	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=    null)    {    throw    new    IllegalArgumentException(     "Node    cannot    be    refined.    n     "    +    node.toStringTree());    }    if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n     "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(type!=        null)        {        throw        new        IllegalArgumentException(       "Node        cannot        be        refined.        n       "        +        node.toStringTree());        }        if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n       "    +    node.toStringTree());    }    if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }	  	compilable	  [FE]  IllegalArgumentException  	89	1	add
9	[BUG]  [BUGGY]  if(type!=    null)    {    throw    new    IllegalArgumentException(     "Node    cannot    be    refined.    n     "    +    node.toStringTree());    }    if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n     "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=    null)    {    throw    new    IllegalArgumentException(     "Node    cannot    be    refined.    n     "    +    node.toStringTree());    }    if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n     "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=        null)        {        throw        new        IllegalArgumentException(       "Node        cannot        be        refined.        n       "        +        node.toStringTree());        }        if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n       "    +    node.toStringTree());    }    if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }	  	compilable	  [FE]  IllegalArgumentException  	89	1	add
10	[BUG]  [BUGGY]  if(type!=    null)    {    throw    new    IllegalArgumentException(     "Node    cannot    be    refined.    n     "    +    node.toStringTree());    }    if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n     "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree  [CE]  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=    null)    {    throw    new    IllegalArgumentException(     "Node    cannot    be    refined.    n     "    +    node.toStringTree());    }    if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n     "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=        null)        {        throw        new        IllegalArgumentException(       "Node        cannot        be        refined.        n       "        +        node.toStringTree());        }        if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n       "    +    node.toStringTree());    }    if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree	  	non-compiled	[CE]  	89	None	add
11	[BUG]  [BUGGY]  if(type!=    null)    {    throw    new    IllegalArgumentException(     "Node    cannot    be    refined.    n     "    +    node.toStringTree());    }    if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n     "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n  [CE]  unclosed  string  literal  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=    null)    {    throw    new    IllegalArgumentException(     "Node    cannot    be    refined.    n     "    +    node.toStringTree());    }    if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n     "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=        null)        {        throw        new        IllegalArgumentException(       "Node        cannot        be        refined.        n       "        +        node.toStringTree());        }        if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n       "    +    node.toStringTree());    }    if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n	  	non-compiled	[CE]  unclosed  string  literal	89	None	add
12	[BUG]  [BUGGY]  if(type!=    null)    {    throw    new    IllegalArgumentException(     "Node    cannot    be    refined.    n     "    +    node.toStringTree());    }    if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n     "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.to  [CE]  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=    null)    {    throw    new    IllegalArgumentException(     "Node    cannot    be    refined.    n     "    +    node.toStringTree());    }    if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n     "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.to  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=        null)        {        throw        new        IllegalArgumentException(       "Node        cannot        be        refined.        n       "        +        node.toStringTree());        }        if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n       "    +    node.toStringTree());    }    if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.to	  	non-compiled	[CE]  	89	None	add
13	[BUG]  [BUGGY]  Preconditions.checkState(scope.isUndefinedType()  ||  scope.isUndefinedType());  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(scope.isUndefinedType()  ||  scope.isUndefinedType());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(scope.isUndefinedType()  ||  scope.isUndefinedType());	  Preconditions.checkState(scope.isUndefinedType());    	non-compiled	[CE]  cannot  find  symbol	272	None	replace
14	[BUG]  [BUGGY]  Preconditions.checkState(scope.isUndefinedType(),  type);  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(scope.isUndefinedType(),  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(scope.isUndefinedType(),  type);	  Preconditions.checkState(scope.isUndefinedType());    	non-compiled	[CE]  cannot  find  symbol	272	None	replace
15	[BUG]  [BUGGY]  Preconditions.checkState(node.isUndefinedType());  [CE]  cannot  find  symbol  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node.isUndefinedType());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(node.isUndefinedType());	  Preconditions.checkState(scope.isUndefinedType());    	non-compiled	[CE]  cannot  find  symbol	272	None	replace
16	[BUG]  [BUGGY]  Preconditions.checkState(scope.isUndefinedType()  ||  type.isUndefinedType());  [CE]  cannot  find  symbol  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(scope.isUndefinedType()  ||  type.isUndefinedType());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(scope.isUndefinedType()  ||  type.isUndefinedType());	  Preconditions.checkState(scope.isUndefinedType());    	non-compiled	[CE]  cannot  find  symbol	272	None	replace
17	[BUG]  [BUGGY]  Preconditions.checkState(scope.isUndefinedType()  ||  isNativeType(UNKNOWN_TYPE));  [CE]  cannot  find  symbol  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(scope.isUndefinedType()  ||  isNativeType(UNKNOWN_TYPE));  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(scope.isUndefinedType()  ||  isNativeType(UNKNOWN_TYPE));	  Preconditions.checkState(scope.isUndefinedType());    	non-compiled	[CE]  cannot  find  symbol	272	None	replace
18	[BUG]  [BUGGY]  Preconditions.checkState(scope.isUndefinedType()  ||  type.isUnknownType());  [CE]  cannot  find  symbol  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(scope.isUndefinedType()  ||  type.isUnknownType());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(scope.isUndefinedType()  ||  type.isUnknownType());	  Preconditions.checkState(scope.isUndefinedType());    	non-compiled	[CE]  cannot  find  symbol	272	None	replace
19	[BUG]  [BUGGY]  Preconditions.checkState(scope.isUndefinedType()  ||  scope.isNativeType(UNKNOWN_TYPE));  [CE]  cannot  find  symbol  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(scope.isUndefinedType()  ||  scope.isNativeType(UNKNOWN_TYPE));  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(scope.isUndefinedType()  ||  scope.isNativeType(UNKNOWN_TYPE));	  Preconditions.checkState(scope.isUndefinedType());    	non-compiled	[CE]  cannot  find  symbol	272	None	replace
20	[BUG]  [BUGGY]  Preconditions.checkState(scope.isUndefinedType()  ||  node.isUndefinedType());  [CE]  cannot  find  symbol  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(scope.isUndefinedType()  ||  node.isUndefinedType());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(scope.isUndefinedType()  ||  node.isUndefinedType());	  Preconditions.checkState(scope.isUndefinedType());    	non-compiled	[CE]  cannot  find  symbol	272	None	replace
21	[BUG]  [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType);  [CE]  cannot  find  symbol  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(node,  qualifiedName,  origType);	  scope.inferSlot(node,    type,    origType,    qualifiedName);    	non-compiled	[CE]  cannot  find  symbol	360	None	replace
22	[BUG]  [BUGGY]  scope.inferSlot(node,  qualificationName,  origType,  type);  [CE]  cannot  find  symbol  qualificationName  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferSlot(node,  qualificationName,  origType,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(node,  qualificationName,  origType,  type);	  scope.inferSlot(node,    type,    origType,    qualifiedName);    	non-compiled	[CE]  cannot  find  symbol  qualificationName	360	None	replace
23	[BUG]  [BUGGY]  scope.inferSlot(scope,  node,  qualifiedName,  origType);  [CE]  cannot  find  symbol  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferSlot(scope,  node,  qualifiedName,  origType);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(scope,  node,  qualifiedName,  origType);	  scope.inferSlot(node,    type,    origType,    qualifiedName);    	non-compiled	[CE]  cannot  find  symbol	360	None	replace
24	[BUG]  [BUGGY]  Node  cannot  be  refined.   "  +  node.getQualifiedName());  [CE]  [FE]        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  cannot  be  refined.   "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  cannot  be  refined.   "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getQualifiedName());    Node    cannot    be    refined.    n       "    +    node.getQualifiedName());    	non-compiled	[CE]  	48	None	replace
25	[BUG]  [BUGGY]  Node  cannot  be  refined.  n   "  +  node.getQualifiedName());  [CE]  [FE]          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  cannot  be  refined.  n   "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  cannot  be  refined.  n   "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getQualifiedName());    Node    cannot    be    refined.    n       "    +    node.getQualifiedName());    	non-compiled	[CE]  	48	None	replace
26	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName());  Node  cannot  be  refined.   "  +  node.getQualifiedName());  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName());  Node  cannot  be  refined.   "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName());  Node  cannot  be  refined.   "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getQualifiedName());    Node    cannot    be    refined.    n       "    +    node.getQualifiedName());    	non-compiled	[CE]  	48	None	replace
27	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  qualified  name. "  +  node.getQualifiedName());  Node  cannot  be  refined.   "  +  node.getQualifiedName());  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  qualified  name. "  +  node.getQualifiedName());  Node  cannot  be  refined.   "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  qualified  name. "  +  node.getQualifiedName());  Node  cannot  be  refined.   "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getQualifiedName());    Node    cannot    be    refined.    n       "    +    node.getQualifiedName());    	non-compiled	[CE]  	48	None	replace
28	[BUG]  [BUGGY]  Node  cannot  be  refined.n't   "  +  node.getQualifiedName());  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  cannot  be  refined.n't   "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  cannot  be  refined.n't   "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getQualifiedName());    Node    cannot    be    refined.    n       "    +    node.getQualifiedName());    	non-compiled	[CE]  	48	None	replace
29	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  qualified  name: "  +  node.getQualifiedName());  Node  cannot  be  refined.   "  +  node.getQualifiedName());  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  qualified  name: "  +  node.getQualifiedName());  Node  cannot  be  refined.   "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  qualified  name: "  +  node.getQualifiedName());  Node  cannot  be  refined.   "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getQualifiedName());    Node    cannot    be    refined.    n       "    +    node.getQualifiedName());    	non-compiled	[CE]  	48	None	replace
30	[BUG]  [BUGGY]  Node  node  =  node.getJSType();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                  UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  node.getJSType();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  node.getJSType();	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    JSType    node    =    node.getJSType();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	59	None	replace
31	[BUG]  [BUGGY]  node  =  node.getJSType();  [CE]  incompatible  types  [FE]                    UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  node  =  node.getJSType();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	node  =  node.getJSType();	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    JSType    node    =    node.getJSType();    	non-compiled	[CE]  incompatible  types	59	None	replace
32	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getString());  JSType  node  =  node.getJSType();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                      UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getString());  JSType  node  =  node.getJSType();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getString());  JSType  node  =  node.getJSType();	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    JSType    node    =    node.getJSType();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	59	None	replace
33	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]                        UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getString());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    JSType    node    =    node.getJSType();    	compilable	  [FE]  UnsupportedOperationException  	59	1	replace
34	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getString());  [FE]  UnsupportedOperationException  [FE]                        UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getString());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    JSType    node    =    node.getJSType();    	compilable	  [FE]  UnsupportedOperationException  	59	1	replace
35	[BUG]  [BUGGY]  n  =  node.getLineno();  [CE]  cannot  find  symbol  n  [FE]        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  n  =  node.getLineno();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	n  =  node.getLineno();	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    n    =    node.getLineno();    	non-compiled	[CE]  cannot  find  symbol  n	305	None	replace
36	[BUG]  [BUGGY]  Node  node  =  node.getLineno();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  node.getLineno();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  node.getLineno();	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    n    =    node.getLineno();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	305	None	replace
37	[BUG]  [BUGGY]  node  =  node.getLineno();  [CE]  incompatible  types  [FE]            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  node  =  node.getLineno();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	node  =  node.getLineno();	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    n    =    node.getLineno();    	non-compiled	[CE]  incompatible  types	305	None	replace
38	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  n  =  node.getLineno();  [CE]  cannot  find  symbol  n  [FE]              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  n  =  node.getLineno();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  n  =  node.getLineno();	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    n    =    node.getLineno();    	non-compiled	[CE]  cannot  find  symbol  n	305	None	replace
39	[BUG]  [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  n  =  node.getLineno();  [CE]  cannot  find  symbol  n  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  n  =  node.getLineno();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  n  =  node.getLineno();	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    n    =    node.getLineno();    	non-compiled	[CE]  cannot  find  symbol  n	305	None	replace
40	[BUG]  [BUGGY]  node  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree());  }  [CE]  not  a  statement  [FE]        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  node  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	node  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree());  }	  node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.   "    +    node.toStringTree());    }    	non-compiled	[CE]  not  a  statement	366	None	replace
41	[BUG]  [BUGGY]  resultEqualsValue)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  }  [CE]  not  a  statement  [FE]          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  resultEqualsValue)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	resultEqualsValue)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  }	  node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.   "    +    node.toStringTree());    }    	non-compiled	[CE]  not  a  statement	366	None	replace
42	[BUG]  [BUGGY]  Node  cannot  be  refined.  n   "  +  node.toStringTree());  break;  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  cannot  be  refined.  n   "  +  node.toStringTree());  break;  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  cannot  be  refined.  n   "  +  node.toStringTree());  break;	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.toStringTree());    Node    cannot    be    refined.    n       "    +    node.toStringTree());    break;    	non-compiled	[CE]  	161	None	replace
43	[BUG]  [BUGGY]  Node  cannot  be  refined.   "  +  node.toStringTree());  break;  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  cannot  be  refined.   "  +  node.toStringTree());  break;  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  cannot  be  refined.   "  +  node.toStringTree());  break;	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.toStringTree());    Node    cannot    be    refined.    n       "    +    node.toStringTree());    break;    	non-compiled	[CE]  	161	None	replace
44	[BUG]  [BUGGY]  Node  cannot  be  refined.n't   "  +  node.toStringTree());  break;  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  cannot  be  refined.n't   "  +  node.toStringTree());  break;  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  cannot  be  refined.n't   "  +  node.toStringTree());  break;	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.toStringTree());    Node    cannot    be    refined.    n       "    +    node.toStringTree());    break;    	non-compiled	[CE]  	161	None	replace
45	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getString());  [CE]  <identifier>  expected  [FE]              UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getString());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getString());    	non-compiled	[CE]  <identifier>  expected	464	None	replace
46	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getLocalName());  [CE]  unclosed  string  literal  [FE]                UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getLocalName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getString());    	non-compiled	[CE]  unclosed  string  literal	464	None	replace
47	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getString(), ");  [CE]  <identifier>  expected  [FE]                  UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getString(), ");  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getString(), ");	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getString());    	non-compiled	[CE]  <identifier>  expected	464	None	replace
48	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getString(),  type);  [CE]  unclosed  string  literal  [FE]                    UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getString(),  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getString(),  type);	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getString());    	non-compiled	[CE]  unclosed  string  literal	464	None	replace
49	[BUG]  [BUGGY]  Throwables.warning( "Node  cannot  be  refined.  Node  defined  with  node.getString());  [CE]  unclosed  string  literal  [FE]                      UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.warning( "Node  cannot  be  refined.  Node  defined  with  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.warning( "Node  cannot  be  refined.  Node  defined  with  node.getString());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getString());    	non-compiled	[CE]  unclosed  string  literal	464	None	replace
50	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName());  [CE]  unclosed  string  literal  [FE]                        UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getString());    	non-compiled	[CE]  unclosed  string  literal	464	None	replace
51	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.getString()  [FE]                          UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getString(), ");  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getString(), ");	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getString());    	compilable	  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.getString()  	464	1	replace
52	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getString(), ");  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.getString()  [FE]                          UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getString(), ");  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getString(), ");	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getString());    	compilable	  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.getString()  	464	1	replace
53	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getString(),  qualifiedName);  [CE]  unclosed  string  literal  [FE]                            UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getString(),  qualifiedName);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getString(),  qualifiedName);	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getString());    	non-compiled	[CE]  unclosed  string  literal	464	None	replace
54	[BUG]  [BUGGY]  n  =  node.getString();  [CE]  cannot  find  symbol  n  [FE]          UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  n  =  node.getString();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	n  =  node.getString();	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    n       "    +    node.getString());    	non-compiled	[CE]  cannot  find  symbol  n	400	None	replace
55	[BUG]  [BUGGY]  Node  cannot  be  refined.   "  +  node.getString());  [CE]  [FE]            UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  cannot  be  refined.   "  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  cannot  be  refined.   "  +  node.getString());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    n       "    +    node.getString());    	non-compiled	[CE]  	400	None	replace
56	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  n   "  +  node.getString());  [CE]  unclosed  string  literal  [FE]              UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  node.getFirstChild();  n   "  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  node.getFirstChild();  n   "  +  node.getString());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    n       "    +    node.getString());    	non-compiled	[CE]  unclosed  string  literal	400	None	replace
57	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getName());  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.getName());    	non-compiled	[CE]  <identifier>  expected	378	None	replace
58	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getName());  [CE]  cannot  find  symbol  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.getName());    	non-compiled	[CE]  cannot  find  symbol	378	None	replace
59	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.getName());    	compilable	  [FE]  IllegalArgumentException  	378	1	replace
60	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.toStringTree());  [FE]  IllegalArgumentException  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.getName());    	compilable	  [FE]  IllegalArgumentException  	378	1	replace
61	[BUG]  [BUGGY]  Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getName());  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.getName());    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	378	None	replace
62	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node,  scope.getName());  [CE]  cannot  find  symbol  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node,  scope.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node,  scope.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.getName());    	non-compiled	[CE]  cannot  find  symbol	378	None	replace
63	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  new  RestrictByTrueTypeOfResultVisitor(),  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  new  RestrictByTrueTypeOfResultVisitor(),  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope,  new  RestrictByTrueTypeOfResultVisitor(),  resultEqualsValue);	  NodeTraversal.traverse(compiler,    node,    scope,    new    RestrictByTrueTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	69	None	replace
64	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  new  RestrictByTrueTypeOfResultVisitor(),  type);  [CE]  cannot  find  symbol  compiler  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  new  RestrictByTrueTypeOfResultVisitor(),  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope,  new  RestrictByTrueTypeOfResultVisitor(),  type);	  NodeTraversal.traverse(compiler,    node,    scope,    new    RestrictByTrueTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	69	None	replace
65	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  new  RestrictByFalseTypeOfResultVisitor());  [CE]  cannot  find  symbol  compiler  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  new  RestrictByFalseTypeOfResultVisitor());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope,  new  RestrictByFalseTypeOfResultVisitor());	  NodeTraversal.traverse(compiler,    node,    scope,    new    RestrictByTrueTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	69	None	replace
66	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  resultEqualsValue,  new  RestrictByTrueTypeOfResultVisitor());  [CE]  cannot  find  symbol  compiler  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  resultEqualsValue,  new  RestrictByTrueTypeOfResultVisitor());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope,  resultEqualsValue,  new  RestrictByTrueTypeOfResultVisitor());	  NodeTraversal.traverse(compiler,    node,    scope,    new    RestrictByTrueTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	69	None	replace
67	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  Node  cannot  be  refined.   "  +  node.toStringTree());  }  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  Node  cannot  be  refined.   "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(node.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  Node  cannot  be  refined.   "  +  node.toStringTree());  }	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.       "    +    node.toStringTree());    Node    cannot    be    refined.       "    +    node.toStringTree());    break;    	non-compiled	[CE]  	15	None	replace
68	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  Node  cannot  be  refined.   "  +  node.toStringTree());  }  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  Node  cannot  be  refined.   "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(node.getType()  ==  Token.NAME)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  Node  cannot  be  refined.   "  +  node.toStringTree());  }	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.       "    +    node.toStringTree());    Node    cannot    be    refined.       "    +    node.toStringTree());    break;    	non-compiled	[CE]  	15	None	replace
69	[BUG]  [BUGGY]  Node  cannot  be  refined.   "  +  node.toStringTree());  [CE]  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  cannot  be  refined.   "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  cannot  be  refined.   "  +  node.toStringTree());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.       "    +    node.toStringTree());    Node    cannot    be    refined.       "    +    node.toStringTree());    break;    	non-compiled	[CE]  	15	None	replace
70	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree());  Node  cannot  be  refined.   "  +  node.toStringTree());  break;  }  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree());  Node  cannot  be  refined.   "  +  node.toStringTree());  break;  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(node.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree());  Node  cannot  be  refined.   "  +  node.toStringTree());  break;  }	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.       "    +    node.toStringTree());    Node    cannot    be    refined.       "    +    node.toStringTree());    break;    	non-compiled	[CE]  	15	None	replace
71	[BUG]  [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node,  scope.getName());  [CE]  cannot  find  symbol  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node,  scope.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node,  scope.getName());	  new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getName());    	non-compiled	[CE]  cannot  find  symbol	246	None	replace
72	[BUG]  [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getName(),  type);  [CE]  cannot  find  symbol  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getName(),  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getName(),  type);	  new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getName());    	non-compiled	[CE]  cannot  find  symbol	246	None	replace
73	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  defined  with  node.toStringTree(), "  +  node.toStringTree());  [CE]  not  a  statement  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  defined  with  node.toStringTree(), "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  defined  with  node.toStringTree(), "  +  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree(),   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	388	None	replace
74	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(), ",  +  node.toStringTree());  [CE]  not  a  statement  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(), ",  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(), ",  +  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree(),   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	388	None	replace
75	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualifiedName,  node.toStringTree(), "  +  node.toStringTree());  [CE]  not  a  statement  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualifiedName,  node.toStringTree(), "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualifiedName,  node.toStringTree(), "  +  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree(),   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	388	None	replace
76	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualifiedName.toStringTree(), "  +  node.toStringTree());  [CE]  not  a  statement  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualifiedName.toStringTree(), "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualifiedName.toStringTree(), "  +  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree(),   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	388	None	replace
77	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException(node.toStringTree(), "  +  node.toStringTree());  [CE]  not  a  statement  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException(node.toStringTree(), "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException(node.toStringTree(), "  +  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree(),   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	388	None	replace
78	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree(), "  +  node.toStringTree());  [CE]  not  a  statement  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree(), "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree(), "  +  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree(),   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	388	None	replace
79	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(), "  +  node.getLocalName());  [CE]  not  a  statement  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(), "  +  node.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(), "  +  node.getLocalName());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree(),   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	388	None	replace
80	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n' "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n' "  +  node.toStringTree());  }	  if(type!=    null)    {    throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.toStringTree());    }    if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n'    +    node.toStringTree());    }    	compilable	  [FE]  IllegalArgumentException  	94	1	replace
81	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n' "  +  node.toStringTree());  }  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n' "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n' "  +  node.toStringTree());  }	  if(type!=    null)    {    throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.toStringTree());    }    if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n'    +    node.toStringTree());    }    	compilable	  [FE]  IllegalArgumentException  	94	1	replace
82	[BUG]  [BUGGY]  JSType  origType  =  type!=  null?  getNativeType(UNKNOWN_TYPE):  node.toStringTree();  [CE]  variable  origType  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  JSType  origType  =  type!=  null?  getNativeType(UNKNOWN_TYPE):  node.toStringTree();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	JSType  origType  =  type!=  null?  getNativeType(UNKNOWN_TYPE):  node.toStringTree();	  if(type!=    null)    {    throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.toStringTree());    }    if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n'    +    node.toStringTree());    }    	non-compiled	[CE]  variable  origType  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	94	None	replace
83	[BUG]  [BUGGY]  JSType  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  JSType  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	JSType  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);	  if(type!=    null)    {    throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.toStringTree());    }    if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n'    +    node.toStringTree());    }    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	94	None	replace
84	[BUG]  [BUGGY]  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [CE]  cannot  find  symbol  resultEqualsValue  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);	  if(type!=    null)    {    throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.toStringTree());    }    if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n'    +    node.toStringTree());    }    	non-compiled	[CE]  cannot  find  symbol  resultEqualsValue	94	None	replace
85	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(NODE_TYPE),  scope);  [CE]  cannot  find  symbol  compiler  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(NODE_TYPE),  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(NODE_TYPE),  scope);	  NodeTraversal.traverse(compiler,    node,    getNativeType(NODE_TYPE),    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	394	None	replace
86	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(NODE_TYPE),  type,  scope);  [CE]  cannot  find  symbol  compiler  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(NODE_TYPE),  type,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(NODE_TYPE),  type,  scope);	  NodeTraversal.traverse(compiler,    node,    getNativeType(NODE_TYPE),    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	394	None	replace
87	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(NODE_TYPE),  resultEqualsValue,  type);  [CE]  cannot  find  symbol  compiler  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(NODE_TYPE),  resultEqualsValue,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(NODE_TYPE),  resultEqualsValue,  type);	  NodeTraversal.traverse(compiler,    node,    getNativeType(NODE_TYPE),    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	394	None	replace
88	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(NODE_TYPE),  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(NODE_TYPE),  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(NODE_TYPE),  resultEqualsValue);	  NodeTraversal.traverse(compiler,    node,    getNativeType(NODE_TYPE),    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	394	None	replace
89	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  getNativeType(NODE_TYPE),  type);  [CE]  cannot  find  symbol  compiler  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  getNativeType(NODE_TYPE),  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope,  getNativeType(NODE_TYPE),  type);	  NodeTraversal.traverse(compiler,    node,    getNativeType(NODE_TYPE),    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	394	None	replace
90	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName()  : "  +  node.getName());  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName()  : "  +  node.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName()  : "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    node.getName()    :   "    +    node.getName());    	non-compiled	[CE]  <identifier>  expected	377	None	replace
91	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName()  : "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName()  : "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    node.getName()    :   "    +    node.getName());    	compilable	  [FE]  IllegalArgumentException  	377	1	replace
92	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName()  : "  +  node.getQualifiedName());  [FE]  IllegalArgumentException  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName()  : "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName()  : "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    node.getName()    :   "    +    node.getName());    	compilable	  [FE]  IllegalArgumentException  	377	1	replace
93	[BUG]  [BUGGY]  Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName()  : "  +  node.getName());  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName()  : "  +  node.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName()  : "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    node.getName()    :   "    +    node.getName());    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	377	None	replace
94	[BUG]  [BUGGY]  Throwables.warning( "Node  cannot  be  refined.  Node  named  with  node.getName()  : "  +  node.getName());  [CE]  cannot  find  symbol  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.warning( "Node  cannot  be  refined.  Node  named  with  node.getName()  : "  +  node.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.warning( "Node  cannot  be  refined.  Node  named  with  node.getName()  : "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    node.getName()    :   "    +    node.getName());    	non-compiled	[CE]  cannot  find  symbol	377	None	replace
95	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName()  : "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName()  : "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    node.getName()    :   "    +    node.getName());    	compilable	  [FE]  IllegalArgumentException  	377	1	replace
96	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName()  : "  +  node.toStringTree());  [FE]  IllegalArgumentException  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName()  : "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName()  : "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    node.getName()    :   "    +    node.getName());    	compilable	  [FE]  IllegalArgumentException  	377	1	replace
97	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName()  : "  +  node.getLocalName());  [CE]  cannot  find  symbol  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName()  : "  +  node.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName()  : "  +  node.getLocalName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    node.getName()    :   "    +    node.getName());    	non-compiled	[CE]  cannot  find  symbol	377	None	replace
98	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  named  with  node.getName()  : "  +  node.getName());  [CE]  cannot  find  symbol  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  named  with  node.getName()  : "  +  node.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  named  with  node.getName()  : "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    node.getName()    :   "    +    node.getName());    	non-compiled	[CE]  cannot  find  symbol	377	None	replace
99	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualifiedName.getName()  : "  +  node.getName());  [CE]  cannot  find  symbol  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualifiedName.getName()  : "  +  node.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualifiedName.getName()  : "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    node.getName()    :   "    +    node.getName());    	non-compiled	[CE]  cannot  find  symbol	377	None	replace
100	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualifiedName.toStringTree() "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualifiedName.toStringTree() "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree()   "    +    node.toStringTree());    	compilable	  [FE]  IllegalArgumentException  	495	1	replace
101	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualifiedName.toStringTree() "  +  node.toStringTree());  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualifiedName.toStringTree() "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualifiedName.toStringTree() "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree()   "    +    node.toStringTree());    	compilable	  [FE]  IllegalArgumentException  	495	1	replace
102	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree() "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree() "  +  node.toStringTree());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree()   "    +    node.toStringTree());    	compilable	  [FE]  IllegalArgumentException  	495	1	replace
103	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree() "  +  node.toStringTree());  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree() "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree() "  +  node.toStringTree());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree()   "    +    node.toStringTree());    	compilable	  [FE]  IllegalArgumentException  	495	1	replace
104	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree() "  +  node.toStringTree());  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree() "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree() "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree()   "    +    node.toStringTree());    	non-compiled	[CE]  <identifier>  expected	495	None	replace
105	[BUG]  [BUGGY]  Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree() "  +  node.toStringTree());  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]            IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree() "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree() "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree()   "    +    node.toStringTree());    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	495	None	replace
106	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree()  = "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree()  = "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree()   "    +    node.toStringTree());    	compilable	  [FE]  IllegalArgumentException  	495	1	replace
107	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree()  = "  +  node.toStringTree());  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree()  = "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree()  = "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree()   "    +    node.toStringTree());    	compilable	  [FE]  IllegalArgumentException  	495	1	replace
108	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree()  ' "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree()  ' "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree()   "    +    node.toStringTree());    	compilable	  [FE]  IllegalArgumentException  	495	1	replace
109	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree()  ' "  +  node.toStringTree());  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree()  ' "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree()  ' "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree()   "    +    node.toStringTree());    	compilable	  [FE]  IllegalArgumentException  	495	1	replace
110	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree()  : "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree()  : "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree()   "    +    node.toStringTree());    	compilable	  [FE]  IllegalArgumentException  	495	1	replace
111	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree()  : "  +  node.toStringTree());  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree()  : "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree()  : "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree()   "    +    node.toStringTree());    	compilable	  [FE]  IllegalArgumentException  	495	1	replace
112	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    cannot    be    refined.   "    +    node.toStringTree());    }    if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }	  	compilable	  [FE]  IllegalArgumentException  	3	1	add
113	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    cannot    be    refined.   "    +    node.toStringTree());    }    if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }	  	compilable	  [FE]  IllegalArgumentException  	3	1	add
114	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }  if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    cannot    be    refined.   "    +    node.toStringTree());    }    if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }	  	compilable	  [FE]  IllegalArgumentException  	3	1	add
115	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }  if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }  if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    cannot    be    refined.   "    +    node.toStringTree());    }    if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }	  	compilable	  [FE]  IllegalArgumentException  	3	1	add
116	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }  If(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }  [CE]  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }  If(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    cannot    be    refined.   "    +    node.toStringTree());    }    If(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }	  	non-compiled	[CE]  	3	None	add
117	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }  if(type  >=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }  [CE]  bad  operand  types  for  binary  operator  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }  if(type  >=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    cannot    be    refined.   "    +    node.toStringTree());    }    if(type  >=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  	3	None	add
118	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.toStringTree().   "  +  node.toStringTree());  Node  defined  with  node.toStringTree().   "  +  node.toStringTree());  [CE]  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.toStringTree().   "  +  node.toStringTree());  Node  defined  with  node.toStringTree().   "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree().   "    +    node.toStringTree());    Node  defined  with  node.toStringTree().   "  +  node.toStringTree());	  	non-compiled	[CE]  	500	None	add
119	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.toStringTree().   "  +  node.toStringTree());  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.toStringTree().   "  +  node.toStringTree());  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.toStringTree().   "  +  node.toStringTree());  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.toStringTree().   "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree().   "    +    node.toStringTree());    IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.toStringTree().   "  +  node.toStringTree());	  	non-compiled	[CE]  cannot  find  symbol	500	None	add
120	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.toStringTree().   "  +  node.toStringTree());  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree().   "  +  node.toStringTree());  [CE]  not  a  statement  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.toStringTree().   "  +  node.toStringTree());  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree().   "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree().   "    +    node.toStringTree());    Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree().   "  +  node.toStringTree());	  	non-compiled	[CE]  not  a  statement	500	None	add
121	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.toStringTree().   "  +  node.toStringTree());  Node  defined  with  node.toStringTree().   "  +  node.toStringTree());  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [CE]  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.toStringTree().   "  +  node.toStringTree());  Node  defined  with  node.toStringTree().   "  +  node.toStringTree());  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree().   "    +    node.toStringTree());    Node  defined  with  node.toStringTree().   "  +  node.toStringTree());  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);	  	non-compiled	[CE]  	500	None	add
122	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.toStringTree().   "  +  node.toStringTree());  Node  definedWith  node.toStringTree().   "  +  node.toStringTree());  [CE]  [FE]            IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.toStringTree().   "  +  node.toStringTree());  Node  definedWith  node.toStringTree().   "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree().   "    +    node.toStringTree());    Node  definedWith  node.toStringTree().   "  +  node.toStringTree());	  	non-compiled	[CE]  	500	None	add
123	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.toStringTree().   "  +  node.toStringTree());  Node  defined  with  node.toStringTree().   "  +  node.toStringTree());  break;  [CE]  [FE]              IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.toStringTree().   "  +  node.toStringTree());  Node  defined  with  node.toStringTree().   "  +  node.toStringTree());  break;  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree().   "    +    node.toStringTree());    Node  defined  with  node.toStringTree().   "  +  node.toStringTree());  break;	  	non-compiled	[CE]  	500	None	add
124	[BUG]  [BUGGY]  Throwable  node  =  scope.getNativeType(UNKNOWN_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  scope.getNativeType(UNKNOWN_TYPE);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  scope.getNativeType(UNKNOWN_TYPE);	  Throwable    node    =    scope.toStringTree();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	190	None	replace
125	[BUG]  [BUGGY]  Throwable  node  =  scope.toStringTree(value);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  scope.toStringTree(value);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  scope.toStringTree(value);	  Throwable    node    =    scope.toStringTree();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	190	None	replace
126	[BUG]  [BUGGY]  Throwable  node  =  scope.toStringTree(true);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  scope.toStringTree(true);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  scope.toStringTree(true);	  Throwable    node    =    scope.toStringTree();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	190	None	replace
127	[BUG]  [BUGGY]  JSType  node  =  scope.toStringTree();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  JSType  node  =  scope.toStringTree();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	JSType  node  =  scope.toStringTree();	  Throwable    node    =    scope.toStringTree();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	190	None	replace
128	[BUG]  [BUGGY]  Throwable  node  =  scope.toStringTree(node);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  scope.toStringTree(node);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  scope.toStringTree(node);	  Throwable    node    =    scope.toStringTree();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	190	None	replace
129	[BUG]  [BUGGY]  Throwable  node  =  scope.toStringTree(),  type);  [CE]  ';'  expected  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  scope.toStringTree(),  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  scope.toStringTree(),  type);	  Throwable    node    =    scope.toStringTree();    	non-compiled	[CE]  ';'  expected	190	None	replace
130	[BUG]  [BUGGY]  Throwable  node  =  scope.getTarget();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  scope.getTarget();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  scope.getTarget();	  Throwable    node    =    scope.toStringTree();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	190	None	replace
131	[BUG]  [BUGGY]  Preconditions.checkArgument(origType  ==  null);  [CE]  variable  origType  might  not  have  been  initialized  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(origType  ==  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkArgument(origType  ==  null);	  Preconditions.checkArgument(type    ==    null);    	non-compiled	[CE]  variable  origType  might  not  have  been  initialized	271	None	replace
132	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  null? "null "  :  type);  [CE]  no  suitable  method  found  for  checkArgument(Serializable)  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(type  ==  null? "null "  :  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkArgument(type  ==  null? "null "  :  type);	  Preconditions.checkArgument(type    ==    null);    	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(Serializable)	271	None	replace
133	[BUG]  [BUGGY]  Node  node  =  scope.getNativeType(UNKNOWN_TYPE)+  1;  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.getNativeType(UNKNOWN_TYPE)+  1;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getNativeType(UNKNOWN_TYPE)+  1;	  Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE)+    1;    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	413	None	replace
134	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE)+  2;  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE)+  2;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE)+  2;	  Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE)+    1;    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	413	None	replace
135	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE)+  1  -  1;  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE)+  1  -  1;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE)+  1  -  1;	  Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE)+    1;    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	413	None	replace
136	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE)/  1;  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE)/  1;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE)/  1;	  Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE)+    1;    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	413	None	replace
137	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE)+  0;  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE)+  0;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE)+  0;	  Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE)+    1;    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	413	None	replace
138	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE)+  1L;  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE)+  1L;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE)+  1L;	  Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE)+    1;    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	413	None	replace
139	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE)-  1;  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE)-  1;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE)-  1;	  Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE)+    1;    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	413	None	replace
140	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE)+  4;  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE)+  4;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE)+  4;	  Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE)+    1;    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	413	None	replace
141	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  can  be  refined.   "  +  node.toStringTree());  }  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined.   "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    can    be    refined.   "    +    node.toStringTree());    }    if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined.   "  +  node.toStringTree());  }	  	compilable	  [FE]  IllegalArgumentException  	86	1	add
142	[BUG]  [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  can  be  refined.   "  +  node.toStringTree());  }  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined.   "  +  node.toStringTree());  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  can  be  refined.   "  +  node.toStringTree());  }  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined.   "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    can    be    refined.   "    +    node.toStringTree());    }    if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined.   "  +  node.toStringTree());  }	  	compilable	  [FE]  IllegalArgumentException  	86	1	add
143	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  can  be  refined.   "  +  node.toStringTree());  }  if(node  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined.   "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    can    be    refined.   "    +    node.toStringTree());    }    if(node  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined.   "  +  node.toStringTree());  }	  	compilable	  [FE]  IllegalArgumentException  	86	1	add
144	[BUG]  [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  can  be  refined.   "  +  node.toStringTree());  }  if(node  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined.   "  +  node.toStringTree());  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  can  be  refined.   "  +  node.toStringTree());  }  if(node  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined.   "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    can    be    refined.   "    +    node.toStringTree());    }    if(node  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined.   "  +  node.toStringTree());  }	  	compilable	  [FE]  IllegalArgumentException  	86	1	add
145	[BUG]  [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  can  be  refined.   "  +  node.toStringTree());  }  If(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined.   "  +  node.toStringTree());  }  [CE]  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  can  be  refined.   "  +  node.toStringTree());  }  If(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined.   "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    can    be    refined.   "    +    node.toStringTree());    }    If(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined.   "  +  node.toStringTree());  }	  	non-compiled	[CE]  	86	None	add
146	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  getNativeType(NODE_TYPE),  this);  [CE]  cannot  find  symbol  compiler  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  getNativeType(NODE_TYPE),  this);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  type,  getNativeType(NODE_TYPE),  this);	  NodeTraversal.traverse(compiler,    node,    getNativeType(NODE_TYPE),    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	123	None	replace
147	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  getNativeType(NODE_TYPE),  this);  [CE]  cannot  find  symbol  compiler  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  getNativeType(NODE_TYPE),  this);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope,  getNativeType(NODE_TYPE),  this);	  NodeTraversal.traverse(compiler,    node,    getNativeType(NODE_TYPE),    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	123	None	replace
148	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  getNativeType(NODE_TYPE),  this);  [CE]  cannot  find  symbol  compiler  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  getNativeType(NODE_TYPE),  this);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  getNativeType(NODE_TYPE),  this);	  NodeTraversal.traverse(compiler,    node,    getNativeType(NODE_TYPE),    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	123	None	replace
149	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(NODE_TYPE),  this,  scope);  [CE]  cannot  find  symbol  compiler  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(NODE_TYPE),  this,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(NODE_TYPE),  this,  scope);	  NodeTraversal.traverse(compiler,    node,    getNativeType(NODE_TYPE),    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	123	None	replace
150	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  node:   "  +  node.getLineno());  Node  cannot  be  refined.  node:   "  +  node.getLineno());  [CE]  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  node:   "  +  node.getLineno());  Node  cannot  be  refined.  node:   "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.getLineno());    Node  cannot  be  refined.  node:   "  +  node.getLineno());	  	non-compiled	[CE]  	275	None	add
151	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  node:   "  +  node.getLineno());  IllegalArgumentException(   "Node  cannot  be  refined.  node:   "  +  node.getLineno());  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  node:   "  +  node.getLineno());  IllegalArgumentException(   "Node  cannot  be  refined.  node:   "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.getLineno());    IllegalArgumentException(   "Node  cannot  be  refined.  node:   "  +  node.getLineno());	  	non-compiled	[CE]  cannot  find  symbol	275	None	add
152	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  node:   "  +  node.getLineno());  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node:   "  +  node.getLineno());  [CE]  not  a  statement  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  node:   "  +  node.getLineno());  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node:   "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.getLineno());    Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node:   "  +  node.getLineno());	  	non-compiled	[CE]  not  a  statement	275	None	add
153	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  node:   "  +  node.getLineno());  Node  node  =  node.getLineno();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  node:   "  +  node.getLineno());  Node  node  =  node.getLineno();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.getLineno());    Node  node  =  node.getLineno();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	275	None	add
154	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  node:   "  +  node.getLineno());  Node  not  defined.  node:   "  +  node.getLineno());  [CE]  [FE]            IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  node:   "  +  node.getLineno());  Node  not  defined.  node:   "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.getLineno());    Node  not  defined.  node:   "  +  node.getLineno());	  	non-compiled	[CE]  	275	None	add
155	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(OPTIONAL_TYPE),  scope);  [CE]  cannot  find  symbol  compiler  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(OPTIONAL_TYPE),  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(OPTIONAL_TYPE),  scope);	  NodeTraversal.traverse(compiler,    node,    getNativeType(OPTIONAL_TYPE),    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	395	None	replace
156	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(OPTIONAL_TYPE),  type,  scope);  [CE]  cannot  find  symbol  compiler  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(OPTIONAL_TYPE),  type,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(OPTIONAL_TYPE),  type,  scope);	  NodeTraversal.traverse(compiler,    node,    getNativeType(OPTIONAL_TYPE),    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	395	None	replace
157	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  getNativeType(OPTIONAL_TYPE));  [CE]  cannot  find  symbol  compiler  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  getNativeType(OPTIONAL_TYPE));  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  type,  getNativeType(OPTIONAL_TYPE));	  NodeTraversal.traverse(compiler,    node,    getNativeType(OPTIONAL_TYPE),    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	395	None	replace
158	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(OPTIONAL_TYPE),  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(OPTIONAL_TYPE),  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(OPTIONAL_TYPE),  resultEqualsValue);	  NodeTraversal.traverse(compiler,    node,    getNativeType(OPTIONAL_TYPE),    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	395	None	replace
159	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(OPTIONAL_TYPE),  resultEqualsValue,  type);  [CE]  cannot  find  symbol  compiler  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(OPTIONAL_TYPE),  resultEqualsValue,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(OPTIONAL_TYPE),  resultEqualsValue,  type);	  NodeTraversal.traverse(compiler,    node,    getNativeType(OPTIONAL_TYPE),    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	395	None	replace
160	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getString());  [CE]  <identifier>  expected  [FE]    UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getString());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.getString());    	non-compiled	[CE]  <identifier>  expected	44	None	replace
161	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getString());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getString());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.getString());    	compilable	  [FE]  UnsupportedOperationException  	44	1	replace
162	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getString());  }  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getString());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getString());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.getString());    	compilable	  [FE]  UnsupportedOperationException  	44	1	replace
163	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getString(),  type);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,JSType)  [FE]        UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getString(),  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getString(),  type);	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.getString());    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,JSType)	44	None	replace
164	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.getString());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    	compilable	  [FE]  UnsupportedOperationException  	399	1	replace
165	[BUG]  [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.getString());  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.getString());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    	compilable	  [FE]  UnsupportedOperationException  	399	1	replace
166	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]          UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.getString());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    	compilable	  [FE]  UnsupportedOperationException  	399	1	replace
167	[BUG]  [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.getString());  [FE]  UnsupportedOperationException  [FE]          UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.getString());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    	compilable	  [FE]  UnsupportedOperationException  	399	1	replace
168	[BUG]  [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.getLocalName());  [CE]  cannot  find  symbol  [FE]              UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.getLocalName());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    	non-compiled	[CE]  cannot  find  symbol	399	None	replace
169	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]                UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.  can  be  refined. "  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	new  IllegalArgumentException( "Node  cannot  be  refined.  can  be  refined. "  +  node.getString());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    	compilable	  [FE]  UnsupportedOperationException  	399	1	replace
170	[BUG]  [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.  can  be  refined. "  +  node.getString());  [FE]  UnsupportedOperationException  [FE]                UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.  can  be  refined. "  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	new  IllegalArgumentException( "Node  cannot  be  refined.  can  be  refined. "  +  node.getString());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    	compilable	  [FE]  UnsupportedOperationException  	399	1	replace
171	[BUG]  [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.getMessage());  [CE]  cannot  find  symbol  [FE]                  UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.getMessage());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.getMessage());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    	non-compiled	[CE]  cannot  find  symbol	399	None	replace
172	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  type,  scope);  [CE]  cannot  find  symbol  compiler  [FE]              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  type,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  type,  scope);	  NodeTraversal.traverse(compiler,    node,    new    RestrictByTrueTypeOfResultVisitor(),    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	134	None	replace
173	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  type,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  type,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  type,  resultEqualsValue);	  NodeTraversal.traverse(compiler,    node,    new    RestrictByTrueTypeOfResultVisitor(),    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	134	None	replace
174	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  typeRegistry);  [CE]  cannot  find  symbol  compiler  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  typeRegistry);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  typeRegistry);	  NodeTraversal.traverse(compiler,    node,    new    RestrictByTrueTypeOfResultVisitor(),    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	134	None	replace
175	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  resultEqualsValue,  type);  [CE]  cannot  find  symbol  compiler  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  resultEqualsValue,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  resultEqualsValue,  type);	  NodeTraversal.traverse(compiler,    node,    new    RestrictByTrueTypeOfResultVisitor(),    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	134	None	replace
176	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  origType);  [CE]  cannot  find  symbol  compiler  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  origType);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  origType);	  NodeTraversal.traverse(compiler,    node,    new    RestrictByTrueTypeOfResultVisitor(),    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	134	None	replace
177	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getLineno());  Node  cannot  be  refined.   "  +  node.getLineno());  [CE]  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getLineno());  Node  cannot  be  refined.   "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getLineno());    Node  cannot  be  refined.   "  +  node.getLineno());	  	non-compiled	[CE]  	240	None	add
178	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getLineno());  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.getLineno());  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getLineno());  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getLineno());    IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.getLineno());	  	non-compiled	[CE]  cannot  find  symbol	240	None	add
179	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getLineno());  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  [CE]  not  a  statement  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getLineno());  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getLineno());    Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());	  	non-compiled	[CE]  not  a  statement	240	None	add
180	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getLineno());  Node  cannot  be  refined.  (  +  node.getLineno());  [CE]  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getLineno());  Node  cannot  be  refined.  (  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getLineno());    Node  cannot  be  refined.  (  +  node.getLineno());	  	non-compiled	[CE]  	240	None	add
181	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getLineno());  JSType  nodeLineno  =  node.getLineno();  [CE]  incompatible  types  [FE]            IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getLineno());  JSType  nodeLineno  =  node.getLineno();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getLineno());    JSType  nodeLineno  =  node.getLineno();	  	non-compiled	[CE]  incompatible  types	240	None	add
182	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getLineno());  JSType  node  =  node.getLineno();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]              IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getLineno());  JSType  node  =  node.getLineno();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getLineno());    JSType  node  =  node.getLineno();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	240	None	add
183	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getLineno());  Node  cannot  be  refined.   "  +  node.getLineno());  break;  [CE]  [FE]                IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getLineno());  Node  cannot  be  refined.   "  +  node.getLineno());  break;  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getLineno());    Node  cannot  be  refined.   "  +  node.getLineno());  break;	  	non-compiled	[CE]  	240	None	add
184	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getLineno());  Node  node  =  node.getLineno();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                  IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getLineno());  Node  node  =  node.getLineno();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getLineno());    Node  node  =  node.getLineno();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	240	None	add
185	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName());  [CE]  not  a  statement  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getName());    	non-compiled	[CE]  not  a  statement	429	None	replace
186	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getName(),  type);  [CE]  not  a  statement  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getName(),  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getName(),  type);	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getName());    	non-compiled	[CE]  not  a  statement	429	None	replace
187	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [   "  +  node.getString());  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]    UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [   "  +  node.getString());  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    type    must    be    in    the    range    [   "    +    node.getString());    Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	465	None	add
188	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [   "  +  node.getString());  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [ "  +  node.getString());  }  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]      UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [   "  +  node.getString());  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [ "  +  node.getString());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    type    must    be    in    the    range    [   "    +    node.getString());    Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [ "  +  node.getString());  }	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	465	None	add
189	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [   "  +  node.getString());  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]        UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [   "  +  node.getString());  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    type    must    be    in    the    range    [   "    +    node.getString());    Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	465	None	add
190	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [   "  +  node.getString());  Node  type  must  be  in  the  range  [   "  +  node.getString());  [CE]  [FE]          UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [   "  +  node.getString());  Node  type  must  be  in  the  range  [   "  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    type    must    be    in    the    range    [   "    +    node.getString());    Node  type  must  be  in  the  range  [   "  +  node.getString());	  	non-compiled	[CE]  	465	None	add
191	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [   "  +  node.getString());  Node  node  =  getNativeType(UNKNOWN_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]            UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [   "  +  node.getString());  Node  node  =  getNativeType(UNKNOWN_TYPE);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    type    must    be    in    the    range    [   "    +    node.getString());    Node  node  =  getNativeType(UNKNOWN_TYPE);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	465	None	add
192	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [   "  +  node.getString());  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  if(node!=  null)  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]              UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [   "  +  node.getString());  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  if(node!=  null)  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    type    must    be    in    the    range    [   "    +    node.getString());    Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  if(node!=  null)  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	465	None	add
193	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [   "  +  node.getString());  Node  node  =  getNativeType(UNKNOWN_TYPE);  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [   "  +  node.getString());  Node  node  =  getNativeType(UNKNOWN_TYPE);  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    type    must    be    in    the    range    [   "    +    node.getString());    Node  node  =  getNativeType(UNKNOWN_TYPE);  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	465	None	add
194	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [   "  +  node.getString());  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [ "  +  node.getString()  [CE]  [FE]                  UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [   "  +  node.getString());  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [ "  +  node.getString()  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    type    must    be    in    the    range    [   "    +    node.getString());    Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [ "  +  node.getString()	  	non-compiled	[CE]  	465	None	add
195	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  type,  null);  [CE]  cannot  find  symbol  compiler  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  type,  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  qualifiedName,  type,  null);	  NodeTraversal.traverse(compiler,    node,    type,    null);    	non-compiled	[CE]  cannot  find  symbol  compiler	155	None	replace
196	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  type,  null);  [CE]  cannot  find  symbol  compiler  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  type,  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  type,  null);	  NodeTraversal.traverse(compiler,    node,    type,    null);    	non-compiled	[CE]  cannot  find  symbol  compiler	155	None	replace
197	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  null);  [CE]  cannot  find  symbol  compiler  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  qualifiedName,  null);	  NodeTraversal.traverse(compiler,    node,    type,    null);    	non-compiled	[CE]  cannot  find  symbol  compiler	155	None	replace
198	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  type,  null);  [CE]  cannot  find  symbol  compiler  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  type,  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope,  type,  null);	  NodeTraversal.traverse(compiler,    node,    type,    null);    	non-compiled	[CE]  cannot  find  symbol  compiler	155	None	replace
199	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  scope,  null);  [CE]  cannot  find  symbol  compiler  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  scope,  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  type,  scope,  null);	  NodeTraversal.traverse(compiler,    node,    type,    null);    	non-compiled	[CE]  cannot  find  symbol  compiler	155	None	replace
200	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  sourceName,  type,  null);  [CE]  cannot  find  symbol  compiler  [FE]                                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  sourceName,  type,  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  sourceName,  type,  null);	  NodeTraversal.traverse(compiler,    node,    type,    null);    	non-compiled	[CE]  cannot  find  symbol  compiler	155	None	replace
201	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  type,  null);  [CE]  cannot  find  symbol  compiler  [FE]                                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  type,  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  type,  null);	  NodeTraversal.traverse(compiler,    node,    type,    null);    	non-compiled	[CE]  cannot  find  symbol  compiler	155	None	replace
202	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  null,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  null,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  type,  null,  resultEqualsValue);	  NodeTraversal.traverse(compiler,    node,    type,    null);    	non-compiled	[CE]  cannot  find  symbol  compiler	155	None	replace
203	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=    null)    {    throw    new    IllegalArgumentException(     "Node    cannot    be    refined.    n     "    +    node.toStringTree());    }    if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n'     "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(type!=        null)        {        throw        new        IllegalArgumentException(       "Node        cannot        be        refined.        n       "        +        node.toStringTree());        }        if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n'       "    +    node.toStringTree());    }    if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n "  +  node.toStringTree());  }	  	compilable	  [FE]  IllegalArgumentException  	375	1	add
204	[BUG]  [BUGGY]  if(type!=    null)    {    throw    new    IllegalArgumentException(     "Node    cannot    be    refined.    n     "    +    node.toStringTree());    }    if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n'     "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=    null)    {    throw    new    IllegalArgumentException(     "Node    cannot    be    refined.    n     "    +    node.toStringTree());    }    if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n'     "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=        null)        {        throw        new        IllegalArgumentException(       "Node        cannot        be        refined.        n       "        +        node.toStringTree());        }        if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n'       "    +    node.toStringTree());    }    if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n "  +  node.toStringTree());  }	  	compilable	  [FE]  IllegalArgumentException  	375	1	add
205	[BUG]  [BUGGY]  if(type!=    null)    {    throw    new    IllegalArgumentException(     "Node    cannot    be    refined.    n     "    +    node.toStringTree());    }    if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n'     "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n "  +  node.toStringTree  [CE]  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=    null)    {    throw    new    IllegalArgumentException(     "Node    cannot    be    refined.    n     "    +    node.toStringTree());    }    if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n'     "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n "  +  node.toStringTree  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=        null)        {        throw        new        IllegalArgumentException(       "Node        cannot        be        refined.        n       "        +        node.toStringTree());        }        if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n'       "    +    node.toStringTree());    }    if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n "  +  node.toStringTree	  	non-compiled	[CE]  	375	None	add
206	[BUG]  [BUGGY]  if(type!=    null)    {    throw    new    IllegalArgumentException(     "Node    cannot    be    refined.    n     "    +    node.toStringTree());    }    if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n'     "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n  [CE]  unclosed  string  literal  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=    null)    {    throw    new    IllegalArgumentException(     "Node    cannot    be    refined.    n     "    +    node.toStringTree());    }    if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n'     "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=        null)        {        throw        new        IllegalArgumentException(       "Node        cannot        be        refined.        n       "        +        node.toStringTree());        }        if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n'       "    +    node.toStringTree());    }    if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n	  	non-compiled	[CE]  unclosed  string  literal	375	None	add
207	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=    null)    {    throw    new    IllegalArgumentException(     "Node    cannot    be    refined.    n     "    +    node.toStringTree());    }    if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n'     "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n'   "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(type!=        null)        {        throw        new        IllegalArgumentException(       "Node        cannot        be        refined.        n       "        +        node.toStringTree());        }        if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n'       "    +    node.toStringTree());    }    if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n'   "  +  node.toStringTree());  }	  	compilable	  [FE]  IllegalArgumentException  	375	1	add
208	[BUG]  [BUGGY]  if(type!=    null)    {    throw    new    IllegalArgumentException(     "Node    cannot    be    refined.    n     "    +    node.toStringTree());    }    if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n'     "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n'   "  +  node.toStringTree());  }  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=    null)    {    throw    new    IllegalArgumentException(     "Node    cannot    be    refined.    n     "    +    node.toStringTree());    }    if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n'     "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n'   "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=        null)        {        throw        new        IllegalArgumentException(       "Node        cannot        be        refined.        n       "        +        node.toStringTree());        }        if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n'       "    +    node.toStringTree());    }    if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n'   "  +  node.toStringTree());  }	  	compilable	  [FE]  IllegalArgumentException  	375	1	add
209	[BUG]  [BUGGY]  DebugLog.warning(scope,  type,   "Node  cannot  be  refined.   "  +  node.toStringTree());  [CE]  cannot  find  symbol  DebugLog  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning(scope,  type,   "Node  cannot  be  refined.   "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning(scope,  type,   "Node  cannot  be  refined.   "  +  node.toStringTree());	  DebugLog.warning(type,   "Node    cannot    be    refined.   "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol  DebugLog	455	None	replace
210	[BUG]  [BUGGY]  DebugLog.warning(type,  node,   "Node  cannot  be  refined.   "  +  node.toStringTree());  [CE]  cannot  find  symbol  DebugLog  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning(type,  node,   "Node  cannot  be  refined.   "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning(type,  node,   "Node  cannot  be  refined.   "  +  node.toStringTree());	  DebugLog.warning(type,   "Node    cannot    be    refined.   "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol  DebugLog	455	None	replace
211	[BUG]  [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  type,  null);  [CE]  cannot  find  symbol  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  type,  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(node,  qualifiedName,  origType,  type,  null);	  scope.inferSlot(node,    qualifiedName,    origType,    type,    state);    	non-compiled	[CE]  cannot  find  symbol	253	None	replace
212	[BUG]  [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  type,  UNKNOWN_TYPE);  [CE]  cannot  find  symbol  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  type,  UNKNOWN_TYPE);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(node,  qualifiedName,  origType,  type,  UNKNOWN_TYPE);	  scope.inferSlot(node,    qualifiedName,    origType,    type,    state);    	non-compiled	[CE]  cannot  find  symbol	253	None	replace
213	[BUG]  [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  type,  exception);  [CE]  cannot  find  symbol  exception  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  type,  exception);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(node,  qualifiedName,  origType,  type,  exception);	  scope.inferSlot(node,    qualifiedName,    origType,    type,    state);    	non-compiled	[CE]  cannot  find  symbol  exception	253	None	replace
214	[BUG]  [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  type,  outcome);  [CE]  cannot  find  symbol  outcome  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  type,  outcome);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(node,  qualifiedName,  origType,  type,  outcome);	  scope.inferSlot(node,    qualifiedName,    origType,    type,    state);    	non-compiled	[CE]  cannot  find  symbol  outcome	253	None	replace
215	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  scope);  [CE]  cannot  find  symbol  compiler  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  qualifiedName,  scope);	  NodeTraversal.traverse(compiler,    node,    type,    scope);    	non-compiled	[CE]  cannot  find  symbol  compiler	95	None	replace
216	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  type,  scope);  [CE]  cannot  find  symbol  compiler  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  type,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  qualifiedName,  type,  scope);	  NodeTraversal.traverse(compiler,    node,    type,    scope);    	non-compiled	[CE]  cannot  find  symbol  compiler	95	None	replace
217	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  qualifiedName);  [CE]  cannot  find  symbol  compiler  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  qualifiedName);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope,  qualifiedName);	  NodeTraversal.traverse(compiler,    node,    type,    scope);    	non-compiled	[CE]  cannot  find  symbol  compiler	95	None	replace
218	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  origType,  scope);  [CE]  cannot  find  symbol  compiler  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  origType,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  origType,  scope);	  NodeTraversal.traverse(compiler,    node,    type,    scope);    	non-compiled	[CE]  cannot  find  symbol  compiler	95	None	replace
219	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  sourceName,  scope);  [CE]  cannot  find  symbol  compiler  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  sourceName,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  sourceName,  scope);	  NodeTraversal.traverse(compiler,    node,    type,    scope);    	non-compiled	[CE]  cannot  find  symbol  compiler	95	None	replace
220	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getLocalName());  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getLocalName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.getLocalName());    	non-compiled	[CE]  <identifier>  expected	288	None	replace
221	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getLocalName());  [CE]  cannot  find  symbol  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getLocalName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	288	None	replace
222	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node,  scope.getLocalName());  [CE]  cannot  find  symbol  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node,  scope.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node,  scope.getLocalName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	288	None	replace
223	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined:  node: "  +  node.getLocalName());  [CE]  cannot  find  symbol  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined:  node: "  +  node.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined:  node: "  +  node.getLocalName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	288	None	replace
224	[BUG]  [BUGGY]  Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getLocalName());  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getLocalName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.getLocalName());    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	288	None	replace
225	[BUG]  [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getLocalName());  [CE]  cannot  find  symbol  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getLocalName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	288	None	replace
226	[BUG]  [BUGGY]  JSType  node  =  origType.getJSType();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  JSType  node  =  origType.getJSType();  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	JSType  node  =  origType.getJSType();	  JSType    node    =    type.getJSType();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	180	None	replace
227	[BUG]  [BUGGY]  Node  node  =  type.getJSType();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  type.getJSType();  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  type.getJSType();	  JSType    node    =    type.getJSType();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	180	None	replace
228	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null?   "null "  :  type,  scope);  [CE]  no  suitable  method  found  for  checkArgument(Serializable,FlowScope)  [FE]              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(type!=  null?   "null "  :  type,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkArgument(type!=  null?   "null "  :  type,  scope);	  Preconditions.checkArgument(type!=    null?   "null   "    :    type);    	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(Serializable,FlowScope)	342	None	replace
229	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null?   "null "  :  type,  resultEqualsValue);  [CE]  cannot  find  symbol  resultEqualsValue  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(type!=  null?   "null "  :  type,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkArgument(type!=  null?   "null "  :  type,  resultEqualsValue);	  Preconditions.checkArgument(type!=    null?   "null   "    :    type);    	non-compiled	[CE]  cannot  find  symbol  resultEqualsValue	342	None	replace
230	[BUG]  [BUGGY]  Preconditions.checkArgument(qualifiedName!=  null?   "null "  :  type);  [CE]  no  suitable  method  found  for  checkArgument(Serializable)  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(qualifiedName!=  null?   "null "  :  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkArgument(qualifiedName!=  null?   "null "  :  type);	  Preconditions.checkArgument(type!=    null?   "null   "    :    type);    	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(Serializable)	342	None	replace
231	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  null?   "null "  :  type,  scope);  [CE]  no  suitable  method  found  for  checkArgument(Serializable,FlowScope)  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(type  ==  null?   "null "  :  type,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkArgument(type  ==  null?   "null "  :  type,  scope);	  Preconditions.checkArgument(type!=    null?   "null   "    :    type);    	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(Serializable,FlowScope)	342	None	replace
232	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.toStringTree());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.toStringTree());    	compilable	  [FE]  IllegalArgumentException  	499	1	replace
233	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.toStringTree());  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.toStringTree());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.toStringTree());    	compilable	  [FE]  IllegalArgumentException  	499	1	replace
234	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.toStringTree());  [CE]  <identifier>  expected  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.toStringTree());    	non-compiled	[CE]  <identifier>  expected	499	None	replace
235	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.toStringTree());    	compilable	  [FE]  IllegalArgumentException  	499	1	replace
236	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.getQualifiedName());  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.toStringTree());    	compilable	  [FE]  IllegalArgumentException  	499	1	replace
237	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  scope.toStringTree());  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  scope.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  scope.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol	499	None	replace
238	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  qualifiedName.toStringTree());  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  qualifiedName.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  qualifiedName.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol	499	None	replace
239	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.getLocalName());  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.getLocalName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol	499	None	replace
240	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  scope.getName());  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  scope.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  scope.getName());	  Throwables.throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n       "    +    scope.toStringTree());    	non-compiled	[CE]  <identifier>  expected	189	None	replace
241	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined: "  +  scope.toStringTree());  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined: "  +  scope.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined: "  +  scope.toStringTree());	  Throwables.throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n       "    +    scope.toStringTree());    	non-compiled	[CE]  <identifier>  expected	189	None	replace
242	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  qualifiedName,  null,  origType);  [CE]  variable  qualifiedName  might  not  have  been  initialized  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  qualifiedName,  null,  origType);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  qualifiedName,  null,  origType);	  scope.inferQualifiedSlot(node,    qualifiedName,    value,    origType);    	non-compiled	[CE]  variable  qualifiedName  might  not  have  been  initialized	371	None	replace
243	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  node);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  node);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  qualifiedName,  origType,  node);	  scope.inferQualifiedSlot(node,    qualifiedName,    value,    origType);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	371	None	replace
244	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  origType);  [CE]  variable  qualifiedName  might  not  have  been  initialized  [FE]                                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  origType);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  qualifiedName,  origType,  origType);	  scope.inferQualifiedSlot(node,    qualifiedName,    value,    origType);    	non-compiled	[CE]  variable  qualifiedName  might  not  have  been  initialized	371	None	replace
245	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  name);  [CE]  cannot  find  symbol  name  [FE]                                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  name);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  qualifiedName,  origType,  name);	  scope.inferQualifiedSlot(node,    qualifiedName,    value,    origType);    	non-compiled	[CE]  cannot  find  symbol  name	371	None	replace
246	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  qualifiedName,  node,  type);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  qualifiedName,  node,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  qualifiedName,  node,  type);	  scope.inferQualifiedSlot(node,    qualifiedName,    value,    origType);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	371	None	replace
247	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(), "  +  node.toStringTree());  [CE]  <identifier>  expected  [FE]    java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.toStringTree()    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(), "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(), "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree(),   "    +    node.toStringTree());    	non-compiled	[CE]  <identifier>  expected	497	None	replace
248	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.toStringTree()  [FE]      java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.toStringTree()    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(), "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(), "  +  node.toStringTree());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree(),   "    +    node.toStringTree());    	compilable	  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.toStringTree()  	497	1	replace
249	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(), "  +  node.toStringTree());  }  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.toStringTree()  [FE]      java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.toStringTree()    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(), "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(), "  +  node.toStringTree());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree(),   "    +    node.toStringTree());    	compilable	  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.toStringTree()  	497	1	replace
250	[BUG]  [BUGGY]  Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(), "  +  node.toStringTree());  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]        java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.toStringTree()    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(), "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(), "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree(),   "    +    node.toStringTree());    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	497	None	replace
251	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(), ",  +  node.toStringTree());  [CE]  bad  operand  type  String  for  unary  operator  [FE]                java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.toStringTree()    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(), ",  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(), ",  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree(),   "    +    node.toStringTree());    	non-compiled	[CE]  bad  operand  type  String  for  unary  operator  	497	None	replace
252	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  qualifiedName.toStringTree()  [FE]                  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.toStringTree()    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualifiedName.toStringTree(), "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualifiedName.toStringTree(), "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree(),   "    +    node.toStringTree());    	compilable	  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  qualifiedName.toStringTree()  	497	1	replace
253	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualifiedName.toStringTree(), "  +  node.toStringTree());  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  qualifiedName.toStringTree()  [FE]                  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.toStringTree()    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualifiedName.toStringTree(), "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualifiedName.toStringTree(), "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree(),   "    +    node.toStringTree());    	compilable	  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  qualifiedName.toStringTree()  	497	1	replace
254	[BUG]  [BUGGY]  parent!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  parent.toStringTree());  }  [CE]  not  a  statement  [FE]          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  parent!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  parent.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	parent!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  parent.toStringTree());  }	  parent!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.toStringTree());    }    	non-compiled	[CE]  not  a  statement	312	None	replace
255	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node,  type.toStringTree());  [CE]  <identifier>  expected  [FE]          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node,  type.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node,  type.toStringTree());	  Throwables.throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.toStringTree());    	non-compiled	[CE]  <identifier>  expected	46	None	replace
256	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getClass());  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getClass());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getClass());	  Throwables.throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.toStringTree());    	non-compiled	[CE]  <identifier>  expected	46	None	replace
257	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getSourceName());  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getSourceName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getSourceName());	  Throwables.throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.toStringTree());    	non-compiled	[CE]  <identifier>  expected	46	None	replace
258	[BUG]  [BUGGY]  scope.inferQualifiedSlot(type,  node,  origType);  break;  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(type,  node,  origType);  break;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(type,  node,  origType);  break;	  scope.inferQualifiedSlot(origType,    node,    type);    break;    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	215	None	replace
259	[BUG]  [BUGGY]  scope.inferQualifiedSlot(origType,  node,  qualifiedName,  type);  break;  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(origType,  node,  qualifiedName,  type);  break;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(origType,  node,  qualifiedName,  type);  break;	  scope.inferQualifiedSlot(origType,    node,    type);    break;    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	215	None	replace
260	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  qualifiedName,  node,  type);  break;  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  qualifiedName,  node,  type);  break;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  qualifiedName,  node,  type);  break;	  scope.inferQualifiedSlot(origType,    node,    type);    break;    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	215	None	replace
261	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  qualifiedName,  type,  type);  break;  [CE]  variable  qualifiedName  might  not  have  been  initialized  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  qualifiedName,  type,  type);  break;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  qualifiedName,  type,  type);  break;	  scope.inferQualifiedSlot(origType,    node,    type);    break;    	non-compiled	[CE]  variable  qualifiedName  might  not  have  been  initialized	215	None	replace
262	[BUG]  [BUGGY]  scope.inferQualifiedSlot(qualifiedName,  node,  type);  break;  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(qualifiedName,  node,  type);  break;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(qualifiedName,  node,  type);  break;	  scope.inferQualifiedSlot(type,    node,    qualifiedName,    origType);    break;    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	326	None	replace
263	[BUG]  [BUGGY]  scope.inferQualifiedSlot(type,  node,  qualifiedName,  origType,  resultEqualsValue);  break;  [CE]  cannot  find  symbol  resultEqualsValue  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(type,  node,  qualifiedName,  origType,  resultEqualsValue);  break;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(type,  node,  qualifiedName,  origType,  resultEqualsValue);  break;	  scope.inferQualifiedSlot(type,    node,    qualifiedName,    origType);    break;    	non-compiled	[CE]  cannot  find  symbol  resultEqualsValue	326	None	replace
264	[BUG]  [BUGGY]  scope.inferQualifiedSlot(type,  node,  qualifiedName,  origType,  type);  break;  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(type,  node,  qualifiedName,  origType,  type);  break;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(type,  node,  qualifiedName,  origType,  type);  break;	  scope.inferQualifiedSlot(type,    node,    qualifiedName,    origType);    break;    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	326	None	replace
265	[BUG]  [BUGGY]  scope.inferQualifiedSlot(qualifiedName,  node,  type,  origType);  break;  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(qualifiedName,  node,  type,  origType);  break;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(qualifiedName,  node,  type,  origType);  break;	  scope.inferQualifiedSlot(type,    node,    qualifiedName,    origType);    break;    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	326	None	replace
266	[BUG]  [BUGGY]  scope.inferQualifiedSlot(type,  node,  qualifiedName,  origType,  value);  break;  [CE]  cannot  find  symbol  value  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(type,  node,  qualifiedName,  origType,  value);  break;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(type,  node,  qualifiedName,  origType,  value);  break;	  scope.inferQualifiedSlot(type,    node,    qualifiedName,    origType);    break;    	non-compiled	[CE]  cannot  find  symbol  value	326	None	replace
267	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  qualifiedName,  type,  origType);  break;  [CE]  variable  qualifiedName  might  not  have  been  initialized  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  qualifiedName,  type,  origType);  break;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  qualifiedName,  type,  origType);  break;	  scope.inferQualifiedSlot(type,    node,    qualifiedName,    origType);    break;    	non-compiled	[CE]  variable  qualifiedName  might  not  have  been  initialized	326	None	replace
268	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualifiedName.getQualifiedName() "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualifiedName.getQualifiedName() "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getQualifiedName()       "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	509	1	replace
269	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualifiedName.getQualifiedName() "  +  node.getQualifiedName());  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualifiedName.getQualifiedName() "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualifiedName.getQualifiedName() "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getQualifiedName()       "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	509	1	replace
270	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName() "  +  node.getQualifiedName());  [CE]  <identifier>  expected  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName() "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName() "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getQualifiedName()       "    +    node.getQualifiedName());    	non-compiled	[CE]  <identifier>  expected	509	None	replace
271	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()  = "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()  = "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getQualifiedName()       "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	509	1	replace
272	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()  = "  +  node.getQualifiedName());  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()  = "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()  = "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getQualifiedName()       "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	509	1	replace
273	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName() "  +  node.getQualifiedName());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName() "  +  node.getQualifiedName());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getQualifiedName()       "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	509	1	replace
274	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName() "  +  node.getQualifiedName());  }  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName() "  +  node.getQualifiedName());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName() "  +  node.getQualifiedName());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getQualifiedName()       "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	509	1	replace
275	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()  ' "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()  ' "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getQualifiedName()       "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	509	1	replace
276	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()  ' "  +  node.getQualifiedName());  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()  ' "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()  ' "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getQualifiedName()       "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	509	1	replace
277	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()  : "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()  : "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getQualifiedName()       "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	509	1	replace
278	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()  : "  +  node.getQualifiedName());  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()  : "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()  : "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getQualifiedName()       "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	509	1	replace
279	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualifiedName  +  node.getQualifiedName() "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualifiedName  +  node.getQualifiedName() "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getQualifiedName()       "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	509	1	replace
280	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualifiedName  +  node.getQualifiedName() "  +  node.getQualifiedName());  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualifiedName  +  node.getQualifiedName() "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualifiedName  +  node.getQualifiedName() "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getQualifiedName()       "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	509	1	replace
281	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  named: "  +  node.toStringTree());  [CE]  not  a  statement  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  named: "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  named: "  +  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named:   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	387	None	replace
282	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getLocalName());  [CE]  not  a  statement  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getLocalName());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named:   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	387	None	replace
283	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getLineno());  [CE]  not  a  statement  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getLineno());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named:   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	387	None	replace
284	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getQualifiedName());  [CE]  not  a  statement  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getQualifiedName());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named:   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	387	None	replace
285	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node,  type.toStringTree());  [CE]  not  a  statement  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node,  type.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node,  type.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named:   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	387	None	replace
286	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getMessage());  [CE]  not  a  statement  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getMessage());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getMessage());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named:   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	387	None	replace
287	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getClass());  [CE]  not  a  statement  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getClass());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getClass());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named:   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	387	None	replace
288	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  has  been  refined. "  +  node.getQualifiedName(),  type);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,JSType)  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  has  been  refined. "  +  node.getQualifiedName(),  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  has  been  refined. "  +  node.getQualifiedName(),  type);	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    has    been    refined.   "    +    node.getQualifiedName());    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,JSType)	505	None	replace
289	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  has  been  refined. "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  has  been  refined. "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    has    been    refined.   "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	505	1	replace
290	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  has  been  refined. "  +  node.toStringTree());  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  has  been  refined. "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  has  been  refined. "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    has    been    refined.   "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	505	1	replace
291	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  has  been  refined. "  +  node.getQualifiedName());  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  has  been  refined. "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  has  been  refined. "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    has    been    refined.   "    +    node.getQualifiedName());    	non-compiled	[CE]  <identifier>  expected	505	None	replace
292	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  has  been  refined. "  +  node.getQualifiedName());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  has  been  refined. "  +  node.getQualifiedName());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    has    been    refined.   "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	505	1	replace
293	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  has  been  refined. "  +  node.getQualifiedName());  }  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  has  been  refined. "  +  node.getQualifiedName());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  has  been  refined. "  +  node.getQualifiedName());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    has    been    refined.   "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	505	1	replace
294	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  type,  resultEqualsValue,  scope);  [CE]  cannot  find  symbol  compiler  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  type,  resultEqualsValue,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  type,  resultEqualsValue,  scope);	  NodeTraversal.traverse(compiler,    node,    this,    type,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	150	None	replace
295	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  scope,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  scope,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  scope,  resultEqualsValue);	  NodeTraversal.traverse(compiler,    node,    this,    type,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	150	None	replace
296	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  resultEqualsValue,  scope);  [CE]  cannot  find  symbol  compiler  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  resultEqualsValue,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  resultEqualsValue,  scope);	  NodeTraversal.traverse(compiler,    node,    this,    type,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	150	None	replace
297	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  origType,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  origType,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  origType,  resultEqualsValue);	  NodeTraversal.traverse(compiler,    node,    this,    type,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	150	None	replace
298	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  this,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  this,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope,  this,  resultEqualsValue);	  NodeTraversal.traverse(compiler,    node,    this,    type,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	150	None	replace
299	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  qualifiedName,  type,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  qualifiedName,  type,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  qualifiedName,  type,  resultEqualsValue);	  NodeTraversal.traverse(compiler,    node,    this,    type,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	150	None	replace
300	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  qualifiedName,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  qualifiedName,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  qualifiedName,  resultEqualsValue);	  NodeTraversal.traverse(compiler,    node,    this,    type,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	150	None	replace
301	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  type,  qualifiedName,  origType,  resultEqualsValue);  [CE]  cannot  find  symbol  resultEqualsValue  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  type,  qualifiedName,  origType,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  type,  qualifiedName,  origType,  resultEqualsValue);	  scope.inferQualifiedSlot(node,    type,    qualifiedName,    origType);    	non-compiled	[CE]  cannot  find  symbol  resultEqualsValue	119	None	replace
302	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  type,  qualifiedName,  origType,  value);  [CE]  cannot  find  symbol  value  [FE]                                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  type,  qualifiedName,  origType,  value);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  type,  qualifiedName,  origType,  value);	  scope.inferQualifiedSlot(node,    type,    qualifiedName,    origType);    	non-compiled	[CE]  cannot  find  symbol  value	119	None	replace
303	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  name,  type,  qualifiedName,  origType);  [CE]  cannot  find  symbol  name  [FE]                                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  name,  type,  qualifiedName,  origType);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  name,  type,  qualifiedName,  origType);	  scope.inferQualifiedSlot(node,    type,    qualifiedName,    origType);    	non-compiled	[CE]  cannot  find  symbol  name	119	None	replace
304	[BUG]  [BUGGY]  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [CE]  incompatible  types  [FE]          UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	boolean  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    boolean    resultEqualsValue    =    scope.inferQualifiedSlot(node,    qualifiedName,    origType);    	non-compiled	[CE]  incompatible  types	333	None	replace
305	[BUG]  [BUGGY]  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName,  origType);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]            UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName,  origType);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	boolean  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName,  origType);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    boolean    resultEqualsValue    =    scope.inferQualifiedSlot(node,    qualifiedName,    origType);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	333	None	replace
306	[BUG]  [BUGGY]  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  node);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]              UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  node);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	boolean  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  node);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    boolean    resultEqualsValue    =    scope.inferQualifiedSlot(node,    qualifiedName,    origType);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	333	None	replace
307	[BUG]  [BUGGY]  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  value);  [CE]  cannot  find  symbol  value  [FE]                UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  value);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	boolean  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  value);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    boolean    resultEqualsValue    =    scope.inferQualifiedSlot(node,    qualifiedName,    origType);    	non-compiled	[CE]  cannot  find  symbol  value	333	None	replace
308	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getString(),  resultEqualsValue);  [CE]  cannot  find  symbol  resultEqualsValue  [FE]                  UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getString(),  resultEqualsValue);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getString(),  resultEqualsValue);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    boolean    resultEqualsValue    =    scope.inferQualifiedSlot(node,    qualifiedName,    origType);    	non-compiled	[CE]  cannot  find  symbol  resultEqualsValue	333	None	replace
309	[BUG]  [BUGGY]  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  null);  [CE]  incompatible  types  [FE]                    UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  null);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	boolean  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  null);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    boolean    resultEqualsValue    =    scope.inferQualifiedSlot(node,    qualifiedName,    origType);    	non-compiled	[CE]  incompatible  types	333	None	replace
310	[BUG]  [BUGGY]  boolean  resultEqualsValue  =  type.inferQualifiedSlot(node,  qualifiedName,  node);  [CE]  cannot  find  symbol  [FE]                      UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  boolean  resultEqualsValue  =  type.inferQualifiedSlot(node,  qualifiedName,  node);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	boolean  resultEqualsValue  =  type.inferQualifiedSlot(node,  qualifiedName,  node);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    boolean    resultEqualsValue    =    scope.inferQualifiedSlot(node,    qualifiedName,    origType);    	non-compiled	[CE]  cannot  find  symbol	333	None	replace
311	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.getQualifiedName());  [CE]  not  a  statement  [FE]            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getQualifiedName());    Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n       "    +    node.getQualifiedName());    	non-compiled	[CE]  not  a  statement	50	None	replace
312	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.getQualifiedName());  [CE]  not  a  statement  [FE]              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getQualifiedName());    Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n       "    +    node.getQualifiedName());    	non-compiled	[CE]  not  a  statement	50	None	replace
313	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  can  be  refined. "  +  node.getQualifiedName());  [CE]  not  a  statement  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  can  be  refined. "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  can  be  refined. "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getQualifiedName());    Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n       "    +    node.getQualifiedName());    	non-compiled	[CE]  not  a  statement	50	None	replace
314	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  NON-NLS-1 "  +  node.getQualifiedName());  [CE]  not  a  statement  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  NON-NLS-1 "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  NON-NLS-1 "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getQualifiedName());    Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n       "    +    node.getQualifiedName());    	non-compiled	[CE]  not  a  statement	50	None	replace
315	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node. "  +  node.getQualifiedName());  [CE]  not  a  statement  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node. "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node. "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getQualifiedName());    Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n       "    +    node.getQualifiedName());    	non-compiled	[CE]  not  a  statement	50	None	replace
316	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined ",  node.getQualifiedName());  [CE]  not  a  statement  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined ",  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined ",  node.getQualifiedName());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getQualifiedName());    Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n       "    +    node.getQualifiedName());    	non-compiled	[CE]  not  a  statement	50	None	replace
317	[BUG]  [BUGGY]  DebugLog.warning(type, "Node  cannot  be  refined.   "  +  node.getQualifiedName());  [CE]  cannot  find  symbol  DebugLog  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning(type, "Node  cannot  be  refined.   "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning(type, "Node  cannot  be  refined.   "  +  node.getQualifiedName());	  DebugLog.warning(   "Node    cannot    be    refined.   "    +    node.getQualifiedName());    	non-compiled	[CE]  cannot  find  symbol  DebugLog	131	None	replace
318	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined.   "  +  node.getQualifiedName(),  type);  [CE]  cannot  find  symbol  DebugLog  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning( "Node  cannot  be  refined.   "  +  node.getQualifiedName(),  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined.   "  +  node.getQualifiedName(),  type);	  DebugLog.warning(   "Node    cannot    be    refined.   "    +    node.getQualifiedName());    	non-compiled	[CE]  cannot  find  symbol  DebugLog	131	None	replace
319	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined ",  node.getQualifiedName());  [CE]  cannot  find  symbol  DebugLog  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning( "Node  cannot  be  refined ",  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined ",  node.getQualifiedName());	  DebugLog.warning(   "Node    cannot    be    refined.   "    +    node.getQualifiedName());    	non-compiled	[CE]  cannot  find  symbol  DebugLog	131	None	replace
320	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined. "  +  node,  qualifiedName.getQualifiedName());  [CE]  cannot  find  symbol  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning( "Node  cannot  be  refined. "  +  node,  qualifiedName.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined. "  +  node,  qualifiedName.getQualifiedName());	  DebugLog.warning(   "Node    cannot    be    refined.   "    +    node.getQualifiedName());    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
321	[BUG]  [BUGGY]  JSType  node  =  getNativeType(UNKNOWN_TYPE,  scope);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  JSType  node  =  getNativeType(UNKNOWN_TYPE,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	JSType  node  =  getNativeType(UNKNOWN_TYPE,  scope);	  JSType    node    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	280	None	replace
322	[BUG]  [BUGGY]  JSType  node  =  getNativeType(UNKNOWN_TYPE,  type);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  JSType  node  =  getNativeType(UNKNOWN_TYPE,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	JSType  node  =  getNativeType(UNKNOWN_TYPE,  type);	  JSType    node    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	280	None	replace
323	[BUG]  [BUGGY]  JSType  node  =  getNativeType(NODE_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  JSType  node  =  getNativeType(NODE_TYPE);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	JSType  node  =  getNativeType(NODE_TYPE);	  JSType    node    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	280	None	replace
324	[BUG]  [BUGGY]  JSType  node  =  getNativeType(UNKNOWN_TYPE),  scope);  [CE]  ';'  expected  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  JSType  node  =  getNativeType(UNKNOWN_TYPE),  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	JSType  node  =  getNativeType(UNKNOWN_TYPE),  scope);	  JSType    node    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	280	None	replace
325	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node,  scope.getName());  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node,  scope.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node,  scope.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getName());    	non-compiled	[CE]  cannot  find  symbol	243	None	replace
326	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  qualified  name:   "  +  node.getQualifiedName());  Node  cannot  be  refined.  qualified  name:   "  +  node.getQualifiedName());  [CE]  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  qualified  name:   "  +  node.getQualifiedName());  Node  cannot  be  refined.  qualified  name:   "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    qualified    name:   "    +    node.getQualifiedName());    Node  cannot  be  refined.  qualified  name:   "  +  node.getQualifiedName());	  	non-compiled	[CE]  	75	None	add
327	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  qualified  name:   "  +  node.getQualifiedName());  IllegalArgumentException( "Node  cannot  be  refined.  qualified  name:   "  +  node.getQualifiedName());  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  qualified  name:   "  +  node.getQualifiedName());  IllegalArgumentException( "Node  cannot  be  refined.  qualified  name:   "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    qualified    name:   "    +    node.getQualifiedName());    IllegalArgumentException( "Node  cannot  be  refined.  qualified  name:   "  +  node.getQualifiedName());	  	non-compiled	[CE]  cannot  find  symbol	75	None	add
328	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  qualified  name:   "  +  node.getQualifiedName());  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  qualified  name:   "  +  node.getQualifiedName());  [CE]  not  a  statement  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  qualified  name:   "  +  node.getQualifiedName());  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  qualified  name:   "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    qualified    name:   "    +    node.getQualifiedName());    Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  qualified  name:   "  +  node.getQualifiedName());	  	non-compiled	[CE]  not  a  statement	75	None	add
329	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  qualified  name:   "  +  node.getQualifiedName());  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  qualified  name:   "  +  node.getQualifiedName());  [CE]  unreachable  statement  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  qualified  name:   "  +  node.getQualifiedName());  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  qualified  name:   "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    qualified    name:   "    +    node.getQualifiedName());    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  qualified  name:   "  +  node.getQualifiedName());	  	non-compiled	[CE]  unreachable  statement	75	None	add
330	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node,  scope.getMessage());  [CE]  cannot  find  symbol  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node,  scope.getMessage());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node,  scope.getMessage());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    can    be    refined.   "    +    node.getMessage());    	non-compiled	[CE]  cannot  find  symbol	260	None	replace
331	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node.getMessage());  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node.getMessage());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node.getMessage());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    can    be    refined.   "    +    node.getMessage());    	non-compiled	[CE]  <identifier>  expected	260	None	replace
332	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    can    be    refined.   "    +    node.getMessage());    	compilable	  [FE]  IllegalArgumentException  	260	1	replace
333	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node.toStringTree());  [FE]  IllegalArgumentException  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    can    be    refined.   "    +    node.getMessage());    	compilable	  [FE]  IllegalArgumentException  	260	1	replace
334	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node,  type.getMessage());  [CE]  cannot  find  symbol  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node,  type.getMessage());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node,  type.getMessage());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    can    be    refined.   "    +    node.getMessage());    	non-compiled	[CE]  cannot  find  symbol	260	None	replace
335	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node.getClass());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node.getClass());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    can    be    refined.   "    +    node.getMessage());    	compilable	  [FE]  IllegalArgumentException  	260	1	replace
336	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node.getClass());  [FE]  IllegalArgumentException  [FE]                                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node.getClass());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node.getClass());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    can    be    refined.   "    +    node.getMessage());    	compilable	  [FE]  IllegalArgumentException  	260	1	replace
337	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined: "  +  node.getMessage());  [CE]  cannot  find  symbol  [FE]                                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined: "  +  node.getMessage());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined: "  +  node.getMessage());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    can    be    refined.   "    +    node.getMessage());    	non-compiled	[CE]  cannot  find  symbol	260	None	replace
338	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node.getLineno());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    can    be    refined.   "    +    node.getMessage());    	compilable	  [FE]  IllegalArgumentException  	260	1	replace
339	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node.getLineno());  [FE]  IllegalArgumentException  [FE]                                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node.getLineno());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    can    be    refined.   "    +    node.getMessage());    	compilable	  [FE]  IllegalArgumentException  	260	1	replace
340	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  type,  origType,  UNKNOWN_TYPE);  break;  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  type,  origType,  UNKNOWN_TYPE);  break;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  type,  origType,  UNKNOWN_TYPE);  break;	  scope.inferQualifiedSlot(node,    UNKNOWN_TYPE,    origType,    type);    break;    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	211	None	replace
341	[BUG]  [BUGGY]  scope.inferQualifiedSlot(type,  origType,  UNKNOWN_TYPE);  break;  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(type,  origType,  UNKNOWN_TYPE);  break;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(type,  origType,  UNKNOWN_TYPE);  break;	  scope.inferQualifiedSlot(node,    UNKNOWN_TYPE,    origType,    type);    break;    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	211	None	replace
342	[BUG]  [BUGGY]  node.inferQualifiedSlot(qualifiedName,  node,  UNKNOWN_TYPE,  type);  break;  [CE]  cannot  find  symbol  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  node.inferQualifiedSlot(qualifiedName,  node,  UNKNOWN_TYPE,  type);  break;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	node.inferQualifiedSlot(qualifiedName,  node,  UNKNOWN_TYPE,  type);  break;	  scope.inferQualifiedSlot(node,    UNKNOWN_TYPE,    origType,    type);    break;    	non-compiled	[CE]  cannot  find  symbol	211	None	replace
343	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  type,  origType,  qualifiedName);  break;  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  type,  origType,  qualifiedName);  break;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  type,  origType,  qualifiedName);  break;	  scope.inferQualifiedSlot(node,    UNKNOWN_TYPE,    origType,    type);    break;    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	211	None	replace
344	[BUG]  [BUGGY]  Node  cannotBe  refined.   "  +  node.getLineno());  [CE]  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  cannotBe  refined.   "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  cannotBe  refined.   "  +  node.getLineno());	  if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getLineno());    }    	non-compiled	[CE]  	348	None	replace
345	[BUG]  [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getSourceName());  }  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getSourceName());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getSourceName());  }	  if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getLineno());    }    	non-compiled	[CE]  cannot  find  symbol	348	None	replace
346	[BUG]  [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined ",  node.getLineno());  }  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,int)  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined ",  node.getLineno());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined ",  node.getLineno());  }	  if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getLineno());    }    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,int)	348	None	replace
347	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type: "  +  node.toStringTree());  [CE]  not  a  statement  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type: "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type: "  +  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type.   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	440	None	replace
348	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type. "  +  qualifiedName,  node.toStringTree());  [CE]  not  a  statement  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type. "  +  qualifiedName,  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type. "  +  qualifiedName,  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type.   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	440	None	replace
349	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  defined  with  type.   "  +  node.toStringTree());  [CE]  not  a  statement  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  defined  with  type.   "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  defined  with  type.   "  +  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type.   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	440	None	replace
350	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type.n "  +  node.toStringTree());  [CE]  not  a  statement  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type.n "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type.n "  +  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type.   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	440	None	replace
351	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type. "  +  node.getLocalName());  [CE]  not  a  statement  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type. "  +  node.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type. "  +  node.getLocalName());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type.   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	440	None	replace
352	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type. "  +  node.getQualifiedName());  [CE]  not  a  statement  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type. "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type. "  +  node.getQualifiedName());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type.   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	440	None	replace
353	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(ROOT_TYPE),  scope);  [CE]  cannot  find  symbol  compiler  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(ROOT_TYPE),  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(ROOT_TYPE),  scope);	  NodeTraversal.traverse(compiler,    node,    getNativeType(ROOT_TYPE),    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	353	None	replace
354	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  getNativeType(ROOT_TYPE),  this);  [CE]  cannot  find  symbol  compiler  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  getNativeType(ROOT_TYPE),  this);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  type,  getNativeType(ROOT_TYPE),  this);	  NodeTraversal.traverse(compiler,    node,    getNativeType(ROOT_TYPE),    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	353	None	replace
355	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  getNativeType(ROOT_TYPE),  this);  [CE]  cannot  find  symbol  compiler  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  getNativeType(ROOT_TYPE),  this);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope,  getNativeType(ROOT_TYPE),  this);	  NodeTraversal.traverse(compiler,    node,    getNativeType(ROOT_TYPE),    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	353	None	replace
356	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getLineno());  }  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getLineno());    }    if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }	  	compilable	  [FE]  IllegalArgumentException  	347	1	add
357	[BUG]  [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getLineno());  }  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getLineno());  }  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getLineno());    }    if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }	  	compilable	  [FE]  IllegalArgumentException  	347	1	add
358	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getLineno());  }  if(node  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getLineno());    }    if(node  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }	  	compilable	  [FE]  IllegalArgumentException  	347	1	add
359	[BUG]  [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getLineno());  }  if(node  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getLineno());  }  if(node  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getLineno());    }    if(node  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }	  	compilable	  [FE]  IllegalArgumentException  	347	1	add
360	[BUG]  [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getLineno());  }  if(node  >=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }  [CE]  bad  operand  types  for  binary  operator  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getLineno());  }  if(node  >=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getLineno());    }    if(node  >=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  	347	None	add
361	[BUG]  [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getLineno());  }  If(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }  [CE]  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getLineno());  }  If(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getLineno());    }    If(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }	  	non-compiled	[CE]  	347	None	add
362	[BUG]  [BUGGY]  DebugLog.warning(scope,  qualifiedName  + "  cannot  be  refined. "  +  node,  type.toStringTree());  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning(scope,  qualifiedName  + "  cannot  be  refined. "  +  node,  type.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning(scope,  qualifiedName  + "  cannot  be  refined. "  +  node,  type.toStringTree());	  DebugLog.warning(scope,    qualifiedName    +   "    cannot    be    refined.   "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol	456	None	replace
363	[BUG]  [BUGGY]  DebugLog.warning(scope,  node  + "  cannot  be  refined. "  +  qualifiedName.toStringTree());  [CE]  cannot  find  symbol  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning(scope,  node  + "  cannot  be  refined. "  +  qualifiedName.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning(scope,  node  + "  cannot  be  refined. "  +  qualifiedName.toStringTree());	  DebugLog.warning(scope,    qualifiedName    +   "    cannot    be    refined.   "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol	456	None	replace
364	[BUG]  [BUGGY]  DebugLog.warning(scope,  qualifiedName  + "  cannot  be  refined. "  +  scope.toStringTree());  [CE]  cannot  find  symbol  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning(scope,  qualifiedName  + "  cannot  be  refined. "  +  scope.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning(scope,  qualifiedName  + "  cannot  be  refined. "  +  scope.toStringTree());	  DebugLog.warning(scope,    qualifiedName    +   "    cannot    be    refined.   "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol	456	None	replace
365	[BUG]  [BUGGY]  DebugLog.warning(scope,  name  + "  cannot  be  refined.   "  +  node.toStringTree());  [CE]  cannot  find  symbol  name  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning(scope,  name  + "  cannot  be  refined.   "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning(scope,  name  + "  cannot  be  refined.   "  +  node.toStringTree());	  DebugLog.warning(scope,    qualifiedName    +   "    cannot    be    refined.   "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol  name	456	None	replace
366	[BUG]  [BUGGY]  DebugLog.warning(scope,  qualifiedName  + "  cannot  be  refined. "  +  type.toStringTree());  [CE]  cannot  find  symbol  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning(scope,  qualifiedName  + "  cannot  be  refined. "  +  type.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning(scope,  qualifiedName  + "  cannot  be  refined. "  +  type.toStringTree());	  DebugLog.warning(scope,    qualifiedName    +   "    cannot    be    refined.   "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol	456	None	replace
367	[BUG]  [BUGGY]  DebugLog.warning(scope,  qualifiedName  + "  cannot  be  refined. "  +  node,  value.toStringTree());  [CE]  cannot  find  symbol  value  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning(scope,  qualifiedName  + "  cannot  be  refined. "  +  node,  value.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning(scope,  qualifiedName  + "  cannot  be  refined. "  +  node,  value.toStringTree());	  DebugLog.warning(scope,    qualifiedName    +   "    cannot    be    refined.   "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol  value	456	None	replace
368	[BUG]  [BUGGY]  DebugLog.warning(scope,  node,  qualifiedName  + "  cannot  be  refined.   "  +  node.toStringTree());  [CE]  cannot  find  symbol  DebugLog  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning(scope,  node,  qualifiedName  + "  cannot  be  refined.   "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning(scope,  node,  qualifiedName  + "  cannot  be  refined.   "  +  node.toStringTree());	  DebugLog.warning(scope,    qualifiedName    +   "    cannot    be    refined.   "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol  DebugLog	456	None	replace
369	[BUG]  [BUGGY]  parent  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  parent.toStringTree());  }  [CE]  not  a  statement  [FE]          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  parent  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  parent.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	parent  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  parent.toStringTree());  }	  parent    ==    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.   "    +    node.toStringTree());    }    	non-compiled	[CE]  not  a  statement	458	None	replace
370	[BUG]  [BUGGY]  scope.inferQualifiedSlot(ode,  qualifiedName,  origType,  type);  break;  [CE]  cannot  find  symbol  ode  [FE]              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(ode,  qualifiedName,  origType,  type);  break;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(ode,  qualifiedName,  origType,  type);  break;	  scope.inferQualifiedSlot(value,    node,    type,    origType);    break;    	non-compiled	[CE]  cannot  find  symbol  ode	325	None	replace
371	[BUG]  [BUGGY]  scope.inferQualifiedSlot(type,  node,  value,  origType);  break;  [CE]  cannot  find  symbol  value  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(type,  node,  value,  origType);  break;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(type,  node,  value,  origType);  break;	  scope.inferQualifiedSlot(value,    node,    type,    origType);    break;    	non-compiled	[CE]  cannot  find  symbol  value	325	None	replace
372	[BUG]  [BUGGY]  scope.inferQualifiedSlot(type,  node,  type,  origType);  break;  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(type,  node,  type,  origType);  break;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(type,  node,  type,  origType);  break;	  scope.inferQualifiedSlot(value,    node,    type,    origType);    break;    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	325	None	replace
373	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  type,  origType,  resultEqualsValue);  break;  [CE]  cannot  find  symbol  resultEqualsValue  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  type,  origType,  resultEqualsValue);  break;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  type,  origType,  resultEqualsValue);  break;	  scope.inferQualifiedSlot(node,    resultEqualsValue,    origType,    type);    break;    	non-compiled	[CE]  cannot  find  symbol  resultEqualsValue	210	None	replace
374	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  resultEqualsValue,  type,  origType);  break;  [CE]  cannot  find  symbol  resultEqualsValue  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  resultEqualsValue,  type,  origType);  break;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  resultEqualsValue,  type,  origType);  break;	  scope.inferQualifiedSlot(node,    resultEqualsValue,    origType,    type);    break;    	non-compiled	[CE]  cannot  find  symbol  resultEqualsValue	210	None	replace
375	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  resultEqualsValue,  qualifiedName,  origType,  type);  break;  [CE]  cannot  find  symbol  resultEqualsValue  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  resultEqualsValue,  qualifiedName,  origType,  type);  break;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  resultEqualsValue,  qualifiedName,  origType,  type);  break;	  scope.inferQualifiedSlot(node,    resultEqualsValue,    origType,    type);    break;    	non-compiled	[CE]  cannot  find  symbol  resultEqualsValue	210	None	replace
376	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  resultEqualsValue,  qualifiedName,  type);  break;  [CE]  cannot  find  symbol  resultEqualsValue  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  resultEqualsValue,  qualifiedName,  type);  break;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  resultEqualsValue,  qualifiedName,  type);  break;	  scope.inferQualifiedSlot(node,    resultEqualsValue,    origType,    type);    break;    	non-compiled	[CE]  cannot  find  symbol  resultEqualsValue	210	None	replace
377	[BUG]  [BUGGY]  scope.inferQualifiedSlot(origType,  node,  resultEqualsValue,  type);  break;  [CE]  cannot  find  symbol  resultEqualsValue  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(origType,  node,  resultEqualsValue,  type);  break;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(origType,  node,  resultEqualsValue,  type);  break;	  scope.inferQualifiedSlot(node,    resultEqualsValue,    origType,    type);    break;    	non-compiled	[CE]  cannot  find  symbol  resultEqualsValue	210	None	replace
378	[BUG]  [BUGGY]  Node  not  defined.  n   "  +  node.getString());  [CE]  [FE]                UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  not  defined.  n   "  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  not  defined.  n   "  +  node.getString());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    Node    not    defined.    n       "    +    node.getString());    	non-compiled	[CE]  	58	None	replace
379	[BUG]  [BUGGY]  Node  not  defined.   "  +  node.getString());  [CE]  [FE]                  UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  not  defined.   "  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  not  defined.   "  +  node.getString());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    Node    not    defined.    n       "    +    node.getString());    	non-compiled	[CE]  	58	None	replace
380	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getString());  Node  not  defined.   "  +  node.getString());  [CE]  [FE]                    UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getString());  Node  not  defined.   "  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getString());  Node  not  defined.   "  +  node.getString());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    Node    not    defined.    n       "    +    node.getString());    	non-compiled	[CE]  	58	None	replace
381	[BUG]  [BUGGY]  Node  not  defined.n't "  +  node.getString());  [CE]  [FE]                      UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  not  defined.n't "  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  not  defined.n't "  +  node.getString());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    Node    not    defined.    n       "    +    node.getString());    	non-compiled	[CE]  	58	None	replace
382	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getLocalName());  Node  not  defined.   "  +  node.getString());  [CE]  [FE]                        UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getLocalName());  Node  not  defined.   "  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getLocalName());  Node  not  defined.   "  +  node.getString());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    Node    not    defined.    n       "    +    node.getString());    	non-compiled	[CE]  	58	None	replace
383	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getQualifiedName());  Node  not  defined. "  +  node.getString());  [CE]  [FE]                          UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getQualifiedName());  Node  not  defined. "  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getQualifiedName());  Node  not  defined. "  +  node.getString());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    Node    not    defined.    n       "    +    node.getString());    	non-compiled	[CE]  	58	None	replace
384	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getClass());  Node  not  defined.   "  +  node.getString());  [CE]  [FE]                            UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getClass());  Node  not  defined.   "  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getClass());  Node  not  defined.   "  +  node.getString());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    Node    not    defined.    n       "    +    node.getString());    	non-compiled	[CE]  	58	None	replace
385	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  resultEqualsValue,  scope);  [CE]  cannot  find  symbol  compiler  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  resultEqualsValue,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  resultEqualsValue,  scope);	  NodeTraversal.traverse(compiler,    node,    new    RestrictByTrueTypeOfResultVisitor(),    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	137	None	replace
386	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  resultEqualsValue,  typeRegistry);  [CE]  cannot  find  symbol  compiler  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  resultEqualsValue,  typeRegistry);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  resultEqualsValue,  typeRegistry);	  NodeTraversal.traverse(compiler,    node,    new    RestrictByTrueTypeOfResultVisitor(),    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	137	None	replace
387	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  scope,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  scope,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  scope,  resultEqualsValue);	  NodeTraversal.traverse(compiler,    node,    new    RestrictByTrueTypeOfResultVisitor(),    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	137	None	replace
388	[BUG]  [BUGGY]  DebugLog.warning(type, "Node  cannot  be  refined.   "  +  node.getClass());  [CE]  cannot  find  symbol  DebugLog  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning(type, "Node  cannot  be  refined.   "  +  node.getClass());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning(type, "Node  cannot  be  refined.   "  +  node.getClass());	  DebugLog.warning(   "Node    cannot    be    refined.   "    +    node.getClass());    	non-compiled	[CE]  cannot  find  symbol  DebugLog	293	None	replace
389	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined. "  +  node,  type.getClass());  [CE]  cannot  find  symbol  DebugLog  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning( "Node  cannot  be  refined. "  +  node,  type.getClass());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined. "  +  node,  type.getClass());	  DebugLog.warning(   "Node    cannot    be    refined.   "    +    node.getClass());    	non-compiled	[CE]  cannot  find  symbol  DebugLog	293	None	replace
390	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined. "  +  node,  scope.getClass());  [CE]  cannot  find  symbol  DebugLog  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning( "Node  cannot  be  refined. "  +  node,  scope.getClass());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined. "  +  node,  scope.getClass());	  DebugLog.warning(   "Node    cannot    be    refined.   "    +    node.getClass());    	non-compiled	[CE]  cannot  find  symbol  DebugLog	293	None	replace
391	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined:   "  +  node.getClass());  [CE]  cannot  find  symbol  DebugLog  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning( "Node  cannot  be  refined:   "  +  node.getClass());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined:   "  +  node.getClass());	  DebugLog.warning(   "Node    cannot    be    refined.   "    +    node.getClass());    	non-compiled	[CE]  cannot  find  symbol  DebugLog	293	None	replace
392	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined.   "  +  node.getClass(),  type);  [CE]  cannot  find  symbol  DebugLog  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning( "Node  cannot  be  refined.   "  +  node.getClass(),  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined.   "  +  node.getClass(),  type);	  DebugLog.warning(   "Node    cannot    be    refined.   "    +    node.getClass());    	non-compiled	[CE]  cannot  find  symbol  DebugLog	293	None	replace
393	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByOneTypeOfResultVisitor(),  type,  scope);  [CE]  cannot  find  symbol  compiler  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByOneTypeOfResultVisitor(),  type,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  new  RestrictByOneTypeOfResultVisitor(),  type,  scope);	  NodeTraversal.traverse(compiler,    node,    new    RestrictByOneTypeOfResultVisitor(),    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	237	None	replace
394	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByOneTypeOfResultVisitor(),  type,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByOneTypeOfResultVisitor(),  type,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  new  RestrictByOneTypeOfResultVisitor(),  type,  resultEqualsValue);	  NodeTraversal.traverse(compiler,    node,    new    RestrictByOneTypeOfResultVisitor(),    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	237	None	replace
395	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByOneTypeOfResultVisitor(),  typeRegistry);  [CE]  cannot  find  symbol  compiler  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByOneTypeOfResultVisitor(),  typeRegistry);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  new  RestrictByOneTypeOfResultVisitor(),  typeRegistry);	  NodeTraversal.traverse(compiler,    node,    new    RestrictByOneTypeOfResultVisitor(),    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	237	None	replace
396	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  new  RestrictByOneTypeOfResultVisitor(),  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  new  RestrictByOneTypeOfResultVisitor(),  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  type,  new  RestrictByOneTypeOfResultVisitor(),  resultEqualsValue);	  NodeTraversal.traverse(compiler,    node,    new    RestrictByOneTypeOfResultVisitor(),    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	237	None	replace
397	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByOneTypeOfResultVisitor(),  resultEqualsValue,  type);  [CE]  cannot  find  symbol  compiler  [FE]                                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByOneTypeOfResultVisitor(),  resultEqualsValue,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  new  RestrictByOneTypeOfResultVisitor(),  resultEqualsValue,  type);	  NodeTraversal.traverse(compiler,    node,    new    RestrictByOneTypeOfResultVisitor(),    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	237	None	replace
398	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type  ==  null);  Preconditions.checkNotNull(type);  Preconditions.checkArgument(type  ==  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	                Preconditions.checkNotNull(type);        Preconditions.checkArgument(type    ==    null);    Preconditions.checkNotNull(type);  Preconditions.checkArgument(type  ==  null);	  	compilable	  [FE]  IllegalArgumentException  	488	1	add
399	[BUG]  [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type  ==  null);  Preconditions.checkNotNull(type);  Preconditions.checkArgument(type  ==  null);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type  ==  null);  Preconditions.checkNotNull(type);  Preconditions.checkArgument(type  ==  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	                Preconditions.checkNotNull(type);        Preconditions.checkArgument(type    ==    null);    Preconditions.checkNotNull(type);  Preconditions.checkArgument(type  ==  null);	  	compilable	  [FE]  IllegalArgumentException  	488	1	add
400	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type  ==  null);  Preconditions.checkState(type!=  null);  Preconditions.checkArgument(type  ==  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	                Preconditions.checkNotNull(type);        Preconditions.checkArgument(type    ==    null);    Preconditions.checkState(type!=  null);  Preconditions.checkArgument(type  ==  null);	  	compilable	  [FE]  IllegalArgumentException  	488	1	add
401	[BUG]  [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type  ==  null);  Preconditions.checkState(type!=  null);  Preconditions.checkArgument(type  ==  null);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type  ==  null);  Preconditions.checkState(type!=  null);  Preconditions.checkArgument(type  ==  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	                Preconditions.checkNotNull(type);        Preconditions.checkArgument(type    ==    null);    Preconditions.checkState(type!=  null);  Preconditions.checkArgument(type  ==  null);	  	compilable	  [FE]  IllegalArgumentException  	488	1	add
402	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type  ==  null);  Preconditions.checkState(type  ==  null);  Preconditions.checkArgument(type  ==  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	                Preconditions.checkNotNull(type);        Preconditions.checkArgument(type    ==    null);    Preconditions.checkState(type  ==  null);  Preconditions.checkArgument(type  ==  null);	  	compilable	  [FE]  IllegalArgumentException  	488	1	add
403	[BUG]  [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type  ==  null);  Preconditions.checkState(type  ==  null);  Preconditions.checkArgument(type  ==  null);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type  ==  null);  Preconditions.checkState(type  ==  null);  Preconditions.checkArgument(type  ==  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	                Preconditions.checkNotNull(type);        Preconditions.checkArgument(type    ==    null);    Preconditions.checkState(type  ==  null);  Preconditions.checkArgument(type  ==  null);	  	compilable	  [FE]  IllegalArgumentException  	488	1	add
404	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type  ==  null);  Preconditions.checkArgument(type  ==  null);  Preconditions.checkArgument(type  ==  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	                Preconditions.checkNotNull(type);        Preconditions.checkArgument(type    ==    null);    Preconditions.checkArgument(type  ==  null);  Preconditions.checkArgument(type  ==  null);	  	compilable	  [FE]  IllegalArgumentException  	488	1	add
405	[BUG]  [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type  ==  null);  Preconditions.checkArgument(type  ==  null);  Preconditions.checkArgument(type  ==  null);  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type  ==  null);  Preconditions.checkArgument(type  ==  null);  Preconditions.checkArgument(type  ==  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	                Preconditions.checkNotNull(type);        Preconditions.checkArgument(type    ==    null);    Preconditions.checkArgument(type  ==  null);  Preconditions.checkArgument(type  ==  null);	  	compilable	  [FE]  IllegalArgumentException  	488	1	add
406	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type  ==  null);  Preconditions.checkArgument(type!=  null);  Preconditions.checkArgument(type  ==  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	                Preconditions.checkNotNull(type);        Preconditions.checkArgument(type    ==    null);    Preconditions.checkArgument(type!=  null);  Preconditions.checkArgument(type  ==  null);	  	compilable	  [FE]  IllegalArgumentException  	488	1	add
407	[BUG]  [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type  ==  null);  Preconditions.checkArgument(type!=  null);  Preconditions.checkArgument(type  ==  null);  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type  ==  null);  Preconditions.checkArgument(type!=  null);  Preconditions.checkArgument(type  ==  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	                Preconditions.checkNotNull(type);        Preconditions.checkArgument(type    ==    null);    Preconditions.checkArgument(type!=  null);  Preconditions.checkArgument(type  ==  null);	  	compilable	  [FE]  IllegalArgumentException  	488	1	add
408	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type  ==  null);  Preconditions.checkArgument(type  ==  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	                Preconditions.checkNotNull(type);        Preconditions.checkArgument(type    ==    null);    Preconditions.checkArgument(type  ==  null);	  	compilable	  [FE]  IllegalArgumentException  	488	1	add
409	[BUG]  [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type  ==  null);  Preconditions.checkArgument(type  ==  null);  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type  ==  null);  Preconditions.checkArgument(type  ==  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	                Preconditions.checkNotNull(type);        Preconditions.checkArgument(type    ==    null);    Preconditions.checkArgument(type  ==  null);	  	compilable	  [FE]  IllegalArgumentException  	488	1	add
410	[BUG]  [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type  ==  null);  Preconditions.checkState(type  >=  null);  Preconditions.checkArgument(type  ==  null);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type  ==  null);  Preconditions.checkState(type  >=  null);  Preconditions.checkArgument(type  ==  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	                Preconditions.checkNotNull(type);        Preconditions.checkArgument(type    ==    null);    Preconditions.checkState(type  >=  null);  Preconditions.checkArgument(type  ==  null);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	488	None	add
411	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type  ==  null);  Preconditions.checkNotNull(type);  Preconditions.checkArgument(type!=  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	                Preconditions.checkNotNull(type);        Preconditions.checkArgument(type    ==    null);    Preconditions.checkNotNull(type);  Preconditions.checkArgument(type!=  null);	  	compilable	  [FE]  IllegalArgumentException  	488	1	add
412	[BUG]  [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type  ==  null);  Preconditions.checkNotNull(type);  Preconditions.checkArgument(type!=  null);  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type  ==  null);  Preconditions.checkNotNull(type);  Preconditions.checkArgument(type!=  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	                Preconditions.checkNotNull(type);        Preconditions.checkArgument(type    ==    null);    Preconditions.checkNotNull(type);  Preconditions.checkArgument(type!=  null);	  	compilable	  [FE]  IllegalArgumentException  	488	1	add
413	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type  ==  null);  Preconditions.checkState(type  ==  null);  Preconditions.checkArgument(type!=  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	                Preconditions.checkNotNull(type);        Preconditions.checkArgument(type    ==    null);    Preconditions.checkState(type  ==  null);  Preconditions.checkArgument(type!=  null);	  	compilable	  [FE]  IllegalArgumentException  	488	1	add
414	[BUG]  [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type  ==  null);  Preconditions.checkState(type  ==  null);  Preconditions.checkArgument(type!=  null);  [FE]  IllegalArgumentException  [FE]                    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type  ==  null);  Preconditions.checkState(type  ==  null);  Preconditions.checkArgument(type!=  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	                Preconditions.checkNotNull(type);        Preconditions.checkArgument(type    ==    null);    Preconditions.checkState(type  ==  null);  Preconditions.checkArgument(type!=  null);	  	compilable	  [FE]  IllegalArgumentException  	488	1	add
415	[BUG]  [BUGGY]  FlowScope  <  Node>  node  =  scope.inferQualifiedSlot(node,  qualifiedName);  [CE]  type  FlowScope  does  not  take  parameters  [FE]            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  FlowScope  <  Node>  node  =  scope.inferQualifiedSlot(node,  qualifiedName);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	FlowScope  <  Node>  node  =  scope.inferQualifiedSlot(node,  qualifiedName);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.       "    +    node.toStringTree());    FlowScope    <    Node>    node    =    scope.inferQualifiedSlot(node,    qualifiedName);    	non-compiled	[CE]  type  FlowScope  does  not  take  parameters	315	None	replace
416	[BUG]  [BUGGY]  Node  <  Node>  node  =  scope.inferQualifiedSlot(node,  qualifiedName);  [CE]  type  Node  does  not  take  parameters  [FE]              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  <  Node>  node  =  scope.inferQualifiedSlot(node,  qualifiedName);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  <  Node>  node  =  scope.inferQualifiedSlot(node,  qualifiedName);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.       "    +    node.toStringTree());    FlowScope    <    Node>    node    =    scope.inferQualifiedSlot(node,    qualifiedName);    	non-compiled	[CE]  type  Node  does  not  take  parameters	315	None	replace
417	[BUG]  [BUGGY]  Node  node  =  scope.inferQualifiedSlot(node,  qualifiedName);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.inferQualifiedSlot(node,  qualifiedName);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.inferQualifiedSlot(node,  qualifiedName);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.       "    +    node.toStringTree());    FlowScope    <    Node>    node    =    scope.inferQualifiedSlot(node,    qualifiedName);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	315	None	replace
418	[BUG]  [BUGGY]  node  =  scope.inferQualifiedSlot(node,  qualifiedName);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  node  =  scope.inferQualifiedSlot(node,  qualifiedName);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	node  =  scope.inferQualifiedSlot(node,  qualifiedName);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.       "    +    node.toStringTree());    FlowScope    <    Node>    node    =    scope.inferQualifiedSlot(node,    qualifiedName);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	315	None	replace
419	[BUG]  [BUGGY]  FlowScope  <  Node>  node  =  typeRegistry.inferQualifiedSlot(node,  qualifiedName);  [CE]  type  FlowScope  does  not  take  parameters  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  FlowScope  <  Node>  node  =  typeRegistry.inferQualifiedSlot(node,  qualifiedName);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	FlowScope  <  Node>  node  =  typeRegistry.inferQualifiedSlot(node,  qualifiedName);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.       "    +    node.toStringTree());    FlowScope    <    Node>    node    =    scope.inferQualifiedSlot(node,    qualifiedName);    	non-compiled	[CE]  type  FlowScope  does  not  take  parameters	315	None	replace
420	[BUG]  [BUGGY]  Node  <?>  node  =  scope.inferQualifiedSlot(node,  qualifiedName);  [CE]  type  Node  does  not  take  parameters  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  <?>  node  =  scope.inferQualifiedSlot(node,  qualifiedName);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  <?>  node  =  scope.inferQualifiedSlot(node,  qualifiedName);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.       "    +    node.toStringTree());    FlowScope    <    Node>    node    =    scope.inferQualifiedSlot(node,    qualifiedName);    	non-compiled	[CE]  type  Node  does  not  take  parameters	315	None	replace
421	[BUG]  [BUGGY]  FlowScope  <  Node>  node  =  type.inferQualifiedSlot(node,  qualifiedName);  [CE]  type  FlowScope  does  not  take  parameters  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  FlowScope  <  Node>  node  =  type.inferQualifiedSlot(node,  qualifiedName);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	FlowScope  <  Node>  node  =  type.inferQualifiedSlot(node,  qualifiedName);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.       "    +    node.toStringTree());    FlowScope    <    Node>    node    =    scope.inferQualifiedSlot(node,    qualifiedName);    	non-compiled	[CE]  type  FlowScope  does  not  take  parameters	315	None	replace
422	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  getNativeType(NODE_TYPE));  [CE]  cannot  find  symbol  compiler  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  getNativeType(NODE_TYPE));  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  type,  getNativeType(NODE_TYPE));	  NodeTraversal.traverse(compiler,    node,    getNativeType(NODE_TYPE));    	non-compiled	[CE]  cannot  find  symbol  compiler	194	None	replace
423	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope.getNativeType(NODE_TYPE));  [CE]  cannot  find  symbol  compiler  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope.getNativeType(NODE_TYPE));  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope.getNativeType(NODE_TYPE));	  NodeTraversal.traverse(compiler,    node,    getNativeType(NODE_TYPE));    	non-compiled	[CE]  cannot  find  symbol  compiler	194	None	replace
424	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  getNativeType(NODE_TYPE));  [CE]  cannot  find  symbol  compiler  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  getNativeType(NODE_TYPE));  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope,  getNativeType(NODE_TYPE));	  NodeTraversal.traverse(compiler,    node,    getNativeType(NODE_TYPE));    	non-compiled	[CE]  cannot  find  symbol  compiler	194	None	replace
425	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  getNativeType(NODE_TYPE));  [CE]  cannot  find  symbol  compiler  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  getNativeType(NODE_TYPE));  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  getNativeType(NODE_TYPE));	  NodeTraversal.traverse(compiler,    node,    getNativeType(NODE_TYPE));    	non-compiled	[CE]  cannot  find  symbol  compiler	194	None	replace
426	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(type  ==  null);  Preconditions.checkArgument(type  ==  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	Preconditions.checkArgument(type    ==    null);    Preconditions.checkArgument(type  ==  null);	  	compilable	  [FE]  IllegalArgumentException  	270	1	add
427	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  null);  Preconditions.checkArgument(type  ==  null);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(type  ==  null);  Preconditions.checkArgument(type  ==  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkArgument(type    ==    null);    Preconditions.checkArgument(type  ==  null);	  	compilable	  [FE]  IllegalArgumentException  	270	1	add
428	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(type  ==  null);  Preconditions.checkArgument(type!=  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	Preconditions.checkArgument(type    ==    null);    Preconditions.checkArgument(type!=  null);	  	compilable	  [FE]  IllegalArgumentException  	270	1	add
429	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  null);  Preconditions.checkArgument(type!=  null);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(type  ==  null);  Preconditions.checkArgument(type!=  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkArgument(type    ==    null);    Preconditions.checkArgument(type!=  null);	  	compilable	  [FE]  IllegalArgumentException  	270	1	add
430	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  null);  Node  qualifiedName  =  node.getQualifiedName();  Preconditions.checkArgument(type  ==  null);  [CE]  variable  qualifiedName  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(type  ==  null);  Node  qualifiedName  =  node.getQualifiedName();  Preconditions.checkArgument(type  ==  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkArgument(type    ==    null);    Node  qualifiedName  =  node.getQualifiedName();  Preconditions.checkArgument(type  ==  null);	  	non-compiled	[CE]  variable  qualifiedName  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	270	None	add
431	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  null);  Node  qualifiedName  =  node.getFirstChild();  Preconditions.checkArgument(type  ==  null);  [CE]  variable  qualifiedName  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(type  ==  null);  Node  qualifiedName  =  node.getFirstChild();  Preconditions.checkArgument(type  ==  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkArgument(type    ==    null);    Node  qualifiedName  =  node.getFirstChild();  Preconditions.checkArgument(type  ==  null);	  	non-compiled	[CE]  variable  qualifiedName  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	270	None	add
432	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  null);  Node  qualifiedName  =  node.getJSType();  Preconditions.checkArgument(type  ==  null);  [CE]  variable  qualifiedName  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]            IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(type  ==  null);  Node  qualifiedName  =  node.getJSType();  Preconditions.checkArgument(type  ==  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkArgument(type    ==    null);    Node  qualifiedName  =  node.getJSType();  Preconditions.checkArgument(type  ==  null);	  	non-compiled	[CE]  variable  qualifiedName  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	270	None	add
433	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  null);  NodeTraversal.traverse(compiler,  node,  type,  resultEqualsValue);  Preconditions.checkArgument(type  ==  null);  [CE]  cannot  find  symbol  compiler  [FE]              IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(type  ==  null);  NodeTraversal.traverse(compiler,  node,  type,  resultEqualsValue);  Preconditions.checkArgument(type  ==  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkArgument(type    ==    null);    NodeTraversal.traverse(compiler,  node,  type,  resultEqualsValue);  Preconditions.checkArgument(type  ==  null);	  	non-compiled	[CE]  cannot  find  symbol  compiler	270	None	add
434	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  null);  NodeTraversal.traverse(compiler,  node,  type,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(type  ==  null);  NodeTraversal.traverse(compiler,  node,  type,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkArgument(type    ==    null);    NodeTraversal.traverse(compiler,  node,  type,  resultEqualsValue);	  	non-compiled	[CE]  cannot  find  symbol  compiler	270	None	add
435	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  null);  Node  qualifiedName  =  node.getQualifiedName();  Preconditions.checkArgument(type!=  null);  [CE]  variable  qualifiedName  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                  IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(type  ==  null);  Node  qualifiedName  =  node.getQualifiedName();  Preconditions.checkArgument(type!=  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkArgument(type    ==    null);    Node  qualifiedName  =  node.getQualifiedName();  Preconditions.checkArgument(type!=  null);	  	non-compiled	[CE]  variable  qualifiedName  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	270	None	add
436	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  null);  NodeTraversal.traverse(compiler,  node,  qualifiedName);  Preconditions.checkArgument(type  ==  null);  [CE]  cannot  find  symbol  compiler  [FE]                    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(type  ==  null);  NodeTraversal.traverse(compiler,  node,  qualifiedName);  Preconditions.checkArgument(type  ==  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkArgument(type    ==    null);    NodeTraversal.traverse(compiler,  node,  qualifiedName);  Preconditions.checkArgument(type  ==  null);	  	non-compiled	[CE]  cannot  find  symbol  compiler	270	None	add
437	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  null);  Node  qualifiedName  =  node.getFirstChild();  Preconditions.checkArgument(type!=  null);  [CE]  variable  qualifiedName  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(type  ==  null);  Node  qualifiedName  =  node.getFirstChild();  Preconditions.checkArgument(type!=  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkArgument(type    ==    null);    Node  qualifiedName  =  node.getFirstChild();  Preconditions.checkArgument(type!=  null);	  	non-compiled	[CE]  variable  qualifiedName  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	270	None	add
438	[BUG]  [BUGGY]  Node  cannotBe  refined.   "  +  node.toStringTree());  [CE]  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  cannotBe  refined.   "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  cannotBe  refined.   "  +  node.toStringTree());	  if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.   "    +    node.toStringTree());    }    	non-compiled	[CE]  	83	None	replace
439	[BUG]  [BUGGY]  Node  node  =  node.toStringTree();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  node.toStringTree();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  node.toStringTree();	  if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.   "    +    node.toStringTree());    }    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	83	None	replace
440	[BUG]  [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined ",  node.toStringTree());  }  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,String)  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined ",  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined ",  node.toStringTree());  }	  if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.   "    +    node.toStringTree());    }    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,String)	83	None	replace
441	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  new  RestrictByTypeOfResultVisitor());  [CE]  cannot  find  symbol  compiler  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  new  RestrictByTypeOfResultVisitor());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  type,  new  RestrictByTypeOfResultVisitor());	  NodeTraversal.traverse(compiler,    node,    new    RestrictByTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	372	None	replace
442	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByTypeOfResultVisitor(),  scope);  [CE]  cannot  find  symbol  compiler  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByTypeOfResultVisitor(),  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  new  RestrictByTypeOfResultVisitor(),  scope);	  NodeTraversal.traverse(compiler,    node,    new    RestrictByTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	372	None	replace
443	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  new  RestrictByTypeOfResultVisitor());  [CE]  cannot  find  symbol  compiler  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  new  RestrictByTypeOfResultVisitor());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope,  new  RestrictByTypeOfResultVisitor());	  NodeTraversal.traverse(compiler,    node,    new    RestrictByTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	372	None	replace
444	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByTypeOfResultVisitor(),  type);  [CE]  cannot  find  symbol  compiler  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByTypeOfResultVisitor(),  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  new  RestrictByTypeOfResultVisitor(),  type);	  NodeTraversal.traverse(compiler,    node,    new    RestrictByTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	372	None	replace
445	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  new  RestrictByTypeOfResultVisitor());  [CE]  cannot  find  symbol  compiler  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  new  RestrictByTypeOfResultVisitor());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  new  RestrictByTypeOfResultVisitor());	  NodeTraversal.traverse(compiler,    node,    new    RestrictByTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	372	None	replace
446	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  new  RestrictByTypeOfResultVisitor());  [CE]  cannot  find  symbol  compiler  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  new  RestrictByTypeOfResultVisitor());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  new  RestrictByTypeOfResultVisitor());	  NodeTraversal.traverse(compiler,    node,    new    RestrictByTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	372	None	replace
447	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByTypeOfResultVisitor(),  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByTypeOfResultVisitor(),  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  new  RestrictByTypeOfResultVisitor(),  resultEqualsValue);	  NodeTraversal.traverse(compiler,    node,    new    RestrictByTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	372	None	replace
448	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  origType,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  origType,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  qualifiedName,  origType,  resultEqualsValue);	  NodeTraversal.traverse(compiler,    node,    origType,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	445	None	replace
449	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  value);  [CE]  cannot  find  symbol  compiler  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  value);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  value);	  NodeTraversal.traverse(compiler,    node,    origType,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	445	None	replace
450	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  type,  origType,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  type,  origType,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  type,  origType,  resultEqualsValue);	  NodeTraversal.traverse(compiler,    node,    origType,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	445	None	replace
451	[BUG]  [BUGGY]  safeNode(node)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  [CE]  [FE]        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  safeNode(node)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	safeNode(node)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }	  if(type!=    null)    {    throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.toStringTree());    }    if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   ")    +    node.toStringTree());    }    	non-compiled	[CE]  	373	None	replace
452	[BUG]  [BUGGY]  JSType  qualifiedName  =  type!=  null?  getNativeType(UNKNOWN_TYPE):  node.toStringTree();  [CE]  variable  qualifiedName  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  JSType  qualifiedName  =  type!=  null?  getNativeType(UNKNOWN_TYPE):  node.toStringTree();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	JSType  qualifiedName  =  type!=  null?  getNativeType(UNKNOWN_TYPE):  node.toStringTree();	  if(type!=    null)    {    throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.toStringTree());    }    if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   ")    +    node.toStringTree());    }    	non-compiled	[CE]  variable  qualifiedName  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	373	None	replace
453	[BUG]  [BUGGY]  JSType  qualifiedName  =  type  ==  null?  getNativeType(UNKNOWN_TYPE):  node.toStringTree();  [CE]  variable  qualifiedName  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  JSType  qualifiedName  =  type  ==  null?  getNativeType(UNKNOWN_TYPE):  node.toStringTree();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	JSType  qualifiedName  =  type  ==  null?  getNativeType(UNKNOWN_TYPE):  node.toStringTree();	  if(type!=    null)    {    throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.toStringTree());    }    if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   ")    +    node.toStringTree());    }    	non-compiled	[CE]  variable  qualifiedName  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	373	None	replace
454	[BUG]  [BUGGY]  JSType  qualifiedName  =  type!=  null?  getNativeType(UNKNOWN_TYPE):  node.toStringTree());  [CE]  ';'  expected  [FE]              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  JSType  qualifiedName  =  type!=  null?  getNativeType(UNKNOWN_TYPE):  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	JSType  qualifiedName  =  type!=  null?  getNativeType(UNKNOWN_TYPE):  node.toStringTree());	  if(type!=    null)    {    throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.toStringTree());    }    if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   ")    +    node.toStringTree());    }    	non-compiled	[CE]  ';'  expected	373	None	replace
455	[BUG]  [BUGGY]  safeNode(node)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree());  }  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  safeNode(node)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	safeNode(node)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree());  }	  if(type!=    null)    {    throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.toStringTree());    }    if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   ")    +    node.toStringTree());    }    	non-compiled	[CE]  	373	None	replace
456	[BUG]  [BUGGY]  JSType  qualifiedName  =  type!=  null?  getNativeType(UNKNOWN_TYPE):  node.getJSType();  [CE]  variable  qualifiedName  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  JSType  qualifiedName  =  type!=  null?  getNativeType(UNKNOWN_TYPE):  node.getJSType();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	JSType  qualifiedName  =  type!=  null?  getNativeType(UNKNOWN_TYPE):  node.getJSType();	  if(type!=    null)    {    throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.toStringTree());    }    if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   ")    +    node.toStringTree());    }    	non-compiled	[CE]  variable  qualifiedName  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	373	None	replace
457	[BUG]  [BUGGY]  JSType  qualifiedName  =  type  ==  null?  getNativeType(UNKNOWN_TYPE):  node.toStringTree());  [CE]  ';'  expected  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  JSType  qualifiedName  =  type  ==  null?  getNativeType(UNKNOWN_TYPE):  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	JSType  qualifiedName  =  type  ==  null?  getNativeType(UNKNOWN_TYPE):  node.toStringTree());	  if(type!=    null)    {    throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.toStringTree());    }    if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   ")    +    node.toStringTree());    }    	non-compiled	[CE]  ';'  expected	373	None	replace
458	[BUG]  [BUGGY]  JSType  qualifiedName  =  type!=  null?  getNativeType(UNKNOWN_TYPE):  node.getQualifiedName();  [CE]  variable  qualifiedName  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  JSType  qualifiedName  =  type!=  null?  getNativeType(UNKNOWN_TYPE):  node.getQualifiedName();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	JSType  qualifiedName  =  type!=  null?  getNativeType(UNKNOWN_TYPE):  node.getQualifiedName();	  if(type!=    null)    {    throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.toStringTree());    }    if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   ")    +    node.toStringTree());    }    	non-compiled	[CE]  variable  qualifiedName  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	373	None	replace
459	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name     "  +  node.getQualifiedName());  Node  defined  with  qualified  name   "  +  node.getQualifiedName());  [CE]  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name     "  +  node.getQualifiedName());  Node  defined  with  qualified  name   "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    qualified    name       "    +    node.getQualifiedName());    Node  defined  with  qualified  name   "  +  node.getQualifiedName());	  	non-compiled	[CE]  	502	None	add
460	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name     "  +  node.getQualifiedName());  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name   "  +  node.getQualifiedName());  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name     "  +  node.getQualifiedName());  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name   "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    qualified    name       "    +    node.getQualifiedName());    IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name   "  +  node.getQualifiedName());	  	non-compiled	[CE]  cannot  find  symbol	502	None	add
461	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name     "  +  node.getQualifiedName());  Node  defined  with  qualified  name   "  +  node.getQualifiedName());  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name   "  +  node.getQualifiedName());  }  [CE]  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name     "  +  node.getQualifiedName());  Node  defined  with  qualified  name   "  +  node.getQualifiedName());  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name   "  +  node.getQualifiedName());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    qualified    name       "    +    node.getQualifiedName());    Node  defined  with  qualified  name   "  +  node.getQualifiedName());  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name   "  +  node.getQualifiedName());  }	  	non-compiled	[CE]  	502	None	add
462	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name     "  +  node.getQualifiedName());  Node  defined  with  qualified  name   "  +  node.getQualifiedName());  if(resultEqualsValue  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name   "  +  node.getQualifiedName());  }  [CE]  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name     "  +  node.getQualifiedName());  Node  defined  with  qualified  name   "  +  node.getQualifiedName());  if(resultEqualsValue  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name   "  +  node.getQualifiedName());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    qualified    name       "    +    node.getQualifiedName());    Node  defined  with  qualified  name   "  +  node.getQualifiedName());  if(resultEqualsValue  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name   "  +  node.getQualifiedName());  }	  	non-compiled	[CE]  	502	None	add
463	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name     "  +  node.getQualifiedName());  Node  defined  with  qualified  name   "  +  node.getQualifiedName());  if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name   "  +  node.getQualifiedName());  }  [CE]  [FE]            IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name     "  +  node.getQualifiedName());  Node  defined  with  qualified  name   "  +  node.getQualifiedName());  if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name   "  +  node.getQualifiedName());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    qualified    name       "    +    node.getQualifiedName());    Node  defined  with  qualified  name   "  +  node.getQualifiedName());  if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name   "  +  node.getQualifiedName());  }	  	non-compiled	[CE]  	502	None	add
464	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name     "  +  node.getQualifiedName());  Node  defined  with  qualified  name   "  +  node.getQualifiedName());  if(resultEqualsValue!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name   "  +  node.getQualifiedName());  }  [CE]  [FE]              IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name     "  +  node.getQualifiedName());  Node  defined  with  qualified  name   "  +  node.getQualifiedName());  if(resultEqualsValue!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name   "  +  node.getQualifiedName());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    qualified    name       "    +    node.getQualifiedName());    Node  defined  with  qualified  name   "  +  node.getQualifiedName());  if(resultEqualsValue!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name   "  +  node.getQualifiedName());  }	  	non-compiled	[CE]  	502	None	add
465	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name     "  +  node.getQualifiedName());  Node  defined  with  qualified  name   "  +  node.getQualifiedName());  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [CE]  [FE]                IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name     "  +  node.getQualifiedName());  Node  defined  with  qualified  name   "  +  node.getQualifiedName());  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    qualified    name       "    +    node.getQualifiedName());    Node  defined  with  qualified  name   "  +  node.getQualifiedName());  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);	  	non-compiled	[CE]  	502	None	add
466	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name     "  +  node.getQualifiedName());  Node  defined  with  qualified  name   "  +  node.getQualifiedName());  if(resultEqualsValue  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name   "  +  node.getQualifiedName  [CE]  [FE]                  IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name     "  +  node.getQualifiedName());  Node  defined  with  qualified  name   "  +  node.getQualifiedName());  if(resultEqualsValue  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name   "  +  node.getQualifiedName  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    qualified    name       "    +    node.getQualifiedName());    Node  defined  with  qualified  name   "  +  node.getQualifiedName());  if(resultEqualsValue  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name   "  +  node.getQualifiedName	  	non-compiled	[CE]  	502	None	add
467	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getName());  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named:   "    +    node.getName());    	non-compiled	[CE]  <identifier>  expected	245	None	replace
468	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named:   "    +    node.getName());    	compilable	  [FE]  IllegalArgumentException  	245	1	replace
469	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getQualifiedName());  [FE]  IllegalArgumentException  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named:   "    +    node.getName());    	compilable	  [FE]  IllegalArgumentException  	245	1	replace
470	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named:   "    +    node.getName());    	compilable	  [FE]  IllegalArgumentException  	245	1	replace
471	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.toStringTree());  [FE]  IllegalArgumentException  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named:   "    +    node.getName());    	compilable	  [FE]  IllegalArgumentException  	245	1	replace
472	[BUG]  [BUGGY]  Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getName());  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named:   "    +    node.getName());    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	245	None	replace
473	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node,  scope.getName());  [CE]  cannot  find  symbol  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node,  scope.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node,  scope.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named:   "    +    node.getName());    	non-compiled	[CE]  cannot  find  symbol	245	None	replace
474	[BUG]  [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getName());  [CE]  cannot  find  symbol  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named:   "    +    node.getName());    	non-compiled	[CE]  cannot  find  symbol	245	None	replace
475	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getClass());  Node  cannot  be  refined.   "  +  node.getClass());  [CE]  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getClass());  Node  cannot  be  refined.   "  +  node.getClass());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getClass());    Node  cannot  be  refined.   "  +  node.getClass());	  	non-compiled	[CE]  	265	None	add
476	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getClass());  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.getClass());  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getClass());  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.getClass());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getClass());    IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.getClass());	  	non-compiled	[CE]  cannot  find  symbol	265	None	add
477	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getClass());  Throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.getClass());  [CE]  not  a  statement  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getClass());  Throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.getClass());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getClass());    Throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.getClass());	  	non-compiled	[CE]  not  a  statement	265	None	add
478	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getClass());  JSType  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getClass());  JSType  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getClass());    JSType  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	265	None	add
479	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getClass());  Node  cannot  be  refined.  (  +  node.getClass());  [CE]  [FE]            IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getClass());  Node  cannot  be  refined.  (  +  node.getClass());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getClass());    Node  cannot  be  refined.  (  +  node.getClass());	  	non-compiled	[CE]  	265	None	add
480	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getClass());  JSType  node  =  node.getJSType();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]              IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getClass());  JSType  node  =  node.getJSType();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getClass());    JSType  node  =  node.getJSType();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	265	None	add
481	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getClass());  Node  cannot  be  refined.   "  +  node.getClass());  break;  [CE]  [FE]                IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getClass());  Node  cannot  be  refined.   "  +  node.getClass());  break;  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getClass());    Node  cannot  be  refined.   "  +  node.getClass());  break;	  	non-compiled	[CE]  	265	None	add
482	[BUG]  [BUGGY]  scope.inferQualifiedSlot(qualifiedName,  node,  origType);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(qualifiedName,  node,  origType);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(qualifiedName,  node,  origType);	  scope.inferQualifiedSlot(name,    node,    qualifiedName,    origType);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	120	None	replace
483	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  node,  qualifiedName,  type);  [CE]  cannot  find  symbol  name  [FE]                                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(name,  node,  qualifiedName,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(name,  node,  qualifiedName,  type);	  scope.inferQualifiedSlot(name,    node,    qualifiedName,    origType);    	non-compiled	[CE]  cannot  find  symbol  name	120	None	replace
484	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  qualifiedName,  type);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  qualifiedName,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  qualifiedName,  type);	  scope.inferQualifiedSlot(name,    node,    qualifiedName,    origType);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	120	None	replace
485	[BUG]  [BUGGY]  scope.inferQualifiedSlot(qualifiedName,  node,  qualifiedName,  origType);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(qualifiedName,  node,  qualifiedName,  origType);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(qualifiedName,  node,  qualifiedName,  origType);	  scope.inferQualifiedSlot(name,    node,    qualifiedName,    origType);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	120	None	replace
486	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getMessage());  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getMessage());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getMessage());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node:   "    +    node.getMessage());    	non-compiled	[CE]  <identifier>  expected	261	None	replace
487	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node:   "    +    node.getMessage());    	compilable	  [FE]  IllegalArgumentException  	261	1	replace
488	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.toStringTree());  [FE]  IllegalArgumentException  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node:   "    +    node.getMessage());    	compilable	  [FE]  IllegalArgumentException  	261	1	replace
489	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node,  scope.getMessage());  [CE]  cannot  find  symbol  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node,  scope.getMessage());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node,  scope.getMessage());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node:   "    +    node.getMessage());    	non-compiled	[CE]  cannot  find  symbol	261	None	replace
490	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getClass());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getClass());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node:   "    +    node.getMessage());    	compilable	  [FE]  IllegalArgumentException  	261	1	replace
491	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getClass());  [FE]  IllegalArgumentException  [FE]                                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getClass());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getClass());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node:   "    +    node.getMessage());    	compilable	  [FE]  IllegalArgumentException  	261	1	replace
492	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node:   "    +    node.getMessage());    	compilable	  [FE]  IllegalArgumentException  	261	1	replace
493	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getQualifiedName());  [FE]  IllegalArgumentException  [FE]                                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node:   "    +    node.getMessage());    	compilable	  [FE]  IllegalArgumentException  	261	1	replace
494	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getSourceName());  [CE]  cannot  find  symbol  [FE]                                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getSourceName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getSourceName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node:   "    +    node.getMessage());    	non-compiled	[CE]  cannot  find  symbol	261	None	replace
495	[BUG]  [BUGGY]  Node  node  =  scope.getNativeType(UNKNOWN_TYPE,  type);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.getNativeType(UNKNOWN_TYPE,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getNativeType(UNKNOWN_TYPE,  type);	  Node    node    =    scope.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	171	None	replace
496	[BUG]  [BUGGY]  Node  node  =  scope.getNativeType(UNKNOWN_TYPE,  qualifiedName);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.getNativeType(UNKNOWN_TYPE,  qualifiedName);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getNativeType(UNKNOWN_TYPE,  qualifiedName);	  Node    node    =    scope.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	171	None	replace
497	[BUG]  [BUGGY]  Node  node  =  scope.getNativeType(JSTypeNative.UNKNOWN_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.getNativeType(JSTypeNative.UNKNOWN_TYPE);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getNativeType(JSTypeNative.UNKNOWN_TYPE);	  Node    node    =    scope.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	171	None	replace
498	[BUG]  [BUGGY]  Node  node  =  scope.getNativeType(UNKNOWN_TYPE),  type);  [CE]  ';'  expected  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.getNativeType(UNKNOWN_TYPE),  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getNativeType(UNKNOWN_TYPE),  type);	  Node    node    =    scope.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	171	None	replace
499	[BUG]  [BUGGY]  Node  node  =  scope.getNativeType(NODE_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.getNativeType(NODE_TYPE);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getNativeType(NODE_TYPE);	  Node    node    =    scope.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	171	None	replace
500	[BUG]  [BUGGY]  Node  node  =  scope.getNativeType(UNKNOWN_TYPE,  name);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.getNativeType(UNKNOWN_TYPE,  name);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getNativeType(UNKNOWN_TYPE,  name);	  Node    node    =    scope.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	171	None	replace
501	[BUG]  [BUGGY]  Node  node  =  scope.getNativeType(UNKNOWN_TYPE,  DEFAULT_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.getNativeType(UNKNOWN_TYPE,  DEFAULT_TYPE);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getNativeType(UNKNOWN_TYPE,  DEFAULT_TYPE);	  Node    node    =    scope.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	171	None	replace
502	[BUG]  [BUGGY]  if(node  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined ",  node.toStringTree());  }  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,String)  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(node  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined ",  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(node  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined ",  node.toStringTree());  }	  if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    cannot    be    refined   ",    node.toStringTree());    }    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,String)	88	None	replace
503	[BUG]  [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. ",  node.toStringTree());  }  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,String)  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. ",  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. ",  node.toStringTree());  }	  if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    cannot    be    refined   ",    node.toStringTree());    }    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,String)	88	None	replace
504	[BUG]  [BUGGY]  node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined ",  node.toStringTree());  }  [CE]  not  a  statement  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined ",  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined ",  node.toStringTree());  }	  if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    cannot    be    refined   ",    node.toStringTree());    }    	non-compiled	[CE]  not  a  statement	88	None	replace
505	[BUG]  [BUGGY]  if(node  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. ",  node.toStringTree());  }  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,String)  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(node  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. ",  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(node  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. ",  node.toStringTree());  }	  if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    cannot    be    refined   ",    node.toStringTree());    }    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,String)	88	None	replace
506	[BUG]  [BUGGY]  Node  cannot  be  refined.  Node  cannot  be  refined   ",  node.toStringTree());  [CE]  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  cannot  be  refined.  Node  cannot  be  refined   ",  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  cannot  be  refined.  Node  cannot  be  refined   ",  node.toStringTree());	  if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    cannot    be    refined   ",    node.toStringTree());    }    	non-compiled	[CE]  	88	None	replace
507	[BUG]  [BUGGY]  node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. ",  node.toStringTree());  }  [CE]  not  a  statement  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. ",  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. ",  node.toStringTree());  }	  if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    cannot    be    refined   ",    node.toStringTree());    }    	non-compiled	[CE]  not  a  statement	88	None	replace
508	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.getLineno());  [CE]  <identifier>  expected  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.getLineno());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    for    type:   "    +    node.getLineno());    	non-compiled	[CE]  <identifier>  expected	473	None	replace
509	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.getLineno());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.getLineno());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    for    type:   "    +    node.getLineno());    	compilable	  [FE]  IllegalArgumentException  	473	1	replace
510	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.getLineno());  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.getLineno());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.getLineno());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    for    type:   "    +    node.getLineno());    	compilable	  [FE]  IllegalArgumentException  	473	1	replace
511	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    for    type:   "    +    node.getLineno());    	compilable	  [FE]  IllegalArgumentException  	473	1	replace
512	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.toStringTree());  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    for    type:   "    +    node.getLineno());    	compilable	  [FE]  IllegalArgumentException  	473	1	replace
513	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.getLineno(),  type);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,JSType)  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.getLineno(),  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.getLineno(),  type);	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    for    type:   "    +    node.getLineno());    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,JSType)	473	None	replace
514	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.getSourceName());  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.getSourceName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.getSourceName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    for    type:   "    +    node.getLineno());    	non-compiled	[CE]  cannot  find  symbol	473	None	replace
515	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    for    type:   "    +    node.getLineno());    	compilable	  [FE]  IllegalArgumentException  	473	1	replace
516	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.getQualifiedName());  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    for    type:   "    +    node.getLineno());    	compilable	  [FE]  IllegalArgumentException  	473	1	replace
517	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.getLineno(),  qualifiedName);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,String)  [FE]                IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.getLineno(),  qualifiedName);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.getLineno(),  qualifiedName);	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    for    type:   "    +    node.getLineno());    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,String)	473	None	replace
518	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.getLocalName());  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.getLocalName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    for    type:   "    +    node.getLineno());    	non-compiled	[CE]  cannot  find  symbol	473	None	replace
519	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  does  not  exist: "  +  scope.toStringTree());  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  does  not  exist: "  +  scope.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  does  not  exist: "  +  scope.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:   "    +    scope.toStringTree());    	non-compiled	[CE]  <identifier>  expected	408	None	replace
520	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  scope.toStringTree());  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  scope.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  scope.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:   "    +    scope.toStringTree());    	non-compiled	[CE]  <identifier>  expected	408	None	replace
521	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  does  not  exist: "  +  scope.toStringTree());  [CE]  cannot  find  symbol  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  does  not  exist: "  +  scope.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  does  not  exist: "  +  scope.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:   "    +    scope.toStringTree());    	non-compiled	[CE]  cannot  find  symbol	408	None	replace
522	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.toStringTree());  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:   "    +    scope.toStringTree());    	non-compiled	[CE]  <identifier>  expected	408	None	replace
523	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined:  Node  does  not  exist: "  +  scope.toStringTree());  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined:  Node  does  not  exist: "  +  scope.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined:  Node  does  not  exist: "  +  scope.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:   "    +    scope.toStringTree());    	non-compiled	[CE]  <identifier>  expected	408	None	replace
524	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  does  not  exist: "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  does  not  exist: "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:   "    +    scope.toStringTree());    	compilable	  [FE]  IllegalArgumentException  	408	1	replace
525	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  does  not  exist: "  +  node.toStringTree());  [FE]  IllegalArgumentException  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  does  not  exist: "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  does  not  exist: "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:   "    +    scope.toStringTree());    	compilable	  [FE]  IllegalArgumentException  	408	1	replace
526	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  scope.getName());  [CE]  cannot  find  symbol  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  scope.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  scope.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:   "    +    scope.toStringTree());    	non-compiled	[CE]  cannot  find  symbol	408	None	replace
527	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  type.getNativeType(UNKNOWN_TYPE));  [CE]  cannot  find  symbol  compiler  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  type.getNativeType(UNKNOWN_TYPE));  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  type.getNativeType(UNKNOWN_TYPE));	  NodeTraversal.traverse(compiler,    node,    scope.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  cannot  find  symbol  compiler	191	None	replace
528	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope.getNativeType(UNKNOWN_TYPE),  type);  [CE]  cannot  find  symbol  compiler  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope.getNativeType(UNKNOWN_TYPE),  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope.getNativeType(UNKNOWN_TYPE),  type);	  NodeTraversal.traverse(compiler,    node,    scope.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  cannot  find  symbol  compiler	191	None	replace
529	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  typeRegistry.getNativeType(UNKNOWN_TYPE));  [CE]  cannot  find  symbol  compiler  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  typeRegistry.getNativeType(UNKNOWN_TYPE));  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  typeRegistry.getNativeType(UNKNOWN_TYPE));	  NodeTraversal.traverse(compiler,    node,    scope.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  cannot  find  symbol  compiler	191	None	replace
530	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope.getNativeType(UNKNOWN_TYPE),  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope.getNativeType(UNKNOWN_TYPE),  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope.getNativeType(UNKNOWN_TYPE),  resultEqualsValue);	  NodeTraversal.traverse(compiler,    node,    scope.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  cannot  find  symbol  compiler	191	None	replace
531	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  NODE_TYPE,  scope.getNativeType(UNKNOWN_TYPE));  [CE]  cannot  find  symbol  compiler  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  NODE_TYPE,  scope.getNativeType(UNKNOWN_TYPE));  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  NODE_TYPE,  scope.getNativeType(UNKNOWN_TYPE));	  NodeTraversal.traverse(compiler,    node,    scope.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  cannot  find  symbol  compiler	191	None	replace
532	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  UNKNOWN_TYPE,  scope.getNativeType(UNKNOWN_TYPE));  [CE]  cannot  find  symbol  compiler  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  UNKNOWN_TYPE,  scope.getNativeType(UNKNOWN_TYPE));  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  UNKNOWN_TYPE,  scope.getNativeType(UNKNOWN_TYPE));	  NodeTraversal.traverse(compiler,    node,    scope.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  cannot  find  symbol  compiler	191	None	replace
533	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  scope.getNativeType(UNKNOWN_TYPE));  [CE]  cannot  find  symbol  compiler  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  scope.getNativeType(UNKNOWN_TYPE));  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  scope.getNativeType(UNKNOWN_TYPE));	  NodeTraversal.traverse(compiler,    node,    scope.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  cannot  find  symbol  compiler	191	None	replace
534	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope.getNativeType(UNKNOWN_TYPE),  this);  [CE]  cannot  find  symbol  compiler  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope.getNativeType(UNKNOWN_TYPE),  this);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope.getNativeType(UNKNOWN_TYPE),  this);	  NodeTraversal.traverse(compiler,    node,    scope.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  cannot  find  symbol  compiler	191	None	replace
535	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined. "  +  node,  scope.toStringTree());  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning( "Node  cannot  be  refined. "  +  node,  scope.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined. "  +  node,  scope.toStringTree());	  DebugLog.warning(   "Node    cannot    be    refined.   "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
536	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined. "  +  node.getLineno());  [CE]  cannot  find  symbol  DebugLog  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning( "Node  cannot  be  refined. "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined. "  +  node.getLineno());	  DebugLog.warning(   "Node    cannot    be    refined.   "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol  DebugLog	126	None	replace
537	[BUG]  [BUGGY]  Node  node  =  scope.getNext(),  type);  [CE]  ';'  expected  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.getNext(),  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getNext(),  type);	  Node    node    =    scope.getNext();    	non-compiled	[CE]  ';'  expected	17	None	replace
538	[BUG]  [BUGGY]  Node  node  =  scope.getCurrentNode();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.getCurrentNode();  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getCurrentNode();	  Node    node    =    scope.getNext();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	17	None	replace
539	[BUG]  [BUGGY]  Node  node  =  scope.getNode();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.getNode();  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getNode();	  Node    node    =    scope.getNext();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	17	None	replace
540	[BUG]  [BUGGY]  Node  node  =  scope.getPrevious();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.getPrevious();  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getPrevious();	  Node    node    =    scope.getNext();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	17	None	replace
541	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name  '   "  +  node.getQualifiedName());  Node  defined  with  qualified  name' "  +  node.getQualifiedName());  [CE]  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name  '   "  +  node.getQualifiedName());  Node  defined  with  qualified  name' "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    qualified    name    '   "    +    node.getQualifiedName());    Node  defined  with  qualified  name' "  +  node.getQualifiedName());	  	non-compiled	[CE]  	79	None	add
542	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name  '   "  +  node.getQualifiedName());  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name  ' "  +  node.getQualifiedName());  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name  '   "  +  node.getQualifiedName());  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name  ' "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    qualified    name    '   "    +    node.getQualifiedName());    IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name  ' "  +  node.getQualifiedName());	  	non-compiled	[CE]  cannot  find  symbol	79	None	add
543	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name  '   "  +  node.getQualifiedName());  Node  defined  with  qualifiedName' "  +  node.getQualifiedName());  [CE]  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name  '   "  +  node.getQualifiedName());  Node  defined  with  qualifiedName' "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    qualified    name    '   "    +    node.getQualifiedName());    Node  defined  with  qualifiedName' "  +  node.getQualifiedName());	  	non-compiled	[CE]  	79	None	add
544	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name  '   "  +  node.getQualifiedName());  Node  defined  with  qualified  name' "  +  node.getQualifiedName());  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [CE]  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name  '   "  +  node.getQualifiedName());  Node  defined  with  qualified  name' "  +  node.getQualifiedName());  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    qualified    name    '   "    +    node.getQualifiedName());    Node  defined  with  qualified  name' "  +  node.getQualifiedName());  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);	  	non-compiled	[CE]  	79	None	add
545	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name  '   "  +  node.getQualifiedName());  Node  defined  with  qualified  name' "  +  node.getQualifiedName());  break;  [CE]  [FE]            IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name  '   "  +  node.getQualifiedName());  Node  defined  with  qualified  name' "  +  node.getQualifiedName());  break;  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    qualified    name    '   "    +    node.getQualifiedName());    Node  defined  with  qualified  name' "  +  node.getQualifiedName());  break;	  	non-compiled	[CE]  	79	None	add
546	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  scope,  new  FlowScope());  [CE]  cannot  find  symbol  compiler  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  scope,  new  FlowScope());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  scope,  new  FlowScope());	  NodeTraversal.traverse(compiler,    node,    this,    new    FlowScope());    	non-compiled	[CE]  cannot  find  symbol  compiler	491	None	replace
547	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  new  FlowScope());  [CE]  cannot  find  symbol  compiler  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  new  FlowScope());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  type,  new  FlowScope());	  NodeTraversal.traverse(compiler,    node,    this,    new    FlowScope());    	non-compiled	[CE]  cannot  find  symbol  compiler	491	None	replace
548	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  new  FlowScope());  [CE]  cannot  find  symbol  compiler  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  new  FlowScope());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope,  new  FlowScope());	  NodeTraversal.traverse(compiler,    node,    this,    new    FlowScope());    	non-compiled	[CE]  cannot  find  symbol  compiler	491	None	replace
549	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  type,  new  FlowScope());  [CE]  cannot  find  symbol  compiler  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  type,  new  FlowScope());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  type,  new  FlowScope());	  NodeTraversal.traverse(compiler,    node,    this,    new    FlowScope());    	non-compiled	[CE]  cannot  find  symbol  compiler	491	None	replace
550	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  new  FlowScope());  [CE]  cannot  find  symbol  compiler  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  new  FlowScope());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  new  FlowScope());	  NodeTraversal.traverse(compiler,    node,    this,    new    FlowScope());    	non-compiled	[CE]  cannot  find  symbol  compiler	491	None	replace
551	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  new  FlowScope(),  scope);  [CE]  cannot  find  symbol  compiler  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  new  FlowScope(),  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  new  FlowScope(),  scope);	  NodeTraversal.traverse(compiler,    node,    this,    new    FlowScope());    	non-compiled	[CE]  cannot  find  symbol  compiler	491	None	replace
552	[BUG]  [BUGGY]  Preconditions.checkNotNull(qualifiedName);  Preconditions.checkNotNull(type);  [CE]  variable  qualifiedName  might  not  have  been  initialized  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkNotNull(qualifiedName);  Preconditions.checkNotNull(type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkNotNull(qualifiedName);  Preconditions.checkNotNull(type);	          Preconditions.checkNotNull(type);    Preconditions.checkNotNull(type);    	non-compiled	[CE]  variable  qualifiedName  might  not  have  been  initialized	23	None	replace
553	[BUG]  [BUGGY]  Preconditions.checkState(scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type));  [CE]  'void'  type  not  allowed  here  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type));  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type));	          Preconditions.checkNotNull(type);    Preconditions.checkNotNull(type);    	non-compiled	[CE]  'void'  type  not  allowed  here	23	None	replace
554	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkNotNull(type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkNotNull(type);	          Preconditions.checkNotNull(type);    Preconditions.checkNotNull(type);    	compilable	  [FE]  IllegalStateException  	23	1	replace
555	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkNotNull(type);  [FE]  IllegalStateException  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkNotNull(type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkNotNull(type);	          Preconditions.checkNotNull(type);    Preconditions.checkNotNull(type);    	compilable	  [FE]  IllegalStateException  	23	1	replace
556	[BUG]  [BUGGY]  Preconditions.checkState(scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type),  resultEqualsValue);  [CE]  'void'  type  not  allowed  here  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type),  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type),  resultEqualsValue);	          Preconditions.checkNotNull(type);    Preconditions.checkNotNull(type);    	non-compiled	[CE]  'void'  type  not  allowed  here	23	None	replace
557	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkNotNull(type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkNotNull(type);	          Preconditions.checkNotNull(type);    Preconditions.checkNotNull(type);    	compilable	  [FE]  IllegalStateException  	23	1	replace
558	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkNotNull(type);  [FE]  IllegalStateException  [FE]            IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkNotNull(type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  Preconditions.checkNotNull(type);	          Preconditions.checkNotNull(type);    Preconditions.checkNotNull(type);    	compilable	  [FE]  IllegalStateException  	23	1	replace
559	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName);  Preconditions.traverse(compiler,  type,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]              IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName);  Preconditions.traverse(compiler,  type,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  qualifiedName);  Preconditions.traverse(compiler,  type,  resultEqualsValue);	          Preconditions.checkNotNull(type);    Preconditions.checkNotNull(type);    	non-compiled	[CE]  cannot  find  symbol  compiler	23	None	replace
560	[BUG]  [BUGGY]  Preconditions.checkState(scope.inferQualifiedSlot(node,  qualifiedName,  origType),  type);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(scope.inferQualifiedSlot(node,  qualifiedName,  origType),  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(scope.inferQualifiedSlot(node,  qualifiedName,  origType),  type);	          Preconditions.checkNotNull(type);    Preconditions.checkNotNull(type);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	23	None	replace
561	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName);  [CE]  cannot  find  symbol  compiler  [FE]                    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  qualifiedName);	          Preconditions.checkNotNull(type);    Preconditions.checkNotNull(type);    	non-compiled	[CE]  cannot  find  symbol  compiler	23	None	replace
562	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.getLineno());  [CE]  <identifier>  expected  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.getLineno());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.getLineno());    	non-compiled	[CE]  <identifier>  expected	479	None	replace
563	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.getLineno());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.getLineno());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.getLineno());    	compilable	  [FE]  IllegalArgumentException  	479	1	replace
564	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.getLineno());  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.getLineno());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.getLineno());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.getLineno());    	compilable	  [FE]  IllegalArgumentException  	479	1	replace
565	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.getSourceName());  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.getSourceName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.getSourceName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.getLineno());    	non-compiled	[CE]  cannot  find  symbol	479	None	replace
566	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.getLineno(),  qualifiedName);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,String)  [FE]            IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.getLineno(),  qualifiedName);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.getLineno(),  qualifiedName);	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.getLineno());    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,String)	479	None	replace
567	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.getLineno()  +  1);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.getLineno()  +  1);	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.getLineno());    	compilable	  [FE]  IllegalArgumentException  	479	1	replace
568	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.getLineno()  +  1);  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.getLineno()  +  1);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.getLineno()  +  1);	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.getLineno());    	compilable	  [FE]  IllegalArgumentException  	479	1	replace
569	[BUG]  [BUGGY]  Preconditions.checkState(type.isUndefined());  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(type.isUndefined());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(type.isUndefined());	  Preconditions.checkNotNull(qualifiedName);    	non-compiled	[CE]  cannot  find  symbol	269	None	replace
570	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(type.isUnknownType());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	Preconditions.checkArgument(type.isUnknownType());	  Preconditions.checkNotNull(qualifiedName);    	compilable	  [FE]  IllegalArgumentException  	269	1	replace
571	[BUG]  [BUGGY]  Preconditions.checkArgument(type.isUnknownType());  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(type.isUnknownType());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkArgument(type.isUnknownType());	  Preconditions.checkNotNull(qualifiedName);    	compilable	  [FE]  IllegalArgumentException  	269	1	replace
572	[BUG]  [BUGGY]  Preconditions.checkArgument(type.isUndefined());  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(type.isUndefined());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkArgument(type.isUndefined());	  Preconditions.checkNotNull(qualifiedName);    	non-compiled	[CE]  cannot  find  symbol	269	None	replace
573	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(type.isUnknownType());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	Preconditions.checkState(type.isUnknownType());	  Preconditions.checkNotNull(qualifiedName);    	compilable	  [FE]  IllegalStateException  	269	1	replace
574	[BUG]  [BUGGY]  Preconditions.checkState(type.isUnknownType());  [FE]  IllegalStateException  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(type.isUnknownType());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(type.isUnknownType());	  Preconditions.checkNotNull(qualifiedName);    	compilable	  [FE]  IllegalStateException  	269	1	replace
575	[BUG]  [BUGGY]  FlowScope  <  Node>  node  =  scope.inferQualifiedSlot(qualifiedName,  node.toStringTree());  [CE]  type  FlowScope  does  not  take  parameters  [FE]          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  FlowScope  <  Node>  node  =  scope.inferQualifiedSlot(qualifiedName,  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	FlowScope  <  Node>  node  =  scope.inferQualifiedSlot(qualifiedName,  node.toStringTree());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.       "    +    node.toStringTree());    FlowScope    <    Node>    node    =    scope.inferQualifiedSlot(value,    node.toStringTree());    	non-compiled	[CE]  type  FlowScope  does  not  take  parameters	314	None	replace
576	[BUG]  [BUGGY]  Node  <  Node>  node  =  scope.inferQualifiedSlot(qualifiedName,  node.toStringTree());  [CE]  type  Node  does  not  take  parameters  [FE]            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  <  Node>  node  =  scope.inferQualifiedSlot(qualifiedName,  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  <  Node>  node  =  scope.inferQualifiedSlot(qualifiedName,  node.toStringTree());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.       "    +    node.toStringTree());    FlowScope    <    Node>    node    =    scope.inferQualifiedSlot(value,    node.toStringTree());    	non-compiled	[CE]  type  Node  does  not  take  parameters	314	None	replace
577	[BUG]  [BUGGY]  FlowScope  <  Node>  node  =  scope.inferQualifiedSlot(value,  node.toStringTree());  [CE]  type  FlowScope  does  not  take  parameters  [FE]              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  FlowScope  <  Node>  node  =  scope.inferQualifiedSlot(value,  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	FlowScope  <  Node>  node  =  scope.inferQualifiedSlot(value,  node.toStringTree());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.       "    +    node.toStringTree());    FlowScope    <    Node>    node    =    scope.inferQualifiedSlot(value,    node.toStringTree());    	non-compiled	[CE]  type  FlowScope  does  not  take  parameters	314	None	replace
578	[BUG]  [BUGGY]  Node  node  =  scope.inferQualifiedSlot(qualifiedName,  node.toStringTree());  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.inferQualifiedSlot(qualifiedName,  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.inferQualifiedSlot(qualifiedName,  node.toStringTree());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.       "    +    node.toStringTree());    FlowScope    <    Node>    node    =    scope.inferQualifiedSlot(value,    node.toStringTree());    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	314	None	replace
579	[BUG]  [BUGGY]  node  =  scope.inferQualifiedSlot(qualifiedName,  node.toStringTree());  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  node  =  scope.inferQualifiedSlot(qualifiedName,  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	node  =  scope.inferQualifiedSlot(qualifiedName,  node.toStringTree());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.       "    +    node.toStringTree());    FlowScope    <    Node>    node    =    scope.inferQualifiedSlot(value,    node.toStringTree());    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	314	None	replace
580	[BUG]  [BUGGY]  Node  <?>  node  =  scope.inferQualifiedSlot(qualifiedName,  node.toStringTree());  [CE]  type  Node  does  not  take  parameters  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  <?>  node  =  scope.inferQualifiedSlot(qualifiedName,  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  <?>  node  =  scope.inferQualifiedSlot(qualifiedName,  node.toStringTree());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.       "    +    node.toStringTree());    FlowScope    <    Node>    node    =    scope.inferQualifiedSlot(value,    node.toStringTree());    	non-compiled	[CE]  type  Node  does  not  take  parameters	314	None	replace
581	[BUG]  [BUGGY]  FlowScope  <  Node>  node  =  typeRegistry.inferQualifiedSlot(value,  node.toStringTree());  [CE]  type  FlowScope  does  not  take  parameters  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  FlowScope  <  Node>  node  =  typeRegistry.inferQualifiedSlot(value,  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	FlowScope  <  Node>  node  =  typeRegistry.inferQualifiedSlot(value,  node.toStringTree());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.       "    +    node.toStringTree());    FlowScope    <    Node>    node    =    scope.inferQualifiedSlot(value,    node.toStringTree());    	non-compiled	[CE]  type  FlowScope  does  not  take  parameters	314	None	replace
582	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getLocalName());  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getLocalName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named:   "    +    node.getLocalName());    	non-compiled	[CE]  <identifier>  expected	287	None	replace
583	[BUG]  [BUGGY]  Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getLocalName());  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getLocalName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named:   "    +    node.getLocalName());    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	287	None	replace
584	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node,  scope.getLocalName());  [CE]  cannot  find  symbol  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node,  scope.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node,  scope.getLocalName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named:   "    +    node.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	287	None	replace
585	[BUG]  [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getLocalName());  [CE]  cannot  find  symbol  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getLocalName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named:   "    +    node.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	287	None	replace
586	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  named: "  +  node.getLocalName());  [CE]  cannot  find  symbol  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  named: "  +  node.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  named: "  +  node.getLocalName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named:   "    +    node.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	287	None	replace
587	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName()  = "  +  node.getMessage());  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName()  = "  +  node.getMessage());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName()  = "  +  node.getMessage());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    node.getName()    =   "    +    node.getMessage());    	non-compiled	[CE]  <identifier>  expected	357	None	replace
588	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualifiedName.getName()  = "  +  node.getMessage());  [CE]  cannot  find  symbol  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualifiedName.getName()  = "  +  node.getMessage());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualifiedName.getName()  = "  +  node.getMessage());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    node.getName()    =   "    +    node.getMessage());    	non-compiled	[CE]  cannot  find  symbol	357	None	replace
589	[BUG]  [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName()  = "  +  node.getMessage());  [CE]  cannot  find  symbol  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName()  = "  +  node.getMessage());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName()  = "  +  node.getMessage());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    node.getName()    =   "    +    node.getMessage());    	non-compiled	[CE]  cannot  find  symbol	357	None	replace
590	[BUG]  [BUGGY]  Throwables.warning( "Node  cannot  be  refined.  Node  named  with  node.getName()  = "  +  node.getMessage());  [CE]  cannot  find  symbol  [FE]                                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.warning( "Node  cannot  be  refined.  Node  named  with  node.getName()  = "  +  node.getMessage());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.warning( "Node  cannot  be  refined.  Node  named  with  node.getName()  = "  +  node.getMessage());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    node.getName()    =   "    +    node.getMessage());    	non-compiled	[CE]  cannot  find  symbol	357	None	replace
591	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualifiedName,  node.getName()  =   "  +  node.getMessage());  [CE]  cannot  find  symbol  [FE]                                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualifiedName,  node.getName()  =   "  +  node.getMessage());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualifiedName,  node.getName()  =   "  +  node.getMessage());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    node.getName()    =   "    +    node.getMessage());    	non-compiled	[CE]  cannot  find  symbol	357	None	replace
592	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  named  with  node.getName()  = "  +  node.getMessage());  [CE]  cannot  find  symbol  [FE]                                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  named  with  node.getName()  = "  +  node.getMessage());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  named  with  node.getName()  = "  +  node.getMessage());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    node.getName()    =   "    +    node.getMessage());    	non-compiled	[CE]  cannot  find  symbol	357	None	replace
593	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node,  qualifiedName.getName()  =   "  +  node.getMessage());  [CE]  cannot  find  symbol  [FE]                                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node,  qualifiedName.getName()  =   "  +  node.getMessage());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node,  qualifiedName.getName()  =   "  +  node.getMessage());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    node.getName()    =   "    +    node.getMessage());    	non-compiled	[CE]  cannot  find  symbol	357	None	replace
594	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node.getLocalName());  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node.getLocalName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    can    be    refined.   "    +    node.getLocalName());    	non-compiled	[CE]  <identifier>  expected	204	None	replace
595	[BUG]  [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node.getLocalName());  [CE]  cannot  find  symbol  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node.getLocalName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    can    be    refined.   "    +    node.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	204	None	replace
596	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined: "  +  node.getLocalName());  [CE]  cannot  find  symbol  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined: "  +  node.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined: "  +  node.getLocalName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    can    be    refined.   "    +    node.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	204	None	replace
597	[BUG]  [BUGGY]  Node  node  =  scope.getLastChild(),  type);  [CE]  ';'  expected  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.getLastChild(),  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getLastChild(),  type);	  Node    node    =    scope.getFirstChild(),    type);    	non-compiled	[CE]  ';'  expected	21	None	replace
598	[BUG]  [BUGGY]  Node  node  =  scope.getFirstChild(),  type,  resultEqualsValue);  [CE]  ';'  expected  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.getFirstChild(),  type,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getFirstChild(),  type,  resultEqualsValue);	  Node    node    =    scope.getFirstChild(),    type);    	non-compiled	[CE]  ';'  expected	21	None	replace
599	[BUG]  [BUGGY]  Node  node  =  scope.getFirstChild(),  type,  value);  [CE]  ';'  expected  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.getFirstChild(),  type,  value);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getFirstChild(),  type,  value);	  Node    node    =    scope.getFirstChild(),    type);    	non-compiled	[CE]  ';'  expected	21	None	replace
600	[BUG]  [BUGGY]  Node  node  =  scope.getFirstChild(),  type,  qualifiedName);  [CE]  ';'  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.getFirstChild(),  type,  qualifiedName);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getFirstChild(),  type,  qualifiedName);	  Node    node    =    scope.getFirstChild(),    type);    	non-compiled	[CE]  ';'  expected	21	None	replace
601	[BUG]  [BUGGY]  Node  node  =  scope.getFirstChild(),  qualifiedName);  [CE]  ';'  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.getFirstChild(),  qualifiedName);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getFirstChild(),  qualifiedName);	  Node    node    =    scope.getFirstChild(),    type);    	non-compiled	[CE]  ';'  expected	21	None	replace
602	[BUG]  [BUGGY]  Node  node  =  scope.getFirstChild(),  type,  getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.getFirstChild(),  type,  getNativeType(UNKNOWN_TYPE);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getFirstChild(),  type,  getNativeType(UNKNOWN_TYPE);	  Node    node    =    scope.getFirstChild(),    type);    	non-compiled	[CE]  ';'  expected	21	None	replace
603	[BUG]  [BUGGY]  Node  node  =  scope.getFirstChild(),  type,  getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.getFirstChild(),  type,  getNativeType(UNKNOWN_TYPE));  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getFirstChild(),  type,  getNativeType(UNKNOWN_TYPE));	  Node    node    =    scope.getFirstChild(),    type);    	non-compiled	[CE]  ';'  expected	21	None	replace
604	[BUG]  [BUGGY]  Node  node  =  scope.getFirstChild(),  origType);  [CE]  ';'  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.getFirstChild(),  origType);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getFirstChild(),  origType);	  Node    node    =    scope.getFirstChild(),    type);    	non-compiled	[CE]  ';'  expected	21	None	replace
605	[BUG]  [BUGGY]  Throwable  node  =  NodeUtil.getFunctionDeclaration(node.getLineno());  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  NodeUtil.getFunctionDeclaration(node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  NodeUtil.getFunctionDeclaration(node.getLineno());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    Node    node    =    node.getLineno();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	166	None	replace
606	[BUG]  [BUGGY]  Throwable  node  =  NodeUtil.getFunctionDeclaration(node.getLineno(),  node);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  NodeUtil.getFunctionDeclaration(node.getLineno(),  node);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  NodeUtil.getFunctionDeclaration(node.getLineno(),  node);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    Node    node    =    node.getLineno();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	166	None	replace
607	[BUG]  [BUGGY]  String  qualifiedName  =  node.getQualifiedName();  [CE]  variable  qualifiedName  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  String  qualifiedName  =  node.getQualifiedName();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	String  qualifiedName  =  node.getQualifiedName();	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    Node    node    =    node.getLineno();    	non-compiled	[CE]  variable  qualifiedName  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	166	None	replace
608	[BUG]  [BUGGY]  Throwable  node  =  NodeUtil.getFactory().getNativeType(UNKNOWN_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  NodeUtil.getFactory().getNativeType(UNKNOWN_TYPE);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  NodeUtil.getFactory().getNativeType(UNKNOWN_TYPE);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    Node    node    =    node.getLineno();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	166	None	replace
609	[BUG]  [BUGGY]  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  [CE]  incompatible  types  [FE]            UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    JSType    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  incompatible  types	56	None	replace
610	[BUG]  [BUGGY]  Throwable  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]              UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    JSType    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	56	None	replace
611	[BUG]  [BUGGY]  JSError.make(scope,  qualifiedName,  node,  UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  JSError.make(scope,  qualifiedName,  node,  UNKNOWN_TYPE));  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	JSError.make(scope,  qualifiedName,  node,  UNKNOWN_TYPE));	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    JSType    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	56	None	replace
612	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  UNKNOWN_TYPE. "  +  qualifiedName);  [CE]  variable  qualifiedName  might  not  have  been  initialized  [FE]                  UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  UNKNOWN_TYPE. "  +  qualifiedName);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  UNKNOWN_TYPE. "  +  qualifiedName);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    JSType    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  variable  qualifiedName  might  not  have  been  initialized	56	None	replace
613	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  true);  [CE]  cannot  find  symbol  compiler  [FE]                                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  true);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  qualifiedName,  true);	  NodeTraversal.traverse(compiler,    node,    qualifiedName,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	223	None	replace
614	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  false);  [CE]  cannot  find  symbol  compiler  [FE]                                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  false);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  false);	  NodeTraversal.traverse(compiler,    node,    qualifiedName,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	223	None	replace
615	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  value,  false);  [CE]  cannot  find  symbol  compiler  [FE]                                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  value,  false);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  value,  false);	  NodeTraversal.traverse(compiler,    node,    qualifiedName,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	223	None	replace
616	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  sourceName,  false);  [CE]  cannot  find  symbol  compiler  [FE]                                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  sourceName,  false);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  sourceName,  false);	  NodeTraversal.traverse(compiler,    node,    qualifiedName,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	223	None	replace
617	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  false,  scope);  [CE]  cannot  find  symbol  compiler  [FE]                                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  false,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  qualifiedName,  false,  scope);	  NodeTraversal.traverse(compiler,    node,    qualifiedName,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	223	None	replace
618	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  qualifiedName,  false);  [CE]  cannot  find  symbol  compiler  [FE]                                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  qualifiedName,  false);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope,  qualifiedName,  false);	  NodeTraversal.traverse(compiler,    node,    qualifiedName,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	223	None	replace
619	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  DEFAULT_TYPE,  qualifiedName,  false);  [CE]  cannot  find  symbol  compiler  [FE]                                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  DEFAULT_TYPE,  qualifiedName,  false);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  DEFAULT_TYPE,  qualifiedName,  false);	  NodeTraversal.traverse(compiler,    node,    qualifiedName,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	223	None	replace
620	[BUG]  [BUGGY]  JSType  node  =  scope.inferQualifiedSlot(node,  qualifiedName);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                          UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  JSType  node  =  scope.inferQualifiedSlot(node,  qualifiedName);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	JSType  node  =  scope.inferQualifiedSlot(node,  qualifiedName);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    JSType    node    =    scope.inferQualifiedSlot(node,    qualifiedName);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	63	None	replace
621	[BUG]  [BUGGY]  Throwable  node  =  scope.inferQualifiedSlot(node,  qualifiedName);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                            UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  scope.inferQualifiedSlot(node,  qualifiedName);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  scope.inferQualifiedSlot(node,  qualifiedName);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    JSType    node    =    scope.inferQualifiedSlot(node,    qualifiedName);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	63	None	replace
622	[BUG]  [BUGGY]  Node  node  =  scope.inferQualifiedSlot(qualifiedName,  node);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                              UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.inferQualifiedSlot(qualifiedName,  node);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.inferQualifiedSlot(qualifiedName,  node);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    JSType    node    =    scope.inferQualifiedSlot(node,    qualifiedName);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	63	None	replace
623	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  qualifiedName);  [CE]  variable  qualifiedName  might  not  have  been  initialized  [FE]                                UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  qualifiedName);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  qualifiedName);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    JSType    node    =    scope.inferQualifiedSlot(node,    qualifiedName);    	non-compiled	[CE]  variable  qualifiedName  might  not  have  been  initialized	63	None	replace
624	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  resultEqualsValue,  new  RestrictByOneTypeOfResultVisitor());  [CE]  cannot  find  symbol  compiler  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  resultEqualsValue,  new  RestrictByOneTypeOfResultVisitor());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope,  resultEqualsValue,  new  RestrictByOneTypeOfResultVisitor());	  NodeTraversal.traverse(compiler,    node,    scope,    new    RestrictByOneTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	233	None	replace
625	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  null,  new  RestrictByOneTypeOfResultVisitor());  [CE]  cannot  find  symbol  compiler  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  null,  new  RestrictByOneTypeOfResultVisitor());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  null,  new  RestrictByOneTypeOfResultVisitor());	  NodeTraversal.traverse(compiler,    node,    scope,    new    RestrictByOneTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	233	None	replace
626	[BUG]  [BUGGY]  Node  node  =  scope.initializeChildren(node);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.initializeChildren(node);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.initializeChildren(node);	  Node    node    =    scope.initializeChildren();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	480	None	replace
627	[BUG]  [BUGGY]  Node  node  =  scope.initializeChildren(),  type);  [CE]  ';'  expected  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.initializeChildren(),  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.initializeChildren(),  type);	  Node    node    =    scope.initializeChildren();    	non-compiled	[CE]  ';'  expected	480	None	replace
628	[BUG]  [BUGGY]  Node  node  =  scope.initializeChildren(type);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.initializeChildren(type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.initializeChildren(type);	  Node    node    =    scope.initializeChildren();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	480	None	replace
629	[BUG]  [BUGGY]  Node  node  =  scope.initializeFirstChild();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.initializeFirstChild();  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.initializeFirstChild();	  Node    node    =    scope.initializeChildren();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	480	None	replace
630	[BUG]  [BUGGY]  Node  node  =  scope.initializeChildren(value);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.initializeChildren(value);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.initializeChildren(value);	  Node    node    =    scope.initializeChildren();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	480	None	replace
631	[BUG]  [BUGGY]  Node  node  =  scope.initializeChildren(node,  type);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.initializeChildren(node,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.initializeChildren(node,  type);	  Node    node    =    scope.initializeChildren();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	480	None	replace
632	[BUG]  [BUGGY]  Node  node  =  scope.initializeChildren(scope);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.initializeChildren(scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.initializeChildren(scope);	  Node    node    =    scope.initializeChildren();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	480	None	replace
633	[BUG]  [BUGGY]  Node  node  =  type.initializeChildren();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  type.initializeChildren();  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  type.initializeChildren();	  Node    node    =    scope.initializeChildren();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	480	None	replace
634	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  does  not  exist: "  +  node.getMessage());  [CE]  cannot  find  symbol  [FE]                                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  does  not  exist: "  +  node.getMessage());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  does  not  exist: "  +  node.getMessage());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:   "    +    node.getMessage());    	non-compiled	[CE]  cannot  find  symbol	264	None	replace
635	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  does  not  exist: "  +  node.getMessage());  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  does  not  exist: "  +  node.getMessage());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  does  not  exist: "  +  node.getMessage());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:   "    +    node.getMessage());    	non-compiled	[CE]  <identifier>  expected	264	None	replace
636	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.getMessage());  [CE]  <identifier>  expected  [FE]                                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.getMessage());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.getMessage());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:   "    +    node.getMessage());    	non-compiled	[CE]  <identifier>  expected	264	None	replace
637	[BUG]  [BUGGY]  new  IllegalArgumentException( "Node  does  not  exist: "  +  node.getMessage());  [CE]  cannot  find  symbol  [FE]                                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  new  IllegalArgumentException( "Node  does  not  exist: "  +  node.getMessage());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	new  IllegalArgumentException( "Node  does  not  exist: "  +  node.getMessage());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:   "    +    node.getMessage());    	non-compiled	[CE]  cannot  find  symbol	264	None	replace
638	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node,  scope.getMessage());  [CE]  cannot  find  symbol  [FE]                                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node,  scope.getMessage());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node,  scope.getMessage());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:   "    +    node.getMessage());    	non-compiled	[CE]  cannot  find  symbol	264	None	replace
639	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  errorEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  errorEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope,  errorEqualsValue);	  NodeTraversal.traverse(compiler,    node,    scope);    	non-compiled	[CE]  cannot  find  symbol  compiler	97	None	replace
640	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  value);  [CE]  cannot  find  symbol  compiler  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  value);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope,  value);	  NodeTraversal.traverse(compiler,    node,    scope);    	non-compiled	[CE]  cannot  find  symbol  compiler	97	None	replace
641	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  resultEqualsValue,  scope);  [CE]  cannot  find  symbol  compiler  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  resultEqualsValue,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  resultEqualsValue,  scope);	  NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE),    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	110	None	replace
642	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  getNativeType(UNKNOWN_TYPE),  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  getNativeType(UNKNOWN_TYPE),  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope,  getNativeType(UNKNOWN_TYPE),  resultEqualsValue);	  NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE),    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	110	None	replace
643	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  scope,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  scope,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  scope,  resultEqualsValue);	  NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE),    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	110	None	replace
644	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getLineno(),   "  +  node.getLineno());  Node  defined  with  node.getLineno(),   "  +  node.getLineno());  [CE]  [FE]    java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.getLineno()    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getLineno(),   "  +  node.getLineno());  Node  defined  with  node.getLineno(),   "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getLineno(),   "    +    node.getLineno());    Node  defined  with  node.getLineno(),   "  +  node.getLineno());	  	non-compiled	[CE]  	476	None	add
645	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getLineno(),   "  +  node.getLineno());  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getLineno(),   "  +  node.getLineno());  [CE]  unreachable  statement  [FE]      java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.getLineno()    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getLineno(),   "  +  node.getLineno());  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getLineno(),   "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getLineno(),   "    +    node.getLineno());    throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getLineno(),   "  +  node.getLineno());	  	non-compiled	[CE]  unreachable  statement	476	None	add
646	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getLineno(),   "  +  node.getLineno());  java.lang.IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getLineno(),   "  +  node.getLineno());  [CE]  cannot  find  symbol  [FE]        java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.getLineno()    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getLineno(),   "  +  node.getLineno());  java.lang.IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getLineno(),   "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getLineno(),   "    +    node.getLineno());    java.lang.IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getLineno(),   "  +  node.getLineno());	  	non-compiled	[CE]  cannot  find  symbol	476	None	add
647	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getLineno(),   "  +  node.getLineno());  Node  defined  with  node.getLineno(),   "  +  node.getCharno());  [CE]  [FE]          java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.getLineno()    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getLineno(),   "  +  node.getLineno());  Node  defined  with  node.getLineno(),   "  +  node.getCharno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getLineno(),   "    +    node.getLineno());    Node  defined  with  node.getLineno(),   "  +  node.getCharno());	  	non-compiled	[CE]  	476	None	add
648	[BUG]  [BUGGY]  Node  node  =  scope.initialize(node,  type);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.initialize(node,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.initialize(node,  type);	  Node    node    =    scope.initialize(node);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	434	None	replace
649	[BUG]  [BUGGY]  Node  node  =  scope.initialize(node,  qualifiedName);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.initialize(node,  qualifiedName);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.initialize(node,  qualifiedName);	  Node    node    =    scope.initialize(node);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	434	None	replace
650	[BUG]  [BUGGY]  Node  node  =  scope.initialize(type);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.initialize(type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.initialize(type);	  Node    node    =    scope.initialize(node);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	434	None	replace
651	[BUG]  [BUGGY]  Node  node  =  scope.initialize(node,  value);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.initialize(node,  value);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.initialize(node,  value);	  Node    node    =    scope.initialize(node);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	434	None	replace
652	[BUG]  [BUGGY]  Node  node  =  scope.initialize(qualifiedName);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.initialize(qualifiedName);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.initialize(qualifiedName);	  Node    node    =    scope.initialize(node);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	434	None	replace
653	[BUG]  [BUGGY]  Node  node  =  scope.initialize(node,  name);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.initialize(node,  name);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.initialize(node,  name);	  Node    node    =    scope.initialize(node);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	434	None	replace
654	[BUG]  [BUGGY]  Node  node  =  scope.initialize(scope,  qualifiedName);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.initialize(scope,  qualifiedName);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.initialize(scope,  qualifiedName);	  Node    node    =    scope.initialize(node);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	434	None	replace
655	[BUG]  [BUGGY]  Node  node  =  scope.initialize(value);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.initialize(value);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.initialize(value);	  Node    node    =    scope.initialize(node);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	434	None	replace
656	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  resultEqualsValue,  type);  [CE]  cannot  find  symbol  compiler  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  resultEqualsValue,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  resultEqualsValue,  type);	  NodeTraversal.traverse(compiler,    node,    this,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	186	None	replace
657	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  origType);  [CE]  cannot  find  symbol  compiler  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  origType);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  origType);	  NodeTraversal.traverse(compiler,    node,    origType);    	non-compiled	[CE]  cannot  find  symbol  compiler	319	None	replace
658	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  origType);  [CE]  cannot  find  symbol  compiler  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  origType);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  qualifiedName,  origType);	  NodeTraversal.traverse(compiler,    node,    origType);    	non-compiled	[CE]  cannot  find  symbol  compiler	319	None	replace
659	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  origType);  [CE]  cannot  find  symbol  compiler  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  origType);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  origType);	  NodeTraversal.traverse(compiler,    node,    origType);    	non-compiled	[CE]  cannot  find  symbol  compiler	319	None	replace
660	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  scope,  origType);  [CE]  cannot  find  symbol  compiler  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  scope,  origType);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  scope,  origType);	  NodeTraversal.traverse(compiler,    node,    origType);    	non-compiled	[CE]  cannot  find  symbol  compiler	319	None	replace
661	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  type,  origType);  [CE]  cannot  find  symbol  compiler  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  type,  origType);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  type,  origType);	  NodeTraversal.traverse(compiler,    node,    origType);    	non-compiled	[CE]  cannot  find  symbol  compiler	319	None	replace
662	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByFalseTypeOfResultVisitor(),  scope);  [CE]  cannot  find  symbol  compiler  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByFalseTypeOfResultVisitor(),  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  new  RestrictByFalseTypeOfResultVisitor(),  scope);	  NodeTraversal.traverse(compiler,    node,    new    RestrictByFalseTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	135	None	replace
663	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  new  RestrictByFalseTypeOfResultVisitor());  [CE]  cannot  find  symbol  compiler  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  new  RestrictByFalseTypeOfResultVisitor());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  new  RestrictByFalseTypeOfResultVisitor());	  NodeTraversal.traverse(compiler,    node,    new    RestrictByFalseTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	135	None	replace
664	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByFalseTypeOfResultVisitor(),  type);  [CE]  cannot  find  symbol  compiler  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByFalseTypeOfResultVisitor(),  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  new  RestrictByFalseTypeOfResultVisitor(),  type);	  NodeTraversal.traverse(compiler,    node,    new    RestrictByFalseTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	135	None	replace
665	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  new  RestrictByFalseTypeOfResultVisitor());  [CE]  cannot  find  symbol  compiler  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  new  RestrictByFalseTypeOfResultVisitor());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  new  RestrictByFalseTypeOfResultVisitor());	  NodeTraversal.traverse(compiler,    node,    new    RestrictByFalseTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	135	None	replace
666	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByFalseTypeOfResultVisitor(),  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByFalseTypeOfResultVisitor(),  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  new  RestrictByFalseTypeOfResultVisitor(),  resultEqualsValue);	  NodeTraversal.traverse(compiler,    node,    new    RestrictByFalseTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	135	None	replace
667	[BUG]  [BUGGY]  Preconditions.checkNotNull(qualifiedName);  Preconditions.checkState(type!=  null);  [CE]  variable  qualifiedName  might  not  have  been  initialized  [FE]    IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkNotNull(qualifiedName);  Preconditions.checkState(type!=  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkNotNull(qualifiedName);  Preconditions.checkState(type!=  null);	          Preconditions.checkNotNull(type);    Preconditions.checkState(type    ==    null);    	non-compiled	[CE]  variable  qualifiedName  might  not  have  been  initialized	29	None	replace
668	[BUG]  [BUGGY]  Preconditions.checkNotNull(qualifiedName);  Preconditions.checkState(type  ==  null);  [CE]  variable  qualifiedName  might  not  have  been  initialized  [FE]      IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkNotNull(qualifiedName);  Preconditions.checkState(type  ==  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkNotNull(qualifiedName);  Preconditions.checkState(type  ==  null);	          Preconditions.checkNotNull(type);    Preconditions.checkState(type    ==    null);    	non-compiled	[CE]  variable  qualifiedName  might  not  have  been  initialized	29	None	replace
669	[BUG]  [BUGGY]  Preconditions.checkState(scope.inferQualifiedSlot(node,  qualifiedName,  origType  ==  null?  getNativeType(UNKNOWN_TYPE):  null);  [CE]  ')'  expected  [FE]        IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(scope.inferQualifiedSlot(node,  qualifiedName,  origType  ==  null?  getNativeType(UNKNOWN_TYPE):  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(scope.inferQualifiedSlot(node,  qualifiedName,  origType  ==  null?  getNativeType(UNKNOWN_TYPE):  null);	          Preconditions.checkNotNull(type);    Preconditions.checkState(type    ==    null);    	non-compiled	[CE]  ')'  expected	29	None	replace
670	[BUG]  [BUGGY]  Preconditions.checkState(scope.inferQualifiedSlot(node,  qualifiedName,  origType  ==  null?  getNativeType(UNKNOWN_TYPE):  type);  [CE]  ')'  expected  [FE]          IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(scope.inferQualifiedSlot(node,  qualifiedName,  origType  ==  null?  getNativeType(UNKNOWN_TYPE):  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(scope.inferQualifiedSlot(node,  qualifiedName,  origType  ==  null?  getNativeType(UNKNOWN_TYPE):  type);	          Preconditions.checkNotNull(type);    Preconditions.checkState(type    ==    null);    	non-compiled	[CE]  ')'  expected	29	None	replace
671	[BUG]  [BUGGY]  Preconditions.checkState(scope.inferQualifiedSlot(node,  qualifiedName,  origType!=  null?  getNativeType(UNKNOWN_TYPE):  null);  [CE]  ')'  expected  [FE]            IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(scope.inferQualifiedSlot(node,  qualifiedName,  origType!=  null?  getNativeType(UNKNOWN_TYPE):  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(scope.inferQualifiedSlot(node,  qualifiedName,  origType!=  null?  getNativeType(UNKNOWN_TYPE):  null);	          Preconditions.checkNotNull(type);    Preconditions.checkState(type    ==    null);    	non-compiled	[CE]  ')'  expected	29	None	replace
672	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getQualifiedName());  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.getQualifiedName());  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getQualifiedName());  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getQualifiedName());    IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.getQualifiedName());	  	non-compiled	[CE]  cannot  find  symbol	72	None	add
673	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getQualifiedName());  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName());  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getQualifiedName());  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getQualifiedName());    Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName());	  	non-compiled	[CE]  not  a  statement	72	None	add
674	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getQualifiedName());  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.getQualifiedName());  [CE]  unreachable  statement  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getQualifiedName());  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getQualifiedName());    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.getQualifiedName());	  	non-compiled	[CE]  unreachable  statement	72	None	add
675	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getQualifiedName());  Node  cannot  be  refined.  (  +  node.getQualifiedName());  [CE]  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getQualifiedName());  Node  cannot  be  refined.  (  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getQualifiedName());    Node  cannot  be  refined.  (  +  node.getQualifiedName());	  	non-compiled	[CE]  	72	None	add
676	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getQualifiedName());  Node  cannot  be  refined.   "  +  node.getQualifiedName());  break;  [CE]  [FE]            IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getQualifiedName());  Node  cannot  be  refined.   "  +  node.getQualifiedName());  break;  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getQualifiedName());    Node  cannot  be  refined.   "  +  node.getQualifiedName());  break;	  	non-compiled	[CE]  	72	None	add
677	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type!=  null);  Preconditions.checkNotNull(type);  Preconditions.checkArgument(type!=  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	                Preconditions.checkNotNull(type);        Preconditions.checkArgument(type!=    null);    Preconditions.checkNotNull(type);  Preconditions.checkArgument(type!=  null);	  	compilable	  [FE]  IllegalArgumentException  	295	1	add
678	[BUG]  [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type!=  null);  Preconditions.checkNotNull(type);  Preconditions.checkArgument(type!=  null);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type!=  null);  Preconditions.checkNotNull(type);  Preconditions.checkArgument(type!=  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	                Preconditions.checkNotNull(type);        Preconditions.checkArgument(type!=    null);    Preconditions.checkNotNull(type);  Preconditions.checkArgument(type!=  null);	  	compilable	  [FE]  IllegalArgumentException  	295	1	add
679	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type!=  null);  Preconditions.checkState(type!=  null);  Preconditions.checkArgument(type!=  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	                Preconditions.checkNotNull(type);        Preconditions.checkArgument(type!=    null);    Preconditions.checkState(type!=  null);  Preconditions.checkArgument(type!=  null);	  	compilable	  [FE]  IllegalArgumentException  	295	1	add
680	[BUG]  [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type!=  null);  Preconditions.checkState(type!=  null);  Preconditions.checkArgument(type!=  null);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type!=  null);  Preconditions.checkState(type!=  null);  Preconditions.checkArgument(type!=  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	                Preconditions.checkNotNull(type);        Preconditions.checkArgument(type!=    null);    Preconditions.checkState(type!=  null);  Preconditions.checkArgument(type!=  null);	  	compilable	  [FE]  IllegalArgumentException  	295	1	add
681	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type!=  null);  Preconditions.checkState(type  ==  null);  Preconditions.checkArgument(type!=  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	                Preconditions.checkNotNull(type);        Preconditions.checkArgument(type!=    null);    Preconditions.checkState(type  ==  null);  Preconditions.checkArgument(type!=  null);	  	compilable	  [FE]  IllegalStateException  	295	1	add
682	[BUG]  [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type!=  null);  Preconditions.checkState(type  ==  null);  Preconditions.checkArgument(type!=  null);  [FE]  IllegalStateException  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type!=  null);  Preconditions.checkState(type  ==  null);  Preconditions.checkArgument(type!=  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	                Preconditions.checkNotNull(type);        Preconditions.checkArgument(type!=    null);    Preconditions.checkState(type  ==  null);  Preconditions.checkArgument(type!=  null);	  	compilable	  [FE]  IllegalStateException  	295	1	add
683	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type!=  null);  Preconditions.checkArgument(type!=  null);  Preconditions.checkArgument(type!=  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	                Preconditions.checkNotNull(type);        Preconditions.checkArgument(type!=    null);    Preconditions.checkArgument(type!=  null);  Preconditions.checkArgument(type!=  null);	  	compilable	  [FE]  IllegalArgumentException  	295	1	add
684	[BUG]  [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type!=  null);  Preconditions.checkArgument(type!=  null);  Preconditions.checkArgument(type!=  null);  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type!=  null);  Preconditions.checkArgument(type!=  null);  Preconditions.checkArgument(type!=  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	                Preconditions.checkNotNull(type);        Preconditions.checkArgument(type!=    null);    Preconditions.checkArgument(type!=  null);  Preconditions.checkArgument(type!=  null);	  	compilable	  [FE]  IllegalArgumentException  	295	1	add
685	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type!=  null);  Preconditions.checkArgument(type!=  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	                Preconditions.checkNotNull(type);        Preconditions.checkArgument(type!=    null);    Preconditions.checkArgument(type!=  null);	  	compilable	  [FE]  IllegalArgumentException  	295	1	add
686	[BUG]  [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type!=  null);  Preconditions.checkArgument(type!=  null);  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type!=  null);  Preconditions.checkArgument(type!=  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	                Preconditions.checkNotNull(type);        Preconditions.checkArgument(type!=    null);    Preconditions.checkArgument(type!=  null);	  	compilable	  [FE]  IllegalArgumentException  	295	1	add
687	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type!=  null);  Preconditions.checkState(type!=  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	                Preconditions.checkNotNull(type);        Preconditions.checkArgument(type!=    null);    Preconditions.checkState(type!=  null);	  	compilable	  [FE]  IllegalArgumentException  	295	1	add
688	[BUG]  [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type!=  null);  Preconditions.checkState(type!=  null);  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type!=  null);  Preconditions.checkState(type!=  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	                Preconditions.checkNotNull(type);        Preconditions.checkArgument(type!=    null);    Preconditions.checkState(type!=  null);	  	compilable	  [FE]  IllegalArgumentException  	295	1	add
689	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type!=  null);  Preconditions.checkState(type!=  null);  Preconditions.checkArgument(type  ==  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	                Preconditions.checkNotNull(type);        Preconditions.checkArgument(type!=    null);    Preconditions.checkState(type!=  null);  Preconditions.checkArgument(type  ==  null);	  	compilable	  [FE]  IllegalArgumentException  	295	1	add
690	[BUG]  [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type!=  null);  Preconditions.checkState(type!=  null);  Preconditions.checkArgument(type  ==  null);  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type!=  null);  Preconditions.checkState(type!=  null);  Preconditions.checkArgument(type  ==  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	                Preconditions.checkNotNull(type);        Preconditions.checkArgument(type!=    null);    Preconditions.checkState(type!=  null);  Preconditions.checkArgument(type  ==  null);	  	compilable	  [FE]  IllegalArgumentException  	295	1	add
691	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type!=  null);  Preconditions.checkNotNull(type);  Preconditions.checkArgument(type  ==  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	                Preconditions.checkNotNull(type);        Preconditions.checkArgument(type!=    null);    Preconditions.checkNotNull(type);  Preconditions.checkArgument(type  ==  null);	  	compilable	  [FE]  IllegalArgumentException  	295	1	add
692	[BUG]  [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type!=  null);  Preconditions.checkNotNull(type);  Preconditions.checkArgument(type  ==  null);  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type!=  null);  Preconditions.checkNotNull(type);  Preconditions.checkArgument(type  ==  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	                Preconditions.checkNotNull(type);        Preconditions.checkArgument(type!=    null);    Preconditions.checkNotNull(type);  Preconditions.checkArgument(type  ==  null);	  	compilable	  [FE]  IllegalArgumentException  	295	1	add
693	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()     "  +  node.getQualifiedName());  Node  defined  with  node.getQualifiedName()   "  +  node.getQualifiedName());  [CE]  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()     "  +  node.getQualifiedName());  Node  defined  with  node.getQualifiedName()   "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getQualifiedName()       "    +    node.getQualifiedName());    Node  defined  with  node.getQualifiedName()   "  +  node.getQualifiedName());	  	non-compiled	[CE]  	508	None	add
694	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()     "  +  node.getQualifiedName());  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()   "  +  node.getQualifiedName());  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()     "  +  node.getQualifiedName());  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()   "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getQualifiedName()       "    +    node.getQualifiedName());    IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()   "  +  node.getQualifiedName());	  	non-compiled	[CE]  cannot  find  symbol	508	None	add
695	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()     "  +  node.getQualifiedName());  Node  definedWith  node.getQualifiedName()   "  +  node.getQualifiedName());  [CE]  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()     "  +  node.getQualifiedName());  Node  definedWith  node.getQualifiedName()   "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getQualifiedName()       "    +    node.getQualifiedName());    Node  definedWith  node.getQualifiedName()   "  +  node.getQualifiedName());	  	non-compiled	[CE]  	508	None	add
696	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()     "  +  node.getQualifiedName());  Node  defined  with  node.getQualifiedName()   "  +  node.getQualifiedName());  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()   "  +  node.get  [CE]  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()     "  +  node.getQualifiedName());  Node  defined  with  node.getQualifiedName()   "  +  node.getQualifiedName());  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()   "  +  node.get  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getQualifiedName()       "    +    node.getQualifiedName());    Node  defined  with  node.getQualifiedName()   "  +  node.getQualifiedName());  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()   "  +  node.get	  	non-compiled	[CE]  	508	None	add
697	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()     "  +  node.getQualifiedName());  Node  defined  with  node.getQualifiedName()   "  +  node.getQualifiedName());  if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()   "  +  node.get  [CE]  [FE]            IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()     "  +  node.getQualifiedName());  Node  defined  with  node.getQualifiedName()   "  +  node.getQualifiedName());  if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()   "  +  node.get  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getQualifiedName()       "    +    node.getQualifiedName());    Node  defined  with  node.getQualifiedName()   "  +  node.getQualifiedName());  if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()   "  +  node.get	  	non-compiled	[CE]  	508	None	add
698	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()     "  +  node.getQualifiedName());  Node  defined  with  node.getQualifiedName()   "  +  node.getQualifiedName());  break;  [CE]  [FE]              IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()     "  +  node.getQualifiedName());  Node  defined  with  node.getQualifiedName()   "  +  node.getQualifiedName());  break;  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getQualifiedName()       "    +    node.getQualifiedName());    Node  defined  with  node.getQualifiedName()   "  +  node.getQualifiedName());  break;	  	non-compiled	[CE]  	508	None	add
699	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()     "  +  node.getQualifiedName());  Node  defined  with  node.getQualifiedName()   "  +  node.getQualifiedName());  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [CE]  [FE]                IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()     "  +  node.getQualifiedName());  Node  defined  with  node.getQualifiedName()   "  +  node.getQualifiedName());  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getQualifiedName()       "    +    node.getQualifiedName());    Node  defined  with  node.getQualifiedName()   "  +  node.getQualifiedName());  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);	  	non-compiled	[CE]  	508	None	add
700	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()     "  +  node.getQualifiedName());  Node  defined  with  node.getQualifiedName()   "  +  node.getQualifiedName());  if(resultEqualsValue  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()   "  +  node.get  [CE]  [FE]                  IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()     "  +  node.getQualifiedName());  Node  defined  with  node.getQualifiedName()   "  +  node.getQualifiedName());  if(resultEqualsValue  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()   "  +  node.get  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getQualifiedName()       "    +    node.getQualifiedName());    Node  defined  with  node.getQualifiedName()   "  +  node.getQualifiedName());  if(resultEqualsValue  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()   "  +  node.get	  	non-compiled	[CE]  	508	None	add
701	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getSimpleName());  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getSimpleName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getSimpleName());	  Throwables.throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getName());    	non-compiled	[CE]  <identifier>  expected	244	None	replace
702	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  type: "  +  type.toStringTree());  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  type: "  +  type.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  type: "  +  type.toStringTree());	  Throwables.throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n       "    +    type.toStringTree());    	non-compiled	[CE]  <identifier>  expected	38	None	replace
703	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  can  be  refined. "  +  type.toStringTree());  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  can  be  refined. "  +  type.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  can  be  refined. "  +  type.toStringTree());	  Throwables.throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n       "    +    type.toStringTree());    	non-compiled	[CE]  <identifier>  expected	38	None	replace
704	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  type,  scope.toStringTree());  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  type,  scope.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  type,  scope.toStringTree());	  Throwables.throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n       "    +    type.toStringTree());    	non-compiled	[CE]  <identifier>  expected	38	None	replace
705	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined: "  +  type.toStringTree());  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined: "  +  type.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined: "  +  type.toStringTree());	  Throwables.throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n       "    +    type.toStringTree());    	non-compiled	[CE]  <identifier>  expected	38	None	replace
706	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getLineno());  [CE]  not  a  statement  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getLineno());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	385	None	replace
707	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getLocalName());  [CE]  not  a  statement  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getLocalName());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	385	None	replace
708	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getMessage());  [CE]  not  a  statement  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getMessage());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getMessage());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	385	None	replace
709	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getQualifiedName());  [CE]  not  a  statement  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getQualifiedName());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	385	None	replace
710	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getClass());  [CE]  not  a  statement  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getClass());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getClass());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	385	None	replace
711	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getSourceName());  [CE]  not  a  statement  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getSourceName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getSourceName());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	385	None	replace
712	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node,  type.toStringTree());  [CE]  not  a  statement  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node,  type.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node,  type.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	385	None	replace
713	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  scope,  null);  [CE]  cannot  find  symbol  compiler  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  scope,  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  scope,  null);	  NodeTraversal.traverse(compiler,    node,    this,    null);    	non-compiled	[CE]  cannot  find  symbol  compiler	358	None	replace
714	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  this,  null);  [CE]  cannot  find  symbol  compiler  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  this,  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope,  this,  null);	  NodeTraversal.traverse(compiler,    node,    this,    null);    	non-compiled	[CE]  cannot  find  symbol  compiler	358	None	replace
715	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  null,  scope);  [CE]  cannot  find  symbol  compiler  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  null,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  null,  scope);	  NodeTraversal.traverse(compiler,    node,    this,    null);    	non-compiled	[CE]  cannot  find  symbol  compiler	358	None	replace
716	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  null);  [CE]  cannot  find  symbol  compiler  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope,  null);	  NodeTraversal.traverse(compiler,    node,    this,    null);    	non-compiled	[CE]  cannot  find  symbol  compiler	358	None	replace
717	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualifiedName  ' "  +  node.toStringTree());  [CE]  not  a  statement  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualifiedName  ' "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualifiedName  ' "  +  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node    '   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	389	None	replace
718	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  defined  with  node  ' "  +  node.toStringTree());  [CE]  not  a  statement  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  defined  with  node  ' "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  defined  with  node  ' "  +  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node    '   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	389	None	replace
719	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node  ' "  +  node.getLocalName());  [CE]  not  a  statement  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node  ' "  +  node.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node  ' "  +  node.getLocalName());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node    '   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	389	None	replace
720	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node  ' "  +  node.getLineno());  [CE]  not  a  statement  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node  ' "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node  ' "  +  node.getLineno());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node    '   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	389	None	replace
721	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name  ' "  +  node.toStringTree());  [CE]  not  a  statement  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name  ' "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name  ' "  +  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node    '   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	389	None	replace
722	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node  ' "  +  node.getQualifiedName());  [CE]  not  a  statement  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node  ' "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node  ' "  +  node.getQualifiedName());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node    '   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	389	None	replace
723	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node  ' "  +  node.getSimpleName());  [CE]  not  a  statement  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node  ' "  +  node.getSimpleName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node  ' "  +  node.getSimpleName());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node    '   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	389	None	replace
724	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node  ' "  +  node.getLocalPart());  [CE]  not  a  statement  [FE]                                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node  ' "  +  node.getLocalPart());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node  ' "  +  node.getLocalPart());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node    '   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	389	None	replace
725	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null?   "Node  cannot  be  refined.  n "  +  node.toStringTree());  [CE]  :  expected  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(type!=  null?   "Node  cannot  be  refined.  n "  +  node.toStringTree());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkArgument(type!=  null?   "Node  cannot  be  refined.  n "  +  node.toStringTree());	          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type!=    null?   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  :  expected	32	None	replace
726	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null? "Node  cannot  be  refined.  n "  +  node.toStringTree());  [CE]  :  expected  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(type!=  null? "Node  cannot  be  refined.  n "  +  node.toStringTree());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(type!=  null? "Node  cannot  be  refined.  n "  +  node.toStringTree());	          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type!=    null?   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  :  expected	32	None	replace
727	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null);  Preconditions.checkArgument(type!=  null?   "Node  cannot  be  refined.  n "  +  node.toStringTree());  [CE]  :  expected  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(type!=  null);  Preconditions.checkArgument(type!=  null?   "Node  cannot  be  refined.  n "  +  node.toStringTree());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(type!=  null);  Preconditions.checkArgument(type!=  null?   "Node  cannot  be  refined.  n "  +  node.toStringTree());	          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type!=    null?   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  :  expected	32	None	replace
728	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null? "Node  cannot  be  refined. "  :  type.toStringTree());  [CE]  cannot  find  symbol  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(type!=  null? "Node  cannot  be  refined. "  :  type.toStringTree());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(type!=  null? "Node  cannot  be  refined. "  :  type.toStringTree());	          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type!=    null?   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
729	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null?   "Node  cannot  be  refined. "  +  node.toStringTree());  [CE]  :  expected  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(type!=  null?   "Node  cannot  be  refined. "  +  node.toStringTree());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkArgument(type!=  null?   "Node  cannot  be  refined. "  +  node.toStringTree());	          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type!=    null?   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  :  expected	32	None	replace
730	[BUG]  [BUGGY]  SimpleNodeTraversal.traverse(compiler,  node,  this);  [CE]  cannot  find  symbol  compiler  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  SimpleNodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	SimpleNodeTraversal.traverse(compiler,  node,  this);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    SimpleNodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	310	None	replace
731	[BUG]  [BUGGY]  ParserNodeTraversal.traverse(compiler,  node,  this);  [CE]  cannot  find  symbol  compiler  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  ParserNodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	ParserNodeTraversal.traverse(compiler,  node,  this);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    SimpleNodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	310	None	replace
732	[BUG]  [BUGGY]  FlowScope.traverse(compiler,  node,  this);  [CE]  cannot  find  symbol  compiler  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  FlowScope.traverse(compiler,  node,  this);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	FlowScope.traverse(compiler,  node,  this);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    SimpleNodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	310	None	replace
733	[BUG]  [BUGGY]  Traversal.traverse(compiler,  node,  this);  [CE]  cannot  find  symbol  compiler  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Traversal.traverse(compiler,  node,  this);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Traversal.traverse(compiler,  node,  this);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    SimpleNodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	310	None	replace
734	[BUG]  [BUGGY]  SimpleNodeTraversal.traverse(compiler,  node,  null);  [CE]  cannot  find  symbol  compiler  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  SimpleNodeTraversal.traverse(compiler,  node,  null);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	SimpleNodeTraversal.traverse(compiler,  node,  null);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    SimpleNodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	310	None	replace
735	[BUG]  [BUGGY]  Traverse.traverse(compiler,  node,  this);  [CE]  cannot  find  symbol  compiler  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Traverse.traverse(compiler,  node,  this);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Traverse.traverse(compiler,  node,  this);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    SimpleNodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	310	None	replace
736	[BUG]  [BUGGY]  Context.reportCodeChange();  [CE]  cannot  find  symbol  Context  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Context.reportCodeChange();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Context.reportCodeChange();	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    SimpleNodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  cannot  find  symbol  Context	310	None	replace
737	[BUG]  [BUGGY]  State.traverse(compiler,  node,  this);  [CE]  cannot  find  symbol  compiler  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  State.traverse(compiler,  node,  this);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	State.traverse(compiler,  node,  this);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    SimpleNodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	310	None	replace
738	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined ",  node,  scope.toStringTree());  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning( "Node  cannot  be  refined ",  node,  scope.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined ",  node,  scope.toStringTree());	  DebugLog.warning(   "Node    cannot    be    refined   ",    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol	291	None	replace
739	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined ",  node,  type.toStringTree());  [CE]  cannot  find  symbol  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning( "Node  cannot  be  refined ",  node,  type.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined ",  node,  type.toStringTree());	  DebugLog.warning(   "Node    cannot    be    refined   ",    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol	291	None	replace
740	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined: "  +  node.toStringTree());  [CE]  cannot  find  symbol  DebugLog  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning( "Node  cannot  be  refined: "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined: "  +  node.toStringTree());	  DebugLog.warning(   "Node    cannot    be    refined   ",    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol  DebugLog	291	None	replace
741	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined ",  name,  node.toStringTree());  [CE]  cannot  find  symbol  name  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning( "Node  cannot  be  refined ",  name,  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined ",  name,  node.toStringTree());	  DebugLog.warning(   "Node    cannot    be    refined   ",    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol  name	291	None	replace
742	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined ",  scope.toStringTree());  [CE]  cannot  find  symbol  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning( "Node  cannot  be  refined ",  scope.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined ",  scope.toStringTree());	  DebugLog.warning(   "Node    cannot    be    refined   ",    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol	291	None	replace
743	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined. ",  node.toStringTree());  [CE]  cannot  find  symbol  DebugLog  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning( "Node  cannot  be  refined. ",  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined. ",  node.toStringTree());	  DebugLog.warning(   "Node    cannot    be    refined   ",    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol  DebugLog	291	None	replace
744	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined ",  node,  value.toStringTree());  [CE]  cannot  find  symbol  value  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning( "Node  cannot  be  refined ",  node,  value.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined ",  node,  value.toStringTree());	  DebugLog.warning(   "Node    cannot    be    refined   ",    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol  value	291	None	replace
745	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined. ",  node.getMessage());  [CE]  cannot  find  symbol  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning( "Node  cannot  be  refined. ",  node.getMessage());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined. ",  node.getMessage());	  DebugLog.warning(   "Node    cannot    be    refined   ",    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol	291	None	replace
746	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined. ",  node.getSourceName());  [CE]  cannot  find  symbol  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning( "Node  cannot  be  refined. ",  node.getSourceName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined. ",  node.getSourceName());	  DebugLog.warning(   "Node    cannot    be    refined   ",    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol	291	None	replace
747	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null);  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(type!=  null);  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(type!=  null);  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);	          Preconditions.checkNotNull(type);    Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	30	None	replace
748	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  null);  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(type  ==  null);  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(type  ==  null);  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);	          Preconditions.checkNotNull(type);    Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	30	None	replace
749	[BUG]  [BUGGY]  Preconditions.checkNotNull(qualifiedName);  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkNotNull(qualifiedName);  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkNotNull(qualifiedName);  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);	          Preconditions.checkNotNull(type);    Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	30	None	replace
750	[BUG]  [BUGGY]  Preconditions.checkState(node!=  null);  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node!=  null);  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(node!=  null);  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);	          Preconditions.checkNotNull(type);    Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	30	None	replace
751	[BUG]  [BUGGY]  Preconditions.checkState(node  ==  null);  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node  ==  null);  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(node  ==  null);  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);	          Preconditions.checkNotNull(type);    Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	30	None	replace
752	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null);  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(type!=  null);  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkArgument(type!=  null);  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);	          Preconditions.checkNotNull(type);    Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	30	None	replace
753	[BUG]  [BUGGY]  Preconditions.checkNotNull(type);  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  scope);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkNotNull(type);  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkNotNull(type);  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  scope);	          Preconditions.checkNotNull(type);    Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	30	None	replace
754	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getLineno(),   "  +  node.getCharno());  Node  defined  with  node.getLineno(),   "  +  node.getCharno());  [CE]  [FE]    java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.getLineno()    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getLineno(),   "  +  node.getCharno());  Node  defined  with  node.getLineno(),   "  +  node.getCharno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getLineno(),   "    +    node.getCharno());    Node  defined  with  node.getLineno(),   "  +  node.getCharno());	  	non-compiled	[CE]  	474	None	add
755	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getLineno(),   "  +  node.getCharno());  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getLineno(),   "  +  node.getCharno());  [CE]  unreachable  statement  [FE]      java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.getLineno()    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getLineno(),   "  +  node.getCharno());  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getLineno(),   "  +  node.getCharno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getLineno(),   "    +    node.getCharno());    throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getLineno(),   "  +  node.getCharno());	  	non-compiled	[CE]  unreachable  statement	474	None	add
756	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getLineno(),   "  +  node.getCharno());  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getLineno(),   "  +  node.getCharno());  }  [CE]  unreachable  statement  [FE]        java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.getLineno()    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getLineno(),   "  +  node.getCharno());  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getLineno(),   "  +  node.getCharno());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getLineno(),   "    +    node.getCharno());    if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getLineno(),   "  +  node.getCharno());  }	  	non-compiled	[CE]  unreachable  statement	474	None	add
757	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getLineno(),   "  +  node.getCharno());  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getLineno(),   "  +  node.getCharno());  }  else  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }  [CE]  unreachable  statement  [FE]          java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.getLineno()    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getLineno(),   "  +  node.getCharno());  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getLineno(),   "  +  node.getCharno());  }  else  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getLineno(),   "    +    node.getCharno());    if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getLineno(),   "  +  node.getCharno());  }  else  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }	  	non-compiled	[CE]  unreachable  statement	474	None	add
758	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getLineno(),   "  +  node.getCharno());  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getLineno(),   "  +  node.getCharno());  }  else  {  scope.inferQualifiedSlot(node,  qualifiedName,  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.getLineno()    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getLineno(),   "  +  node.getCharno());  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getLineno(),   "  +  node.getCharno());  }  else  {  scope.inferQualifiedSlot(node,  qualifiedName,  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getLineno(),   "    +    node.getCharno());    if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getLineno(),   "  +  node.getCharno());  }  else  {  scope.inferQualifiedSlot(node,  qualifiedName,	  	non-compiled	[CE]  illegal  start  of  expression	474	None	add
759	[BUG]  [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  type,  result);  [CE]  cannot  find  symbol  result  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  type,  result);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(node,  qualifiedName,  origType,  type,  result);	  scope.inferSlot(node,    qualifiedName,    origType,    type,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  result	250	None	replace
760	[BUG]  [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  type,  undefined);  [CE]  cannot  find  symbol  undefined  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  type,  undefined);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(node,  qualifiedName,  origType,  type,  undefined);	  scope.inferSlot(node,    qualifiedName,    origType,    type,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  undefined	250	None	replace
761	[BUG]  [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  type,  endEqualsValue);  [CE]  cannot  find  symbol  endEqualsValue  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  type,  endEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(node,  qualifiedName,  origType,  type,  endEqualsValue);	  scope.inferSlot(node,    qualifiedName,    origType,    type,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  endEqualsValue	250	None	replace
762	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());  }  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.   "    +    node.toStringTree());    }    if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  }	  	compilable	  [FE]  IllegalArgumentException  	82	1	add
763	[BUG]  [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());  }  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());  }  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.   "    +    node.toStringTree());    }    if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  }	  	compilable	  [FE]  IllegalArgumentException  	82	1	add
764	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());  }  if(node  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.   "    +    node.toStringTree());    }    if(node  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  }	  	compilable	  [FE]  IllegalArgumentException  	82	1	add
765	[BUG]  [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());  }  if(node  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());  }  if(node  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.   "    +    node.toStringTree());    }    if(node  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  }	  	compilable	  [FE]  IllegalArgumentException  	82	1	add
766	[BUG]  [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());  }  if(node  >=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  }  [CE]  bad  operand  types  for  binary  operator  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());  }  if(node  >=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.   "    +    node.toStringTree());    }    if(node  >=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  	82	None	add
767	[BUG]  [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());  }  If(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  }  [CE]  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());  }  If(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.   "    +    node.toStringTree());    }    If(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  }	  	non-compiled	[CE]  	82	None	add
768	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getString());  }  else  {  scope.inferQualifiedSlot(node,  name,  origType,  type);  }  [CE]  cannot  find  symbol  name  [FE]              UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getString());  }  else  {  scope.inferQualifiedSlot(node,  name,  origType,  type);  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(node.getType()  ==  Token.NAME)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getString());  }  else  {  scope.inferQualifiedSlot(node,  name,  origType,  type);  }	  if(node.getType()    ==    Token.NAME)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getString());    }    else    {    scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    }    	non-compiled	[CE]  cannot  find  symbol  name	42	None	replace
769	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getString());  }  else  {  scope.inferQualifiedSlot(node,  type,  origType);  }  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getString());  }  else  {  scope.inferQualifiedSlot(node,  type,  origType);  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(node.getType()  ==  Token.NAME)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getString());  }  else  {  scope.inferQualifiedSlot(node,  type,  origType);  }	  if(node.getType()    ==    Token.NAME)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getString());    }    else    {    scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    }    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	42	None	replace
770	[BUG]  [BUGGY]  node.getType()  ==  Token.NAME)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getString());  }  [CE]  not  a  statement  [FE]                  UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  node.getType()  ==  Token.NAME)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getString());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	node.getType()  ==  Token.NAME)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getString());  }	  if(node.getType()    ==    Token.NAME)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getString());    }    else    {    scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    }    	non-compiled	[CE]  not  a  statement	42	None	replace
771	[BUG]  [BUGGY]  node.getType()  ==  Token.NAME)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getString());  }  else  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }  [CE]  not  a  statement  [FE]                      UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  node.getType()  ==  Token.NAME)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getString());  }  else  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	node.getType()  ==  Token.NAME)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getString());  }  else  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }	  if(node.getType()    ==    Token.NAME)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getString());    }    else    {    scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    }    	non-compiled	[CE]  not  a  statement	42	None	replace
772	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  does  not  exist:   "  +  node.toStringTree());  Node  cannot  be  refined.  Node  does  not  exist:   "  +  node.toStringTree());  [CE]  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  does  not  exist:   "  +  node.toStringTree());  Node  cannot  be  refined.  Node  does  not  exist:   "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:   "    +    node.toStringTree());    Node  cannot  be  refined.  Node  does  not  exist:   "  +  node.toStringTree());	  	non-compiled	[CE]  	406	None	add
773	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  does  not  exist:   "  +  node.toStringTree());  Node  does  not  exist:   "  +  node.toStringTree());  [CE]  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  does  not  exist:   "  +  node.toStringTree());  Node  does  not  exist:   "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:   "    +    node.toStringTree());    Node  does  not  exist:   "  +  node.toStringTree());	  	non-compiled	[CE]  	406	None	add
774	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  does  not  exist:   "  +  node.toStringTree());  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist:   "  +  node.toStringTree());  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  does  not  exist:   "  +  node.toStringTree());  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist:   "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:   "    +    node.toStringTree());    IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist:   "  +  node.toStringTree());	  	non-compiled	[CE]  cannot  find  symbol	406	None	add
775	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  does  not  exist:   "  +  node.toStringTree());  Node  did  not  exist:   "  +  node.toStringTree());  [CE]  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  does  not  exist:   "  +  node.toStringTree());  Node  did  not  exist:   "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:   "    +    node.toStringTree());    Node  did  not  exist:   "  +  node.toStringTree());	  	non-compiled	[CE]  	406	None	add
776	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  does  not  exist:   "  +  node.toStringTree());  Node  cannot  be  refined.  Node  does  not  exist:   "  +  node.toStringTree());  break;  [CE]  [FE]            IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  does  not  exist:   "  +  node.toStringTree());  Node  cannot  be  refined.  Node  does  not  exist:   "  +  node.toStringTree());  break;  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:   "    +    node.toStringTree());    Node  cannot  be  refined.  Node  does  not  exist:   "  +  node.toStringTree());  break;	  	non-compiled	[CE]  	406	None	add
777	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.getLineno());  [CE]  not  a  statement  [FE]          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.getLineno());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    Throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    	non-compiled	[CE]  not  a  statement	453	None	replace
778	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.getLineno());  [CE]  not  a  statement  [FE]            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.getLineno());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    Throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    	non-compiled	[CE]  not  a  statement	453	None	replace
779	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  can  be  refined. "  +  node.getLineno());  [CE]  not  a  statement  [FE]              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  can  be  refined. "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  can  be  refined. "  +  node.getLineno());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    Throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    	non-compiled	[CE]  not  a  statement	453	None	replace
780	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node. "  +  node.getLineno());  [CE]  not  a  statement  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node. "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node. "  +  node.getLineno());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    Throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    	non-compiled	[CE]  not  a  statement	453	None	replace
781	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  nor   "  +  node.getLineno());  [CE]  not  a  statement  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  nor   "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  nor   "  +  node.getLineno());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    Throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    	non-compiled	[CE]  not  a  statement	453	None	replace
782	[BUG]  [BUGGY]  scope.inferSlot(node,  qualifiedName,  type,  origType,  type);  [CE]  cannot  find  symbol  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferSlot(node,  qualifiedName,  type,  origType,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(node,  qualifiedName,  type,  origType,  type);	  scope.inferSlot(node,    qualifiedName,    value,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol	363	None	replace
783	[BUG]  [BUGGY]  scope.inferSlot(node,  qualifiedName,  resultEqualsValue,  origType,  type);  [CE]  cannot  find  symbol  resultEqualsValue  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferSlot(node,  qualifiedName,  resultEqualsValue,  origType,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(node,  qualifiedName,  resultEqualsValue,  origType,  type);	  scope.inferSlot(node,    qualifiedName,    value,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol  resultEqualsValue	363	None	replace
784	[BUG]  [BUGGY]  scope.inferSlot(node,  qualifiedName,  node,  type,  origType);  [CE]  cannot  find  symbol  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferSlot(node,  qualifiedName,  node,  type,  origType);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(node,  qualifiedName,  node,  type,  origType);	  scope.inferSlot(node,    qualifiedName,    value,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol	363	None	replace
785	[BUG]  [BUGGY]  scope.inferSlot(node,  qualifiedName,  null,  origType,  type);  [CE]  cannot  find  symbol  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferSlot(node,  qualifiedName,  null,  origType,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(node,  qualifiedName,  null,  origType,  type);	  scope.inferSlot(node,    qualifiedName,    value,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol	363	None	replace
786	[BUG]  [BUGGY]  scope.inferSlot(node,  qualifiedName,  this.type,  origType,  type);  [CE]  cannot  find  symbol  type  [FE]                                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferSlot(node,  qualifiedName,  this.type,  origType,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(node,  qualifiedName,  this.type,  origType,  type);	  scope.inferSlot(node,    qualifiedName,    value,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol  type	363	None	replace
787	[BUG]  [BUGGY]  scope.inferSlot(node,  qualifiedName,  resultEqualsValue,  type,  origType,  type);  [CE]  cannot  find  symbol  resultEqualsValue  [FE]                                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferSlot(node,  qualifiedName,  resultEqualsValue,  type,  origType,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(node,  qualifiedName,  resultEqualsValue,  type,  origType,  type);	  scope.inferSlot(node,    qualifiedName,    value,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol  resultEqualsValue	363	None	replace
788	[BUG]  [BUGGY]  scope.inferSlot(node,  qualifiedName,  _value,  origType,  type);  [CE]  cannot  find  symbol  _value  [FE]                                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferSlot(node,  qualifiedName,  _value,  origType,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(node,  qualifiedName,  _value,  origType,  type);	  scope.inferSlot(node,    qualifiedName,    value,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol  _value	363	None	replace
789	[BUG]  [BUGGY]  Node  node  =  scope.getParent(),  type);  [CE]  ';'  expected  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.getParent(),  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getParent(),  type);	  Node    node    =    scope.getParent();    	non-compiled	[CE]  ';'  expected	20	None	replace
790	[BUG]  [BUGGY]  Node  node  =  scope.getNameNode();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.getNameNode();  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getNameNode();	  Node    node    =    scope.getParent();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	20	None	replace
791	[BUG]  [BUGGY]  Node  node  =  type.getParent();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  type.getParent();  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  type.getParent();	  Node    node    =    scope.getParent();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	20	None	replace
792	[BUG]  [BUGGY]  scope.inferQualifiedSlot(qualifiedName,  type,  origType,  node);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(qualifiedName,  type,  origType,  node);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(qualifiedName,  type,  origType,  node);	  scope.inferQualifiedSlot(node,    type,    origType,    qualifiedName);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	230	None	replace
793	[BUG]  [BUGGY]  scope.inferQualifiedSlot(type,  node,  origType,  qualifiedName);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(type,  node,  origType,  qualifiedName);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(type,  node,  origType,  qualifiedName);	  scope.inferQualifiedSlot(node,    type,    origType,    qualifiedName);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	230	None	replace
794	[BUG]  [BUGGY]  scope.inferQualifiedSlot(qualifiedName,  origType,  type);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(qualifiedName,  origType,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(qualifiedName,  origType,  type);	  scope.inferQualifiedSlot(node,    type,    origType,    qualifiedName);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	230	None	replace
795	[BUG]  [BUGGY]  scope.inferQualifiedSlot(qualifiedName,  type,  node);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(qualifiedName,  type,  node);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(qualifiedName,  type,  node);	  scope.inferQualifiedSlot(node,    type,    origType,    qualifiedName);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	230	None	replace
796	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  qualifiedName,  type,  type);  [CE]  variable  qualifiedName  might  not  have  been  initialized  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  qualifiedName,  type,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  qualifiedName,  type,  type);	  scope.inferQualifiedSlot(node,    type,    origType,    qualifiedName);    	non-compiled	[CE]  variable  qualifiedName  might  not  have  been  initialized	230	None	replace
797	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getClass(),  type);  [CE]  not  a  statement  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getClass(),  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getClass(),  type);	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getClass());    	non-compiled	[CE]  not  a  statement	142	None	replace
798	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getClass(),  qualifiedName);  [CE]  not  a  statement  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getClass(),  qualifiedName);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getClass(),  qualifiedName);	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getClass());    	non-compiled	[CE]  not  a  statement	142	None	replace
799	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined:  node.   "  +  node.getClass());  [CE]  not  a  statement  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined:  node.   "  +  node.getClass());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined:  node.   "  +  node.getClass());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getClass());    	non-compiled	[CE]  not  a  statement	142	None	replace
800	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getClass(),  resultEqualsValue);  [CE]  not  a  statement  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getClass(),  resultEqualsValue);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getClass(),  resultEqualsValue);	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getClass());    	non-compiled	[CE]  not  a  statement	142	None	replace
801	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getClass(),  scope);  [CE]  not  a  statement  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getClass(),  scope);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getClass(),  scope);	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getClass());    	non-compiled	[CE]  not  a  statement	142	None	replace
802	[BUG]  [BUGGY]  SimpleNodeTraversal.traverse(compiler,  node,  type,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  SimpleNodeTraversal.traverse(compiler,  node,  type,  resultEqualsValue);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	SimpleNodeTraversal.traverse(compiler,  node,  type,  resultEqualsValue);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    SimpleNodeTraversal.traverse(compiler,    node,    type,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	308	None	replace
803	[BUG]  [BUGGY]  FlowScope.traverse(compiler,  node,  type,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  FlowScope.traverse(compiler,  node,  type,  resultEqualsValue);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	FlowScope.traverse(compiler,  node,  type,  resultEqualsValue);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    SimpleNodeTraversal.traverse(compiler,    node,    type,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	308	None	replace
804	[BUG]  [BUGGY]  ParserNodeTraversal.traverse(compiler,  node,  type,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  ParserNodeTraversal.traverse(compiler,  node,  type,  resultEqualsValue);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	ParserNodeTraversal.traverse(compiler,  node,  type,  resultEqualsValue);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    SimpleNodeTraversal.traverse(compiler,    node,    type,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	308	None	replace
805	[BUG]  [BUGGY]  SimpleNodeTraversal.traverse(compiler,  node,  resultEqualsValue,  type);  [CE]  cannot  find  symbol  compiler  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  SimpleNodeTraversal.traverse(compiler,  node,  resultEqualsValue,  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	SimpleNodeTraversal.traverse(compiler,  node,  resultEqualsValue,  type);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    SimpleNodeTraversal.traverse(compiler,    node,    type,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	308	None	replace
806	[BUG]  [BUGGY]  State.traverse(compiler,  node,  type,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  State.traverse(compiler,  node,  type,  resultEqualsValue);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	State.traverse(compiler,  node,  type,  resultEqualsValue);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    SimpleNodeTraversal.traverse(compiler,    node,    type,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	308	None	replace
807	[BUG]  [BUGGY]  Traverse.traverse(compiler,  node,  type,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Traverse.traverse(compiler,  node,  type,  resultEqualsValue);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Traverse.traverse(compiler,  node,  type,  resultEqualsValue);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    SimpleNodeTraversal.traverse(compiler,    node,    type,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	308	None	replace
808	[BUG]  [BUGGY]  FlowScope  node  =  scope.traverse(compiler,  node,  type,  resultEqualsValue);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  FlowScope  node  =  scope.traverse(compiler,  node,  type,  resultEqualsValue);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	FlowScope  node  =  scope.traverse(compiler,  node,  type,  resultEqualsValue);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    SimpleNodeTraversal.traverse(compiler,    node,    type,    resultEqualsValue);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	308	None	replace
809	[BUG]  [BUGGY]  scope.inferQualifiedSlot(qualifiedName,  node,  origType,  type);  break;  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(qualifiedName,  node,  origType,  type);  break;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(qualifiedName,  node,  origType,  type);  break;	  scope.inferQualifiedSlot(value,    node,    origType,    type);    break;    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	213	None	replace
810	[BUG]  [BUGGY]  scope.inferQualifiedSlot(type,  node,  origType,  type);  break;  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(type,  node,  origType,  type);  break;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(type,  node,  origType,  type);  break;	  scope.inferQualifiedSlot(value,    node,    origType,    type);    break;    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	213	None	replace
811	[BUG]  [BUGGY]  scope.inferQualifiedSlot(value,  node,  qualifiedName,  origType,  type);  break;  [CE]  cannot  find  symbol  value  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(value,  node,  qualifiedName,  origType,  type);  break;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(value,  node,  qualifiedName,  origType,  type);  break;	  scope.inferQualifiedSlot(value,    node,    origType,    type);    break;    	non-compiled	[CE]  cannot  find  symbol  value	213	None	replace
812	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  node,  origType,  type);  break;  [CE]  cannot  find  symbol  name  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(name,  node,  origType,  type);  break;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(name,  node,  origType,  type);  break;	  scope.inferQualifiedSlot(value,    node,    origType,    type);    break;    	non-compiled	[CE]  cannot  find  symbol  name	213	None	replace
813	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  }  else  {  scope.inferQualifiedSlot(node,  name,  origType,  type);  }  [CE]  cannot  find  symbol  name  [FE]            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  }  else  {  scope.inferQualifiedSlot(node,  name,  origType,  type);  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  }  else  {  scope.inferQualifiedSlot(node,  name,  origType,  type);  }	  if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.toStringTree());    }    else    {    scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    }    	non-compiled	[CE]  cannot  find  symbol  name	242	None	replace
814	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  }  else  {  scope.inferQualifiedSlot(node,  type,  origType);  }  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  }  else  {  scope.inferQualifiedSlot(node,  type,  origType);  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  }  else  {  scope.inferQualifiedSlot(node,  type,  origType);  }	  if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.toStringTree());    }    else    {    scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    }    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	242	None	replace
815	[BUG]  [BUGGY]  scope.inferQualifiedSlot(type,  node,  qualifiedName);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(type,  node,  qualifiedName);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(type,  node,  qualifiedName);	  scope.inferQualifiedSlot(qualifiedName,    node,    type);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	116	None	replace
816	[BUG]  [BUGGY]  scope.inferQualifiedSlot(qualifiedName,  node,  type,  resultEqualsValue);  [CE]  cannot  find  symbol  resultEqualsValue  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(qualifiedName,  node,  type,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(qualifiedName,  node,  type,  resultEqualsValue);	  scope.inferQualifiedSlot(qualifiedName,    node,    type);    	non-compiled	[CE]  cannot  find  symbol  resultEqualsValue	116	None	replace
817	[BUG]  [BUGGY]  scope.inferQualifiedSlot(value,  node,  type);  [CE]  cannot  find  symbol  value  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(value,  node,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(value,  node,  type);	  scope.inferQualifiedSlot(qualifiedName,    node,    type);    	non-compiled	[CE]  cannot  find  symbol  value	116	None	replace
818	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  node,  type);  [CE]  cannot  find  symbol  name  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(name,  node,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(name,  node,  type);	  scope.inferQualifiedSlot(qualifiedName,    node,    type);    	non-compiled	[CE]  cannot  find  symbol  name	116	None	replace
819	[BUG]  [BUGGY]  scope.inferQualifiedSlot(qualifiedName,  node,  type,  value);  [CE]  cannot  find  symbol  value  [FE]                                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(qualifiedName,  node,  type,  value);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(qualifiedName,  node,  type,  value);	  scope.inferQualifiedSlot(qualifiedName,    node,    type);    	non-compiled	[CE]  cannot  find  symbol  value	116	None	replace
820	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  true);  [CE]  cannot  find  symbol  compiler  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  true);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope,  true);	  NodeTraversal.traverse(compiler,    node,    scope,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	219	None	replace
821	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  false,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  false,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope,  false,  resultEqualsValue);	  NodeTraversal.traverse(compiler,    node,    scope,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	219	None	replace
822	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  FlowScope.UNKNOWN_TYPE,  false);  [CE]  cannot  find  symbol  compiler  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  FlowScope.UNKNOWN_TYPE,  false);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  FlowScope.UNKNOWN_TYPE,  false);	  NodeTraversal.traverse(compiler,    node,    scope,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	219	None	replace
823	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  resultEqualsValue,  false);  [CE]  cannot  find  symbol  compiler  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  resultEqualsValue,  false);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope,  resultEqualsValue,  false);	  NodeTraversal.traverse(compiler,    node,    scope,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	219	None	replace
824	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  false);  [CE]  cannot  find  symbol  compiler  [FE]                                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  false);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  false);	  NodeTraversal.traverse(compiler,    node,    scope,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	219	None	replace
825	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  scope,  false);  [CE]  cannot  find  symbol  compiler  [FE]                                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  scope,  false);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  scope,  false);	  NodeTraversal.traverse(compiler,    node,    scope,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	219	None	replace
826	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  node:   "  +  node.getQualifiedName());  Node  cannot  be  refined.  node:   "  +  node.getQualifiedName());  [CE]  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  node:   "  +  node.getQualifiedName());  Node  cannot  be  refined.  node:   "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.getQualifiedName());    Node  cannot  be  refined.  node:   "  +  node.getQualifiedName());	  	non-compiled	[CE]  	77	None	add
827	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  node:   "  +  node.getQualifiedName());  IllegalArgumentException( "Node  cannot  be  refined.  node:   "  +  node.getQualifiedName());  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  node:   "  +  node.getQualifiedName());  IllegalArgumentException( "Node  cannot  be  refined.  node:   "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.getQualifiedName());    IllegalArgumentException( "Node  cannot  be  refined.  node:   "  +  node.getQualifiedName());	  	non-compiled	[CE]  cannot  find  symbol	77	None	add
828	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  node:   "  +  node.getQualifiedName());  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node:   "  +  node.getQualifiedName());  [CE]  not  a  statement  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  node:   "  +  node.getQualifiedName());  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node:   "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.getQualifiedName());    Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node:   "  +  node.getQualifiedName());	  	non-compiled	[CE]  not  a  statement	77	None	add
829	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  node:   "  +  node.getQualifiedName());  Node  cannot  be  refined.  node:   "  +  node.getQualifiedName());  break;  [CE]  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  node:   "  +  node.getQualifiedName());  Node  cannot  be  refined.  node:   "  +  node.getQualifiedName());  break;  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.getQualifiedName());    Node  cannot  be  refined.  node:   "  +  node.getQualifiedName());  break;	  	non-compiled	[CE]  	77	None	add
830	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  scope,  value);  [CE]  cannot  find  symbol  compiler  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  scope,  value);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  scope,  value);	  NodeTraversal.traverse(compiler,    node,    this,    value);    	non-compiled	[CE]  cannot  find  symbol  compiler	359	None	replace
831	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  resultEqualsValue,  value);  [CE]  cannot  find  symbol  compiler  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  resultEqualsValue,  value);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  resultEqualsValue,  value);	  NodeTraversal.traverse(compiler,    node,    this,    value);    	non-compiled	[CE]  cannot  find  symbol  compiler	359	None	replace
832	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  this,  value);  [CE]  cannot  find  symbol  compiler  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  this,  value);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope,  this,  value);	  NodeTraversal.traverse(compiler,    node,    this,    value);    	non-compiled	[CE]  cannot  find  symbol  compiler	359	None	replace
833	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  type,  value);  [CE]  cannot  find  symbol  compiler  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  type,  value);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  type,  value);	  NodeTraversal.traverse(compiler,    node,    this,    value);    	non-compiled	[CE]  cannot  find  symbol  compiler	359	None	replace
834	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  qualifiedName);  [CE]  cannot  find  symbol  compiler  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  qualifiedName);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  qualifiedName);	  NodeTraversal.traverse(compiler,    node,    this,    value);    	non-compiled	[CE]  cannot  find  symbol  compiler	359	None	replace
835	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node,  scope.getLocalName());  [CE]  cannot  find  symbol  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node,  scope.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node,  scope.getLocalName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	201	None	replace
836	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLocalName(),  type);  [CE]  cannot  find  symbol  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLocalName(),  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLocalName(),  type);	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	201	None	replace
837	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName(),  type);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,JSType)  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName(),  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName(),  type);	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getQualifiedName());    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,JSType)	73	None	replace
838	[BUG]  [BUGGY]  Node  cannot  be  refined.   "  +  node.getString();  [CE]  [FE]                UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  cannot  be  refined.   "  +  node.getString();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  cannot  be  refined.   "  +  node.getString();	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    Node    cannot    be    refined.    n       "    +    node.getString();    	non-compiled	[CE]  	336	None	replace
839	[BUG]  [BUGGY]  Node  cannot  be  refined.  n   "  +  node.getString();  [CE]  [FE]                  UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  cannot  be  refined.  n   "  +  node.getString();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  cannot  be  refined.  n   "  +  node.getString();	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    Node    cannot    be    refined.    n       "    +    node.getString();    	non-compiled	[CE]  	336	None	replace
840	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getString());  Node  cannot  be  refined.   "  +  node.getString();  [CE]  [FE]                    UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getString());  Node  cannot  be  refined.   "  +  node.getString();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getString());  Node  cannot  be  refined.   "  +  node.getString();	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    Node    cannot    be    refined.    n       "    +    node.getString();    	non-compiled	[CE]  	336	None	replace
841	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]                      UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.getString());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    Node    cannot    be    refined.    n       "    +    node.getString();    	compilable	  [FE]  UnsupportedOperationException  	336	1	replace
842	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.getString());  [FE]  UnsupportedOperationException  [FE]                      UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.getString());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    Node    cannot    be    refined.    n       "    +    node.getString();    	compilable	  [FE]  UnsupportedOperationException  	336	1	replace
843	[BUG]  [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getString());  Node  cannot  be  refined.   "  +  node.getString();  [CE]  [FE]                        UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getString());  Node  cannot  be  refined.   "  +  node.getString();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getString());  Node  cannot  be  refined.   "  +  node.getString();	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    Node    cannot    be    refined.    n       "    +    node.getString();    	non-compiled	[CE]  	336	None	replace
844	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined.  Node  defined  with  qualifiedName,  node.toStringTree(), "  +  node.toStringTree());  [CE]  cannot  find  symbol  DebugLog  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning( "Node  cannot  be  refined.  Node  defined  with  qualifiedName,  node.toStringTree(), "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined.  Node  defined  with  qualifiedName,  node.toStringTree(), "  +  node.toStringTree());	  DebugLog.warning(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree(),   "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol  DebugLog	292	None	replace
845	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(), ",  +  node.toStringTree());  [CE]  bad  operand  type  String  for  unary  operator  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(), ",  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(), ",  +  node.toStringTree());	  DebugLog.warning(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree(),   "    +    node.toStringTree());    	non-compiled	[CE]  bad  operand  type  String  for  unary  operator  	292	None	replace
846	[BUG]  [BUGGY]  DebugLog.warning(type, "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(), "  +  node.toStringTree());  [CE]  cannot  find  symbol  DebugLog  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning(type, "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(), "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning(type, "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(), "  +  node.toStringTree());	  DebugLog.warning(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree(),   "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol  DebugLog	292	None	replace
847	[BUG]  [BUGGY]  DebugLog.warning(scope, "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(), "  +  node.toStringTree());  [CE]  cannot  find  symbol  DebugLog  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning(scope, "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(), "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning(scope, "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(), "  +  node.toStringTree());	  DebugLog.warning(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree(),   "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol  DebugLog	292	None	replace
848	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined.  Node  defined  with  qualifiedName.toStringTree(), "  +  node.toStringTree());  [CE]  cannot  find  symbol  DebugLog  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning( "Node  cannot  be  refined.  Node  defined  with  qualifiedName.toStringTree(), "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined.  Node  defined  with  qualifiedName.toStringTree(), "  +  node.toStringTree());	  DebugLog.warning(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree(),   "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol  DebugLog	292	None	replace
849	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  scope,  this);  [CE]  cannot  find  symbol  compiler  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  scope,  this);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  qualifiedName,  scope,  this);	  NodeTraversal.traverse(compiler,    node,    qualifiedName,    type,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	151	None	replace
850	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  origType,  this);  [CE]  cannot  find  symbol  compiler  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  origType,  this);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  qualifiedName,  origType,  this);	  NodeTraversal.traverse(compiler,    node,    qualifiedName,    type,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	151	None	replace
851	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  qualifiedName,  this);  [CE]  cannot  find  symbol  compiler  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  qualifiedName,  this);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  type,  qualifiedName,  this);	  NodeTraversal.traverse(compiler,    node,    qualifiedName,    type,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	151	None	replace
852	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  type,  this);  [CE]  cannot  find  symbol  compiler  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  type,  this);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  type,  this);	  NodeTraversal.traverse(compiler,    node,    qualifiedName,    type,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	151	None	replace
853	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  qualifiedName);  [CE]  cannot  find  symbol  compiler  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  qualifiedName);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  type,  qualifiedName);	  NodeTraversal.traverse(compiler,    node,    qualifiedName,    type,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	151	None	replace
854	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  sourceName,  type,  this);  [CE]  cannot  find  symbol  compiler  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  sourceName,  type,  this);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  sourceName,  type,  this);	  NodeTraversal.traverse(compiler,    node,    qualifiedName,    type,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	151	None	replace
855	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  type,  this,  scope);  [CE]  cannot  find  symbol  compiler  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  type,  this,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  qualifiedName,  type,  this,  scope);	  NodeTraversal.traverse(compiler,    node,    qualifiedName,    type,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	151	None	replace
856	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  DEFAULT_TYPE,  qualifiedName,  type,  this);  [CE]  cannot  find  symbol  compiler  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  DEFAULT_TYPE,  qualifiedName,  type,  this);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  DEFAULT_TYPE,  qualifiedName,  type,  this);	  NodeTraversal.traverse(compiler,    node,    qualifiedName,    type,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	151	None	replace
857	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(JSTypeNative.UNKNOWN_TYPE,  scope);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getNativeType(JSTypeNative.UNKNOWN_TYPE,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(JSTypeNative.UNKNOWN_TYPE,  scope);	  Node    node    =    typeRegistry.getNativeType(JSTypeNative.UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	176	None	replace
858	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(JSTypeNative.UNKNOWN_TYPE,  qualifiedName);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getNativeType(JSTypeNative.UNKNOWN_TYPE,  qualifiedName);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(JSTypeNative.UNKNOWN_TYPE,  qualifiedName);	  Node    node    =    typeRegistry.getNativeType(JSTypeNative.UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	176	None	replace
859	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(JSTypeNative.UNKNOWN_TYPE),  scope);  [CE]  ';'  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getNativeType(JSTypeNative.UNKNOWN_TYPE),  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(JSTypeNative.UNKNOWN_TYPE),  scope);	  Node    node    =    typeRegistry.getNativeType(JSTypeNative.UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	176	None	replace
860	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(JSTypeNative.UNKNOWN_TYPE,  true);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getNativeType(JSTypeNative.UNKNOWN_TYPE,  true);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(JSTypeNative.UNKNOWN_TYPE,  true);	  Node    node    =    typeRegistry.getNativeType(JSTypeNative.UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	176	None	replace
861	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(JSTypeNative.UNKNOWN_TYPE,  null);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getNativeType(JSTypeNative.UNKNOWN_TYPE,  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(JSTypeNative.UNKNOWN_TYPE,  null);	  Node    node    =    typeRegistry.getNativeType(JSTypeNative.UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	176	None	replace
862	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(JSTypeNative.UNKNOWN_TYPE)+  1;  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getNativeType(JSTypeNative.UNKNOWN_TYPE)+  1;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(JSTypeNative.UNKNOWN_TYPE)+  1;	  Node    node    =    typeRegistry.getNativeType(JSTypeNative.UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	176	None	replace
863	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(JSTypeNative.UNKNOWN_TYPE,  false);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getNativeType(JSTypeNative.UNKNOWN_TYPE,  false);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(JSTypeNative.UNKNOWN_TYPE,  false);	  Node    node    =    typeRegistry.getNativeType(JSTypeNative.UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	176	None	replace
864	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getString());  Node  has  been  refined.   "  +  node.getString());  [CE]  [FE]    UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getString());  Node  has  been  refined.   "  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    has    been    refined.   "    +    node.getString());    Node  has  been  refined.   "  +  node.getString());	  	non-compiled	[CE]  	459	None	add
865	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getString());  Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getString());  [CE]  [FE]      UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getString());  Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    has    been    refined.   "    +    node.getString());    Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getString());	  	non-compiled	[CE]  	459	None	add
866	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getString());  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]        UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getString());  Node  node  =  node.getFirstChild();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    has    been    refined.   "    +    node.getString());    Node  node  =  node.getFirstChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	459	None	add
867	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getString());  Node  parent  =  node.getParent();  [CE]  unreachable  statement  [FE]          UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getString());  Node  parent  =  node.getParent();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    has    been    refined.   "    +    node.getString());    Node  parent  =  node.getParent();	  	non-compiled	[CE]  unreachable  statement	459	None	add
868	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getString());  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]            UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getString());  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    has    been    refined.   "    +    node.getString());    Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	459	None	add
869	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getString());  Node  node  =  node.getJSType();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]              UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getString());  Node  node  =  node.getJSType();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    has    been    refined.   "    +    node.getString());    Node  node  =  node.getJSType();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	459	None	add
870	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getString());  Node  parentNode  =  node.getParent();  [CE]  unreachable  statement  [FE]                UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getString());  Node  parentNode  =  node.getParent();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    has    been    refined.   "    +    node.getString());    Node  parentNode  =  node.getParent();	  	non-compiled	[CE]  unreachable  statement	459	None	add
871	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getString());  Node  node  =  node.getLastChild();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                  UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getString());  Node  node  =  node.getLastChild();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    has    been    refined.   "    +    node.getString());    Node  node  =  node.getLastChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	459	None	add
872	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getString());  Node  parentNode  =  node.getParent();  Preconditions.checkNotNull(parentNode);  [CE]  unreachable  statement  [FE]                    UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getString());  Node  parentNode  =  node.getParent();  Preconditions.checkNotNull(parentNode);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    has    been    refined.   "    +    node.getString());    Node  parentNode  =  node.getParent();  Preconditions.checkNotNull(parentNode);	  	non-compiled	[CE]  unreachable  statement	459	None	add
873	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getString());  Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getString());  break;  [CE]  [FE]                      UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getString());  Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getString());  break;  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    has    been    refined.   "    +    node.getString());    Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getString());  break;	  	non-compiled	[CE]  	459	None	add
874	[BUG]  [BUGGY]  Node  node  =  n.getLastChild();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  n.getLastChild();  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  n.getLastChild();	  Node    node    =    n.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	106	None	replace
875	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getFirstChild();  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getFirstChild();	  Node    node    =    n.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	106	None	replace
876	[BUG]  [BUGGY]  Node  node  =  scope.inferQualifiedSlot(qualifiedName,  type);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.inferQualifiedSlot(qualifiedName,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.inferQualifiedSlot(qualifiedName,  type);	  Node    node    =    n.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	106	None	replace
877	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  does  not  exist: "  +  node.toStringTree());  [CE]  not  a  statement  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  does  not  exist: "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  does  not  exist: "  +  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	438	None	replace
878	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  does  not  exist: "  +  node.getLineno());  [CE]  not  a  statement  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  does  not  exist: "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  does  not  exist: "  +  node.getLineno());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	438	None	replace
879	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.getLineno());  [CE]  not  a  statement  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.getLineno());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	438	None	replace
880	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  does  not  exist: "  +  node.getLocalName());  [CE]  not  a  statement  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  does  not  exist: "  +  node.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  does  not  exist: "  +  node.getLocalName());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	438	None	replace
881	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.getLocalName());  [CE]  not  a  statement  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.getLocalName());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	438	None	replace
882	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node,  type.toStringTree());  [CE]  not  a  statement  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node,  type.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node,  type.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	438	None	replace
883	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  does  not  exist: "  +  node.getMessage());  [CE]  not  a  statement  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  does  not  exist: "  +  node.getMessage());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  does  not  exist: "  +  node.getMessage());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	438	None	replace
884	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.getQualifiedName());  [CE]  not  a  statement  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.getQualifiedName());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	438	None	replace
885	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getMessage(),  type);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getMessage(),  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getMessage(),  type);	  Throwables.throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getMessage());    	non-compiled	[CE]  <identifier>  expected	259	None	replace
886	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined: "  +  node.getMessage());  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined: "  +  node.getMessage());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined: "  +  node.getMessage());	  Throwables.throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getMessage());    	non-compiled	[CE]  <identifier>  expected	259	None	replace
887	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getClass());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getClass());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getClass());    	compilable	  [FE]  IllegalArgumentException  	266	1	replace
888	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getClass());  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getClass());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getClass());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getClass());    	compilable	  [FE]  IllegalArgumentException  	266	1	replace
889	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getClass(),  type);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,JSType)  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getClass(),  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getClass(),  type);	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getClass());    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,JSType)	266	None	replace
890	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getClass(),  qualifiedName);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,String)  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getClass(),  qualifiedName);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getClass(),  qualifiedName);	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getClass());    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,String)	266	None	replace
891	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(node.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  IllegalStateException  	484	1	replace
892	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.getType()  ==  Token.EXPR_RESULT);  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(node.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  IllegalStateException  	484	1	replace
893	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.getType()  ==  Token.NAME);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.getType()  ==  Token.NAME);	  Preconditions.checkState(node.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  IllegalStateException  	484	1	replace
894	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.getType()  ==  Token.NAME);  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.getType()  ==  Token.NAME);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.getType()  ==  Token.NAME);	  Preconditions.checkState(node.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  IllegalStateException  	484	1	replace
895	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.getType()  ==  Token.GETPROP);	  Preconditions.checkState(node.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  IllegalStateException  	484	1	replace
896	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.getType()  ==  Token.GETPROP);  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  node.getType()  ==  Token.GETPROP);	  Preconditions.checkState(node.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  IllegalStateException  	484	1	replace
897	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(node));  [CE]  cannot  find  symbol  NodeUtil  [FE]              IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(node));  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(node.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(node));	  Preconditions.checkState(node.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  NodeUtil	484	None	replace
898	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]                IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.FUNCTION);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(scope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(node.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol	484	None	replace
899	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                  IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	Preconditions.checkState(node.getType()  ==  Token.FUNCTION,  scope);	  Preconditions.checkState(node.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  IllegalStateException  	484	1	replace
900	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION,  scope);  [FE]  IllegalStateException  [FE]                  IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(node.getType()  ==  Token.FUNCTION,  scope);	  Preconditions.checkState(node.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  IllegalStateException  	484	1	replace
901	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  IllegalStateException  	481	1	add
902	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()  ==  Token.NAME);	  	compilable	  [FE]  IllegalStateException  	481	1	add
903	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getJSType();  Preconditions.checkState(node.getType()  ==  Token.NAME);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]      IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getJSType();  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME);    Node  node  =  node.getJSType();  Preconditions.checkState(node.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	481	None	add
904	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]        IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME);    Node  node  =  node.getFirstChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	481	None	add
905	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getLastChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]          IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getLastChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME);    Node  node  =  node.getLastChild();  Preconditions.checkState(node.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	481	None	add
906	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getJSType();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]            IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getJSType();  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME);    Node  node  =  node.getJSType();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	481	None	add
907	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getJSParent();  Preconditions.checkState(node.getType()  ==  Token.NAME);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]              IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getJSParent();  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME);    Node  node  =  node.getJSParent();  Preconditions.checkState(node.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	481	None	add
908	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Node  node  =  node.getFirstChild();  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME);    Node  node  =  node.getFirstChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	481	None	add
909	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Context.checkState(node.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  Context  [FE]                  IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Context.checkState(node.getType()  ==  Token.NAME);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME);    Context.checkState(node.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  Context	481	None	add
910	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(type.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]                    IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(type.getType()  ==  Token.NAME);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(type.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol	481	None	add
911	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                      IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);	  	compilable	  [FE]  IllegalStateException  	481	1	add
912	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [FE]  IllegalStateException  [FE]                      IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  Preconditions.checkState(node.getType()!=  Token.NAME);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(node.getType()    ==    Token.NAME);    Preconditions.checkState(node.getType()!=  Token.NAME);	  	compilable	  [FE]  IllegalStateException  	481	1	add
913	[BUG]  [BUGGY]  scope.inferSlot(node,  qualifiedName,  type,  origType,  resultEqualsValue);  [CE]  cannot  find  symbol  resultEqualsValue  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferSlot(node,  qualifiedName,  type,  origType,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(node,  qualifiedName,  type,  origType,  resultEqualsValue);	  scope.inferSlot(node,    qualifiedName,    type,    origType);    	non-compiled	[CE]  cannot  find  symbol  resultEqualsValue	252	None	replace
914	[BUG]  [BUGGY]  scope.inferSlot(node,  name,  type,  origType);  [CE]  cannot  find  symbol  name  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferSlot(node,  name,  type,  origType);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(node,  name,  type,  origType);	  scope.inferSlot(node,    qualifiedName,    type,    origType);    	non-compiled	[CE]  cannot  find  symbol  name	252	None	replace
915	[BUG]  [BUGGY]  scope.inferSlot(node,  resultEqualsValue,  type,  origType);  [CE]  cannot  find  symbol  resultEqualsValue  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferSlot(node,  resultEqualsValue,  type,  origType);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(node,  resultEqualsValue,  type,  origType);	  scope.inferSlot(node,    qualifiedName,    type,    origType);    	non-compiled	[CE]  cannot  find  symbol  resultEqualsValue	252	None	replace
916	[BUG]  [BUGGY]  scope.inferSlot(node,  qualifiedName,  type,  resultEqualsValue);  [CE]  cannot  find  symbol  resultEqualsValue  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferSlot(node,  qualifiedName,  type,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(node,  qualifiedName,  type,  resultEqualsValue);	  scope.inferSlot(node,    qualifiedName,    type,    origType);    	non-compiled	[CE]  cannot  find  symbol  resultEqualsValue	252	None	replace
917	[BUG]  [BUGGY]  scope.inferSlot(node,  type,  qualifiedName);  [CE]  cannot  find  symbol  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferSlot(node,  type,  qualifiedName);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(node,  type,  qualifiedName);	  scope.inferSlot(node,    qualifiedName,    type,    origType);    	non-compiled	[CE]  cannot  find  symbol	252	None	replace
918	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree());  }  else  {  scope.inferQualifiedSlot(node,  name,  origType,  type);  }  [CE]  cannot  find  symbol  name  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree());  }  else  {  scope.inferQualifiedSlot(node,  name,  origType,  type);  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(node.getType()  ==  Token.NAME)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree());  }  else  {  scope.inferQualifiedSlot(node,  name,  origType,  type);  }	  if(node.getType()    ==    Token.NAME)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.toStringTree());    }    else    {    scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    }    	non-compiled	[CE]  cannot  find  symbol  name	47	None	replace
919	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  defined  for  type: "  +  node.toStringTree());  [CE]  not  a  statement  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  defined  for  type: "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  defined  for  type: "  +  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    for    type:   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	435	None	replace
920	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.getQualifiedName());  [CE]  not  a  statement  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.getQualifiedName());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    for    type:   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	435	None	replace
921	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.getLocalName());  [CE]  not  a  statement  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.getLocalName());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    for    type:   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	435	None	replace
922	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.getName());  [CE]  not  a  statement  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.getName());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    for    type:   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	435	None	replace
923	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  defined  for  type: "  +  node.getQualifiedName());  [CE]  not  a  statement  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  defined  for  type: "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  defined  for  type: "  +  node.getQualifiedName());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    for    type:   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	435	None	replace
924	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  defined  for  type: "  +  node.getJSType());  [CE]  not  a  statement  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  defined  for  type: "  +  node.getJSType());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  defined  for  type: "  +  node.getJSType());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    for    type:   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	435	None	replace
925	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.getClass());  [CE]  not  a  statement  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.getClass());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.getClass());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    for    type:   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	435	None	replace
926	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.getLineno());  [CE]  not  a  statement  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.getLineno());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    for    type:   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	435	None	replace
927	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.getLineno());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:   "    +    node.toStringTree());    	compilable	  [FE]  IllegalArgumentException  	407	1	replace
928	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.getLineno());  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.getLineno());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:   "    +    node.toStringTree());    	compilable	  [FE]  IllegalArgumentException  	407	1	replace
929	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.toStringTree());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:   "    +    node.toStringTree());    	compilable	  [FE]  IllegalArgumentException  	407	1	replace
930	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.toStringTree());  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.toStringTree());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:   "    +    node.toStringTree());    	compilable	  [FE]  IllegalArgumentException  	407	1	replace
931	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:   "    +    node.toStringTree());    	compilable	  [FE]  IllegalArgumentException  	407	1	replace
932	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.getQualifiedName());  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:   "    +    node.toStringTree());    	compilable	  [FE]  IllegalArgumentException  	407	1	replace
933	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.getClass());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.getClass());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:   "    +    node.toStringTree());    	compilable	  [FE]  IllegalArgumentException  	407	1	replace
934	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.getClass());  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.getClass());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.getClass());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:   "    +    node.toStringTree());    	compilable	  [FE]  IllegalArgumentException  	407	1	replace
935	[BUG]  [BUGGY]  scope.inferSlot(resultEqualsValue,  node,  qualifiedName,  origType,  type);  [CE]  cannot  find  symbol  resultEqualsValue  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferSlot(resultEqualsValue,  node,  qualifiedName,  origType,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(resultEqualsValue,  node,  qualifiedName,  origType,  type);	  scope.inferSlot(value,    node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol  resultEqualsValue	361	None	replace
936	[BUG]  [BUGGY]  scope.inferSlot(origType,  node,  qualifiedName,  origType,  type);  [CE]  cannot  find  symbol  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferSlot(origType,  node,  qualifiedName,  origType,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(origType,  node,  qualifiedName,  origType,  type);	  scope.inferSlot(value,    node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol	361	None	replace
937	[BUG]  [BUGGY]  scope.inferSlot(type,  node,  qualifiedName,  origType,  type);  [CE]  cannot  find  symbol  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferSlot(type,  node,  qualifiedName,  origType,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(type,  node,  qualifiedName,  origType,  type);	  scope.inferSlot(value,    node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol	361	None	replace
938	[BUG]  [BUGGY]  scope.inferSlot(scope,  node,  qualifiedName,  origType,  type);  [CE]  cannot  find  symbol  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferSlot(scope,  node,  qualifiedName,  origType,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(scope,  node,  qualifiedName,  origType,  type);	  scope.inferSlot(value,    node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol	361	None	replace
939	[BUG]  [BUGGY]  scope.inferSlot(name,  node,  qualifiedName,  origType,  type);  [CE]  cannot  find  symbol  name  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferSlot(name,  node,  qualifiedName,  origType,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(name,  node,  qualifiedName,  origType,  type);	  scope.inferSlot(value,    node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol  name	361	None	replace
940	[BUG]  [BUGGY]  scope.inferSlot(qualifiedName,  node,  origType,  type);  [CE]  cannot  find  symbol  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferSlot(qualifiedName,  node,  origType,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(qualifiedName,  node,  origType,  type);	  scope.inferSlot(value,    node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol	361	None	replace
941	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  origType,  false);  [CE]  cannot  find  symbol  compiler  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  origType,  false);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  qualifiedName,  origType,  false);	  NodeTraversal.traverse(compiler,    node,    origType,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	222	None	replace
942	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  origType,  true);  [CE]  cannot  find  symbol  compiler  [FE]                                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  origType,  true);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  origType,  true);	  NodeTraversal.traverse(compiler,    node,    origType,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	222	None	replace
943	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  type,  origType,  false);  [CE]  cannot  find  symbol  compiler  [FE]                                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  type,  origType,  false);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  type,  origType,  false);	  NodeTraversal.traverse(compiler,    node,    origType,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	222	None	replace
944	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  scope,  origType,  false);  [CE]  cannot  find  symbol  compiler  [FE]                                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  scope,  origType,  false);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  scope,  origType,  false);	  NodeTraversal.traverse(compiler,    node,    origType,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	222	None	replace
945	[BUG]  [BUGGY]  Preconditions.checkNotNull(qualifiedName);  Preconditions.checkArgument(type  ==  null);  [CE]  variable  qualifiedName  might  not  have  been  initialized  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkNotNull(qualifiedName);  Preconditions.checkArgument(type  ==  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkNotNull(qualifiedName);  Preconditions.checkArgument(type  ==  null);	          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type    ==    null);    	non-compiled	[CE]  variable  qualifiedName  might  not  have  been  initialized	489	None	replace
946	[BUG]  [BUGGY]  Preconditions.checkNotNull(qualifiedName);  Preconditions.checkArgument(type!=  null);  [CE]  variable  qualifiedName  might  not  have  been  initialized  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkNotNull(qualifiedName);  Preconditions.checkArgument(type!=  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkNotNull(qualifiedName);  Preconditions.checkArgument(type!=  null);	          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type    ==    null);    	non-compiled	[CE]  variable  qualifiedName  might  not  have  been  initialized	489	None	replace
947	[BUG]  [BUGGY]  Preconditions.checkState(scope.isUndefined());  Preconditions.checkArgument(type  ==  null);  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(scope.isUndefined());  Preconditions.checkArgument(type  ==  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(scope.isUndefined());  Preconditions.checkArgument(type  ==  null);	          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type    ==    null);    	non-compiled	[CE]  cannot  find  symbol	489	None	replace
948	[BUG]  [BUGGY]  boolean  resultEqualsValue  =  type.inferQualifiedSlot(node,  qualifiedName,  origType,  scope);  [CE]  cannot  find  symbol  [FE]        UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  boolean  resultEqualsValue  =  type.inferQualifiedSlot(node,  qualifiedName,  origType,  scope);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	boolean  resultEqualsValue  =  type.inferQualifiedSlot(node,  qualifiedName,  origType,  scope);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    boolean    resultEqualsValue    =    scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol	332	None	replace
949	[BUG]  [BUGGY]  boolean  resultEqualsValue  =  type.inferQualifiedSlot(node,  qualifiedName,  origType,  node);  [CE]  cannot  find  symbol  [FE]          UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  boolean  resultEqualsValue  =  type.inferQualifiedSlot(node,  qualifiedName,  origType,  node);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	boolean  resultEqualsValue  =  type.inferQualifiedSlot(node,  qualifiedName,  origType,  node);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    boolean    resultEqualsValue    =    scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol	332	None	replace
950	[BUG]  [BUGGY]  JSType  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [CE]  incompatible  types  [FE]            UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  JSType  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	JSType  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    boolean    resultEqualsValue    =    scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  incompatible  types	332	None	replace
951	[BUG]  [BUGGY]  boolean  resultEqualsValue  =  type.inferQualifiedSlot(node,  qualifiedName,  origType,  null);  [CE]  cannot  find  symbol  [FE]              UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  boolean  resultEqualsValue  =  type.inferQualifiedSlot(node,  qualifiedName,  origType,  null);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	boolean  resultEqualsValue  =  type.inferQualifiedSlot(node,  qualifiedName,  origType,  null);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    boolean    resultEqualsValue    =    scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol	332	None	replace
952	[BUG]  [BUGGY]  boolean  resultEqualsValue  =  node.inferQualifiedSlot(qualifiedName,  origType,  type);  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  boolean  resultEqualsValue  =  node.inferQualifiedSlot(qualifiedName,  origType,  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	boolean  resultEqualsValue  =  node.inferQualifiedSlot(qualifiedName,  origType,  type);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    boolean    resultEqualsValue    =    scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol	332	None	replace
953	[BUG]  [BUGGY]  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(node,  name,  origType,  type);  [CE]  cannot  find  symbol  name  [FE]                  UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(node,  name,  origType,  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	boolean  resultEqualsValue  =  scope.inferQualifiedSlot(node,  name,  origType,  type);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    boolean    resultEqualsValue    =    scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol  name	332	None	replace
954	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  UNKNOWN_TYPE,  qualifiedName,  origType,  type);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  UNKNOWN_TYPE,  qualifiedName,  origType,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  UNKNOWN_TYPE,  qualifiedName,  origType,  type);	  scope.inferQualifiedSlot(node,    UNKNOWN_TYPE,    value,    origType,    type);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	229	None	replace
955	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  type,  origType,  UNKNOWN_TYPE);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  type,  origType,  UNKNOWN_TYPE);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  type,  origType,  UNKNOWN_TYPE);	  scope.inferQualifiedSlot(node,    UNKNOWN_TYPE,    value,    origType,    type);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	229	None	replace
956	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  DEFAULT_TYPE,  qualifiedName,  origType,  type);  [CE]  cannot  find  symbol  DEFAULT_TYPE  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  DEFAULT_TYPE,  qualifiedName,  origType,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  DEFAULT_TYPE,  qualifiedName,  origType,  type);	  scope.inferQualifiedSlot(node,    UNKNOWN_TYPE,    value,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_TYPE	229	None	replace
957	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  TYPE,  qualifiedName,  origType,  type);  [CE]  cannot  find  symbol  TYPE  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  TYPE,  qualifiedName,  origType,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  TYPE,  qualifiedName,  origType,  type);	  scope.inferQualifiedSlot(node,    UNKNOWN_TYPE,    value,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol  TYPE	229	None	replace
958	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  TYPE,  origType,  type);  [CE]  cannot  find  symbol  TYPE  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  TYPE,  origType,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  TYPE,  origType,  type);	  scope.inferQualifiedSlot(node,    UNKNOWN_TYPE,    value,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol  TYPE	229	None	replace
959	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  qualificationName,  origType,  type);  [CE]  cannot  find  symbol  qualificationName  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  qualificationName,  origType,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  qualificationName,  origType,  type);	  scope.inferQualifiedSlot(node,    UNKNOWN_TYPE,    value,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol  qualificationName	229	None	replace
960	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.getString());  [CE]  <identifier>  expected  [FE]    UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.getString());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.getString());    	non-compiled	[CE]  <identifier>  expected	463	None	replace
961	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.getString());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.getString());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.getString());    	compilable	  [FE]  UnsupportedOperationException  	463	1	replace
962	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.getString());  }  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.getString());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.getString());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.getString());    	compilable	  [FE]  UnsupportedOperationException  	463	1	replace
963	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.getName());  [CE]  cannot  find  symbol  [FE]        UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.getString());    	non-compiled	[CE]  cannot  find  symbol	463	None	replace
964	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.getClass());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.getClass());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.getString());    	compilable	  [FE]  IllegalArgumentException  	463	1	replace
965	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.getClass());  [FE]  IllegalArgumentException  [FE]          UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.getClass());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type "  +  node.getClass());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.getString());    	compilable	  [FE]  IllegalArgumentException  	463	1	replace
966	[BUG]  [BUGGY]  Node  cannotBe  refined.   "  +  node.getQualifiedName());  [CE]  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  cannotBe  refined.   "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  cannotBe  refined.   "  +  node.getQualifiedName());	  if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getQualifiedName());    }    	non-compiled	[CE]  	330	None	replace
967	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.. "  +  node.getQualifiedName());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.. "  +  node.getQualifiedName());  }	  if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getQualifiedName());    }    	compilable	  [FE]  IllegalArgumentException  	330	1	replace
968	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.. "  +  node.getQualifiedName());  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.. "  +  node.getQualifiedName());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.. "  +  node.getQualifiedName());  }	  if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getQualifiedName());    }    	compilable	  [FE]  IllegalArgumentException  	330	1	replace
969	[BUG]  [BUGGY]  FlowScope  <  Node>  node  =  scope.getNode();  [CE]  type  FlowScope  does  not  take  parameters  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  FlowScope  <  Node>  node  =  scope.getNode();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	FlowScope  <  Node>  node  =  scope.getNode();	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    FlowScope    <    Node>    node    =    scope.getNode();    	non-compiled	[CE]  type  FlowScope  does  not  take  parameters	309	None	replace
970	[BUG]  [BUGGY]  Node  <  Node>  node  =  scope.getNode();  [CE]  type  Node  does  not  take  parameters  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  <  Node>  node  =  scope.getNode();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  <  Node>  node  =  scope.getNode();	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    FlowScope    <    Node>    node    =    scope.getNode();    	non-compiled	[CE]  type  Node  does  not  take  parameters	309	None	replace
971	[BUG]  [BUGGY]  final  FlowScope  <  Node>  node  =  scope.getNode();  [CE]  type  FlowScope  does  not  take  parameters  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  final  FlowScope  <  Node>  node  =  scope.getNode();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	final  FlowScope  <  Node>  node  =  scope.getNode();	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    FlowScope    <    Node>    node    =    scope.getNode();    	non-compiled	[CE]  type  FlowScope  does  not  take  parameters	309	None	replace
972	[BUG]  [BUGGY]  Context.checkState(node!=  null);  FlowScope  <  Node>  node  =  scope.getNode();  [CE]  cannot  find  symbol  Context  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Context.checkState(node!=  null);  FlowScope  <  Node>  node  =  scope.getNode();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Context.checkState(node!=  null);  FlowScope  <  Node>  node  =  scope.getNode();	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    FlowScope    <    Node>    node    =    scope.getNode();    	non-compiled	[CE]  cannot  find  symbol  Context	309	None	replace
973	[BUG]  [BUGGY]  Preconditions.checkNotNull(node);  FlowScope  <  Node>  node  =  scope.getNode();  [CE]  type  FlowScope  does  not  take  parameters  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkNotNull(node);  FlowScope  <  Node>  node  =  scope.getNode();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkNotNull(node);  FlowScope  <  Node>  node  =  scope.getNode();	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    FlowScope    <    Node>    node    =    scope.getNode();    	non-compiled	[CE]  type  FlowScope  does  not  take  parameters	309	None	replace
974	[BUG]  [BUGGY]  node  =  scope.getNode();  [CE]  cannot  find  symbol  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  node  =  scope.getNode();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	node  =  scope.getNode();	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    FlowScope    <    Node>    node    =    scope.getNode();    	non-compiled	[CE]  cannot  find  symbol	309	None	replace
975	[BUG]  [BUGGY]  Pattern  node  =  scope.getPosition(node.getLineno());  [CE]  cannot  find  symbol  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Pattern  node  =  scope.getPosition(node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Pattern  node  =  scope.getPosition(node.getLineno());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    FlowScope    <    Node>    node    =    scope.getNode();    	non-compiled	[CE]  cannot  find  symbol	309	None	replace
976	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  resultEqualsValue,  scope);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  resultEqualsValue,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  resultEqualsValue,  scope);	  Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE,    resultEqualsValue);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	174	None	replace
977	[BUG]  [BUGGY]  Node  node  =  scope.getNativeType(UNKNOWN_TYPE,  resultEqualsValue);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.getNativeType(UNKNOWN_TYPE,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getNativeType(UNKNOWN_TYPE,  resultEqualsValue);	  Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE,    resultEqualsValue);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	174	None	replace
978	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  resultEqualsValue,  qualifiedName);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  resultEqualsValue,  qualifiedName);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  resultEqualsValue,  qualifiedName);	  Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE,    resultEqualsValue);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	174	None	replace
979	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  resultEqualsValue),  scope);  [CE]  ';'  expected  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  resultEqualsValue),  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  resultEqualsValue),  scope);	  Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE,    resultEqualsValue);    	non-compiled	[CE]  ';'  expected	174	None	replace
980	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(NODE_TYPE,  resultEqualsValue);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getNativeType(NODE_TYPE,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(NODE_TYPE,  resultEqualsValue);	  Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE,    resultEqualsValue);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	174	None	replace
981	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  resultEqualsValue,  value);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  resultEqualsValue,  value);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  resultEqualsValue,  value);	  Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE,    resultEqualsValue);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	174	None	replace
982	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  type,  origType);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  type,  origType);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  type,  origType);	  scope.inferQualifiedSlot(node,    qualifiedName,    type,    origType);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	115	None	replace
983	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  value,  type,  origType);  [CE]  cannot  find  symbol  value  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  value,  type,  origType);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  value,  type,  origType);	  scope.inferQualifiedSlot(node,    qualifiedName,    type,    origType);    	non-compiled	[CE]  cannot  find  symbol  value	115	None	replace
984	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  UNKNOWN_TYPE,  type,  origType);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  UNKNOWN_TYPE,  type,  origType);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  UNKNOWN_TYPE,  type,  origType);	  scope.inferQualifiedSlot(node,    qualifiedName,    type,    origType);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	115	None	replace
985	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  resultEqualsValue,  type,  origType);  [CE]  cannot  find  symbol  resultEqualsValue  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  resultEqualsValue,  type,  origType);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  resultEqualsValue,  type,  origType);	  scope.inferQualifiedSlot(node,    qualifiedName,    type,    origType);    	non-compiled	[CE]  cannot  find  symbol  resultEqualsValue	115	None	replace
986	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  name,  type,  origType);  [CE]  cannot  find  symbol  name  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  name,  type,  origType);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  name,  type,  origType);	  scope.inferQualifiedSlot(node,    qualifiedName,    type,    origType);    	non-compiled	[CE]  cannot  find  symbol  name	115	None	replace
987	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  UNKNOWN_TYPE,  value,  type,  origType);  [CE]  cannot  find  symbol  value  [FE]                                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  UNKNOWN_TYPE,  value,  type,  origType);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  UNKNOWN_TYPE,  value,  type,  origType);	  scope.inferQualifiedSlot(node,    qualifiedName,    type,    origType);    	non-compiled	[CE]  cannot  find  symbol  value	115	None	replace
988	[BUG]  [BUGGY]  Node  cannot  be  refined.   "  +  node.getLineno());  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  cannot  be  refined.   "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  cannot  be  refined.   "  +  node.getLineno());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    Node    cannot    be    refined.    n       "    +    node.getLineno());    }    else    {    scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  	167	None	replace
989	[BUG]  [BUGGY]  Node  cannot  be  refined.  n   "  +  node.getLineno());  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  cannot  be  refined.  n   "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  cannot  be  refined.  n   "  +  node.getLineno());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    Node    cannot    be    refined.    n       "    +    node.getLineno());    }    else    {    scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  	167	None	replace
990	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined. "  +  node.getLineno());  Node  cannot  be  refined.   "  +  node.getLineno());  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning( "Node  cannot  be  refined. "  +  node.getLineno());  Node  cannot  be  refined.   "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined. "  +  node.getLineno());  Node  cannot  be  refined.   "  +  node.getLineno());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    Node    cannot    be    refined.    n       "    +    node.getLineno());    }    else    {    scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  	167	None	replace
991	[BUG]  [BUGGY]  Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.getLineno());  [CE]  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.getLineno());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    Node    cannot    be    refined.    n       "    +    node.getLineno());    }    else    {    scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  	167	None	replace
992	[BUG]  [BUGGY]  ParserVisitor  visitor  =  new  ParserVisitor(scope,  node.getLineno(),  node.getCharno());  [CE]  cannot  find  symbol  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  ParserVisitor  visitor  =  new  ParserVisitor(scope,  node.getLineno(),  node.getCharno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	ParserVisitor  visitor  =  new  ParserVisitor(scope,  node.getLineno(),  node.getCharno());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    Node    cannot    be    refined.    n       "    +    node.getLineno());    }    else    {    scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol	167	None	replace
993	[BUG]  [BUGGY]  ParserVisitor  visitor  =  new  ParserVisitor(scope,  node.getSourceName(),  node.getLineno());  [CE]  cannot  find  symbol  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  ParserVisitor  visitor  =  new  ParserVisitor(scope,  node.getSourceName(),  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	ParserVisitor  visitor  =  new  ParserVisitor(scope,  node.getSourceName(),  node.getLineno());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    Node    cannot    be    refined.    n       "    +    node.getLineno());    }    else    {    scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol	167	None	replace
994	[BUG]  [BUGGY]  Node  not  defined.  n   "  +  node.getLineno());  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  not  defined.  n   "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  not  defined.  n   "  +  node.getLineno());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    Node    not    defined.    n       "    +    node.getLineno());    	non-compiled	[CE]  	168	None	replace
995	[BUG]  [BUGGY]  Node  not  defined.   "  +  node.getLineno());  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  not  defined.   "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  not  defined.   "  +  node.getLineno());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    Node    not    defined.    n       "    +    node.getLineno());    	non-compiled	[CE]  	168	None	replace
996	[BUG]  [BUGGY]  Node  not  defined.n't "  +  node.getLineno());  [CE]  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  not  defined.n't "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  not  defined.n't "  +  node.getLineno());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    Node    not    defined.    n       "    +    node.getLineno());    	non-compiled	[CE]  	168	None	replace
997	[BUG]  [BUGGY]  Node  not  defined.  node  =  node.getLineno();  [CE]  ';'  expected  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  not  defined.  node  =  node.getLineno();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  not  defined.  node  =  node.getLineno();	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    Node    not    defined.    n       "    +    node.getLineno());    	non-compiled	[CE]  ';'  expected	168	None	replace
998	[BUG]  [BUGGY]  Node  not  defined.  node.getLineno());  [CE]  ';'  expected  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  not  defined.  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  not  defined.  node.getLineno());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    Node    not    defined.    n       "    +    node.getLineno());    	non-compiled	[CE]  ';'  expected	168	None	replace
999	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getString());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getString());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.   "    +    node.getString());    	compilable	  [FE]  UnsupportedOperationException  	40	1	replace
1000	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getString());  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getString());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getString());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.   "    +    node.getString());    	compilable	  [FE]  UnsupportedOperationException  	40	1	replace
1001	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  scope.name());  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  scope.name());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  scope.name());	  Throwables.throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    scope.toStringTree());    	non-compiled	[CE]  <identifier>  expected	187	None	replace
1002	[BUG]  [BUGGY]  Preconditions.checkState(type.equals(resultEqualsValue));  [CE]  cannot  find  symbol  resultEqualsValue  [FE]        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(type.equals(resultEqualsValue));  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(type.equals(resultEqualsValue));	  Preconditions.checkNotNull(resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  resultEqualsValue	339	None	replace
1003	[BUG]  [BUGGY]  Preconditions.checkState(resultEqualsValue  ==  null);  [CE]  cannot  find  symbol  resultEqualsValue  [FE]          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(resultEqualsValue  ==  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(resultEqualsValue  ==  null);	  Preconditions.checkNotNull(resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  resultEqualsValue	339	None	replace
1004	[BUG]  [BUGGY]  Preconditions.checkState(resultEqualsValue!=  null);  [CE]  cannot  find  symbol  resultEqualsValue  [FE]            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(resultEqualsValue!=  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(resultEqualsValue!=  null);	  Preconditions.checkNotNull(resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  resultEqualsValue	339	None	replace
1005	[BUG]  [BUGGY]  parent!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined.   "  +  node.toStringTree());  }  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  parent!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined.   "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	parent!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined.   "  +  node.toStringTree());  }	  if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    can    be    refined.   "    +    node.toStringTree());    }    	non-compiled	[CE]  not  a  statement	87	None	replace
1006	[BUG]  [BUGGY]  Node  cannot  be  refined.  Node  can  be  refined.   "  +  node.toStringTree());  [CE]  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  cannot  be  refined.  Node  can  be  refined.   "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  cannot  be  refined.  Node  can  be  refined.   "  +  node.toStringTree());	  if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    can    be    refined.   "    +    node.toStringTree());    }    	non-compiled	[CE]  	87	None	replace
1007	[BUG]  [BUGGY]  Node  cannotBe  refined.  Node  can  be  refined.   "  +  node.toStringTree());  [CE]  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  cannotBe  refined.  Node  can  be  refined.   "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  cannotBe  refined.  Node  can  be  refined.   "  +  node.toStringTree());	  if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    can    be    refined.   "    +    node.toStringTree());    }    	non-compiled	[CE]  	87	None	replace
1008	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  does  not  exist:  node.getMessage());  [CE]  unclosed  string  literal  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  does  not  exist:  node.getMessage());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  does  not  exist:  node.getMessage());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:    node.getMessage());    	non-compiled	[CE]  unclosed  string  literal	355	None	replace
1009	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist:  node.toStringTree());  [CE]  unclosed  string  literal  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist:  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist:  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:    node.getMessage());    	non-compiled	[CE]  unclosed  string  literal	355	None	replace
1010	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist:  node.getMessage());  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist:  node.getMessage());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist:  node.getMessage());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:    node.getMessage());    	non-compiled	[CE]  <identifier>  expected	355	None	replace
1011	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  does  not  exist:  node.toStringTree());  [CE]  unclosed  string  literal  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  does  not  exist:  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  does  not  exist:  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:    node.getMessage());    	non-compiled	[CE]  unclosed  string  literal	355	None	replace
1012	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  does  not  exist:  node.getMessage());  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  does  not  exist:  node.getMessage());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  does  not  exist:  node.getMessage());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:    node.getMessage());    	non-compiled	[CE]  <identifier>  expected	355	None	replace
1013	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  does  not  exist:  node.getClass().getName());  [CE]  unclosed  string  literal  [FE]                                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  does  not  exist:  node.getClass().getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  does  not  exist:  node.getClass().getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:    node.getMessage());    	non-compiled	[CE]  unclosed  string  literal	355	None	replace
1014	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist:  node.getSourceName());  [CE]  unclosed  string  literal  [FE]                                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist:  node.getSourceName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist:  node.getSourceName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:    node.getMessage());    	non-compiled	[CE]  unclosed  string  literal	355	None	replace
1015	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist:  node.getClass().getName());  [CE]  unclosed  string  literal  [FE]                                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist:  node.getClass().getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist:  node.getClass().getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:    node.getMessage());    	non-compiled	[CE]  unclosed  string  literal	355	None	replace
1016	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.getString());  Node  cannot  be  refined.   "  +  node.getString());  [CE]  [FE]    UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.getString());  Node  cannot  be  refined.   "  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.   "    +    node.getString());    Node  cannot  be  refined.   "  +  node.getString());	  	non-compiled	[CE]  	39	None	add
1017	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.getString());  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]      UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.getString());  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.   "    +    node.getString());    Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	39	None	add
1018	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.getString());  JSType  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]        UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.getString());  JSType  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.   "    +    node.getString());    JSType  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	39	None	add
1019	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.getString());  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]          UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.getString());  Node  node  =  node.getFirstChild();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.   "    +    node.getString());    Node  node  =  node.getFirstChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	39	None	add
1020	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.getString());  Node  node  =  node.getJSType();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]            UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.getString());  Node  node  =  node.getJSType();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.   "    +    node.getString());    Node  node  =  node.getJSType();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	39	None	add
1021	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.getString());  Node  cannot  be  refined.   "  +  node.getString());  break;  [CE]  [FE]              UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.getString());  Node  cannot  be  refined.   "  +  node.getString());  break;  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.   "    +    node.getString());    Node  cannot  be  refined.   "  +  node.getString());  break;	  	non-compiled	[CE]  	39	None	add
1022	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.getString());  Node  parent  =  node.getParent();  [CE]  unreachable  statement  [FE]                UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.getString());  Node  parent  =  node.getParent();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.   "    +    node.getString());    Node  parent  =  node.getParent();	  	non-compiled	[CE]  unreachable  statement	39	None	add
1023	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.getString());  JSError.make(node,  type,  UNKNOWN_TYPE));  [CE]  [FE]                  UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.getString());  JSError.make(node,  type,  UNKNOWN_TYPE));  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.   "    +    node.getString());    JSError.make(node,  type,  UNKNOWN_TYPE));	  	non-compiled	[CE]  	39	None	add
1024	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.getString());  Node  node  =  scope.getNode(node.getString());  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                    UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.getString());  Node  node  =  scope.getNode(node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.   "    +    node.getString());    Node  node  =  scope.getNode(node.getString());	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	39	None	add
1025	[BUG]  [BUGGY]  Throwable  node  =  scope.getCause();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  scope.getCause();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  scope.getCause();	  Throwable    node    =    node.getCause();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	249	None	replace
1026	[BUG]  [BUGGY]  Throwable  node  =  scope.getCause(node);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  scope.getCause(node);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  scope.getCause(node);	  Throwable    node    =    node.getCause();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	249	None	replace
1027	[BUG]  [BUGGY]  Throwable  node  =  type.getCause();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  type.getCause();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  type.getCause();	  Throwable    node    =    node.getCause();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	249	None	replace
1028	[BUG]  [BUGGY]  Throwable  node  =  scope.getCause(qualifiedName);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  scope.getCause(qualifiedName);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  scope.getCause(qualifiedName);	  Throwable    node    =    node.getCause();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	249	None	replace
1029	[BUG]  [BUGGY]  Throwable  node  =  node.getNativeType(UNKNOWN_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  node.getNativeType(UNKNOWN_TYPE);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  node.getNativeType(UNKNOWN_TYPE);	  Throwable    node    =    node.getCause();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	249	None	replace
1030	[BUG]  [BUGGY]  Throwable  node  =  scope.getCauseNode();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  scope.getCauseNode();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  scope.getCauseNode();	  Throwable    node    =    node.getCause();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	249	None	replace
1031	[BUG]  [BUGGY]  Throwable  node  =  node.getCause(),  type);  [CE]  ';'  expected  [FE]                                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  node.getCause(),  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  node.getCause(),  type);	  Throwable    node    =    node.getCause();    	non-compiled	[CE]  ';'  expected	249	None	replace
1032	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  }  else  {  Node  cannot  be  refined.   "  +  node.toStringTree());  }  [CE]  [FE]        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  }  else  {  Node  cannot  be  refined.   "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(node.getType()  ==  Token.NAME)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  }  else  {  Node  cannot  be  refined.   "  +  node.toStringTree());  }	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.       "    +    node.toStringTree());    Node    cannot    be    refined.       "    +    node.toStringTree());    	non-compiled	[CE]  	10	None	replace
1033	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree());  }  else  {  Node  cannot  be  refined.   "  +  node.toStringTree());  }  [CE]  [FE]          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree());  }  else  {  Node  cannot  be  refined.   "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(node.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree());  }  else  {  Node  cannot  be  refined.   "  +  node.toStringTree());  }	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.       "    +    node.toStringTree());    Node    cannot    be    refined.       "    +    node.toStringTree());    	non-compiled	[CE]  	10	None	replace
1034	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  this,  type);  [CE]  cannot  find  symbol  compiler  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  this,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope,  this,  type);	  NodeTraversal.traverse(compiler,    node,    scope,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	156	None	replace
1035	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  UNKNOWN_TYPE);  [CE]  cannot  find  symbol  compiler  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  UNKNOWN_TYPE);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope,  UNKNOWN_TYPE);	  NodeTraversal.traverse(compiler,    node,    scope,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	156	None	replace
1036	[BUG]  [BUGGY]  aughtException( "Node  cannot  be  refined.   "  +  node,  scope.toStringTree());  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  aughtException( "Node  cannot  be  refined.   "  +  node,  scope.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	aughtException( "Node  cannot  be  refined.   "  +  node,  scope.toStringTree());	  aughtException(   "Node    cannot    be    refined.   "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol	398	None	replace
1037	[BUG]  [BUGGY]  Context.error( "Node  cannot  be  refined.   "  +  node.toStringTree());  [CE]  cannot  find  symbol  Context  [FE]          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Context.error( "Node  cannot  be  refined.   "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Context.error( "Node  cannot  be  refined.   "  +  node.toStringTree());	  aughtException(   "Node    cannot    be    refined.   "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol  Context	398	None	replace
1038	[BUG]  [BUGGY]  Node  node  =  scope.getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.getNativeType(UNKNOWN_TYPE));  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getNativeType(UNKNOWN_TYPE));	  Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE),    scope);    	non-compiled	[CE]  ';'  expected	175	None	replace
1039	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE),  scope,  resultEqualsValue);  [CE]  ';'  expected  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE),  scope,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE),  scope,  resultEqualsValue);	  Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE),    scope);    	non-compiled	[CE]  ';'  expected	175	None	replace
1040	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE),  scope,  qualifiedName);  [CE]  ';'  expected  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE),  scope,  qualifiedName);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE),  scope,  qualifiedName);	  Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE),    scope);    	non-compiled	[CE]  ';'  expected	175	None	replace
1041	[BUG]  [BUGGY]  Node  node  =  scopeRegistry.getNativeType(UNKNOWN_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scopeRegistry.getNativeType(UNKNOWN_TYPE);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scopeRegistry.getNativeType(UNKNOWN_TYPE);	  Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE),    scope);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	175	None	replace
1042	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE)?  scope  :  UNKNOWN_TYPE;  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE)?  scope  :  UNKNOWN_TYPE;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE)?  scope  :  UNKNOWN_TYPE;	  Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE),    scope);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	175	None	replace
1043	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE),  scope,  null);  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE),  scope,  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE),  scope,  null);	  Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE),    scope);    	non-compiled	[CE]  <identifier>  expected	175	None	replace
1044	[BUG]  [BUGGY]  Node  cannot  be  refined.   "  +  node.getLastChild());  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  cannot  be  refined.   "  +  node.getLastChild());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  cannot  be  refined.   "  +  node.getLastChild());	  Node    cannot    be    refined.    n       "    +    node.toStringTree());    	non-compiled	[CE]  	5	None	replace
1045	[BUG]  [BUGGY]  Node  cannot  be  refined.   "  +  node.getJSType());  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  cannot  be  refined.   "  +  node.getJSType());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  cannot  be  refined.   "  +  node.getJSType());	  Node    cannot    be    refined.    n       "    +    node.toStringTree());    	non-compiled	[CE]  	5	None	replace
1046	[BUG]  [BUGGY]  Node  cannot  be  refined.   "  +  node.getLocalName());  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  cannot  be  refined.   "  +  node.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  cannot  be  refined.   "  +  node.getLocalName());	  Node    cannot    be    refined.    n       "    +    node.toStringTree());    	non-compiled	[CE]  	5	None	replace
1047	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  scope,  type);  [CE]  cannot  find  symbol  compiler  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  scope,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  scope,  type);	  NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE),    scope);    	non-compiled	[CE]  cannot  find  symbol  compiler	107	None	replace
1048	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  scope,  qualifiedName);  [CE]  cannot  find  symbol  compiler  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  scope,  qualifiedName);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  scope,  qualifiedName);	  NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE),    scope);    	non-compiled	[CE]  cannot  find  symbol  compiler	107	None	replace
1049	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getLineno());  [CE]  <identifier>  expected  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getLineno());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.getLineno());    	non-compiled	[CE]  <identifier>  expected	276	None	replace
1050	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getLineno());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getLineno());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.getLineno());    	compilable	  [FE]  IllegalArgumentException  	276	1	replace
1051	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getLineno());  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getLineno());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getLineno());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.getLineno());    	compilable	  [FE]  IllegalArgumentException  	276	1	replace
1052	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getLineno(),  type);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,JSType)  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getLineno(),  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getLineno(),  type);	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.getLineno());    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,JSType)	276	None	replace
1053	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getLineno(),  qualifiedName);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,String)  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getLineno(),  qualifiedName);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getLineno(),  qualifiedName);	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.getLineno());    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,String)	276	None	replace
1054	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getSourceName());  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getSourceName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getSourceName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.getLineno());    	non-compiled	[CE]  cannot  find  symbol	276	None	replace
1055	[BUG]  [BUGGY]  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.toStringTree());  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.toStringTree());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.toStringTree());    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol	158	None	replace
1056	[BUG]  [BUGGY]  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.toStringTree());    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol	158	None	replace
1057	[BUG]  [BUGGY]  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree());  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.toStringTree());    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol	158	None	replace
1058	[BUG]  [BUGGY]  DecoderNode  cannot  be  refined.  n   "  +  node.toStringTree());  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DecoderNode  cannot  be  refined.  n   "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DecoderNode  cannot  be  refined.  n   "  +  node.toStringTree());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.toStringTree());    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.toStringTree());    	non-compiled	[CE]  	158	None	replace
1059	[BUG]  [BUGGY]  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined ",  node.toStringTree());  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined ",  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined ",  node.toStringTree());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.toStringTree());    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol	158	None	replace
1060	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null?  getNativeType(UNKNOWN_TYPE):  type,  scope);  [CE]  no  suitable  method  found  for  checkArgument(JSType,FlowScope)  [FE]            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(type!=  null?  getNativeType(UNKNOWN_TYPE):  type,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkArgument(type!=  null?  getNativeType(UNKNOWN_TYPE):  type,  scope);	  Preconditions.checkArgument(type!=    null?    getNativeType(UNKNOWN_TYPE):    type);    	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(JSType,FlowScope)	341	None	replace
1061	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  null?  getNativeType(UNKNOWN_TYPE):  type,  scope);  [CE]  no  suitable  method  found  for  checkArgument(JSType,FlowScope)  [FE]              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(type  ==  null?  getNativeType(UNKNOWN_TYPE):  type,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkArgument(type  ==  null?  getNativeType(UNKNOWN_TYPE):  type,  scope);	  Preconditions.checkArgument(type!=    null?    getNativeType(UNKNOWN_TYPE):    type);    	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(JSType,FlowScope)	341	None	replace
1062	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null?  getNativeType(UNKNOWN_TYPE,  qualifiedName):  type);  [CE]  method  getNativeType  in  class  ChainableReverseAbstractInterpreter  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(type!=  null?  getNativeType(UNKNOWN_TYPE,  qualifiedName):  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkArgument(type!=  null?  getNativeType(UNKNOWN_TYPE,  qualifiedName):  type);	  Preconditions.checkArgument(type!=    null?    getNativeType(UNKNOWN_TYPE):    type);    	non-compiled	[CE]  method  getNativeType  in  class  ChainableReverseAbstractInterpreter  cannot  be  applied  to  given  types;	341	None	replace
1063	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null?  getNativeType(UNKNOWN_TYPE):  type,  resultEqualsValue);  [CE]  cannot  find  symbol  resultEqualsValue  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(type!=  null?  getNativeType(UNKNOWN_TYPE):  type,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkArgument(type!=  null?  getNativeType(UNKNOWN_TYPE):  type,  resultEqualsValue);	  Preconditions.checkArgument(type!=    null?    getNativeType(UNKNOWN_TYPE):    type);    	non-compiled	[CE]  cannot  find  symbol  resultEqualsValue	341	None	replace
1064	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null?  getNativeType(UNKNOWN_TYPE):  node,  type);  [CE]  no  suitable  method  found  for  checkArgument(Serializable,JSType)  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(type!=  null?  getNativeType(UNKNOWN_TYPE):  node,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkArgument(type!=  null?  getNativeType(UNKNOWN_TYPE):  node,  type);	  Preconditions.checkArgument(type!=    null?    getNativeType(UNKNOWN_TYPE):    type);    	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(Serializable,JSType)	341	None	replace
1065	[BUG]  [BUGGY]  Preconditions.checkArgument(qualifiedName!=  null?  getNativeType(UNKNOWN_TYPE):  type);  [CE]  no  suitable  method  found  for  checkArgument(JSType)  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(qualifiedName!=  null?  getNativeType(UNKNOWN_TYPE):  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkArgument(qualifiedName!=  null?  getNativeType(UNKNOWN_TYPE):  type);	  Preconditions.checkArgument(type!=    null?    getNativeType(UNKNOWN_TYPE):    type);    	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(JSType)	341	None	replace
1066	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null?  getNativeType(UNKNOWN_TYPE),  type);  [CE]  :  expected  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(type!=  null?  getNativeType(UNKNOWN_TYPE),  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkArgument(type!=  null?  getNativeType(UNKNOWN_TYPE),  type);	  Preconditions.checkArgument(type!=    null?    getNativeType(UNKNOWN_TYPE):    type);    	non-compiled	[CE]  :  expected	341	None	replace
1067	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null?  getNativeType(UNKNOWN_TYPE):  type,  node);  [CE]  no  suitable  method  found  for  checkArgument(JSType,Node)  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(type!=  null?  getNativeType(UNKNOWN_TYPE):  type,  node);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkArgument(type!=  null?  getNativeType(UNKNOWN_TYPE):  type,  node);	  Preconditions.checkArgument(type!=    null?    getNativeType(UNKNOWN_TYPE):    type);    	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(JSType,Node)	341	None	replace
1068	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  this,  scope);  [CE]  cannot  find  symbol  compiler  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  this,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  qualifiedName,  this,  scope);	  NodeTraversal.traverse(compiler,    node,    type,    this,    scope);    	non-compiled	[CE]  cannot  find  symbol  compiler	153	None	replace
1069	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  this,  scope,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  this,  scope,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  type,  this,  scope,  resultEqualsValue);	  NodeTraversal.traverse(compiler,    node,    type,    this,    scope);    	non-compiled	[CE]  cannot  find  symbol  compiler	153	None	replace
1070	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  scope,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  scope,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  type,  scope,  resultEqualsValue);	  NodeTraversal.traverse(compiler,    node,    type,    this,    scope);    	non-compiled	[CE]  cannot  find  symbol  compiler	153	None	replace
1071	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  this,  scope,  qualifiedName);  [CE]  cannot  find  symbol  compiler  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  this,  scope,  qualifiedName);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  type,  this,  scope,  qualifiedName);	  NodeTraversal.traverse(compiler,    node,    type,    this,    scope);    	non-compiled	[CE]  cannot  find  symbol  compiler	153	None	replace
1072	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  type,  this,  scope);  [CE]  cannot  find  symbol  compiler  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  type,  this,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  type,  this,  scope);	  NodeTraversal.traverse(compiler,    node,    type,    this,    scope);    	non-compiled	[CE]  cannot  find  symbol  compiler	153	None	replace
1073	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  this,  scope,  errorEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  this,  scope,  errorEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  type,  this,  scope,  errorEqualsValue);	  NodeTraversal.traverse(compiler,    node,    type,    this,    scope);    	non-compiled	[CE]  cannot  find  symbol  compiler	153	None	replace
1074	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  sourceName,  this,  scope);  [CE]  cannot  find  symbol  compiler  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  sourceName,  this,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  sourceName,  this,  scope);	  NodeTraversal.traverse(compiler,    node,    type,    this,    scope);    	non-compiled	[CE]  cannot  find  symbol  compiler	153	None	replace
1075	[BUG]  [BUGGY]  Node  cannot  be  refined.  n   "  +  node.getLineno());  break;  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  cannot  be  refined.  n   "  +  node.getLineno());  break;  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  cannot  be  refined.  n   "  +  node.getLineno());  break;	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    Node    cannot    be    refined.    n       "    +    node.getLineno());    break;    	non-compiled	[CE]  	169	None	replace
1076	[BUG]  [BUGGY]  Node  cannot  be  refined.   "  +  node.getLineno());  break;  [CE]  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  cannot  be  refined.   "  +  node.getLineno());  break;  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  cannot  be  refined.   "  +  node.getLineno());  break;	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    Node    cannot    be    refined.    n       "    +    node.getLineno());    break;    	non-compiled	[CE]  	169	None	replace
1077	[BUG]  [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  Node  cannot  be  refined.   "  +  node.getLineno());  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  Node  cannot  be  refined.   "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  Node  cannot  be  refined.   "  +  node.getLineno());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    Node    cannot    be    refined.    n       "    +    node.getLineno());    break;    	non-compiled	[CE]  	169	None	replace
1078	[BUG]  [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  Node  cannot  be  refined.   "  +  node.getLineno());  break;  [CE]  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  Node  cannot  be  refined.   "  +  node.getLineno());  break;  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  Node  cannot  be  refined.   "  +  node.getLineno());  break;	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    Node    cannot    be    refined.    n       "    +    node.getLineno());    break;    	non-compiled	[CE]  	169	None	replace
1079	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  UNKNOWN_TYPE,  qualifiedName,  origType,  type);  break;  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  UNKNOWN_TYPE,  qualifiedName,  origType,  type);  break;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  UNKNOWN_TYPE,  qualifiedName,  origType,  type);  break;	  scope.inferQualifiedSlot(node,    UNKNOWN_TYPE,    value,    origType,    type);    break;    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	214	None	replace
1080	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  DEFAULT_TYPE,  qualifiedName,  origType,  type);  break;  [CE]  cannot  find  symbol  DEFAULT_TYPE  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  DEFAULT_TYPE,  qualifiedName,  origType,  type);  break;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  DEFAULT_TYPE,  qualifiedName,  origType,  type);  break;	  scope.inferQualifiedSlot(node,    UNKNOWN_TYPE,    value,    origType,    type);    break;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_TYPE	214	None	replace
1081	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  TYPE,  origType,  type);  break;  [CE]  cannot  find  symbol  TYPE  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  TYPE,  origType,  type);  break;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  TYPE,  origType,  type);  break;	  scope.inferQualifiedSlot(node,    UNKNOWN_TYPE,    value,    origType,    type);    break;    	non-compiled	[CE]  cannot  find  symbol  TYPE	214	None	replace
1082	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  qualificationName,  origType,  type);  break;  [CE]  cannot  find  symbol  qualificationName  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  qualificationName,  origType,  type);  break;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  qualificationName,  origType,  type);  break;	  scope.inferQualifiedSlot(node,    UNKNOWN_TYPE,    value,    origType,    type);    break;    	non-compiled	[CE]  cannot  find  symbol  qualificationName	214	None	replace
1083	[BUG]  [BUGGY]  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
1084	[BUG]  [BUGGY]  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.getLineno());  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.getLineno());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
1085	[BUG]  [BUGGY]  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.getLineno());  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.getLineno());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
1086	[BUG]  [BUGGY]  IllegalArgumentException( "Node  cannot  be  refined.  node   "  +  node.getLineno());  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  IllegalArgumentException( "Node  cannot  be  refined.  node   "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	IllegalArgumentException( "Node  cannot  be  refined.  node   "  +  node.getLineno());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
1087	[BUG]  [BUGGY]  illegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  illegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	illegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
1088	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualifiedName.toStringTree()  : "  +  node.toStringTree());  [CE]  not  a  statement  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualifiedName.toStringTree()  : "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualifiedName.toStringTree()  : "  +  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    node.toStringTree()    :   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	390	None	replace
1089	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  named  with  node.toStringTree()  : "  +  node.toStringTree());  [CE]  not  a  statement  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  named  with  node.toStringTree()  : "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  named  with  node.toStringTree()  : "  +  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    node.toStringTree()    :   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	390	None	replace
1090	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualifiedName,  node.toStringTree()  : "  +  node.toStringTree());  [CE]  not  a  statement  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualifiedName,  node.toStringTree()  : "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualifiedName,  node.toStringTree()  : "  +  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    node.toStringTree()    :   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	390	None	replace
1091	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException(node.toStringTree()  : "  +  node.toStringTree());  [CE]  not  a  statement  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException(node.toStringTree()  : "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException(node.toStringTree()  : "  +  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    node.toStringTree()    :   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	390	None	replace
1092	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  not  refined.  Node  named  with  node.toStringTree()  : "  +  node.toStringTree());  [CE]  not  a  statement  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  not  refined.  Node  named  with  node.toStringTree()  : "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  not  refined.  Node  named  with  node.toStringTree()  : "  +  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    node.toStringTree()    :   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	390	None	replace
1093	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualifiedName  : "  +  node.toStringTree());  [CE]  not  a  statement  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualifiedName  : "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualifiedName  : "  +  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    node.toStringTree()    :   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	390	None	replace
1094	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.toStringTree()  : ",  node.toStringTree());  [CE]  not  a  statement  [FE]                                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.toStringTree()  : ",  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.toStringTree()  : ",  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    node.toStringTree()    :   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	390	None	replace
1095	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  name  : "  +  node.toStringTree());  [CE]  not  a  statement  [FE]                                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  name  : "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  name  : "  +  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    node.toStringTree()    :   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	390	None	replace
1096	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  scope,  type);  [CE]  cannot  find  symbol  compiler  [FE]            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  scope,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  scope,  type);	  NodeTraversal.traverse(compiler,    node,    new    RestrictByTrueTypeOfResultVisitor(),    scope);    	non-compiled	[CE]  cannot  find  symbol  compiler	133	None	replace
1097	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  scope,  qualifiedName);  [CE]  cannot  find  symbol  compiler  [FE]              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  scope,  qualifiedName);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  scope,  qualifiedName);	  NodeTraversal.traverse(compiler,    node,    new    RestrictByTrueTypeOfResultVisitor(),    scope);    	non-compiled	[CE]  cannot  find  symbol  compiler	133	None	replace
1098	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  scope,  this);  [CE]  cannot  find  symbol  compiler  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  scope,  this);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  scope,  this);	  NodeTraversal.traverse(compiler,    node,    new    RestrictByTrueTypeOfResultVisitor(),    scope);    	non-compiled	[CE]  cannot  find  symbol  compiler	133	None	replace
1099	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  scope,  errorEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  scope,  errorEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  scope,  errorEqualsValue);	  NodeTraversal.traverse(compiler,    node,    new    RestrictByTrueTypeOfResultVisitor(),    scope);    	non-compiled	[CE]  cannot  find  symbol  compiler	133	None	replace
1100	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  scope,  state);  [CE]  cannot  find  symbol  compiler  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  scope,  state);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  scope,  state);	  NodeTraversal.traverse(compiler,    node,    new    RestrictByTrueTypeOfResultVisitor(),    scope);    	non-compiled	[CE]  cannot  find  symbol  compiler	133	None	replace
1101	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  can  be  refined. "  +  node.getQualifiedName());  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  can  be  refined. "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  can  be  refined. "  +  node.getQualifiedName());	  Throwables.throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n       "    +    node.getQualifiedName());    	non-compiled	[CE]  <identifier>  expected	81	None	replace
1102	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getQualifiedName());  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getQualifiedName());	  Throwables.throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n       "    +    node.getQualifiedName());    	non-compiled	[CE]  <identifier>  expected	81	None	replace
1103	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getQualifiedName(),  type);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getQualifiedName(),  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getQualifiedName(),  type);	  Throwables.throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n       "    +    node.getQualifiedName());    	non-compiled	[CE]  <identifier>  expected	81	None	replace
1104	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  name  can  be  added  to  a  string  node. "  +  node.getQualifiedName());  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  name  can  be  added  to  a  string  node. "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  name  can  be  added  to  a  string  node. "  +  node.getQualifiedName());	  Throwables.throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n       "    +    node.getQualifiedName());    	non-compiled	[CE]  <identifier>  expected	81	None	replace
1105	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getLineno());  [CE]  <identifier>  expected  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getLineno());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node:   "    +    node.getLineno());    	non-compiled	[CE]  <identifier>  expected	279	None	replace
1106	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getLineno());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getLineno());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node:   "    +    node.getLineno());    	compilable	  [FE]  IllegalArgumentException  	279	1	replace
1107	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getLineno());  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getLineno());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getLineno());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node:   "    +    node.getLineno());    	compilable	  [FE]  IllegalArgumentException  	279	1	replace
1108	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getLineno(),  type);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,JSType)  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getLineno(),  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getLineno(),  type);	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node:   "    +    node.getLineno());    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,JSType)	279	None	replace
1109	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getLineno(),  qualifiedName);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,String)  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getLineno(),  qualifiedName);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getLineno(),  qualifiedName);	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node:   "    +    node.getLineno());    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,String)	279	None	replace
1110	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(),   "  +  node.toStringTree());  Node  defined  with  node.toStringTree(),   "  +  node.toStringTree());  [CE]  [FE]    java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.toStringTree()    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(),   "  +  node.toStringTree());  Node  defined  with  node.toStringTree(),   "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree(),   "    +    node.toStringTree());    Node  defined  with  node.toStringTree(),   "  +  node.toStringTree());	  	non-compiled	[CE]  	496	None	add
1111	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(),   "  +  node.toStringTree());  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(),   "  +  node.toStringTree());  [CE]  unreachable  statement  [FE]      java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.toStringTree()    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(),   "  +  node.toStringTree());  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(),   "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree(),   "    +    node.toStringTree());    throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(),   "  +  node.toStringTree());	  	non-compiled	[CE]  unreachable  statement	496	None	add
1112	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(),   "  +  node.toStringTree());  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(),   "  +  node.toStringTree());  [CE]  not  a  statement  [FE]        java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.toStringTree()    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(),   "  +  node.toStringTree());  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(),   "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree(),   "    +    node.toStringTree());    Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(),   "  +  node.toStringTree());	  	non-compiled	[CE]  not  a  statement	496	None	add
1113	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(),   "  +  node.toStringTree());  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(), ",  +  node.toStringTree());  [CE]  bad  operand  type  String  for  unary  operator  [FE]          java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.toStringTree()    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(),   "  +  node.toStringTree());  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(), ",  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree(),   "    +    node.toStringTree());    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(), ",  +  node.toStringTree());	  	non-compiled	[CE]  bad  operand  type  String  for  unary  operator  	496	None	add
1114	[BUG]  [BUGGY]  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(qualifiedName,  origType,  type);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]            UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(qualifiedName,  origType,  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	boolean  resultEqualsValue  =  scope.inferQualifiedSlot(qualifiedName,  origType,  type);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    boolean    resultEqualsValue    =    scope.inferQualifiedSlot(qualifiedName,    origType);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	401	None	replace
1115	[BUG]  [BUGGY]  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(qualifiedName,  origType);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]              UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(qualifiedName,  origType);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	boolean  resultEqualsValue  =  scope.inferQualifiedSlot(qualifiedName,  origType);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    boolean    resultEqualsValue    =    scope.inferQualifiedSlot(qualifiedName,    origType);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	401	None	replace
1116	[BUG]  [BUGGY]  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(qualifiedName,  origType,  node);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(qualifiedName,  origType,  node);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	boolean  resultEqualsValue  =  scope.inferQualifiedSlot(qualifiedName,  origType,  node);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    boolean    resultEqualsValue    =    scope.inferQualifiedSlot(qualifiedName,    origType);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	401	None	replace
1117	[BUG]  [BUGGY]  resultEqualsValue  =  scope.inferQualifiedSlot(qualifiedName,  origType,  type);  [CE]  cannot  find  symbol  resultEqualsValue  [FE]                  UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  resultEqualsValue  =  scope.inferQualifiedSlot(qualifiedName,  origType,  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	resultEqualsValue  =  scope.inferQualifiedSlot(qualifiedName,  origType,  type);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    boolean    resultEqualsValue    =    scope.inferQualifiedSlot(qualifiedName,    origType);    	non-compiled	[CE]  cannot  find  symbol  resultEqualsValue	401	None	replace
1118	[BUG]  [BUGGY]  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(qualifiedName,  origType,  null);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                    UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(qualifiedName,  origType,  null);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	boolean  resultEqualsValue  =  scope.inferQualifiedSlot(qualifiedName,  origType,  null);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    boolean    resultEqualsValue    =    scope.inferQualifiedSlot(qualifiedName,    origType);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	401	None	replace
1119	[BUG]  [BUGGY]  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(qualifiedName,  origType,  value);  [CE]  cannot  find  symbol  value  [FE]                      UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(qualifiedName,  origType,  value);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	boolean  resultEqualsValue  =  scope.inferQualifiedSlot(qualifiedName,  origType,  value);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    boolean    resultEqualsValue    =    scope.inferQualifiedSlot(qualifiedName,    origType);    	non-compiled	[CE]  cannot  find  symbol  value	401	None	replace
1120	[BUG]  [BUGGY]  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(qualifiedName,  node,  type);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                        UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(qualifiedName,  node,  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	boolean  resultEqualsValue  =  scope.inferQualifiedSlot(qualifiedName,  node,  type);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    boolean    resultEqualsValue    =    scope.inferQualifiedSlot(qualifiedName,    origType);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	401	None	replace
1121	[BUG]  [BUGGY]  resultEqualsValue  =  scope.inferQualifiedSlot(qualifiedName,  origType);  [CE]  cannot  find  symbol  resultEqualsValue  [FE]                          UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  resultEqualsValue  =  scope.inferQualifiedSlot(qualifiedName,  origType);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	resultEqualsValue  =  scope.inferQualifiedSlot(qualifiedName,  origType);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    boolean    resultEqualsValue    =    scope.inferQualifiedSlot(qualifiedName,    origType);    	non-compiled	[CE]  cannot  find  symbol  resultEqualsValue	401	None	replace
1122	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  scope,  getNativeType(UNKNOWN_TYPE),  this);  [CE]  cannot  find  symbol  compiler  [FE]              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  scope,  getNativeType(UNKNOWN_TYPE),  this);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  scope,  getNativeType(UNKNOWN_TYPE),  this);	  NodeTraversal.traverse(compiler,    node,    scope,    getNativeType(UNKNOWN_TYPE),    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	122	None	replace
1123	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  NON_GLOBAL_TYPE,  scope,  getNativeType(UNKNOWN_TYPE),  this);  [CE]  cannot  find  symbol  compiler  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  NON_GLOBAL_TYPE,  scope,  getNativeType(UNKNOWN_TYPE),  this);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  NON_GLOBAL_TYPE,  scope,  getNativeType(UNKNOWN_TYPE),  this);	  NodeTraversal.traverse(compiler,    node,    scope,    getNativeType(UNKNOWN_TYPE),    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	122	None	replace
1124	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  scope,  getNativeType(UNKNOWN_TYPE),  this);  [CE]  cannot  find  symbol  compiler  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  scope,  getNativeType(UNKNOWN_TYPE),  this);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  scope,  getNativeType(UNKNOWN_TYPE),  this);	  NodeTraversal.traverse(compiler,    node,    scope,    getNativeType(UNKNOWN_TYPE),    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	122	None	replace
1125	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  NODE_TYPE,  getNativeType(UNKNOWN_TYPE),  this);  [CE]  cannot  find  symbol  compiler  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  NODE_TYPE,  getNativeType(UNKNOWN_TYPE),  this);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  NODE_TYPE,  getNativeType(UNKNOWN_TYPE),  this);	  NodeTraversal.traverse(compiler,    node,    scope,    getNativeType(UNKNOWN_TYPE),    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	122	None	replace
1126	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  sourceName,  scope,  getNativeType(UNKNOWN_TYPE),  this);  [CE]  cannot  find  symbol  compiler  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  sourceName,  scope,  getNativeType(UNKNOWN_TYPE),  this);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  sourceName,  scope,  getNativeType(UNKNOWN_TYPE),  this);	  NodeTraversal.traverse(compiler,    node,    scope,    getNativeType(UNKNOWN_TYPE),    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	122	None	replace
1127	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  for  type:   "  +  node.getLineno());  Node  defined  for  type:   "  +  node.getLineno());  [CE]  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  for  type:   "  +  node.getLineno());  Node  defined  for  type:   "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    for    type:   "    +    node.getLineno());    Node  defined  for  type:   "  +  node.getLineno());	  	non-compiled	[CE]  	472	None	add
1128	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  for  type:   "  +  node.getLineno());  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type:   "  +  node.getLineno());  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  for  type:   "  +  node.getLineno());  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type:   "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    for    type:   "    +    node.getLineno());    IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type:   "  +  node.getLineno());	  	non-compiled	[CE]  cannot  find  symbol	472	None	add
1129	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  for  type:   "  +  node.getLineno());  Node  defined  for  type:   "  +  node.getLineno());  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type:   "  +  node.getLineno());  }  [CE]  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  for  type:   "  +  node.getLineno());  Node  defined  for  type:   "  +  node.getLineno());  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type:   "  +  node.getLineno());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    for    type:   "    +    node.getLineno());    Node  defined  for  type:   "  +  node.getLineno());  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type:   "  +  node.getLineno());  }	  	non-compiled	[CE]  	472	None	add
1130	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  for  type:   "  +  node.getLineno());  Node  defined  for  type:   "  +  node.getLineno());  if(resultEqualsValue  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type:   "  +  node.getLineno());  }  [CE]  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  for  type:   "  +  node.getLineno());  Node  defined  for  type:   "  +  node.getLineno());  if(resultEqualsValue  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type:   "  +  node.getLineno());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    for    type:   "    +    node.getLineno());    Node  defined  for  type:   "  +  node.getLineno());  if(resultEqualsValue  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type:   "  +  node.getLineno());  }	  	non-compiled	[CE]  	472	None	add
1131	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  for  type:   "  +  node.getLineno());  Node  defined  for  type:   "  +  node.getLineno());  if(resultEqualsValue!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type:   "  +  node.getLineno());  }  [CE]  [FE]            IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  for  type:   "  +  node.getLineno());  Node  defined  for  type:   "  +  node.getLineno());  if(resultEqualsValue!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type:   "  +  node.getLineno());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    for    type:   "    +    node.getLineno());    Node  defined  for  type:   "  +  node.getLineno());  if(resultEqualsValue!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type:   "  +  node.getLineno());  }	  	non-compiled	[CE]  	472	None	add
1132	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  for  type:   "  +  node.getLineno());  Node  defined  for  type:   "  +  node.getLineno());  if(resultEqualsValue)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type:   "  +  node.getLineno());  }  [CE]  [FE]              IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  for  type:   "  +  node.getLineno());  Node  defined  for  type:   "  +  node.getLineno());  if(resultEqualsValue)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type:   "  +  node.getLineno());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    for    type:   "    +    node.getLineno());    Node  defined  for  type:   "  +  node.getLineno());  if(resultEqualsValue)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type:   "  +  node.getLineno());  }	  	non-compiled	[CE]  	472	None	add
1133	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  for  type:   "  +  node.getLineno());  Node  defined  for  type:   "  +  node.getLineno());  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [CE]  [FE]                IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  for  type:   "  +  node.getLineno());  Node  defined  for  type:   "  +  node.getLineno());  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    for    type:   "    +    node.getLineno());    Node  defined  for  type:   "  +  node.getLineno());  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);	  	non-compiled	[CE]  	472	None	add
1134	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  type,  scope.toStringTree());  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  type,  scope.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  type,  scope.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.   "    +    type.toStringTree());    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
1135	[BUG]  [BUGGY]  Node  node  =  scope.inferQualifiedSlot(qualifiedName,  this.node.getFirstChild());  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.inferQualifiedSlot(qualifiedName,  this.node.getFirstChild());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.inferQualifiedSlot(qualifiedName,  this.node.getFirstChild());	  Node    node    =    this.node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	103	None	replace
1136	[BUG]  [BUGGY]  Node  node  =  this.node.getLastChild();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  this.node.getLastChild();  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  this.node.getLastChild();	  Node    node    =    this.node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	103	None	replace
1137	[BUG]  [BUGGY]  Node  node  =  scope.inferQualifiedSlot(qualifiedName,  type,  this.node.getFirstChild());  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.inferQualifiedSlot(qualifiedName,  type,  this.node.getFirstChild());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.inferQualifiedSlot(qualifiedName,  type,  this.node.getFirstChild());	  Node    node    =    this.node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	103	None	replace
1138	[BUG]  [BUGGY]  Node  node  =  scope.inferQualifiedSlot(qualifiedName,  this.node.getFirstChild(),  type);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.inferQualifiedSlot(qualifiedName,  this.node.getFirstChild(),  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.inferQualifiedSlot(qualifiedName,  this.node.getFirstChild(),  type);	  Node    node    =    this.node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	103	None	replace
1139	[BUG]  [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node,  scope.getLocalName());  [CE]  cannot  find  symbol  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node,  scope.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node,  scope.getLocalName());	  new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	205	None	replace
1140	[BUG]  [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLocalName(),  type);  [CE]  cannot  find  symbol  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLocalName(),  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLocalName(),  type);	  new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	205	None	replace
1141	[BUG]  [BUGGY]  new  IllegalArgumentException(node, "Node  cannot  be  refined.   "  +  node.getLocalName());  [CE]  cannot  find  symbol  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  new  IllegalArgumentException(node, "Node  cannot  be  refined.   "  +  node.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	new  IllegalArgumentException(node, "Node  cannot  be  refined.   "  +  node.getLocalName());	  new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	205	None	replace
1142	[BUG]  [BUGGY]  new  IllegalArgumentException(node.getLocalName());  [CE]  cannot  find  symbol  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  new  IllegalArgumentException(node.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	new  IllegalArgumentException(node.getLocalName());	  new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	205	None	replace
1143	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  name,  scope);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  name,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  name,  scope);	  Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE,    name);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	392	None	replace
1144	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(NODE_TYPE,  name);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getNativeType(NODE_TYPE,  name);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(NODE_TYPE,  name);	  Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE,    name);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	392	None	replace
1145	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  name,  resultEqualsValue);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  name,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  name,  resultEqualsValue);	  Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE,    name);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	392	None	replace
1146	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(): "  +  node.toStringTree());  [CE]  not  a  statement  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(): "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(): "  +  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree().   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	439	None	replace
1147	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree()  exception: "  +  node.toStringTree());  [CE]  not  a  statement  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree()  exception: "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree()  exception: "  +  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree().   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	439	None	replace
1148	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree()  or  defined  with  node.toStringTree(), "  +  node.toStringTree());  [CE]  not  a  statement  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree()  or  defined  with  node.toStringTree(), "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree()  or  defined  with  node.toStringTree(), "  +  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree().   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	439	None	replace
1149	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  defined  with  node.toStringTree(). "  +  node.toStringTree());  [CE]  not  a  statement  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  defined  with  node.toStringTree(). "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  defined  with  node.toStringTree(). "  +  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree().   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	439	None	replace
1150	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree()  or  defined  with  node.toStringTree(). "  +  node.toStringTree());  [CE]  not  a  statement  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree()  or  defined  with  node.toStringTree(). "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree()  or  defined  with  node.toStringTree(). "  +  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree().   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	439	None	replace
1151	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  type,  getNativeType(UNKNOWN_TYPE),  this);  [CE]  cannot  find  symbol  compiler  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  type,  getNativeType(UNKNOWN_TYPE),  this);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  type,  getNativeType(UNKNOWN_TYPE),  this);	  NodeTraversal.traverse(compiler,    node,    this,    getNativeType(UNKNOWN_TYPE),    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	124	None	replace
1152	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  getNativeType(UNKNOWN_TYPE),  scope);  [CE]  cannot  find  symbol  compiler  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  getNativeType(UNKNOWN_TYPE),  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  getNativeType(UNKNOWN_TYPE),  scope);	  NodeTraversal.traverse(compiler,    node,    this,    getNativeType(UNKNOWN_TYPE),    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	124	None	replace
1153	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  type,  UNKNOWN_TYPE);  [CE]  cannot  find  symbol  compiler  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  type,  UNKNOWN_TYPE);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  type,  UNKNOWN_TYPE);	  NodeTraversal.traverse(compiler,    node,    this,    getNativeType(UNKNOWN_TYPE),    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	124	None	replace
1154	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  scope.getNativeType(UNKNOWN_TYPE),  this);  [CE]  cannot  find  symbol  compiler  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  scope.getNativeType(UNKNOWN_TYPE),  this);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  scope.getNativeType(UNKNOWN_TYPE),  this);	  NodeTraversal.traverse(compiler,    node,    this,    getNativeType(UNKNOWN_TYPE),    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	124	None	replace
1155	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  getNativeType(UNKNOWN_TYPE),  type);  [CE]  cannot  find  symbol  compiler  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  getNativeType(UNKNOWN_TYPE),  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  getNativeType(UNKNOWN_TYPE),  type);	  NodeTraversal.traverse(compiler,    node,    this,    getNativeType(UNKNOWN_TYPE),    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	124	None	replace
1156	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  DEFAULT_TYPE,  getNativeType(UNKNOWN_TYPE),  this);  [CE]  cannot  find  symbol  compiler  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  DEFAULT_TYPE,  getNativeType(UNKNOWN_TYPE),  this);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  DEFAULT_TYPE,  getNativeType(UNKNOWN_TYPE),  this);	  NodeTraversal.traverse(compiler,    node,    this,    getNativeType(UNKNOWN_TYPE),    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	124	None	replace
1157	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.. "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.. "  +  node.toStringTree());  }	  if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.   "    +    node.toStringTree());    }    	compilable	  [FE]  IllegalArgumentException  	2	1	replace
1158	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.. "  +  node.toStringTree());  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.. "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.. "  +  node.toStringTree());  }	  if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.   "    +    node.toStringTree());    }    	compilable	  [FE]  IllegalArgumentException  	2	1	replace
1159	[BUG]  [BUGGY]  JSType  node  =  type.getNativeType(UNKNOWN_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  JSType  node  =  type.getNativeType(UNKNOWN_TYPE);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	JSType  node  =  type.getNativeType(UNKNOWN_TYPE);	  if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.   "    +    node.toStringTree());    }    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	2	None	replace
1160	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  type,  getNativeType(UNKNOWN_TYPE),  this);  [CE]  cannot  find  symbol  compiler  [FE]            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  type,  getNativeType(UNKNOWN_TYPE),  this);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  qualifiedName,  type,  getNativeType(UNKNOWN_TYPE),  this);	  NodeTraversal.traverse(compiler,    node,    type,    getNativeType(UNKNOWN_TYPE),    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	121	None	replace
1161	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  getNativeType(UNKNOWN_TYPE),  scope);  [CE]  cannot  find  symbol  compiler  [FE]              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  getNativeType(UNKNOWN_TYPE),  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  type,  getNativeType(UNKNOWN_TYPE),  scope);	  NodeTraversal.traverse(compiler,    node,    type,    getNativeType(UNKNOWN_TYPE),    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	121	None	replace
1162	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  getNativeType(UNKNOWN_TYPE),  this);  [CE]  cannot  find  symbol  compiler  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  getNativeType(UNKNOWN_TYPE),  this);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  getNativeType(UNKNOWN_TYPE),  this);	  NodeTraversal.traverse(compiler,    node,    type,    getNativeType(UNKNOWN_TYPE),    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	121	None	replace
1163	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  type,  getNativeType(UNKNOWN_TYPE),  this);  [CE]  cannot  find  symbol  compiler  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  type,  getNativeType(UNKNOWN_TYPE),  this);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  type,  getNativeType(UNKNOWN_TYPE),  this);	  NodeTraversal.traverse(compiler,    node,    type,    getNativeType(UNKNOWN_TYPE),    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	121	None	replace
1164	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  getNativeType(UNKNOWN_TYPE),  this);  [CE]  cannot  find  symbol  compiler  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  getNativeType(UNKNOWN_TYPE),  this);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  qualifiedName,  getNativeType(UNKNOWN_TYPE),  this);	  NodeTraversal.traverse(compiler,    node,    type,    getNativeType(UNKNOWN_TYPE),    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	121	None	replace
1165	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  scope.getNativeType(UNKNOWN_TYPE),  this);  [CE]  cannot  find  symbol  compiler  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  scope.getNativeType(UNKNOWN_TYPE),  this);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  type,  scope.getNativeType(UNKNOWN_TYPE),  this);	  NodeTraversal.traverse(compiler,    node,    type,    getNativeType(UNKNOWN_TYPE),    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	121	None	replace
1166	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  sourceName,  type,  getNativeType(UNKNOWN_TYPE),  this);  [CE]  cannot  find  symbol  compiler  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  sourceName,  type,  getNativeType(UNKNOWN_TYPE),  this);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  sourceName,  type,  getNativeType(UNKNOWN_TYPE),  this);	  NodeTraversal.traverse(compiler,    node,    type,    getNativeType(UNKNOWN_TYPE),    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	121	None	replace
1167	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  sourceName,  getNativeType(UNKNOWN_TYPE),  this);  [CE]  cannot  find  symbol  compiler  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  sourceName,  getNativeType(UNKNOWN_TYPE),  this);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  sourceName,  getNativeType(UNKNOWN_TYPE),  this);	  NodeTraversal.traverse(compiler,    node,    type,    getNativeType(UNKNOWN_TYPE),    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	121	None	replace
1168	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  type,  qualifiedName,  origType,  type);  break;  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  type,  qualifiedName,  origType,  type);  break;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  type,  qualifiedName,  origType,  type);  break;	  scope.inferQualifiedSlot(node,    type,    origType,    type);    break;    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	208	None	replace
1169	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  qualifier,  type,  origType);  break;  [CE]  cannot  find  symbol  qualifier  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  qualifier,  type,  origType);  break;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  qualifier,  type,  origType);  break;	  scope.inferQualifiedSlot(node,    type,    origType,    type);    break;    	non-compiled	[CE]  cannot  find  symbol  qualifier	208	None	replace
1170	[BUG]  [BUGGY]  scope.inferQualifiedSlot(type,  origType,  node);  break;  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(type,  origType,  node);  break;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(type,  origType,  node);  break;	  scope.inferQualifiedSlot(node,    type,    origType,    type);    break;    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	208	None	replace
1171	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope.getNativeType(OPTIONAL_TYPE));  [CE]  cannot  find  symbol  compiler  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope.getNativeType(OPTIONAL_TYPE));  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope.getNativeType(OPTIONAL_TYPE));	  NodeTraversal.traverse(compiler,    node,    getNativeType(OPTIONAL_TYPE));    	non-compiled	[CE]  cannot  find  symbol  compiler	328	None	replace
1172	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(OBJECT_TYPE));  [CE]  cannot  find  symbol  compiler  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(OBJECT_TYPE));  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(OBJECT_TYPE));	  NodeTraversal.traverse(compiler,    node,    getNativeType(OPTIONAL_TYPE));    	non-compiled	[CE]  cannot  find  symbol  compiler	328	None	replace
1173	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  type,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  type,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope,  type,  resultEqualsValue);	  NodeTraversal.traverse(compiler,    node,    scope,    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	100	None	replace
1174	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  FlowScope.UNKNOWN_TYPE,  type);  [CE]  cannot  find  symbol  compiler  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  FlowScope.UNKNOWN_TYPE,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  FlowScope.UNKNOWN_TYPE,  type);	  NodeTraversal.traverse(compiler,    node,    scope,    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	100	None	replace
1175	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  sourceFile,  type);  [CE]  cannot  find  symbol  compiler  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  sourceFile,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  sourceFile,  type);	  NodeTraversal.traverse(compiler,    node,    scope,    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	100	None	replace
1176	[BUG]  [BUGGY]  Preconditions.checkNotNull(qualifiedName);  Preconditions.checkArgument(type!=  null?   "Node  cannot  be  refined.   "  :  node.toStringTree());  [CE]  no  suitable  method  found  for  checkArgument(String)  [FE]          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkNotNull(qualifiedName);  Preconditions.checkArgument(type!=  null?   "Node  cannot  be  refined.   "  :  node.toStringTree());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkNotNull(qualifiedName);  Preconditions.checkArgument(type!=  null?   "Node  cannot  be  refined.   "  :  node.toStringTree());	          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type!=    null?   "Node    cannot    be    refined.   "    :    node.toStringTree());    	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(String)	487	None	replace
1177	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null?   "Node  cannot  be  refined.   "  :  node.toStringTree());  [CE]  no  suitable  method  found  for  checkArgument(String)  [FE]            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(type!=  null?   "Node  cannot  be  refined.   "  :  node.toStringTree());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkArgument(type!=  null?   "Node  cannot  be  refined.   "  :  node.toStringTree());	          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type!=    null?   "Node    cannot    be    refined.   "    :    node.toStringTree());    	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(String)	487	None	replace
1178	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null? "Node  cannot  be  refined.   "  :  node.toStringTree());  [CE]  no  suitable  method  found  for  checkState(String)  [FE]              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(type!=  null? "Node  cannot  be  refined.   "  :  node.toStringTree());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(type!=  null? "Node  cannot  be  refined.   "  :  node.toStringTree());	          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type!=    null?   "Node    cannot    be    refined.   "    :    node.toStringTree());    	non-compiled	[CE]  no  suitable  method  found  for  checkState(String)	487	None	replace
1179	[BUG]  [BUGGY]  Preconditions.checkArgument(qualifiedName!=  null?   "Node  cannot  be  refined.   "  :  node.toStringTree());  [CE]  no  suitable  method  found  for  checkArgument(String)  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(qualifiedName!=  null?   "Node  cannot  be  refined.   "  :  node.toStringTree());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkArgument(qualifiedName!=  null?   "Node  cannot  be  refined.   "  :  node.toStringTree());	          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type!=    null?   "Node    cannot    be    refined.   "    :    node.toStringTree());    	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(String)	487	None	replace
1180	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  type,  new  RestrictByOneTypeOfResultVisitor());  [CE]  cannot  find  symbol  compiler  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  type,  new  RestrictByOneTypeOfResultVisitor());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  type,  new  RestrictByOneTypeOfResultVisitor());	  NodeTraversal.traverse(compiler,    node,    resultEqualsValue,    new    RestrictByOneTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	236	None	replace
1181	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  scope,  new  RestrictByOneTypeOfResultVisitor());  [CE]  cannot  find  symbol  compiler  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  scope,  new  RestrictByOneTypeOfResultVisitor());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  scope,  new  RestrictByOneTypeOfResultVisitor());	  NodeTraversal.traverse(compiler,    node,    resultEqualsValue,    new    RestrictByOneTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	236	None	replace
1182	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  new  RestrictByOneTypeOfResultVisitor());  [CE]  cannot  find  symbol  compiler  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  new  RestrictByOneTypeOfResultVisitor());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  new  RestrictByOneTypeOfResultVisitor());	  NodeTraversal.traverse(compiler,    node,    resultEqualsValue,    new    RestrictByOneTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	236	None	replace
1183	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  scope,  new  RestrictByTrueTypeOfResultVisitor());  [CE]  cannot  find  symbol  compiler  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  scope,  new  RestrictByTrueTypeOfResultVisitor());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  scope,  new  RestrictByTrueTypeOfResultVisitor());	  NodeTraversal.traverse(compiler,    node,    resultEqualsValue,    new    RestrictByOneTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	236	None	replace
1184	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  new  RestrictByOneTypeOfResultVisitor());  [CE]  cannot  find  symbol  compiler  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  new  RestrictByOneTypeOfResultVisitor());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  qualifiedName,  new  RestrictByOneTypeOfResultVisitor());	  NodeTraversal.traverse(compiler,    node,    resultEqualsValue,    new    RestrictByOneTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	236	None	replace
1185	[BUG]  [BUGGY]  Node  node  =  scope.getNextNode();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.getNextNode();  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getNextNode();	  Node    node    =    scope.getParentNode();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	433	None	replace
1186	[BUG]  [BUGGY]  Node  node  =  scope.getParentNode(),  type);  [CE]  ';'  expected  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.getParentNode(),  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getParentNode(),  type);	  Node    node    =    scope.getParentNode();    	non-compiled	[CE]  ';'  expected	433	None	replace
1187	[BUG]  [BUGGY]  Node  node  =  scope.getNextSiblingNode();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.getNextSiblingNode();  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getNextSiblingNode();	  Node    node    =    scope.getParentNode();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	433	None	replace
1188	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(type!=  null  &&  type.isUnknownType());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	Preconditions.checkState(type!=  null  &&  type.isUnknownType());	  Preconditions.checkArgument(type!=    null    &&    type.isUnknownType());    	compilable	  [FE]  IllegalStateException  	344	1	replace
1189	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  &&  type.isUnknownType());  [FE]  IllegalStateException  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(type!=  null  &&  type.isUnknownType());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(type!=  null  &&  type.isUnknownType());	  Preconditions.checkArgument(type!=    null    &&    type.isUnknownType());    	compilable	  [FE]  IllegalStateException  	344	1	replace
1190	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.isFunctionUnknownType());  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.isFunctionUnknownType());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkArgument(type!=  null  &&  type.isFunctionUnknownType());	  Preconditions.checkArgument(type!=    null    &&    type.isUnknownType());    	non-compiled	[CE]  cannot  find  symbol	344	None	replace
1191	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(type  ==  null  &&  type.isUnknownType());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	Preconditions.checkArgument(type  ==  null  &&  type.isUnknownType());	  Preconditions.checkArgument(type!=    null    &&    type.isUnknownType());    	compilable	  [FE]  IllegalArgumentException  	344	1	replace
1192	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  null  &&  type.isUnknownType());  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(type  ==  null  &&  type.isUnknownType());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkArgument(type  ==  null  &&  type.isUnknownType());	  Preconditions.checkArgument(type!=    null    &&    type.isUnknownType());    	compilable	  [FE]  IllegalArgumentException  	344	1	replace
1193	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(type  ==  null  ||  type.isUnknownType());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	Preconditions.checkArgument(type  ==  null  ||  type.isUnknownType());	  Preconditions.checkArgument(type!=    null    &&    type.isUnknownType());    	compilable	  [FE]  IllegalArgumentException  	344	1	replace
1194	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  null  ||  type.isUnknownType());  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(type  ==  null  ||  type.isUnknownType());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkArgument(type  ==  null  ||  type.isUnknownType());	  Preconditions.checkArgument(type!=    null    &&    type.isUnknownType());    	compilable	  [FE]  IllegalArgumentException  	344	1	replace
1195	[BUG]  [BUGGY]  Preconditions.checkArgument(qualifiedName!=  null  &&  type.isUnknownType());  [CE]  variable  qualifiedName  might  not  have  been  initialized  [FE]              IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(qualifiedName!=  null  &&  type.isUnknownType());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkArgument(qualifiedName!=  null  &&  type.isUnknownType());	  Preconditions.checkArgument(type!=    null    &&    type.isUnknownType());    	non-compiled	[CE]  variable  qualifiedName  might  not  have  been  initialized	344	None	replace
1196	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.isFunctionDeclaration());  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.isFunctionDeclaration());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkArgument(type!=  null  &&  type.isFunctionDeclaration());	  Preconditions.checkArgument(type!=    null    &&    type.isUnknownType());    	non-compiled	[CE]  cannot  find  symbol	344	None	replace
1197	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.isFunctionType());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	Preconditions.checkArgument(type!=  null  &&  type.isFunctionType());	  Preconditions.checkArgument(type!=    null    &&    type.isUnknownType());    	compilable	  [FE]  IllegalArgumentException  	344	1	replace
1198	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.isFunctionType());  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.isFunctionType());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkArgument(type!=  null  &&  type.isFunctionType());	  Preconditions.checkArgument(type!=    null    &&    type.isUnknownType());    	compilable	  [FE]  IllegalArgumentException  	344	1	replace
1199	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName());  JSType  node  =  node.getJSType();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName());  JSType  node  =  node.getJSType();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName());  JSType  node  =  node.getJSType();	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getQualifiedName());    JSType    node    =    node.getJSType();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	303	None	replace
1200	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  qualifiedName,  node.getQualifiedName());  JSType  node  =  node.getJSType();  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,String)  [FE]          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  qualifiedName,  node.getQualifiedName());  JSType  node  =  node.getJSType();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  qualifiedName,  node.getQualifiedName());  JSType  node  =  node.getJSType();	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getQualifiedName());    JSType    node    =    node.getJSType();    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,String)	303	None	replace
1201	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  qualifiedName);  JSType  node  =  node.getJSType();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  qualifiedName);  JSType  node  =  node.getJSType();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  qualifiedName);  JSType  node  =  node.getJSType();	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getQualifiedName());    JSType    node    =    node.getJSType();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	303	None	replace
1202	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getQualifiedName());  Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getQualifiedName());  [CE]  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getQualifiedName());  Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    has    been    refined.   "    +    node.getQualifiedName());    Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getQualifiedName());	  	non-compiled	[CE]  	504	None	add
1203	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getQualifiedName());  Node  has  been  refined.   "  +  node.getQualifiedName());  [CE]  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getQualifiedName());  Node  has  been  refined.   "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    has    been    refined.   "    +    node.getQualifiedName());    Node  has  been  refined.   "  +  node.getQualifiedName());	  	non-compiled	[CE]  	504	None	add
1204	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getQualifiedName());  IllegalArgumentException( "Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getQualifiedName());  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getQualifiedName());  IllegalArgumentException( "Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    has    been    refined.   "    +    node.getQualifiedName());    IllegalArgumentException( "Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getQualifiedName());	  	non-compiled	[CE]  cannot  find  symbol	504	None	add
1205	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getQualifiedName());  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getQualifiedName());  Node  node  =  node.getFirstChild();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    has    been    refined.   "    +    node.getQualifiedName());    Node  node  =  node.getFirstChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	504	None	add
1206	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getQualifiedName());  Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getQualifiedName());  break;  [CE]  [FE]            IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getQualifiedName());  Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getQualifiedName());  break;  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    has    been    refined.   "    +    node.getQualifiedName());    Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getQualifiedName());  break;	  	non-compiled	[CE]  	504	None	add
1207	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getQualifiedName());  Node  cannot  be  refined.  Node  has  been  refined.  (  +  node.getQualifiedName());  [CE]  [FE]              IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getQualifiedName());  Node  cannot  be  refined.  Node  has  been  refined.  (  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    has    been    refined.   "    +    node.getQualifiedName());    Node  cannot  be  refined.  Node  has  been  refined.  (  +  node.getQualifiedName());	  	non-compiled	[CE]  	504	None	add
1208	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getQualifiedName());  Node  parent  =  node.getParent();  [CE]  unreachable  statement  [FE]                IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getQualifiedName());  Node  parent  =  node.getParent();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    has    been    refined.   "    +    node.getQualifiedName());    Node  parent  =  node.getParent();	  	non-compiled	[CE]  unreachable  statement	504	None	add
1209	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getQualifiedName());  Node  node  =  node.getJSType();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                  IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  has  been  refined.   "  +  node.getQualifiedName());  Node  node  =  node.getJSType();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    has    been    refined.   "    +    node.getQualifiedName());    Node  node  =  node.getJSType();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	504	None	add
1210	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree());  }  else  {  scope.inferQualifiedSlot(node,  qualifiedName,  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree());  }  else  {  scope.inferQualifiedSlot(node,  qualifiedName,  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(node.getType()  ==  Token.NAME)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree());  }  else  {  scope.inferQualifiedSlot(node,  qualifiedName,	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.       "    +    node.toStringTree());    new    IllegalArgumentException(       "Node    cannot    be    refined.       "    +    node.toStringTree());    	non-compiled	[CE]  illegal  start  of  expression	417	None	replace
1211	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree());  }  else  {  scope.inferQualifiedSlot(node,  qualifiedName  [CE]  [FE]          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(node.getType()  ==  Token.NAME)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree());  }  else  {  scope.inferQualifiedSlot(node,  qualifiedName  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(node.getType()  ==  Token.NAME)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree());  }  else  {  scope.inferQualifiedSlot(node,  qualifiedName	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.       "    +    node.toStringTree());    new    IllegalArgumentException(       "Node    cannot    be    refined.       "    +    node.toStringTree());    	non-compiled	[CE]  	417	None	replace
1212	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getString(),  type);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,JSType)  [FE]                UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getString(),  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getString(),  type);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    Node    node    =    node.getFirstChild();    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,JSType)	57	None	replace
1213	[BUG]  [BUGGY]  Throwable  node  =  node.getThrowable();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                  UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  node.getThrowable();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  node.getThrowable();	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    Node    node    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	57	None	replace
1214	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  must  be  in  the  range  [   "  +  node.getQualifiedName());  Node  must  be  in  the  range  [   "  +  node.getQualifiedName());  [CE]  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  must  be  in  the  range  [   "  +  node.getQualifiedName());  Node  must  be  in  the  range  [   "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    must    be    in    the    range    [   "    +    node.getQualifiedName());    Node  must  be  in  the  range  [   "  +  node.getQualifiedName());	  	non-compiled	[CE]  	510	None	add
1215	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  must  be  in  the  range  [   "  +  node.getQualifiedName());  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  range  [   "  +  node.getQualifiedName());  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  must  be  in  the  range  [   "  +  node.getQualifiedName());  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  range  [   "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    must    be    in    the    range    [   "    +    node.getQualifiedName());    IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  range  [   "  +  node.getQualifiedName());	  	non-compiled	[CE]  cannot  find  symbol	510	None	add
1216	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  must  be  in  the  range  [   "  +  node.getQualifiedName());  Node  cannot  be  refined.  Node  must  be  in  the  range  [   "  +  node.getQualifiedName());  [CE]  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  must  be  in  the  range  [   "  +  node.getQualifiedName());  Node  cannot  be  refined.  Node  must  be  in  the  range  [   "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    must    be    in    the    range    [   "    +    node.getQualifiedName());    Node  cannot  be  refined.  Node  must  be  in  the  range  [   "  +  node.getQualifiedName());	  	non-compiled	[CE]  	510	None	add
1217	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  must  be  in  the  range  [   "  +  node.getQualifiedName());  Node  must  be  in  the  range  [   "  +  node.getQualifiedName());  break;  [CE]  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  must  be  in  the  range  [   "  +  node.getQualifiedName());  Node  must  be  in  the  range  [   "  +  node.getQualifiedName());  break;  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    must    be    in    the    range    [   "    +    node.getQualifiedName());    Node  must  be  in  the  range  [   "  +  node.getQualifiedName());  break;	  	non-compiled	[CE]  	510	None	add
1218	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  must  be  in  the  range  [   "  +  node.getQualifiedName());  Node  must  be  in  the  range  ['  +  node.getQualifiedName());  [CE]  [FE]            IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  must  be  in  the  range  [   "  +  node.getQualifiedName());  Node  must  be  in  the  range  ['  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    must    be    in    the    range    [   "    +    node.getQualifiedName());    Node  must  be  in  the  range  ['  +  node.getQualifiedName());	  	non-compiled	[CE]  	510	None	add
1219	[BUG]  [BUGGY]  Node  node  =  scope.getNativeType(UNKNOWN_TYPE,  NODE_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.getNativeType(UNKNOWN_TYPE,  NODE_TYPE);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getNativeType(UNKNOWN_TYPE,  NODE_TYPE);	  Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE,    NODE_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	393	None	replace
1220	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  NODE_TYPE,  scope);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  NODE_TYPE,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  NODE_TYPE,  scope);	  Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE,    NODE_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	393	None	replace
1221	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  type);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  type);	  Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE,    NODE_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	393	None	replace
1222	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  NODE_TYPE,  qualifiedName);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  NODE_TYPE,  qualifiedName);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  NODE_TYPE,  qualifiedName);	  Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE,    NODE_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	393	None	replace
1223	[BUG]  [BUGGY]  Node  cannot  be  refined.  can  be  refined.   "  +  node.toStringTree());  [CE]  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  cannot  be  refined.  can  be  refined.   "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  cannot  be  refined.  can  be  refined.   "  +  node.toStringTree());	  if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    can    be    refined.   "    +    node.toStringTree());    }    	non-compiled	[CE]  	7	None	replace
1224	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  can  be  refined. "  +  type.toStringTree());  }  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  can  be  refined. "  +  type.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  can  be  refined. "  +  type.toStringTree());  }	  if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    can    be    refined.   "    +    node.toStringTree());    }    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
1225	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  this,  resultEqualsValue,  scope);  [CE]  cannot  find  symbol  compiler  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  this,  resultEqualsValue,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  type,  this,  resultEqualsValue,  scope);	  NodeTraversal.traverse(compiler,    node,    type,    this,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	154	None	replace
1226	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  type,  this,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  type,  this,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  qualifiedName,  type,  this,  resultEqualsValue);	  NodeTraversal.traverse(compiler,    node,    type,    this,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	154	None	replace
1227	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  this,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  this,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  qualifiedName,  this,  resultEqualsValue);	  NodeTraversal.traverse(compiler,    node,    type,    this,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	154	None	replace
1228	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  scope,  this,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  scope,  this,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  type,  scope,  this,  resultEqualsValue);	  NodeTraversal.traverse(compiler,    node,    type,    this,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	154	None	replace
1229	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  this,  type,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  this,  type,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  qualifiedName,  this,  type,  resultEqualsValue);	  NodeTraversal.traverse(compiler,    node,    type,    this,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	154	None	replace
1230	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  OPEN_TYPE,  type,  true);  [CE]  cannot  find  symbol  compiler  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  OPEN_TYPE,  type,  true);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  OPEN_TYPE,  type,  true);	  NodeTraversal.traverse(compiler,    node,    OPEN_TYPE,    type,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	451	None	replace
1231	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  OPEN_TYPE,  scope,  false);  [CE]  cannot  find  symbol  compiler  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  OPEN_TYPE,  scope,  false);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  OPEN_TYPE,  scope,  false);	  NodeTraversal.traverse(compiler,    node,    OPEN_TYPE,    type,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	451	None	replace
1232	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  DEFAULT_TYPE,  type,  false);  [CE]  cannot  find  symbol  compiler  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  DEFAULT_TYPE,  type,  false);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  DEFAULT_TYPE,  type,  false);	  NodeTraversal.traverse(compiler,    node,    OPEN_TYPE,    type,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	451	None	replace
1233	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  OPEN_TYPE,  type,  false);  [CE]  cannot  find  symbol  compiler  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  OPEN_TYPE,  type,  false);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope,  OPEN_TYPE,  type,  false);	  NodeTraversal.traverse(compiler,    node,    OPEN_TYPE,    type,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	451	None	replace
1234	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  OPEN_TYPE,  false);  [CE]  cannot  find  symbol  compiler  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  OPEN_TYPE,  false);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  type,  OPEN_TYPE,  false);	  NodeTraversal.traverse(compiler,    node,    OPEN_TYPE,    type,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	451	None	replace
1235	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  OPEN_TYPE,  qualifiedName,  false);  [CE]  cannot  find  symbol  compiler  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  OPEN_TYPE,  qualifiedName,  false);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  OPEN_TYPE,  qualifiedName,  false);	  NodeTraversal.traverse(compiler,    node,    OPEN_TYPE,    type,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	451	None	replace
1236	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  UNKNOWN_TYPE,  type,  false);  [CE]  cannot  find  symbol  compiler  [FE]                                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  UNKNOWN_TYPE,  type,  false);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  UNKNOWN_TYPE,  type,  false);	  NodeTraversal.traverse(compiler,    node,    OPEN_TYPE,    type,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	451	None	replace
1237	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  scope,  qualifiedName);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  scope,  qualifiedName);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  scope,  qualifiedName);	  Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE,    scope);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	172	None	replace
1238	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  scope,  resultEqualsValue);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  scope,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  scope,  resultEqualsValue);	  Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE,    scope);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	172	None	replace
1239	[BUG]  [BUGGY]  Node  node  =  type.getLastChild();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  type.getLastChild();  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  type.getLastChild();	  Node    node    =    node.getLastChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	104	None	replace
1240	[BUG]  [BUGGY]  Node  node  =  scope.getNode(node.getLastChild());  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.getNode(node.getLastChild());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getNode(node.getLastChild());	  Node    node    =    node.getLastChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	104	None	replace
1241	[BUG]  [BUGGY]  Node  node  =  scope.getNode(node.getFirstChild());  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.getNode(node.getFirstChild());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getNode(node.getFirstChild());	  Node    node    =    node.getLastChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	104	None	replace
1242	[BUG]  [BUGGY]  scope.inferQualifiedSlot(qualifiedName,  type,  origType);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(qualifiedName,  type,  origType);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(qualifiedName,  type,  origType);	  scope.inferQualifiedSlot(type,    qualifiedName,    origType);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	117	None	replace
1243	[BUG]  [BUGGY]  scope.inferQualifiedSlot(type,  qualifiedName,  origType,  type);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(type,  qualifiedName,  origType,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(type,  qualifiedName,  origType,  type);	  scope.inferQualifiedSlot(type,    qualifiedName,    origType);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	117	None	replace
1244	[BUG]  [BUGGY]  scope.inferQualifiedSlot(type,  qualifiedName,  origType,  resultEqualsValue);  [CE]  cannot  find  symbol  resultEqualsValue  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(type,  qualifiedName,  origType,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(type,  qualifiedName,  origType,  resultEqualsValue);	  scope.inferQualifiedSlot(type,    qualifiedName,    origType);    	non-compiled	[CE]  cannot  find  symbol  resultEqualsValue	117	None	replace
1245	[BUG]  [BUGGY]  JSType  node  =  node.toStringTree();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  JSType  node  =  node.toStringTree();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	JSType  node  =  node.toStringTree();	  Throwable    node    =    node.toStringTree();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	239	None	replace
1246	[BUG]  [BUGGY]  Throwable  node  =  scope.getNativeType(JSTypeNative.UNKNOWN_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  scope.getNativeType(JSTypeNative.UNKNOWN_TYPE);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  scope.getNativeType(JSTypeNative.UNKNOWN_TYPE);	  Throwable    node    =    node.toStringTree();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	239	None	replace
1247	[BUG]  [BUGGY]  Throwable  node  =  scope.getNativeType(JSTypeNative.NO_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  scope.getNativeType(JSTypeNative.NO_TYPE);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  scope.getNativeType(JSTypeNative.NO_TYPE);	  Throwable    node    =    node.toStringTree();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	239	None	replace
1248	[BUG]  [BUGGY]  Throwable  node  =  scope.getTreeLocation(node);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  scope.getTreeLocation(node);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  scope.getTreeLocation(node);	  Throwable    node    =    node.toStringTree();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	239	None	replace
1249	[BUG]  [BUGGY]  Throwable  node  =  new  IllegalArgumentException(type.toStringTree());  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  new  IllegalArgumentException(type.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  new  IllegalArgumentException(type.toStringTree());	  Throwable    node    =    new    IllegalArgumentException(   "Node    cannot    be    refined.    n       "    +    type.toStringTree());    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	338	None	replace
1250	[BUG]  [BUGGY]  Throwable  node  =  new  IllegalArgumentException(scope,  qualifiedName  + "  cannot  be  refined. "  +  type.toStringTree());  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  new  IllegalArgumentException(scope,  qualifiedName  + "  cannot  be  refined. "  +  type.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  new  IllegalArgumentException(scope,  qualifiedName  + "  cannot  be  refined. "  +  type.toStringTree());	  Throwable    node    =    new    IllegalArgumentException(   "Node    cannot    be    refined.    n       "    +    type.toStringTree());    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	338	None	replace
1251	[BUG]  [BUGGY]  Throwable  node  =  new  IllegalArgumentException(node.toStringTree());  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  new  IllegalArgumentException(node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  new  IllegalArgumentException(node.toStringTree());	  Throwable    node    =    new    IllegalArgumentException(   "Node    cannot    be    refined.    n       "    +    type.toStringTree());    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	338	None	replace
1252	[BUG]  [BUGGY]  Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type.toStringTree(), "  +  type.toStringTree());  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type.toStringTree(), "  +  type.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type.toStringTree(), "  +  type.toStringTree());	  Throwable    node    =    new    IllegalArgumentException(   "Node    cannot    be    refined.    n       "    +    type.toStringTree());    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	338	None	replace
1253	[BUG]  [BUGGY]  Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  is  defined  with  type.toStringTree(), "  +  type.toStringTree());  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  is  defined  with  type.toStringTree(), "  +  type.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  is  defined  with  type.toStringTree(), "  +  type.toStringTree());	  Throwable    node    =    new    IllegalArgumentException(   "Node    cannot    be    refined.    n       "    +    type.toStringTree());    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	338	None	replace
1254	[BUG]  [BUGGY]  Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type.toStringTree());  [CE]  unclosed  string  literal  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type.toStringTree());	  Throwable    node    =    new    IllegalArgumentException(   "Node    cannot    be    refined.    n       "    +    type.toStringTree());    	non-compiled	[CE]  unclosed  string  literal	338	None	replace
1255	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  DEFAULT_TYPE,  qualifiedName,  type);  [CE]  cannot  find  symbol  compiler  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  DEFAULT_TYPE,  qualifiedName,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  DEFAULT_TYPE,  qualifiedName,  type);	  NodeTraversal.traverse(compiler,    node,    qualifiedName,    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	98	None	replace
1256	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  UNKNOWN_TYPE,  qualifiedName,  type);  [CE]  cannot  find  symbol  compiler  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  UNKNOWN_TYPE,  qualifiedName,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  UNKNOWN_TYPE,  qualifiedName,  type);	  NodeTraversal.traverse(compiler,    node,    qualifiedName,    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	98	None	replace
1257	[BUG]  [BUGGY]  Node  cannot  be  refined.  n  =  node.getLineno();  [CE]  ';'  expected  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  cannot  be  refined.  n  =  node.getLineno();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  cannot  be  refined.  n  =  node.getLineno();	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    Node    cannot    be    refined.    n       "    +    node.getLineno());    }    else    {    scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    break;    	non-compiled	[CE]  ';'  expected	170	None	replace
1258	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  type,  resultEqualsValue,  origType);  break;  [CE]  cannot  find  symbol  resultEqualsValue  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  type,  resultEqualsValue,  origType);  break;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  type,  resultEqualsValue,  origType);  break;	  scope.inferQualifiedSlot(node,    type,    origType);    break;    	non-compiled	[CE]  cannot  find  symbol  resultEqualsValue	212	None	replace
1259	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  type,  qualifiedName,  origType);  break;  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  type,  qualifiedName,  origType);  break;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  type,  qualifiedName,  origType);  break;	  scope.inferQualifiedSlot(node,    type,    origType);    break;    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	212	None	replace
1260	[BUG]  [BUGGY]  boolean  resultEqualsValue  =  type.inferQualifiedSlot(qualifiedName,  origType,  node);  [CE]  cannot  find  symbol  [FE]              UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  boolean  resultEqualsValue  =  type.inferQualifiedSlot(qualifiedName,  origType,  node);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	boolean  resultEqualsValue  =  type.inferQualifiedSlot(qualifiedName,  origType,  node);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    boolean    resultEqualsValue    =    scope.inferQualifiedSlot(qualifiedName,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol	402	None	replace
1261	[BUG]  [BUGGY]  boolean  resultEqualsValue  =  type.inferQualifiedSlot(qualifiedName,  origType,  node.getString());  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  boolean  resultEqualsValue  =  type.inferQualifiedSlot(qualifiedName,  origType,  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	boolean  resultEqualsValue  =  type.inferQualifiedSlot(qualifiedName,  origType,  node.getString());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    boolean    resultEqualsValue    =    scope.inferQualifiedSlot(qualifiedName,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol	402	None	replace
1262	[BUG]  [BUGGY]  boolean  resultEqualsValue  =  type.inferQualifiedSlot(qualifiedName,  origType,  scope);  [CE]  cannot  find  symbol  [FE]                  UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  boolean  resultEqualsValue  =  type.inferQualifiedSlot(qualifiedName,  origType,  scope);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	boolean  resultEqualsValue  =  type.inferQualifiedSlot(qualifiedName,  origType,  scope);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    boolean    resultEqualsValue    =    scope.inferQualifiedSlot(qualifiedName,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol	402	None	replace
1263	[BUG]  [BUGGY]  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(qualifiedName,  type,  origType);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                    UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(qualifiedName,  type,  origType);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	boolean  resultEqualsValue  =  scope.inferQualifiedSlot(qualifiedName,  type,  origType);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    boolean    resultEqualsValue    =    scope.inferQualifiedSlot(qualifiedName,    origType,    type);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	402	None	replace
1264	[BUG]  [BUGGY]  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(qualifiedName,  origType,  type,  node);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                      UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(qualifiedName,  origType,  type,  node);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	boolean  resultEqualsValue  =  scope.inferQualifiedSlot(qualifiedName,  origType,  type,  node);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    boolean    resultEqualsValue    =    scope.inferQualifiedSlot(qualifiedName,    origType,    type);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	402	None	replace
1265	[BUG]  [BUGGY]  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(qualifiedName,  node,  origType,  type);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                        UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(qualifiedName,  node,  origType,  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	boolean  resultEqualsValue  =  scope.inferQualifiedSlot(qualifiedName,  node,  origType,  type);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    boolean    resultEqualsValue    =    scope.inferQualifiedSlot(qualifiedName,    origType,    type);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	402	None	replace
1266	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  qualified  name: "  +  node.getQualifiedName(),  type);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,JSType)  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  qualified  name: "  +  node.getQualifiedName(),  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  qualified  name: "  +  node.getQualifiedName(),  type);	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    qualified    name:   "    +    node.getQualifiedName());    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,JSType)	76	None	replace
1267	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  qualified  name: "  +  node.getQualifiedName());  [CE]  <identifier>  expected  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  qualified  name: "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  qualified  name: "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    qualified    name:   "    +    node.getQualifiedName());    	non-compiled	[CE]  <identifier>  expected	76	None	replace
1268	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  qualified  name: "  +  node.getQualifiedName());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  qualified  name: "  +  node.getQualifiedName());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    qualified    name:   "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	76	1	replace
1269	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  qualified  name: "  +  node.getQualifiedName());  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  qualified  name: "  +  node.getQualifiedName());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  qualified  name: "  +  node.getQualifiedName());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    qualified    name:   "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	76	1	replace
1270	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  qualified  name: "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  qualified  name: "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    qualified    name:   "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	76	1	replace
1271	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  qualified  name: "  +  node.toStringTree());  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  qualified  name: "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  qualified  name: "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    qualified    name:   "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	76	1	replace
1272	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  qualified  name: "  +  node,  type.getQualifiedName());  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  qualified  name: "  +  node,  type.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  qualified  name: "  +  node,  type.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    qualified    name:   "    +    node.getQualifiedName());    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
1273	[BUG]  [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.  qualified  name: "  +  node.getQualifiedName(),  type);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,JSType)  [FE]              IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.  qualified  name: "  +  node.getQualifiedName(),  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	new  IllegalArgumentException( "Node  cannot  be  refined.  qualified  name: "  +  node.getQualifiedName(),  type);	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    qualified    name:   "    +    node.getQualifiedName());    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,JSType)	76	None	replace
1274	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkNotNull(type);  Preconditions.checkNotNull(type);  Preconditions.checkNotNull(type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	                Preconditions.checkNotNull(type);        Preconditions.checkNotNull(type);    Preconditions.checkNotNull(type);  Preconditions.checkNotNull(type);	  	compilable	  [FE]  IllegalArgumentException  	22	1	add
1275	[BUG]  [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkNotNull(type);  Preconditions.checkNotNull(type);  Preconditions.checkNotNull(type);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkNotNull(type);  Preconditions.checkNotNull(type);  Preconditions.checkNotNull(type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	                Preconditions.checkNotNull(type);        Preconditions.checkNotNull(type);    Preconditions.checkNotNull(type);  Preconditions.checkNotNull(type);	  	compilable	  [FE]  IllegalArgumentException  	22	1	add
1276	[BUG]  [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkNotNull(type);  Preconditions.checkState(type!=  null);  Preconditions.checkState(scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [CE]  ')'  expected  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkNotNull(type);  Preconditions.checkState(type!=  null);  Preconditions.checkState(scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	                Preconditions.checkNotNull(type);        Preconditions.checkNotNull(type);    Preconditions.checkState(type!=  null);  Preconditions.checkState(scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);	  	non-compiled	[CE]  ')'  expected	22	None	add
1277	[BUG]  [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkNotNull(type);  Preconditions.checkArgument(type!=  null?  getNativeType(UNKNOWN_TYPE):  type);  [CE]  no  suitable  method  found  for  checkArgument(JSType)  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkNotNull(type);  Preconditions.checkArgument(type!=  null?  getNativeType(UNKNOWN_TYPE):  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	                Preconditions.checkNotNull(type);        Preconditions.checkNotNull(type);    Preconditions.checkArgument(type!=  null?  getNativeType(UNKNOWN_TYPE):  type);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(JSType)	22	None	add
1278	[BUG]  [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkNotNull(type);  Preconditions.checkState(type!=  null);  Preconditions.checkState(type  ==  null?  getNativeType(UNKNOWN_TYPE):  type);  [CE]  no  suitable  method  found  for  checkState(JSType)  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkNotNull(type);  Preconditions.checkState(type!=  null);  Preconditions.checkState(type  ==  null?  getNativeType(UNKNOWN_TYPE):  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	                Preconditions.checkNotNull(type);        Preconditions.checkNotNull(type);    Preconditions.checkState(type!=  null);  Preconditions.checkState(type  ==  null?  getNativeType(UNKNOWN_TYPE):  type);	  	non-compiled	[CE]  no  suitable  method  found  for  checkState(JSType)	22	None	add
1279	[BUG]  [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkNotNull(type);  Preconditions.checkState(type  ==  null);  Preconditions.checkState(type!=  null?  getNativeType(UNKNOWN_TYPE):  type);  [CE]  no  suitable  method  found  for  checkState(JSType)  [FE]            IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkNotNull(type);  Preconditions.checkState(type  ==  null);  Preconditions.checkState(type!=  null?  getNativeType(UNKNOWN_TYPE):  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	                Preconditions.checkNotNull(type);        Preconditions.checkNotNull(type);    Preconditions.checkState(type  ==  null);  Preconditions.checkState(type!=  null?  getNativeType(UNKNOWN_TYPE):  type);	  	non-compiled	[CE]  no  suitable  method  found  for  checkState(JSType)	22	None	add
1280	[BUG]  [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkNotNull(type);  Preconditions.checkState(type!=  null);  Preconditions.checkState(type!=  null?  getNativeType(UNKNOWN_TYPE):  type);  [CE]  no  suitable  method  found  for  checkState(JSType)  [FE]              IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkNotNull(type);  Preconditions.checkState(type!=  null);  Preconditions.checkState(type!=  null?  getNativeType(UNKNOWN_TYPE):  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	                Preconditions.checkNotNull(type);        Preconditions.checkNotNull(type);    Preconditions.checkState(type!=  null);  Preconditions.checkState(type!=  null?  getNativeType(UNKNOWN_TYPE):  type);	  	non-compiled	[CE]  no  suitable  method  found  for  checkState(JSType)	22	None	add
1281	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkNotNull(type);  Preconditions.checkState(type!=  null);  Preconditions.checkNotNull(type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	                Preconditions.checkNotNull(type);        Preconditions.checkNotNull(type);    Preconditions.checkState(type!=  null);  Preconditions.checkNotNull(type);	  	compilable	  [FE]  IllegalArgumentException  	22	1	add
1282	[BUG]  [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkNotNull(type);  Preconditions.checkState(type!=  null);  Preconditions.checkNotNull(type);  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkNotNull(type);  Preconditions.checkState(type!=  null);  Preconditions.checkNotNull(type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	                Preconditions.checkNotNull(type);        Preconditions.checkNotNull(type);    Preconditions.checkState(type!=  null);  Preconditions.checkNotNull(type);	  	compilable	  [FE]  IllegalArgumentException  	22	1	add
1283	[BUG]  [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkNotNull(type);  Preconditions.checkArgument(type!=  null?  getNativeType(UNKNOWN_TYPE):  node.toStringTree());  [CE]  no  suitable  method  found  for  checkArgument(Serializable)  [FE]                  IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkNotNull(type);  Preconditions.checkArgument(type!=  null?  getNativeType(UNKNOWN_TYPE):  node.toStringTree());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	                Preconditions.checkNotNull(type);        Preconditions.checkNotNull(type);    Preconditions.checkArgument(type!=  null?  getNativeType(UNKNOWN_TYPE):  node.toStringTree());	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(Serializable)	22	None	add
1284	[BUG]  [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkNotNull(type);  Preconditions.checkState(type!=  null);  Preconditions.checkState(scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type));  [CE]  'void'  type  not  allowed  here  [FE]                    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkNotNull(type);  Preconditions.checkState(type!=  null);  Preconditions.checkState(scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type));  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	                Preconditions.checkNotNull(type);        Preconditions.checkNotNull(type);    Preconditions.checkState(type!=  null);  Preconditions.checkState(scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type));	  	non-compiled	[CE]  'void'  type  not  allowed  here	22	None	add
1285	[BUG]  [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkNotNull(type);  Preconditions.checkArgument(type!=  null?  getNativeType(UNKNOWN_TYPE):  node.getJSType());  [CE]  no  suitable  method  found  for  checkArgument(JSType)  [FE]                      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]          Preconditions.checkNotNull(type);    Preconditions.checkNotNull(type);  Preconditions.checkArgument(type!=  null?  getNativeType(UNKNOWN_TYPE):  node.getJSType());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	                Preconditions.checkNotNull(type);        Preconditions.checkNotNull(type);    Preconditions.checkArgument(type!=  null?  getNativeType(UNKNOWN_TYPE):  node.getJSType());	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(JSType)	22	None	add
1286	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node,  scope.getLocalName());  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node,  scope.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node,  scope.getLocalName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    can    be    refined.   "    +    node,    scope.getLocalName());    	non-compiled	[CE]  <identifier>  expected	424	None	replace
1287	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node,  scope.getName());  [CE]  cannot  find  symbol  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node,  scope.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node,  scope.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    can    be    refined.   "    +    node,    scope.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	424	None	replace
1288	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node,  type.getLocalName());  [CE]  cannot  find  symbol  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node,  type.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node,  type.getLocalName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    can    be    refined.   "    +    node,    scope.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	424	None	replace
1289	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(scope, "Node  cannot  be  refined.  Node  can  be  refined. "  +  node,  scope.getLocalName());  [CE]  cannot  find  symbol  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(scope, "Node  cannot  be  refined.  Node  can  be  refined. "  +  node,  scope.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException(scope, "Node  cannot  be  refined.  Node  can  be  refined. "  +  node,  scope.getLocalName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    can    be    refined.   "    +    node,    scope.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	424	None	replace
1290	[BUG]  [BUGGY]  Throwables.warning( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node,  scope.getLocalName());  [CE]  cannot  find  symbol  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.warning( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node,  scope.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.warning( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node,  scope.getLocalName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    can    be    refined.   "    +    node,    scope.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	424	None	replace
1291	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getString(),   "  +  node.getString());  Node  defined  with  node.getString(),   "  +  node.getString());  [CE]  [FE]    UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getString(),   "  +  node.getString());  Node  defined  with  node.getString(),   "  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getString(),   "    +    node.getString());    Node  defined  with  node.getString(),   "  +  node.getString());	  	non-compiled	[CE]  	467	None	add
1292	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getString(),   "  +  node.getString());  Node  defined  with  node.getString(),   "  +  node.toStringTree());  [CE]  [FE]      UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getString(),   "  +  node.getString());  Node  defined  with  node.getString(),   "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getString(),   "    +    node.getString());    Node  defined  with  node.getString(),   "  +  node.toStringTree());	  	non-compiled	[CE]  	467	None	add
1293	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getString(),   "  +  node.getString());  Node  defined  with  node.getString(),   "  +  node.getString());  break;  [CE]  [FE]        UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getString(),   "  +  node.getString());  Node  defined  with  node.getString(),   "  +  node.getString());  break;  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getString(),   "    +    node.getString());    Node  defined  with  node.getString(),   "  +  node.getString());  break;	  	non-compiled	[CE]  	467	None	add
1294	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getString(),   "  +  node.getString());  Node  defined  with  node.getString(),   "  +  node.getStringTree());  [CE]  [FE]          UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getString(),   "  +  node.getString());  Node  defined  with  node.getString(),   "  +  node.getStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getString(),   "    +    node.getString());    Node  defined  with  node.getString(),   "  +  node.getStringTree());	  	non-compiled	[CE]  	467	None	add
1295	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getString(),   "  +  node.getString());  Node  defined  with  node.getString(), ",  +  node.getString());  [CE]  [FE]            UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getString(),   "  +  node.getString());  Node  defined  with  node.getString(), ",  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getString(),   "    +    node.getString());    Node  defined  with  node.getString(), ",  +  node.getString());	  	non-compiled	[CE]  	467	None	add
1296	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getString(),   "  +  node.getString());  Node  definedWith  node.getString(),   "  +  node.getString());  [CE]  [FE]              UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getString(),   "  +  node.getString());  Node  definedWith  node.getString(),   "  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getString(),   "    +    node.getString());    Node  definedWith  node.getString(),   "  +  node.getString());	  	non-compiled	[CE]  	467	None	add
1297	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getString(),   "  +  node.getString());  Node  defined  with  node.getString(),'  +  node.getString());  [CE]  [FE]                UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  node.getString(),   "  +  node.getString());  Node  defined  with  node.getString(),'  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getString(),   "    +    node.getString());    Node  defined  with  node.getString(),'  +  node.getString());	  	non-compiled	[CE]  	467	None	add
1298	[BUG]  [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  resultEqualsValue);  [CE]  cannot  find  symbol  resultEqualsValue  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(node,  qualifiedName,  origType,  resultEqualsValue);	  scope.inferSlot(node,    qualifiedName,    origType,    value);    	non-compiled	[CE]  cannot  find  symbol  resultEqualsValue	365	None	replace
1299	[BUG]  [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  null);  [CE]  cannot  find  symbol  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(node,  qualifiedName,  origType,  null);	  scope.inferSlot(node,    qualifiedName,    origType,    value);    	non-compiled	[CE]  cannot  find  symbol	365	None	replace
1300	[BUG]  [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  name);  [CE]  cannot  find  symbol  name  [FE]                                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  name);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(node,  qualifiedName,  origType,  name);	  scope.inferSlot(node,    qualifiedName,    origType,    value);    	non-compiled	[CE]  cannot  find  symbol  name	365	None	replace
1301	[BUG]  [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  node);  [CE]  cannot  find  symbol  [FE]                                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  node);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(node,  qualifiedName,  origType,  node);	  scope.inferSlot(node,    qualifiedName,    origType,    value);    	non-compiled	[CE]  cannot  find  symbol	365	None	replace
1302	[BUG]  [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  equalsValue);  [CE]  cannot  find  symbol  equalsValue  [FE]                                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  equalsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(node,  qualifiedName,  origType,  equalsValue);	  scope.inferSlot(node,    qualifiedName,    origType,    value);    	non-compiled	[CE]  cannot  find  symbol  equalsValue	365	None	replace
1303	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [ "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [ "  +  node.getLineno());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    type    must    be    in    the    range    [   "    +    node.getString());    	compilable	  [FE]  IllegalArgumentException  	466	1	replace
1304	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [ "  +  node.getLineno());  [FE]  IllegalArgumentException  [FE]    UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [ "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [ "  +  node.getLineno());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    type    must    be    in    the    range    [   "    +    node.getString());    	compilable	  [FE]  IllegalArgumentException  	466	1	replace
1305	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [ "  +  node.getString());  [CE]  <identifier>  expected  [FE]      UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [ "  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [ "  +  node.getString());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    type    must    be    in    the    range    [   "    +    node.getString());    	non-compiled	[CE]  <identifier>  expected	466	None	replace
1306	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [ "  +  node.getString());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [ "  +  node.getString());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    type    must    be    in    the    range    [   "    +    node.getString());    	compilable	  [FE]  UnsupportedOperationException  	466	1	replace
1307	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [ "  +  node.getString());  }  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [ "  +  node.getString());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [ "  +  node.getString());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    type    must    be    in    the    range    [   "    +    node.getString());    	compilable	  [FE]  UnsupportedOperationException  	466	1	replace
1308	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [ "  +  node.getLocalName());  [CE]  cannot  find  symbol  [FE]            UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [ "  +  node.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [ "  +  node.getLocalName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    type    must    be    in    the    range    [   "    +    node.getString());    	non-compiled	[CE]  cannot  find  symbol	466	None	replace
1309	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [ "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [ "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    type    must    be    in    the    range    [   "    +    node.getString());    	compilable	  [FE]  IllegalArgumentException  	466	1	replace
1310	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [ "  +  node.toStringTree());  [FE]  IllegalArgumentException  [FE]              UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [ "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [ "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    type    must    be    in    the    range    [   "    +    node.getString());    	compilable	  [FE]  IllegalArgumentException  	466	1	replace
1311	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [ "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [ "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    type    must    be    in    the    range    [   "    +    node.getString());    	compilable	  [FE]  IllegalArgumentException  	466	1	replace
1312	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [ "  +  node.getQualifiedName());  [FE]  IllegalArgumentException  [FE]                UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [ "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [ "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    type    must    be    in    the    range    [   "    +    node.getString());    	compilable	  [FE]  IllegalArgumentException  	466	1	replace
1313	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]                  UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [ "  +  node.getString()  + "] ");  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [ "  +  node.getString()  + "] ");	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    type    must    be    in    the    range    [   "    +    node.getString());    	compilable	  [FE]  UnsupportedOperationException  	466	1	replace
1314	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [ "  +  node.getString()  + "] ");  [FE]  UnsupportedOperationException  [FE]                  UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [ "  +  node.getString()  + "] ");  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [ "  +  node.getString()  + "] ");	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    type    must    be    in    the    range    [   "    +    node.getString());    	compilable	  [FE]  UnsupportedOperationException  	466	1	replace
1315	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [ "  +  scope.getName());  [CE]  cannot  find  symbol  [FE]                    UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [ "  +  scope.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [ "  +  scope.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    type    must    be    in    the    range    [   "    +    node.getString());    	non-compiled	[CE]  cannot  find  symbol	466	None	replace
1316	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  null?   "Node  cannot  be  refined.  n "  +  node.toStringTree());  [CE]  :  expected  [FE]        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(type  ==  null?   "Node  cannot  be  refined.  n "  +  node.toStringTree());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkArgument(type  ==  null?   "Node  cannot  be  refined.  n "  +  node.toStringTree());	          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type    ==    null?   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  :  expected	486	None	replace
1317	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  null? "Node  cannot  be  refined.  n "  +  node.toStringTree());  [CE]  :  expected  [FE]          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(type  ==  null? "Node  cannot  be  refined.  n "  +  node.toStringTree());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(type  ==  null? "Node  cannot  be  refined.  n "  +  node.toStringTree());	          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type    ==    null?   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  :  expected	486	None	replace
1318	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=    null)    {    throw    new    IllegalArgumentException(     "Node    cannot    be    refined.    n     "    +    node.toStringTree());    }    if(type  ==  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n     "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(type!=        null)        {        throw        new        IllegalArgumentException(       "Node        cannot        be        refined.        n       "        +        node.toStringTree());        }        if(type    ==    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n       "    +    node.toStringTree());    }    if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }	  	compilable	  [FE]  IllegalArgumentException  	91	1	add
1319	[BUG]  [BUGGY]  if(type!=    null)    {    throw    new    IllegalArgumentException(     "Node    cannot    be    refined.    n     "    +    node.toStringTree());    }    if(type  ==  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n     "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=    null)    {    throw    new    IllegalArgumentException(     "Node    cannot    be    refined.    n     "    +    node.toStringTree());    }    if(type  ==  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n     "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=        null)        {        throw        new        IllegalArgumentException(       "Node        cannot        be        refined.        n       "        +        node.toStringTree());        }        if(type    ==    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n       "    +    node.toStringTree());    }    if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }	  	compilable	  [FE]  IllegalArgumentException  	91	1	add
1320	[BUG]  [BUGGY]  if(type!=    null)    {    throw    new    IllegalArgumentException(     "Node    cannot    be    refined.    n     "    +    node.toStringTree());    }    if(type  ==  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n     "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree  [CE]  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=    null)    {    throw    new    IllegalArgumentException(     "Node    cannot    be    refined.    n     "    +    node.toStringTree());    }    if(type  ==  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n     "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=        null)        {        throw        new        IllegalArgumentException(       "Node        cannot        be        refined.        n       "        +        node.toStringTree());        }        if(type    ==    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n       "    +    node.toStringTree());    }    if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree	  	non-compiled	[CE]  	91	None	add
1321	[BUG]  [BUGGY]  if(type!=    null)    {    throw    new    IllegalArgumentException(     "Node    cannot    be    refined.    n     "    +    node.toStringTree());    }    if(type  ==  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n     "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n  [CE]  unclosed  string  literal  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=    null)    {    throw    new    IllegalArgumentException(     "Node    cannot    be    refined.    n     "    +    node.toStringTree());    }    if(type  ==  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n     "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=        null)        {        throw        new        IllegalArgumentException(       "Node        cannot        be        refined.        n       "        +        node.toStringTree());        }        if(type    ==    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n       "    +    node.toStringTree());    }    if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n	  	non-compiled	[CE]  unclosed  string  literal	91	None	add
1322	[BUG]  [BUGGY]  if(type!=    null)    {    throw    new    IllegalArgumentException(     "Node    cannot    be    refined.    n     "    +    node.toStringTree());    }    if(type  ==  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n     "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.to  [CE]  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=    null)    {    throw    new    IllegalArgumentException(     "Node    cannot    be    refined.    n     "    +    node.toStringTree());    }    if(type  ==  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n     "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.to  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=        null)        {        throw        new        IllegalArgumentException(       "Node        cannot        be        refined.        n       "        +        node.toStringTree());        }        if(type    ==    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n       "    +    node.toStringTree());    }    if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.to	  	non-compiled	[CE]  	91	None	add
1323	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  resultEqualsValue,  type);  [CE]  cannot  find  symbol  compiler  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  resultEqualsValue,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope,  resultEqualsValue,  type);	  NodeTraversal.traverse(compiler,    node,    scope,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	147	None	replace
1324	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  resultEqualsValue,  value);  [CE]  cannot  find  symbol  compiler  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  resultEqualsValue,  value);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope,  resultEqualsValue,  value);	  NodeTraversal.traverse(compiler,    node,    scope,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	147	None	replace
1325	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  resultEqualsValue,  typeRegistry);  [CE]  cannot  find  symbol  compiler  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  resultEqualsValue,  typeRegistry);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope,  resultEqualsValue,  typeRegistry);	  NodeTraversal.traverse(compiler,    node,    scope,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	147	None	replace
1326	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  resultEqualsValue,  qualifiedName);  [CE]  cannot  find  symbol  compiler  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  resultEqualsValue,  qualifiedName);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope,  resultEqualsValue,  qualifiedName);	  NodeTraversal.traverse(compiler,    node,    scope,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	147	None	replace
1327	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  value,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  value,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  value,  resultEqualsValue);	  NodeTraversal.traverse(compiler,    node,    scope,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	147	None	replace
1328	[BUG]  [BUGGY]  JSType  node  =  scope.inferQualifiedSlot(node,  qualifiedName,  origType);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                    UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  JSType  node  =  scope.inferQualifiedSlot(node,  qualifiedName,  origType);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	JSType  node  =  scope.inferQualifiedSlot(node,  qualifiedName,  origType);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    JSType    node    =    scope.inferQualifiedSlot(node,    qualifiedName,    origType);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	60	None	replace
1329	[BUG]  [BUGGY]  JSType  node  =  scope.inferQualifiedSlot(node,  qualifiedName,  type);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                      UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  JSType  node  =  scope.inferQualifiedSlot(node,  qualifiedName,  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	JSType  node  =  scope.inferQualifiedSlot(node,  qualifiedName,  type);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    JSType    node    =    scope.inferQualifiedSlot(node,    qualifiedName,    origType);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	60	None	replace
1330	[BUG]  [BUGGY]  node  =  scope.inferQualifiedSlot(node,  qualifiedName,  origType);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                        UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  node  =  scope.inferQualifiedSlot(node,  qualifiedName,  origType);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	node  =  scope.inferQualifiedSlot(node,  qualifiedName,  origType);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    JSType    node    =    scope.inferQualifiedSlot(node,    qualifiedName,    origType);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	60	None	replace
1331	[BUG]  [BUGGY]  Node  node  =  scope.inferQualifiedSlot(node,  qualifiedName,  origType);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                          UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.inferQualifiedSlot(node,  qualifiedName,  origType);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.inferQualifiedSlot(node,  qualifiedName,  origType);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    JSType    node    =    scope.inferQualifiedSlot(node,    qualifiedName,    origType);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	60	None	replace
1332	[BUG]  [BUGGY]  node  =  scope.inferQualifiedSlot(node,  qualifiedName,  type);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                            UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  node  =  scope.inferQualifiedSlot(node,  qualifiedName,  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	node  =  scope.inferQualifiedSlot(node,  qualifiedName,  type);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    JSType    node    =    scope.inferQualifiedSlot(node,    qualifiedName,    origType);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	60	None	replace
1333	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  same  type.   "  +  type.toStringTree());  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  same  type.   "  +  type.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  same  type.   "  +  type.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    type    must    be    in    the    same    type.   "    +    type.toStringTree());    	non-compiled	[CE]  <identifier>  expected	428	None	replace
1334	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  same  type.   "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  same  type.   "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    type    must    be    in    the    same    type.   "    +    type.toStringTree());    	compilable	  [FE]  IllegalArgumentException  	428	1	replace
1335	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  same  type.   "  +  node.toStringTree());  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  same  type.   "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  same  type.   "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    type    must    be    in    the    same    type.   "    +    type.toStringTree());    	compilable	  [FE]  IllegalArgumentException  	428	1	replace
1336	[BUG]  [BUGGY]  Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  same  type.   "  +  type.toStringTree());  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  same  type.   "  +  type.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  same  type.   "  +  type.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    type    must    be    in    the    same    type.   "    +    type.toStringTree());    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	428	None	replace
1337	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  same  type.. "  +  type.toStringTree());  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  same  type.. "  +  type.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  same  type.. "  +  type.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    type    must    be    in    the    same    type.   "    +    type.toStringTree());    	non-compiled	[CE]  <identifier>  expected	428	None	replace
1338	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  same  type. "  +  type,  scope.toStringTree());  [CE]  cannot  find  symbol  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  same  type. "  +  type,  scope.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  same  type. "  +  type,  scope.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    type    must    be    in    the    same    type.   "    +    type.toStringTree());    	non-compiled	[CE]  cannot  find  symbol	428	None	replace
1339	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.toStringTree());  Node  defined  with  type   "  +  node.toStringTree());  [CE]  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.toStringTree());  Node  defined  with  type   "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.toStringTree());    Node  defined  with  type   "  +  node.toStringTree());	  	non-compiled	[CE]  	498	None	add
1340	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.toStringTree());  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.toStringTree());  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.toStringTree());  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.toStringTree());    IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.toStringTree());	  	non-compiled	[CE]  cannot  find  symbol	498	None	add
1341	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.toStringTree());  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.toStringTree());  [CE]  not  a  statement  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.toStringTree());  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.toStringTree());    Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.toStringTree());	  	non-compiled	[CE]  not  a  statement	498	None	add
1342	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.toStringTree());  Node  defined  with  type   "  +  node.toStringTree());  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.toStringTree());  }  [CE]  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.toStringTree());  Node  defined  with  type   "  +  node.toStringTree());  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.toStringTree());    Node  defined  with  type   "  +  node.toStringTree());  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.toStringTree());  }	  	non-compiled	[CE]  	498	None	add
1343	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.toStringTree());  Node  defined  with  type   "  +  node.toStringTree());  if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.toStringTree());  }  [CE]  [FE]            IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.toStringTree());  Node  defined  with  type   "  +  node.toStringTree());  if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.toStringTree());    Node  defined  with  type   "  +  node.toStringTree());  if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.toStringTree());  }	  	non-compiled	[CE]  	498	None	add
1344	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.toStringTree());  Node  defined  with  type   "  +  node.toStringTree());  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [CE]  [FE]              IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.toStringTree());  Node  defined  with  type   "  +  node.toStringTree());  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.toStringTree());    Node  defined  with  type   "  +  node.toStringTree());  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);	  	non-compiled	[CE]  	498	None	add
1345	[BUG]  [BUGGY]  scope.inferQualifiedSlot(type,  node,  qualifiedName,  origType,  resultEqualsValue);  [CE]  cannot  find  symbol  resultEqualsValue  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(type,  node,  qualifiedName,  origType,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(type,  node,  qualifiedName,  origType,  resultEqualsValue);	  scope.inferQualifiedSlot(type,    node,    qualifiedName,    origType);    	non-compiled	[CE]  cannot  find  symbol  resultEqualsValue	368	None	replace
1346	[BUG]  [BUGGY]  scope.inferQualifiedSlot(type,  node,  qualifiedName,  origType,  type);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(type,  node,  qualifiedName,  origType,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(type,  node,  qualifiedName,  origType,  type);	  scope.inferQualifiedSlot(type,    node,    qualifiedName,    origType);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	368	None	replace
1347	[BUG]  [BUGGY]  scope.inferQualifiedSlot(type,  node,  qualifiedName,  origType,  value);  [CE]  cannot  find  symbol  value  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(type,  node,  qualifiedName,  origType,  value);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(type,  node,  qualifiedName,  origType,  value);	  scope.inferQualifiedSlot(type,    node,    qualifiedName,    origType);    	non-compiled	[CE]  cannot  find  symbol  value	368	None	replace
1348	[BUG]  [BUGGY]  scope.inferQualifiedSlot(qualifiedName,  node,  type,  origType);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(qualifiedName,  node,  type,  origType);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(qualifiedName,  node,  type,  origType);	  scope.inferQualifiedSlot(type,    node,    qualifiedName,    origType);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	368	None	replace
1349	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  scope,  new  RestrictByTrueTypeOfResultVisitor());  [CE]  cannot  find  symbol  compiler  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  scope,  new  RestrictByTrueTypeOfResultVisitor());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  qualifiedName,  scope,  new  RestrictByTrueTypeOfResultVisitor());	  NodeTraversal.traverse(compiler,    node,    qualifiedName,    new    RestrictByTrueTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	64	None	replace
1350	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  value,  new  RestrictByTrueTypeOfResultVisitor());  [CE]  cannot  find  symbol  compiler  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  value,  new  RestrictByTrueTypeOfResultVisitor());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  value,  new  RestrictByTrueTypeOfResultVisitor());	  NodeTraversal.traverse(compiler,    node,    qualifiedName,    new    RestrictByTrueTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	64	None	replace
1351	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  NODE_RESULT_TYPE,  new  RestrictByTrueTypeOfResultVisitor());  [CE]  cannot  find  symbol  compiler  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  NODE_RESULT_TYPE,  new  RestrictByTrueTypeOfResultVisitor());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  NODE_RESULT_TYPE,  new  RestrictByTrueTypeOfResultVisitor());	  NodeTraversal.traverse(compiler,    node,    qualifiedName,    new    RestrictByTrueTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	64	None	replace
1352	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  n   "  +  node.getLineno());  [CE]  unclosed  string  literal  [FE]            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  node.getFirstChild();  n   "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  node.getFirstChild();  n   "  +  node.getLineno());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    n       "    +    node.getLineno());    	non-compiled	[CE]  unclosed  string  literal	454	None	replace
1353	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getLineno(),  type);  [CE]  <identifier>  expected  [FE]        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getLineno(),  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getLineno(),  type);	  Throwables.throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getLineno());    	non-compiled	[CE]  <identifier>  expected	274	None	replace
1354	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined: "  +  node.getLineno());  [CE]  <identifier>  expected  [FE]          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined: "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined: "  +  node.getLineno());	  Throwables.throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getLineno());    	non-compiled	[CE]  <identifier>  expected	274	None	replace
1355	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    cannot    be    refined.   "    +    node.toStringTree());    }    if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }	  	compilable	  [FE]  IllegalArgumentException  	84	1	add
1356	[BUG]  [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    cannot    be    refined.   "    +    node.toStringTree());    }    if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }	  	compilable	  [FE]  IllegalArgumentException  	84	1	add
1357	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }  if(node  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    cannot    be    refined.   "    +    node.toStringTree());    }    if(node  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }	  	compilable	  [FE]  IllegalArgumentException  	84	1	add
1358	[BUG]  [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }  if(node  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }  if(node  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    cannot    be    refined.   "    +    node.toStringTree());    }    if(node  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }	  	compilable	  [FE]  IllegalArgumentException  	84	1	add
1359	[BUG]  [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }  If(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }  [CE]  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }  If(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    cannot    be    refined.   "    +    node.toStringTree());    }    If(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }	  	non-compiled	[CE]  	84	None	add
1360	[BUG]  [BUGGY]  Preconditions.checkState(origType  ==  null);  [CE]  variable  origType  might  not  have  been  initialized  [FE]    IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(origType  ==  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(origType  ==  null);	  Preconditions.checkState(type    ==    null);    	non-compiled	[CE]  variable  origType  might  not  have  been  initialized	268	None	replace
1361	[BUG]  [BUGGY]  Preconditions.checkState(origType!=  null);  [CE]  variable  origType  might  not  have  been  initialized  [FE]      IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(origType!=  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(origType!=  null);	  Preconditions.checkState(type    ==    null);    	non-compiled	[CE]  variable  origType  might  not  have  been  initialized	268	None	replace
1362	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(type!=  null  &&  node.getType()  ==  Token.FUNCTION);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	Preconditions.checkState(type!=  null  &&  node.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(type    ==    null);    	compilable	  [FE]  IllegalStateException  	268	1	replace
1363	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  &&  node.getType()  ==  Token.FUNCTION);  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(type!=  null  &&  node.getType()  ==  Token.FUNCTION);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(type!=  null  &&  node.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(type    ==    null);    	compilable	  [FE]  IllegalStateException  	268	1	replace
1364	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  &&  type.isUndefinedType());  [CE]  cannot  find  symbol  [FE]          IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(type!=  null  &&  type.isUndefinedType());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(type!=  null  &&  type.isUndefinedType());	  Preconditions.checkState(type    ==    null);    	non-compiled	[CE]  cannot  find  symbol	268	None	replace
1365	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node  ==  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	Preconditions.checkState(node  ==  null);	  Preconditions.checkState(type    ==    null);    	compilable	  [FE]  IllegalStateException  	268	1	replace
1366	[BUG]  [BUGGY]  Preconditions.checkState(node  ==  null);  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node  ==  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(node  ==  null);	  Preconditions.checkState(type    ==    null);    	compilable	  [FE]  IllegalStateException  	268	1	replace
1367	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.getQualifiedName());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.getQualifiedName());  }	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getQualifiedName());    if(Node    cannot    be    refined.    n       "    +    node.getQualifiedName())    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n       "    +    node.getQualifiedName());    }    	compilable	  [FE]  IllegalArgumentException  	447	1	replace
1368	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.getQualifiedName());  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.getQualifiedName());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.getQualifiedName());  }	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getQualifiedName());    if(Node    cannot    be    refined.    n       "    +    node.getQualifiedName())    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n       "    +    node.getQualifiedName());    }    	compilable	  [FE]  IllegalArgumentException  	447	1	replace
1369	[BUG]  [BUGGY]  scope.inferQualifiedSlot(qualifiedName,  node,  origType,  type);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(qualifiedName,  node,  origType,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(qualifiedName,  node,  origType,  type);	  scope.inferQualifiedSlot(value,    node,    origType,    type);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	382	None	replace
1370	[BUG]  [BUGGY]  scope.inferQualifiedSlot(type,  node,  origType,  type);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(type,  node,  origType,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(type,  node,  origType,  type);	  scope.inferQualifiedSlot(value,    node,    origType,    type);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	382	None	replace
1371	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  node,  origType,  type);  [CE]  cannot  find  symbol  name  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(name,  node,  origType,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(name,  node,  origType,  type);	  scope.inferQualifiedSlot(value,    node,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol  name	382	None	replace
1372	[BUG]  [BUGGY]  scope.inferQualifiedSlot(value,  node,  qualifiedName,  origType,  type);  [CE]  cannot  find  symbol  value  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(value,  node,  qualifiedName,  origType,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(value,  node,  qualifiedName,  origType,  type);	  scope.inferQualifiedSlot(value,    node,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol  value	382	None	replace
1373	[BUG]  [BUGGY]  scope.inferQualifiedSlot(ode,  qualifiedName,  origType,  type);  [CE]  cannot  find  symbol  ode  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(ode,  qualifiedName,  origType,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(ode,  qualifiedName,  origType,  type);	  scope.inferQualifiedSlot(value,    node,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol  ode	382	None	replace
1374	[BUG]  [BUGGY]  scope.inferSlot(type,  qualifiedName,  origType,  type);  [CE]  cannot  find  symbol  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferSlot(type,  qualifiedName,  origType,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(type,  qualifiedName,  origType,  type);	  scope.inferSlot(ode,    qualifiedName,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol	444	None	replace
1375	[BUG]  [BUGGY]  scope.inferSlot(value,  qualifiedName,  origType,  type);  [CE]  cannot  find  symbol  value  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferSlot(value,  qualifiedName,  origType,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(value,  qualifiedName,  origType,  type);	  scope.inferSlot(ode,    qualifiedName,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol  value	444	None	replace
1376	[BUG]  [BUGGY]  scope.inferSlot(name,  qualifiedName,  origType,  type);  [CE]  cannot  find  symbol  name  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferSlot(name,  qualifiedName,  origType,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(name,  qualifiedName,  origType,  type);	  scope.inferSlot(ode,    qualifiedName,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol  name	444	None	replace
1377	[BUG]  [BUGGY]  JSType  node  =  node.getLineno();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  JSType  node  =  node.getLineno();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	JSType  node  =  node.getLineno();	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    JSType    node    =    node.getLineno();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	307	None	replace
1378	[BUG]  [BUGGY]  Node  node  =  scope.inferQualifiedSlot(qualifiedName,  type.getFirstChild());  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.inferQualifiedSlot(qualifiedName,  type.getFirstChild());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.inferQualifiedSlot(qualifiedName,  type.getFirstChild());	  Node    node    =    type.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	18	None	replace
1379	[BUG]  [BUGGY]  Node  node  =  this.type.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  this.type.getFirstChild();  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  this.type.getFirstChild();	  Node    node    =    type.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	18	None	replace
1380	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  type,  resultEqualsValue,  scope);  [CE]  cannot  find  symbol  compiler  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  type,  resultEqualsValue,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  type,  resultEqualsValue,  scope);	  NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE),    type,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	397	None	replace
1381	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  qualifiedName,  type,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  qualifiedName,  type,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  qualifiedName,  type,  resultEqualsValue);	  NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE),    type,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	397	None	replace
1382	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  origType,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  origType,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  origType,  resultEqualsValue);	  NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE),    type,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	397	None	replace
1383	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  type,  scope.inferQualifiedSlot(node,  qualifiedName,  resultEqualsValue);  [CE]  ')'  expected  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  type,  scope.inferQualifiedSlot(node,  qualifiedName,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  type,  scope.inferQualifiedSlot(node,  qualifiedName,  resultEqualsValue);	  NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE),    type,    resultEqualsValue);    	non-compiled	[CE]  ')'  expected	397	None	replace
1384	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  type,  scope.inferQualifiedSlot(node,  qualifiedName));  [CE]  cannot  find  symbol  compiler  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  type,  scope.inferQualifiedSlot(node,  qualifiedName));  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  type,  scope.inferQualifiedSlot(node,  qualifiedName));	  NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE),    type,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	397	None	replace
1385	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getQualifiedName());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getQualifiedName());    }    if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName());  }	  	compilable	  [FE]  IllegalArgumentException  	329	1	add
1386	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getQualifiedName());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName());  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getQualifiedName());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getQualifiedName());    }    if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName());  }	  	compilable	  [FE]  IllegalArgumentException  	329	1	add
1387	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getQualifiedName());  }  if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getQualifiedName());    }    if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName());  }	  	compilable	  [FE]  IllegalArgumentException  	329	1	add
1388	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getQualifiedName());  }  if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName());  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getQualifiedName());  }  if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getQualifiedName());    }    if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName());  }	  	compilable	  [FE]  IllegalArgumentException  	329	1	add
1389	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getQualifiedName());  }  If(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName());  }  [CE]  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getQualifiedName());  }  If(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getQualifiedName());    }    If(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName());  }	  	non-compiled	[CE]  	329	None	add
1390	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getQualifiedName());  }  if(type  >=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName());  }  [CE]  bad  operand  types  for  binary  operator  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getQualifiedName());  }  if(type  >=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getQualifiedName());    }    if(type  >=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName());  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  	329	None	add
1391	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined,  node: "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined,  node: "  +  node.toStringTree());  }	  if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.toStringTree());    }    	compilable	  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined  	9	1	replace
1392	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined,  node: "  +  node.toStringTree());  }  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined,  node: "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined,  node: "  +  node.toStringTree());  }	  if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.toStringTree());    }    	compilable	  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined  	9	1	replace
1393	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined:  node: "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined:  node: "  +  node.toStringTree());  }	  if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.toStringTree());    }    	compilable	  [FE]  IllegalArgumentException  	9	1	replace
1394	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined:  node: "  +  node.toStringTree());  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined:  node: "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined:  node: "  +  node.toStringTree());  }	  if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.toStringTree());    }    	compilable	  [FE]  IllegalArgumentException  	9	1	replace
1395	[BUG]  [BUGGY]  Node  cannot  be  refined.  node: "  +  node.toStringTree());  [CE]  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  cannot  be  refined.  node: "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  cannot  be  refined.  node: "  +  node.toStringTree());	  if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.toStringTree());    }    	non-compiled	[CE]  	9	None	replace
1396	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node()  cannot  be  refined. "  +  node.getLineno());  [CE]  not  a  statement  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node()  cannot  be  refined. "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node()  cannot  be  refined. "  +  node.getLineno());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node()    cannot    be    refined.   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	386	None	replace
1397	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node()  cannot  be  refined. "  +  node,  type.toStringTree());  [CE]  not  a  statement  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node()  cannot  be  refined. "  +  node,  type.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node()  cannot  be  refined. "  +  node,  type.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node()    cannot    be    refined.   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	386	None	replace
1398	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node()  cannot  be  refined. "  +  node.getLocalName());  [CE]  not  a  statement  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node()  cannot  be  refined. "  +  node.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node()  cannot  be  refined. "  +  node.getLocalName());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node()    cannot    be    refined.   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	386	None	replace
1399	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node()  cannot  be  refined. "  +  node.getMessage());  [CE]  not  a  statement  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node()  cannot  be  refined. "  +  node.getMessage());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node()  cannot  be  refined. "  +  node.getMessage());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node()    cannot    be    refined.   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	386	None	replace
1400	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node()  cannot  be  refined. "  +  node.getClass());  [CE]  not  a  statement  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node()  cannot  be  refined. "  +  node.getClass());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node()  cannot  be  refined. "  +  node.getClass());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node()    cannot    be    refined.   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	386	None	replace
1401	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node()  cannot  be  refined ",  node.toStringTree());  [CE]  not  a  statement  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node()  cannot  be  refined ",  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node()  cannot  be  refined ",  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node()    cannot    be    refined.   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	386	None	replace
1402	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node()  cannot  be  refined. "  +  node.getSimpleName());  [CE]  not  a  statement  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node()  cannot  be  refined. "  +  node.getSimpleName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node()  cannot  be  refined. "  +  node.getSimpleName());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node()    cannot    be    refined.   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	386	None	replace
1403	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName()  = "  +  node.getName());  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName()  = "  +  node.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName()  = "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    node.getName()    =   "    +    node.getName());    	non-compiled	[CE]  <identifier>  expected	380	None	replace
1404	[BUG]  [BUGGY]  Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName()  = "  +  node.getName());  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName()  = "  +  node.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName()  = "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    node.getName()    =   "    +    node.getName());    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	380	None	replace
1405	[BUG]  [BUGGY]  Throwables.warning( "Node  cannot  be  refined.  Node  named  with  node.getName()  = "  +  node.getName());  [CE]  cannot  find  symbol  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.warning( "Node  cannot  be  refined.  Node  named  with  node.getName()  = "  +  node.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.warning( "Node  cannot  be  refined.  Node  named  with  node.getName()  = "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    node.getName()    =   "    +    node.getName());    	non-compiled	[CE]  cannot  find  symbol	380	None	replace
1406	[BUG]  [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName()  = "  +  node.getName());  [CE]  cannot  find  symbol  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName()  = "  +  node.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName()  = "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    node.getName()    =   "    +    node.getName());    	non-compiled	[CE]  cannot  find  symbol	380	None	replace
1407	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualifiedName.getName()  = "  +  node.getName());  [CE]  cannot  find  symbol  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualifiedName.getName()  = "  +  node.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualifiedName.getName()  = "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    node.getName()    =   "    +    node.getName());    	non-compiled	[CE]  cannot  find  symbol	380	None	replace
1408	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node,  qualifiedName.getName()  =   "  +  node.getName());  [CE]  cannot  find  symbol  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node,  qualifiedName.getName()  =   "  +  node.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node,  qualifiedName.getName()  =   "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    node.getName()    =   "    +    node.getName());    	non-compiled	[CE]  cannot  find  symbol	380	None	replace
1409	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  node:   "  +  node.getString());  Node  cannot  be  refined.  node:   "  +  node.getString());  [CE]  [FE]    UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  node:   "  +  node.getString());  Node  cannot  be  refined.  node:   "  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.getString());    Node  cannot  be  refined.  node:   "  +  node.getString());	  	non-compiled	[CE]  	43	None	add
1410	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  node:   "  +  node.getString());  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]      UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  node:   "  +  node.getString());  Node  node  =  node.getFirstChild();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.getString());    Node  node  =  node.getFirstChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	43	None	add
1411	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  node:   "  +  node.getString());  Node  node  =  node.getJSType();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]        UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  node:   "  +  node.getString());  Node  node  =  node.getJSType();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.getString());    Node  node  =  node.getJSType();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	43	None	add
1412	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  node:   "  +  node.getString());  Node  node  =  getNativeType(UNKNOWN_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]          UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  node:   "  +  node.getString());  Node  node  =  getNativeType(UNKNOWN_TYPE);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.getString());    Node  node  =  getNativeType(UNKNOWN_TYPE);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	43	None	add
1413	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  node:   "  +  node.getString());  Node  node  =  node.getLastChild();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]            UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  node:   "  +  node.getString());  Node  node  =  node.getLastChild();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.getString());    Node  node  =  node.getLastChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	43	None	add
1414	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  node:   "  +  node.getString());  Node  node:   "  +  node.getString());  [CE]  [FE]              UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  node:   "  +  node.getString());  Node  node:   "  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.getString());    Node  node:   "  +  node.getString());	  	non-compiled	[CE]  	43	None	add
1415	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  node:   "  +  node.getString());  Node  node  =  node.getString();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  node:   "  +  node.getString());  Node  node  =  node.getString();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.getString());    Node  node  =  node.getString();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	43	None	add
1416	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  node:   "  +  node.getString());  Node  cannot  be  refined.  node:   "  +  node.getString());  break;  [CE]  [FE]                  UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  node:   "  +  node.getString());  Node  cannot  be  refined.  node:   "  +  node.getString());  break;  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.getString());    Node  cannot  be  refined.  node:   "  +  node.getString());  break;	  	non-compiled	[CE]  	43	None	add
1417	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  node:   "  +  node.getString());  Node  parent  =  node.getParent();  [CE]  unreachable  statement  [FE]                    UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  node:   "  +  node.getString());  Node  parent  =  node.getParent();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    node:   "    +    node.getString());    Node  parent  =  node.getParent();	  	non-compiled	[CE]  unreachable  statement	43	None	add
1418	[BUG]  [BUGGY]  Throwable  node  =  scope.getLineno();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  scope.getLineno();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  scope.getLineno();	  Throwable    node    =    node.getLineno();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	277	None	replace
1419	[BUG]  [BUGGY]  Throwable  node  =  node.getLineno(),  type);  [CE]  ';'  expected  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  node.getLineno(),  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  node.getLineno(),  type);	  Throwable    node    =    node.getLineno();    	non-compiled	[CE]  ';'  expected	277	None	replace
1420	[BUG]  [BUGGY]  Throwable  node  =  type.getLineno();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  type.getLineno();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  type.getLineno();	  Throwable    node    =    node.getLineno();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	277	None	replace
1421	[BUG]  [BUGGY]  Throwable  node  =  node.getType();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  node.getType();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  node.getType();	  Throwable    node    =    node.getLineno();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	277	None	replace
1422	[BUG]  [BUGGY]  Throwable  node  =  node.getLineno(),  scope.inferQualifiedSlot(qualifiedName);  [CE]  ';'  expected  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  node.getLineno(),  scope.inferQualifiedSlot(qualifiedName);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  node.getLineno(),  scope.inferQualifiedSlot(qualifiedName);	  Throwable    node    =    node.getLineno();    	non-compiled	[CE]  ';'  expected	277	None	replace
1423	[BUG]  [BUGGY]  Throwable  node  =  node.getLastChild();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  node.getLastChild();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  node.getLastChild();	  Throwable    node    =    node.getLineno();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	277	None	replace
1424	[BUG]  [BUGGY]  Throwable  node  =  node.getLineno(),  type;  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  node.getLineno(),  type;  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  node.getLineno(),  type;	  Throwable    node    =    node.getLineno();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	277	None	replace
1425	[BUG]  [BUGGY]  Throwable  node  =  node.getSourceName();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  node.getSourceName();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  node.getSourceName();	  Throwable    node    =    node.getLineno();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	277	None	replace
1426	[BUG]  [BUGGY]  Throwable  node  =  node.getLineno(),  scope.inferQualifiedSlot(qualifiedName,  type);  [CE]  ';'  expected  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  node.getLineno(),  scope.inferQualifiedSlot(qualifiedName,  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  node.getLineno(),  scope.inferQualifiedSlot(qualifiedName,  type);	  Throwable    node    =    node.getLineno();    	non-compiled	[CE]  ';'  expected	277	None	replace
1427	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.getLineno());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    cannot    be    refined.   "    +    node.toStringTree());    	compilable	  [FE]  IllegalArgumentException  	405	1	replace
1428	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.getLineno());  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.getLineno());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    cannot    be    refined.   "    +    node.toStringTree());    	compilable	  [FE]  IllegalArgumentException  	405	1	replace
1429	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.getLocalName());  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.getLocalName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    cannot    be    refined.   "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol	405	None	replace
1430	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node,  qualifiedName);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,String)  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node,  qualifiedName);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node,  qualifiedName);	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    cannot    be    refined.   "    +    node.toStringTree());    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,String)	405	None	replace
1431	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.getMessage());  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.getMessage());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.getMessage());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    cannot    be    refined.   "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol	405	None	replace
1432	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  type,  qualifiedName,  origType,  type);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  type,  qualifiedName,  origType,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  type,  qualifiedName,  origType,  type);	  scope.inferQualifiedSlot(node,    type,    origType,    type);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	225	None	replace
1433	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  qualifier,  type,  origType);  [CE]  cannot  find  symbol  qualifier  [FE]              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  qualifier,  type,  origType);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  qualifier,  type,  origType);	  scope.inferQualifiedSlot(node,    type,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol  qualifier	225	None	replace
1434	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getLineno());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getLineno());    }    if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }	  	compilable	  [FE]  IllegalArgumentException  	349	1	add
1435	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getLineno());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getLineno());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getLineno());    }    if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }	  	compilable	  [FE]  IllegalArgumentException  	349	1	add
1436	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getLineno());  }  if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getLineno());    }    if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }	  	compilable	  [FE]  IllegalArgumentException  	349	1	add
1437	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getLineno());  }  if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getLineno());  }  if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getLineno());    }    if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }	  	compilable	  [FE]  IllegalArgumentException  	349	1	add
1438	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getLineno());  }  if(type  >=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }  [CE]  bad  operand  types  for  binary  operator  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getLineno());  }  if(type  >=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getLineno());    }    if(type  >=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  	349	None	add
1439	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getLineno());  }  If(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }  [CE]  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.     "  +  node.getLineno());  }  If(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getLineno());    }    If(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }	  	non-compiled	[CE]  	349	None	add
1440	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name "  +  node.getName());  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name "  +  node.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    qualified    name       "    +    node.getName());    	non-compiled	[CE]  <identifier>  expected	248	None	replace
1441	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    qualified    name       "    +    node.getName());    	compilable	  [FE]  IllegalArgumentException  	248	1	replace
1442	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name "  +  node.getQualifiedName());  [FE]  IllegalArgumentException  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    qualified    name       "    +    node.getName());    	compilable	  [FE]  IllegalArgumentException  	248	1	replace
1443	[BUG]  [BUGGY]  Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name "  +  node.getName());  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name "  +  node.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    qualified    name       "    +    node.getName());    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	248	None	replace
1444	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name: "  +  node.getName());  [CE]  cannot  find  symbol  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name: "  +  node.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name: "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    qualified    name       "    +    node.getName());    	non-compiled	[CE]  cannot  find  symbol	248	None	replace
1445	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name "  +  node,  scope.getName());  [CE]  cannot  find  symbol  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name "  +  node,  scope.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name "  +  node,  scope.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    qualified    name       "    +    node.getName());    	non-compiled	[CE]  cannot  find  symbol	248	None	replace
1446	[BUG]  [BUGGY]  JSType  node  =  scope.getNativeType(UNKNOWN_TYPE,  type);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  JSType  node  =  scope.getNativeType(UNKNOWN_TYPE,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	JSType  node  =  scope.getNativeType(UNKNOWN_TYPE,  type);	  JSType    node    =    scope.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	181	None	replace
1447	[BUG]  [BUGGY]  JSType  node  =  scope.getNativeType(UNKNOWN_TYPE,  qualifiedName);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  JSType  node  =  scope.getNativeType(UNKNOWN_TYPE,  qualifiedName);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	JSType  node  =  scope.getNativeType(UNKNOWN_TYPE,  qualifiedName);	  JSType    node    =    scope.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	181	None	replace
1448	[BUG]  [BUGGY]  JSType  node  =  scope.getNativeType(UNKNOWN_TYPE),  type);  [CE]  ';'  expected  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  JSType  node  =  scope.getNativeType(UNKNOWN_TYPE),  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	JSType  node  =  scope.getNativeType(UNKNOWN_TYPE),  type);	  JSType    node    =    scope.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	181	None	replace
1449	[BUG]  [BUGGY]  JSType  node  =  scope.getNativeType(NODE_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  JSType  node  =  scope.getNativeType(NODE_TYPE);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	JSType  node  =  scope.getNativeType(NODE_TYPE);	  JSType    node    =    scope.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	181	None	replace
1450	[BUG]  [BUGGY]  JSType  node  =  scope.getNativeType(UNKNOWN_TYPE,  name);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  JSType  node  =  scope.getNativeType(UNKNOWN_TYPE,  name);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	JSType  node  =  scope.getNativeType(UNKNOWN_TYPE,  name);	  JSType    node    =    scope.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	181	None	replace
1451	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name  ' "  +  node.getName());  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name  ' "  +  node.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name  ' "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    qualified    name    '   "    +    node.getName());    	non-compiled	[CE]  <identifier>  expected	247	None	replace
1452	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name  ' "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name  ' "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    qualified    name    '   "    +    node.getName());    	compilable	  [FE]  IllegalArgumentException  	247	1	replace
1453	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name  ' "  +  node.getQualifiedName());  [FE]  IllegalArgumentException  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name  ' "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name  ' "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    qualified    name    '   "    +    node.getName());    	compilable	  [FE]  IllegalArgumentException  	247	1	replace
1454	[BUG]  [BUGGY]  Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name  ' "  +  node.getName());  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name  ' "  +  node.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name  ' "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    qualified    name    '   "    +    node.getName());    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	247	None	replace
1455	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name  ' "  +  node.getLocalName());  [CE]  cannot  find  symbol  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name  ' "  +  node.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name  ' "  +  node.getLocalName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    qualified    name    '   "    +    node.getName());    	non-compiled	[CE]  cannot  find  symbol	247	None	replace
1456	[BUG]  [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name  ' "  +  node.getName());  [CE]  cannot  find  symbol  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name  ' "  +  node.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name  ' "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    qualified    name    '   "    +    node.getName());    	non-compiled	[CE]  cannot  find  symbol	247	None	replace
1457	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name  ' "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name  ' "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    qualified    name    '   "    +    node.getName());    	compilable	  [FE]  IllegalArgumentException  	247	1	replace
1458	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name  ' "  +  node.toStringTree());  [FE]  IllegalArgumentException  [FE]                                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name  ' "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name  ' "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    qualified    name    '   "    +    node.getName());    	compilable	  [FE]  IllegalArgumentException  	247	1	replace
1459	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name  ' "  +  node,  scope.getName());  [CE]  cannot  find  symbol  [FE]                                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name  ' "  +  node,  scope.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name  ' "  +  node,  scope.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    named    with    qualified    name    '   "    +    node.getName());    	non-compiled	[CE]  cannot  find  symbol	247	None	replace
1460	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualifiedName.toStringTree() "  +  node.toStringTree());  [CE]  not  a  statement  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualifiedName.toStringTree() "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualifiedName.toStringTree() "  +  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree()   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	436	None	replace
1461	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree()  ' "  +  node.toStringTree());  [CE]  not  a  statement  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree()  ' "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree()  ' "  +  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree()   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	436	None	replace
1462	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree()  = "  +  node.toStringTree());  [CE]  not  a  statement  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree()  = "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree()  = "  +  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree()   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	436	None	replace
1463	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  defined  with  node.toStringTree() "  +  node.toStringTree());  [CE]  not  a  statement  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  defined  with  node.toStringTree() "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  defined  with  node.toStringTree() "  +  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree()   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	436	None	replace
1464	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree()  -  node.toStringTree());  [CE]  not  a  statement  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree()  -  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree()  -  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.toStringTree()   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	436	None	replace
1465	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  new  RestrictByFalseTypeOfResultVisitor());  [CE]  cannot  find  symbol  compiler  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  new  RestrictByFalseTypeOfResultVisitor());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  qualifiedName,  new  RestrictByFalseTypeOfResultVisitor());	  NodeTraversal.traverse(compiler,    node,    type,    new    RestrictByFalseTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	71	None	replace
1466	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  type,  new  RestrictByFalseTypeOfResultVisitor());  [CE]  cannot  find  symbol  compiler  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  type,  new  RestrictByFalseTypeOfResultVisitor());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  qualifiedName,  type,  new  RestrictByFalseTypeOfResultVisitor());	  NodeTraversal.traverse(compiler,    node,    type,    new    RestrictByFalseTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	71	None	replace
1467	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  type,  new  RestrictByFalseTypeOfResultVisitor());  [CE]  cannot  find  symbol  compiler  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  type,  new  RestrictByFalseTypeOfResultVisitor());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  type,  new  RestrictByFalseTypeOfResultVisitor());	  NodeTraversal.traverse(compiler,    node,    type,    new    RestrictByFalseTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	71	None	replace
1468	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  scope,  new  RestrictByFalseTypeOfResultVisitor());  [CE]  cannot  find  symbol  compiler  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  scope,  new  RestrictByFalseTypeOfResultVisitor());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  type,  scope,  new  RestrictByFalseTypeOfResultVisitor());	  NodeTraversal.traverse(compiler,    node,    type,    new    RestrictByFalseTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	71	None	replace
1469	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  new  RestrictByFalseTypeOfResultVisitor(),  scope);  [CE]  cannot  find  symbol  compiler  [FE]                                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  new  RestrictByFalseTypeOfResultVisitor(),  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  type,  new  RestrictByFalseTypeOfResultVisitor(),  scope);	  NodeTraversal.traverse(compiler,    node,    type,    new    RestrictByFalseTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	71	None	replace
1470	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getString(), "  +  node.getString());  [CE]  <identifier>  expected  [FE]    UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getString(), "  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getString(), "  +  node.getString());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getString(),   "    +    node.getString());    	non-compiled	[CE]  <identifier>  expected	468	None	replace
1471	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getLocalName(), "  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getLocalName(), "  +  node.getString());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getString(),   "    +    node.getString());    	compilable	  [FE]  UnsupportedOperationException  	468	1	replace
1472	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getLocalName(), "  +  node.getString());  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getLocalName(), "  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getLocalName(), "  +  node.getString());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getString(),   "    +    node.getString());    	compilable	  [FE]  UnsupportedOperationException  	468	1	replace
1473	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName(), "  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName(), "  +  node.getString());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getString(),   "    +    node.getString());    	compilable	  [FE]  UnsupportedOperationException  	468	1	replace
1474	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName(), "  +  node.getString());  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName(), "  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName(), "  +  node.getString());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getString(),   "    +    node.getString());    	compilable	  [FE]  UnsupportedOperationException  	468	1	replace
1475	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.getString()  [FE]          UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getString(), "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getString(), "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getString(),   "    +    node.getString());    	compilable	  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.getString()  	468	1	replace
1476	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getString(), "  +  node.toStringTree());  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.getString()  [FE]          UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getString(), "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getString(), "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getString(),   "    +    node.getString());    	compilable	  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.getString()  	468	1	replace
1477	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]            UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getName(), "  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getName(), "  +  node.getString());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getString(),   "    +    node.getString());    	compilable	  [FE]  UnsupportedOperationException  	468	1	replace
1478	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getName(), "  +  node.getString());  [FE]  UnsupportedOperationException  [FE]            UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getName(), "  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getName(), "  +  node.getString());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getString(),   "    +    node.getString());    	compilable	  [FE]  UnsupportedOperationException  	468	1	replace
1479	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]              UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getClass(), "  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getClass(), "  +  node.getString());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getString(),   "    +    node.getString());    	compilable	  [FE]  UnsupportedOperationException  	468	1	replace
1480	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getClass(), "  +  node.getString());  [FE]  UnsupportedOperationException  [FE]              UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getClass(), "  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getClass(), "  +  node.getString());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getString(),   "    +    node.getString());    	compilable	  [FE]  UnsupportedOperationException  	468	1	replace
1481	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]                UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualifiedName.getString(), "  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualifiedName.getString(), "  +  node.getString());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getString(),   "    +    node.getString());    	compilable	  [FE]  UnsupportedOperationException  	468	1	replace
1482	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualifiedName.getString(), "  +  node.getString());  [FE]  UnsupportedOperationException  [FE]                UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualifiedName.getString(), "  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualifiedName.getString(), "  +  node.getString());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getString(),   "    +    node.getString());    	compilable	  [FE]  UnsupportedOperationException  	468	1	replace
1483	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getString(), "  +  node.getMessage());  [CE]  cannot  find  symbol  [FE]                  UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getString(), "  +  node.getMessage());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getString(), "  +  node.getMessage());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getString(),   "    +    node.getString());    	non-compiled	[CE]  cannot  find  symbol	468	None	replace
1484	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]                    UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getKey(), "  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getKey(), "  +  node.getString());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getString(),   "    +    node.getString());    	compilable	  [FE]  UnsupportedOperationException  	468	1	replace
1485	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getKey(), "  +  node.getString());  [FE]  UnsupportedOperationException  [FE]                    UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getKey(), "  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getKey(), "  +  node.getString());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getString(),   "    +    node.getString());    	compilable	  [FE]  UnsupportedOperationException  	468	1	replace
1486	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  same  type.   "  +  node.getMessage());  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  same  type.   "  +  node.getMessage());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  same  type.   "  +  node.getMessage());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    must    be    in    the    same    type.       "    +    node.getMessage());    	non-compiled	[CE]  <identifier>  expected	356	None	replace
1487	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  same  type.   "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  same  type.   "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    must    be    in    the    same    type.       "    +    node.getMessage());    	compilable	  [FE]  IllegalArgumentException  	356	1	replace
1488	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  same  type.   "  +  node.toStringTree());  [FE]  IllegalArgumentException  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  same  type.   "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  same  type.   "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    must    be    in    the    same    type.       "    +    node.getMessage());    	compilable	  [FE]  IllegalArgumentException  	356	1	replace
1489	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  same  type.n "  +  node.getMessage());  [CE]  cannot  find  symbol  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  same  type.n "  +  node.getMessage());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  same  type.n "  +  node.getMessage());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    must    be    in    the    same    type.       "    +    node.getMessage());    	non-compiled	[CE]  cannot  find  symbol	356	None	replace
1490	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  same  type.   "  +  node,  scope.getMessage());  [CE]  cannot  find  symbol  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  same  type.   "  +  node,  scope.getMessage());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  same  type.   "  +  node,  scope.getMessage());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    must    be    in    the    same    type.       "    +    node.getMessage());    	non-compiled	[CE]  cannot  find  symbol	356	None	replace
1491	[BUG]  [BUGGY]  Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  [CE]  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());	  if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    cannot    be    refined.   "    +    node.toStringTree());    }    	non-compiled	[CE]  	85	None	replace
1492	[BUG]  [BUGGY]  parent!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  parent!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	parent!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }	  if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    cannot    be    refined.   "    +    node.toStringTree());    }    	non-compiled	[CE]  not  a  statement	85	None	replace
1493	[BUG]  [BUGGY]  node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }  [CE]  not  a  statement  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined.   "  +  node.toStringTree());  }	  if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    cannot    be    refined.   "    +    node.toStringTree());    }    	non-compiled	[CE]  not  a  statement	85	None	replace
1494	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name "  +  node.getQualifiedName());  [CE]  <identifier>  expected  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    qualified    name       "    +    node.getQualifiedName());    	non-compiled	[CE]  <identifier>  expected	503	None	replace
1495	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name "  +  node.getQualifiedName());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name "  +  node.getQualifiedName());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    qualified    name       "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	503	1	replace
1496	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name "  +  node.getQualifiedName());  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name "  +  node.getQualifiedName());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name "  +  node.getQualifiedName());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    qualified    name       "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	503	1	replace
1497	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name "  +  node.getQualifiedName(),  type);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,JSType)  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name "  +  node.getQualifiedName(),  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name "  +  node.getQualifiedName(),  type);	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    qualified    name       "    +    node.getQualifiedName());    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,JSType)	503	None	replace
1498	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    qualified    name       "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	503	1	replace
1499	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name "  +  node.toStringTree());  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    qualified    name       "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	503	1	replace
1500	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name: "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name: "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    qualified    name       "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	503	1	replace
1501	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name: "  +  node.getQualifiedName());  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name: "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name: "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    qualified    name       "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	503	1	replace
1502	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name ",  node.getQualifiedName());  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,String)  [FE]                IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name ",  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name ",  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    qualified    name       "    +    node.getQualifiedName());    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,String)	503	None	replace
1503	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name "  +  node.getQualifiedName());  }  else  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }  [CE]  variable  qualifiedName  might  not  have  been  initialized  [FE]                  IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name "  +  node.getQualifiedName());  }  else  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name "  +  node.getQualifiedName());  }  else  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    qualified    name       "    +    node.getQualifiedName());    	non-compiled	[CE]  variable  qualifiedName  might  not  have  been  initialized	503	None	replace
1504	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.getLineno());  Node  defined  with  type   "  +  node.getLineno());  [CE]  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.getLineno());  Node  defined  with  type   "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.getLineno());    Node  defined  with  type   "  +  node.getLineno());	  	non-compiled	[CE]  	478	None	add
1505	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.getLineno());  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.getLineno());  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.getLineno());  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.getLineno());    IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.getLineno());	  	non-compiled	[CE]  cannot  find  symbol	478	None	add
1506	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.getLineno());  Node  defined  with  type   "  +  node.getLineno());  if(resultEqualsValue  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.getLineno());  }  [CE]  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.getLineno());  Node  defined  with  type   "  +  node.getLineno());  if(resultEqualsValue  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.getLineno());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.getLineno());    Node  defined  with  type   "  +  node.getLineno());  if(resultEqualsValue  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.getLineno());  }	  	non-compiled	[CE]  	478	None	add
1507	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.getLineno());  Node  defined  with  type   "  +  node.getLineno());  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.getLineno());  }  [CE]  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.getLineno());  Node  defined  with  type   "  +  node.getLineno());  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.getLineno());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.getLineno());    Node  defined  with  type   "  +  node.getLineno());  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.getLineno());  }	  	non-compiled	[CE]  	478	None	add
1508	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.getLineno());  Node  defined  with  type   "  +  node.getLineno());  if(resultEqualsValue)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.getLineno());  }  [CE]  [FE]            IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.getLineno());  Node  defined  with  type   "  +  node.getLineno());  if(resultEqualsValue)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.getLineno());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.getLineno());    Node  defined  with  type   "  +  node.getLineno());  if(resultEqualsValue)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.getLineno());  }	  	non-compiled	[CE]  	478	None	add
1509	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.getLineno());  Node  defined  with  type   "  +  node.getLineno());  if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.getLineno());  }  [CE]  [FE]              IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.getLineno());  Node  defined  with  type   "  +  node.getLineno());  if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.getLineno());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.getLineno());    Node  defined  with  type   "  +  node.getLineno());  if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.getLineno());  }	  	non-compiled	[CE]  	478	None	add
1510	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.getLineno());  Node  defined  with  type   "  +  node.getLineno());  if(resultEqualsValue)  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }  [CE]  [FE]                IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.getLineno());  Node  defined  with  type   "  +  node.getLineno());  if(resultEqualsValue)  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.getLineno());    Node  defined  with  type   "  +  node.getLineno());  if(resultEqualsValue)  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }	  	non-compiled	[CE]  	478	None	add
1511	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.getLineno());  Node  defined  with  type   "  +  node.getLineno());  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [CE]  [FE]                  IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.getLineno());  Node  defined  with  type   "  +  node.getLineno());  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.getLineno());    Node  defined  with  type   "  +  node.getLineno());  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);	  	non-compiled	[CE]  	478	None	add
1512	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.getLineno());  Node  defined  with  type   "  +  node.getLineno());  if(resultEqualsValue  ==  null)  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }  [CE]  [FE]                    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.getLineno());  Node  defined  with  type   "  +  node.getLineno());  if(resultEqualsValue  ==  null)  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.getLineno());    Node  defined  with  type   "  +  node.getLineno());  if(resultEqualsValue  ==  null)  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }	  	non-compiled	[CE]  	478	None	add
1513	[BUG]  [BUGGY]  Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  type.toStringTree(),  scope);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  type.toStringTree(),  scope);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  type.toStringTree(),  scope);	  Throwable    node    =    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    type.toStringTree());    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	337	None	replace
1514	[BUG]  [BUGGY]  Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  type.toStringTree(),  scope.inferQualifiedSlot(qualifiedName));  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  type.toStringTree(),  scope.inferQualifiedSlot(qualifiedName));  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  type.toStringTree(),  scope.inferQualifiedSlot(qualifiedName));	  Throwable    node    =    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    type.toStringTree());    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	337	None	replace
1515	[BUG]  [BUGGY]  Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  type.getQualifiedName());  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  type.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  type.getQualifiedName());	  Throwable    node    =    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    type.toStringTree());    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	337	None	replace
1516	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree(),  type);  [CE]  not  a  statement  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree(),  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree(),  type);	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	138	None	replace
1517	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  scope.inferQualifiedSlot(node,  qualifiedName));  [CE]  cannot  find  symbol  compiler  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  scope.inferQualifiedSlot(node,  qualifiedName));  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  scope.inferQualifiedSlot(node,  qualifiedName));	  NodeTraversal.traverse(compiler,    node,    resultEqualsValue,    getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  cannot  find  symbol  compiler	192	None	replace
1518	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  type,  getNativeType(UNKNOWN_TYPE));  [CE]  cannot  find  symbol  compiler  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  type,  getNativeType(UNKNOWN_TYPE));  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  type,  getNativeType(UNKNOWN_TYPE));	  NodeTraversal.traverse(compiler,    node,    resultEqualsValue,    getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  cannot  find  symbol  compiler	192	None	replace
1519	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  resultEqualsValue,  getNativeType(UNKNOWN_TYPE));  [CE]  cannot  find  symbol  compiler  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  resultEqualsValue,  getNativeType(UNKNOWN_TYPE));  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  qualifiedName,  resultEqualsValue,  getNativeType(UNKNOWN_TYPE));	  NodeTraversal.traverse(compiler,    node,    resultEqualsValue,    getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  cannot  find  symbol  compiler	192	None	replace
1520	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  scope.inferQualifiedSlot(qualifiedName,  type));  [CE]  cannot  find  symbol  compiler  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  scope.inferQualifiedSlot(qualifiedName,  type));  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  scope.inferQualifiedSlot(qualifiedName,  type));	  NodeTraversal.traverse(compiler,    node,    resultEqualsValue,    getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  cannot  find  symbol  compiler	192	None	replace
1521	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  UNKNOWN_TYPE,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  UNKNOWN_TYPE,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  UNKNOWN_TYPE,  resultEqualsValue);	  NodeTraversal.traverse(compiler,    node,    resultEqualsValue,    getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  cannot  find  symbol  compiler	192	None	replace
1522	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  scope.inferQualifiedSlot(node,  qualifiedName),  type);  [CE]  cannot  find  symbol  compiler  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  scope.inferQualifiedSlot(node,  qualifiedName),  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  scope.inferQualifiedSlot(node,  qualifiedName),  type);	  NodeTraversal.traverse(compiler,    node,    resultEqualsValue,    getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  cannot  find  symbol  compiler	192	None	replace
1523	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  new  RestrictByTrueTypeOfResultVisitor(),  resultEqualsValue,  scope);  [CE]  cannot  find  symbol  compiler  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  new  RestrictByTrueTypeOfResultVisitor(),  resultEqualsValue,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  type,  new  RestrictByTrueTypeOfResultVisitor(),  resultEqualsValue,  scope);	  NodeTraversal.traverse(compiler,    node,    type,    new    RestrictByTrueTypeOfResultVisitor(),    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	70	None	replace
1524	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  new  RestrictByTrueTypeOfResultVisitor(),  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  new  RestrictByTrueTypeOfResultVisitor(),  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  qualifiedName,  new  RestrictByTrueTypeOfResultVisitor(),  resultEqualsValue);	  NodeTraversal.traverse(compiler,    node,    type,    new    RestrictByTrueTypeOfResultVisitor(),    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	70	None	replace
1525	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  new  RestrictByTrueTypeOfResultVisitor(),  type);  [CE]  cannot  find  symbol  compiler  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  new  RestrictByTrueTypeOfResultVisitor(),  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  new  RestrictByTrueTypeOfResultVisitor(),  type);	  NodeTraversal.traverse(compiler,    node,    type,    new    RestrictByTrueTypeOfResultVisitor(),    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	70	None	replace
1526	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  type,  new  RestrictByTrueTypeOfResultVisitor(),  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  type,  new  RestrictByTrueTypeOfResultVisitor(),  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  qualifiedName,  type,  new  RestrictByTrueTypeOfResultVisitor(),  resultEqualsValue);	  NodeTraversal.traverse(compiler,    node,    type,    new    RestrictByTrueTypeOfResultVisitor(),    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	70	None	replace
1527	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  sourceName,  new  RestrictByTrueTypeOfResultVisitor(),  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  sourceName,  new  RestrictByTrueTypeOfResultVisitor(),  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  sourceName,  new  RestrictByTrueTypeOfResultVisitor(),  resultEqualsValue);	  NodeTraversal.traverse(compiler,    node,    type,    new    RestrictByTrueTypeOfResultVisitor(),    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	70	None	replace
1528	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  NODE_TYPE,  new  RestrictByTrueTypeOfResultVisitor(),  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  NODE_TYPE,  new  RestrictByTrueTypeOfResultVisitor(),  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  NODE_TYPE,  new  RestrictByTrueTypeOfResultVisitor(),  resultEqualsValue);	  NodeTraversal.traverse(compiler,    node,    type,    new    RestrictByTrueTypeOfResultVisitor(),    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	70	None	replace
1529	[BUG]  [BUGGY]  scope.inferQualifiedSlot(qualifiedName,  origType,  type);  break;  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(qualifiedName,  origType,  type);  break;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(qualifiedName,  origType,  type);  break;	  scope.inferQualifiedSlot(value,    origType,    type);    break;    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	327	None	replace
1530	[BUG]  [BUGGY]  scope.inferQualifiedSlot(type,  origType,  type);  break;  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(type,  origType,  type);  break;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(type,  origType,  type);  break;	  scope.inferQualifiedSlot(value,    origType,    type);    break;    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	327	None	replace
1531	[BUG]  [BUGGY]  scope.inferQualifiedSlot(value,  qualifiedName,  origType,  type);  break;  [CE]  cannot  find  symbol  value  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(value,  qualifiedName,  origType,  type);  break;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(value,  qualifiedName,  origType,  type);  break;	  scope.inferQualifiedSlot(value,    origType,    type);    break;    	non-compiled	[CE]  cannot  find  symbol  value	327	None	replace
1532	[BUG]  [BUGGY]  scope.inferQualifiedSlot(str,  qualifiedName,  origType,  type);  break;  [CE]  cannot  find  symbol  str  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(str,  qualifiedName,  origType,  type);  break;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(str,  qualifiedName,  origType,  type);  break;	  scope.inferQualifiedSlot(value,    origType,    type);    break;    	non-compiled	[CE]  cannot  find  symbol  str	327	None	replace
1533	[BUG]  [BUGGY]  scope.inferQualifiedSlot(sourceName,  origType,  type);  break;  [CE]  cannot  find  symbol  sourceName  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(sourceName,  origType,  type);  break;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(sourceName,  origType,  type);  break;	  scope.inferQualifiedSlot(value,    origType,    type);    break;    	non-compiled	[CE]  cannot  find  symbol  sourceName	327	None	replace
1534	[BUG]  [BUGGY]  resultEqualsValue)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  [CE]  not  a  statement  [FE]          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  resultEqualsValue)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	resultEqualsValue)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }	  if(node!=    null)    {    throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.toStringTree());    }    if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n'    +    node.toStringTree());    }    	non-compiled	[CE]  not  a  statement	322	None	replace
1535	[BUG]  [BUGGY]  parent!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n' "  +  node.toStringTree());  }  [CE]  not  a  statement  [FE]            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  parent!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n' "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	parent!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n' "  +  node.toStringTree());  }	  if(node!=    null)    {    throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.toStringTree());    }    if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n'    +    node.toStringTree());    }    	non-compiled	[CE]  not  a  statement	322	None	replace
1536	[BUG]  [BUGGY]  resultEqualsValue)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n' "  +  node.toStringTree());  }  [CE]  not  a  statement  [FE]              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  resultEqualsValue)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n' "  +  node.toStringTree());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	resultEqualsValue)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n' "  +  node.toStringTree());  }	  if(node!=    null)    {    throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.toStringTree());    }    if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n'    +    node.toStringTree());    }    	non-compiled	[CE]  not  a  statement	322	None	replace
1537	[BUG]  [BUGGY]  resultEqualsValue  =  node!=  null?  getNativeType(UNKNOWN_TYPE):  node.toStringTree();  [CE]  cannot  find  symbol  resultEqualsValue  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  resultEqualsValue  =  node!=  null?  getNativeType(UNKNOWN_TYPE):  node.toStringTree();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	resultEqualsValue  =  node!=  null?  getNativeType(UNKNOWN_TYPE):  node.toStringTree();	  if(node!=    null)    {    throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.toStringTree());    }    if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n'    +    node.toStringTree());    }    	non-compiled	[CE]  cannot  find  symbol  resultEqualsValue	322	None	replace
1538	[BUG]  [BUGGY]  resultEqualsValue)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  [CE]  not  a  statement  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  resultEqualsValue)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	resultEqualsValue)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());	  if(node!=    null)    {    throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.toStringTree());    }    if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n'    +    node.toStringTree());    }    	non-compiled	[CE]  not  a  statement	322	None	replace
1539	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  DEFAULT_NODE,  qualifiedName);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  DEFAULT_NODE,  qualifiedName);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  DEFAULT_NODE,  qualifiedName);	  Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE,    DEFAULT_NODE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	414	None	replace
1540	[BUG]  [BUGGY]  Node  node  =  scope.getNativeType(UNKNOWN_TYPE,  DEFAULT_NODE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.getNativeType(UNKNOWN_TYPE,  DEFAULT_NODE);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getNativeType(UNKNOWN_TYPE,  DEFAULT_NODE);	  Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE,    DEFAULT_NODE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	414	None	replace
1541	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  DEFAULT_NODE,  scope);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  DEFAULT_NODE,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  DEFAULT_NODE,  scope);	  Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE,    DEFAULT_NODE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	414	None	replace
1542	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  DEFAULT_NODE,  value);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  DEFAULT_NODE,  value);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  DEFAULT_NODE,  value);	  Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE,    DEFAULT_NODE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	414	None	replace
1543	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  DEFAULT_NODE,  resultEqualsValue);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  DEFAULT_NODE,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  DEFAULT_NODE,  resultEqualsValue);	  Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE,    DEFAULT_NODE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	414	None	replace
1544	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  UNKNOWN_TYPE,  DEFAULT_NODE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  UNKNOWN_TYPE,  DEFAULT_NODE);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  UNKNOWN_TYPE,  DEFAULT_NODE);	  Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE,    DEFAULT_NODE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	414	None	replace
1545	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(NODE_TYPE,  DEFAULT_NODE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getNativeType(NODE_TYPE,  DEFAULT_NODE);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(NODE_TYPE,  DEFAULT_NODE);	  Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE,    DEFAULT_NODE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	414	None	replace
1546	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  DEFAULT_NODE,  name);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  DEFAULT_NODE,  name);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  DEFAULT_NODE,  name);	  Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE,    DEFAULT_NODE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	414	None	replace
1547	[BUG]  [BUGGY]  JSError.make(scope,  node,  NON_GLOBAL_TYPE,  type));  [CE]  ';'  expected  [FE]          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  JSError.make(scope,  node,  NON_GLOBAL_TYPE,  type));  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	JSError.make(scope,  node,  NON_GLOBAL_TYPE,  type));	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.       "    +    node.toStringTree());    JSError.make(scope,    node,    NON_GLOBAL_TYPE,    type));    	non-compiled	[CE]  ';'  expected	418	None	replace
1548	[BUG]  [BUGGY]  JSError.make(scope,  node,  NON_GLOBAL_TYPE,  qualifiedName));  [CE]  ';'  expected  [FE]            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  JSError.make(scope,  node,  NON_GLOBAL_TYPE,  qualifiedName));  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	JSError.make(scope,  node,  NON_GLOBAL_TYPE,  qualifiedName));	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.       "    +    node.toStringTree());    JSError.make(scope,    node,    NON_GLOBAL_TYPE,    type));    	non-compiled	[CE]  ';'  expected	418	None	replace
1549	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined. "  +  node.toStringTree());  JSError.make(scope,  node,  NON_GLOBAL_TYPE,  type));  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning( "Node  cannot  be  refined. "  +  node.toStringTree());  JSError.make(scope,  node,  NON_GLOBAL_TYPE,  type));  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined. "  +  node.toStringTree());  JSError.make(scope,  node,  NON_GLOBAL_TYPE,  type));	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.       "    +    node.toStringTree());    JSError.make(scope,    node,    NON_GLOBAL_TYPE,    type));    	non-compiled	[CE]  	418	None	replace
1550	[BUG]  [BUGGY]  JSError.make(scope,  node,  qualifiedName,  type));  [CE]  ';'  expected  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  JSError.make(scope,  node,  qualifiedName,  type));  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	JSError.make(scope,  node,  qualifiedName,  type));	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.       "    +    node.toStringTree());    JSError.make(scope,    node,    NON_GLOBAL_TYPE,    type));    	non-compiled	[CE]  ';'  expected	418	None	replace
1551	[BUG]  [BUGGY]  JSError.make(scope,  node,  NON_GLOBAL_TYPE,  resultEqualsValue));  [CE]  ';'  expected  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  JSError.make(scope,  node,  NON_GLOBAL_TYPE,  resultEqualsValue));  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	JSError.make(scope,  node,  NON_GLOBAL_TYPE,  resultEqualsValue));	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.       "    +    node.toStringTree());    JSError.make(scope,    node,    NON_GLOBAL_TYPE,    type));    	non-compiled	[CE]  ';'  expected	418	None	replace
1552	[BUG]  [BUGGY]  JSError.make(scope,  node,  MISSING_NAMESPACE_ERROR,   "Node  cannot  be  refined.  n "  +  node.toStringTree());  [CE]  cannot  find  symbol  MISSING_NAMESPACE_ERROR  [FE]        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  JSError.make(scope,  node,  MISSING_NAMESPACE_ERROR,   "Node  cannot  be  refined.  n "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	JSError.make(scope,  node,  MISSING_NAMESPACE_ERROR,   "Node  cannot  be  refined.  n "  +  node.toStringTree());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.toStringTree());    JSError.make(scope,    node,    MISSING_NAMESPACE_ERROR,   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol  MISSING_NAMESPACE_ERROR	345	None	replace
1553	[BUG]  [BUGGY]  JSError.make(scope,  node,  MISSING_NAMESPACE_ERROR,   "Node  cannot  be  refined. "  +  node.toStringTree());  [CE]  cannot  find  symbol  MISSING_NAMESPACE_ERROR  [FE]          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  JSError.make(scope,  node,  MISSING_NAMESPACE_ERROR,   "Node  cannot  be  refined. "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	JSError.make(scope,  node,  MISSING_NAMESPACE_ERROR,   "Node  cannot  be  refined. "  +  node.toStringTree());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.toStringTree());    JSError.make(scope,    node,    MISSING_NAMESPACE_ERROR,   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol  MISSING_NAMESPACE_ERROR	345	None	replace
1554	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getName(), "  +  node.getName());  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getName(), "  +  node.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getName(), "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getName(),   "    +    node.getName());    	non-compiled	[CE]  <identifier>  expected	379	None	replace
1555	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.getName()  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getName(), "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getName(), "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getName(),   "    +    node.getName());    	compilable	  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.getName()  	379	1	replace
1556	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getName(), "  +  node.getQualifiedName());  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.getName()  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getName(), "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getName(), "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getName(),   "    +    node.getName());    	compilable	  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.getName()  	379	1	replace
1557	[BUG]  [BUGGY]  Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getName(), "  +  node.getName());  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getName(), "  +  node.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getName(), "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getName(),   "    +    node.getName());    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	379	None	replace
1558	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.getName()  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getName(), "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getName(), "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getName(),   "    +    node.getName());    	compilable	  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.getName()  	379	1	replace
1559	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getName(), "  +  node.toStringTree());  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.getName()  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getName(), "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getName(), "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getName(),   "    +    node.getName());    	compilable	  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.getName()  	379	1	replace
1560	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getName(), "  +  node.getLocalName());  [CE]  cannot  find  symbol  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getName(), "  +  node.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getName(), "  +  node.getLocalName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getName(),   "    +    node.getName());    	non-compiled	[CE]  cannot  find  symbol	379	None	replace
1561	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.getName()  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getName(), "  +  node.getClass());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getName(), "  +  node.getClass());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getName(),   "    +    node.getName());    	compilable	  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.getName()  	379	1	replace
1562	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getName(), "  +  node.getClass());  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.getName()  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getName(), "  +  node.getClass());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getName(), "  +  node.getClass());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getName(),   "    +    node.getName());    	compilable	  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.getName()  	379	1	replace
1563	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getName(), "  +  node.getSourceName());  [CE]  cannot  find  symbol  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getName(), "  +  node.getSourceName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getName(), "  +  node.getSourceName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getName(),   "    +    node.getName());    	non-compiled	[CE]  cannot  find  symbol	379	None	replace
1564	[BUG]  [BUGGY]  Throwables.warning( "Node  cannot  be  refined.  Node  defined  with  node.getName(), "  +  node.getName());  [CE]  cannot  find  symbol  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.warning( "Node  cannot  be  refined.  Node  defined  with  node.getName(), "  +  node.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.warning( "Node  cannot  be  refined.  Node  defined  with  node.getName(), "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    node.getName(),   "    +    node.getName());    	non-compiled	[CE]  cannot  find  symbol	379	None	replace
1565	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  range  [ "  +  node.getQualifiedName()  + "] ");  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  range  [ "  +  node.getQualifiedName()  + "] ");	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    must    be    in    the    range    [   "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	511	1	replace
1566	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  range  [ "  +  node.getQualifiedName()  + "] ");  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  range  [ "  +  node.getQualifiedName()  + "] ");  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  range  [ "  +  node.getQualifiedName()  + "] ");	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    must    be    in    the    range    [   "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	511	1	replace
1567	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  range  [ "  +  node.getQualifiedName());  [CE]  <identifier>  expected  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  range  [ "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  range  [ "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    must    be    in    the    range    [   "    +    node.getQualifiedName());    	non-compiled	[CE]  <identifier>  expected	511	None	replace
1568	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  range  [ "  +  node.getQualifiedName());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  range  [ "  +  node.getQualifiedName());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    must    be    in    the    range    [   "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	511	1	replace
1569	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  range  [ "  +  node.getQualifiedName());  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  range  [ "  +  node.getQualifiedName());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  range  [ "  +  node.getQualifiedName());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    must    be    in    the    range    [   "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	511	1	replace
1570	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  range  [ "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  range  [ "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    must    be    in    the    range    [   "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	511	1	replace
1571	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  range  [ "  +  node.toStringTree());  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  range  [ "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  range  [ "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    must    be    in    the    range    [   "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	511	1	replace
1572	[BUG]  [BUGGY]  Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  range  [ "  +  node.getQualifiedName());  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]            IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  range  [ "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  range  [ "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    must    be    in    the    range    [   "    +    node.getQualifiedName());    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	511	None	replace
1573	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  range  [ "  +  scope.getQualifiedName());  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  range  [ "  +  scope.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  range  [ "  +  scope.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    must    be    in    the    range    [   "    +    node.getQualifiedName());    	non-compiled	[CE]  cannot  find  symbol	511	None	replace
1574	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  range  [ "  +  node.getQualifiedName(),  type);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,JSType)  [FE]                  IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  range  [ "  +  node.getQualifiedName(),  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  range  [ "  +  node.getQualifiedName(),  type);	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    must    be    in    the    range    [   "    +    node.getQualifiedName());    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,JSType)	511	None	replace
1575	[BUG]  [BUGGY]  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]              UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	boolean  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    boolean    resultEqualsValue    =    scope.inferQualifiedSlot(node,    qualifiedName);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	335	None	replace
1576	[BUG]  [BUGGY]  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName,  type);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName,  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	boolean  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName,  type);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    boolean    resultEqualsValue    =    scope.inferQualifiedSlot(node,    qualifiedName);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	335	None	replace
1577	[BUG]  [BUGGY]  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName,  node);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                  UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName,  node);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	boolean  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName,  node);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    boolean    resultEqualsValue    =    scope.inferQualifiedSlot(node,    qualifiedName);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	335	None	replace
1578	[BUG]  [BUGGY]  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName);  [CE]  cannot  find  symbol  resultEqualsValue  [FE]                    UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    boolean    resultEqualsValue    =    scope.inferQualifiedSlot(node,    qualifiedName);    	non-compiled	[CE]  cannot  find  symbol  resultEqualsValue	335	None	replace
1579	[BUG]  [BUGGY]  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName,  value);  [CE]  cannot  find  symbol  value  [FE]                      UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName,  value);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	boolean  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName,  value);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    boolean    resultEqualsValue    =    scope.inferQualifiedSlot(node,    qualifiedName);    	non-compiled	[CE]  cannot  find  symbol  value	335	None	replace
1580	[BUG]  [BUGGY]  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName,  null);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                        UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName,  null);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	boolean  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName,  null);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    boolean    resultEqualsValue    =    scope.inferQualifiedSlot(node,    qualifiedName);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	335	None	replace
1581	[BUG]  [BUGGY]  boolean  resultEqualsValue  =  type.inferQualifiedSlot(node,  qualifiedName);  [CE]  cannot  find  symbol  [FE]                          UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  boolean  resultEqualsValue  =  type.inferQualifiedSlot(node,  qualifiedName);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	boolean  resultEqualsValue  =  type.inferQualifiedSlot(node,  qualifiedName);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    boolean    resultEqualsValue    =    scope.inferQualifiedSlot(node,    qualifiedName);    	non-compiled	[CE]  cannot  find  symbol	335	None	replace
1582	[BUG]  [BUGGY]  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName,  type);  [CE]  cannot  find  symbol  resultEqualsValue  [FE]                            UnsupportedOperationException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName,  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName,  type);	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getString());    boolean    resultEqualsValue    =    scope.inferQualifiedSlot(node,    qualifiedName);    	non-compiled	[CE]  cannot  find  symbol  resultEqualsValue	335	None	replace
1583	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }  else  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }  [CE]  variable  qualifiedName  might  not  have  been  initialized  [FE]            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }  else  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }  else  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    Node    cannot    be    refined.    n       "    +    node.getLineno());    scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  variable  qualifiedName  might  not  have  been  initialized	165	None	replace
1584	[BUG]  [BUGGY]  if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }  else  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }  [CE]  variable  qualifiedName  might  not  have  been  initialized  [FE]              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }  else  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }  else  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    Node    cannot    be    refined.    n       "    +    node.getLineno());    scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  variable  qualifiedName  might  not  have  been  initialized	165	None	replace
1585	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  Node  cannot  be  refined.   "  +  node.getLineno());  }  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  Node  cannot  be  refined.   "  +  node.getLineno());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  Node  cannot  be  refined.   "  +  node.getLineno());  }	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getLineno());    Node    cannot    be    refined.    n       "    +    node.getLineno());    scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  	165	None	replace
1586	[BUG]  [BUGGY]  Preconditions.checkState(node!=  null?   "Node  cannot  be  refined.  n "  +  node.toStringTree());  [CE]  :  expected  [FE]        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node!=  null?   "Node  cannot  be  refined.  n "  +  node.toStringTree());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(node!=  null?   "Node  cannot  be  refined.  n "  +  node.toStringTree());	          Preconditions.checkNotNull(type);    Preconditions.checkState(type!=    null?   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  :  expected	294	None	replace
1587	[BUG]  [BUGGY]  Preconditions.checkState(node  ==  null?   "Node  cannot  be  refined.  n "  +  node.toStringTree());  [CE]  :  expected  [FE]          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node  ==  null?   "Node  cannot  be  refined.  n "  +  node.toStringTree());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(node  ==  null?   "Node  cannot  be  refined.  n "  +  node.toStringTree());	          Preconditions.checkNotNull(type);    Preconditions.checkState(type!=    null?   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  :  expected	294	None	replace
1588	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null?   "Node  cannot  be  refined. "  +  node.toStringTree());  [CE]  :  expected  [FE]            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(type!=  null?   "Node  cannot  be  refined. "  +  node.toStringTree());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(type!=  null?   "Node  cannot  be  refined. "  +  node.toStringTree());	          Preconditions.checkNotNull(type);    Preconditions.checkState(type!=    null?   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  :  expected	294	None	replace
1589	[BUG]  [BUGGY]  Preconditions.checkState(node!=  null?   "Node  cannot  be  refined. "  +  node.toStringTree());  [CE]  :  expected  [FE]              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node!=  null?   "Node  cannot  be  refined. "  +  node.toStringTree());  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(node!=  null?   "Node  cannot  be  refined. "  +  node.toStringTree());	          Preconditions.checkNotNull(type);    Preconditions.checkState(type!=    null?   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  :  expected	294	None	replace
1590	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  _qualifiedName,  origType,  type);  break;  [CE]  cannot  find  symbol  _qualifiedName  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  _qualifiedName,  origType,  type);  break;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  _qualifiedName,  origType,  type);  break;	  scope.inferQualifiedSlot(node,    value,    origType,    type);    break;    	non-compiled	[CE]  cannot  find  symbol  _qualifiedName	209	None	replace
1591	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  selectedName,  origType,  type);  break;  [CE]  cannot  find  symbol  selectedName  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  selectedName,  origType,  type);  break;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  selectedName,  origType,  type);  break;	  scope.inferQualifiedSlot(node,    value,    origType,    type);    break;    	non-compiled	[CE]  cannot  find  symbol  selectedName	209	None	replace
1592	[BUG]  [BUGGY]  JSType  node  =  scope.getJSType(qualifiedName);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  JSType  node  =  scope.getJSType(qualifiedName);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	JSType  node  =  scope.getJSType(qualifiedName);	  JSType    node    =    scope.getJSType(type);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	403	None	replace
1593	[BUG]  [BUGGY]  JSType  node  =  scope.getJSType(qualifiedName,  type);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  JSType  node  =  scope.getJSType(qualifiedName,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	JSType  node  =  scope.getJSType(qualifiedName,  type);	  JSType    node    =    scope.getJSType(type);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	403	None	replace
1594	[BUG]  [BUGGY]  JSType  node  =  scope.getJSType(type,  resultEqualsValue);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  JSType  node  =  scope.getJSType(type,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	JSType  node  =  scope.getJSType(type,  resultEqualsValue);	  JSType    node    =    scope.getJSType(type);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	403	None	replace
1595	[BUG]  [BUGGY]  JSType  node  =  scope.getJSType(type,  qualifiedName);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  JSType  node  =  scope.getJSType(type,  qualifiedName);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	JSType  node  =  scope.getJSType(type,  qualifiedName);	  JSType    node    =    scope.getJSType(type);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	403	None	replace
1596	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  DEFAULT_TYPE,  qualifiedName);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  DEFAULT_TYPE,  qualifiedName);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  DEFAULT_TYPE,  qualifiedName);	  Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE,    DEFAULT_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	178	None	replace
1597	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  DEFAULT_TYPE,  scope);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  DEFAULT_TYPE,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  DEFAULT_TYPE,  scope);	  Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE,    DEFAULT_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	178	None	replace
1598	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  DEFAULT_TYPE,  resultEqualsValue);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  DEFAULT_TYPE,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  DEFAULT_TYPE,  resultEqualsValue);	  Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE,    DEFAULT_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	178	None	replace
1599	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  DEFAULT_TYPE),  scope);  [CE]  ';'  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  DEFAULT_TYPE),  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  DEFAULT_TYPE),  scope);	  Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE,    DEFAULT_TYPE);    	non-compiled	[CE]  ';'  expected	178	None	replace
1600	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  DEFAULT_TYPE,  value);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  DEFAULT_TYPE,  value);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  DEFAULT_TYPE,  value);	  Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE,    DEFAULT_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	178	None	replace
1601	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  UNKNOWN_TYPE,  DEFAULT_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  UNKNOWN_TYPE,  DEFAULT_TYPE);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  UNKNOWN_TYPE,  DEFAULT_TYPE);	  Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE,    DEFAULT_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	178	None	replace
1602	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(NODE_TYPE,  DEFAULT_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  typeRegistry.getNativeType(NODE_TYPE,  DEFAULT_TYPE);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(NODE_TYPE,  DEFAULT_TYPE);	  Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE,    DEFAULT_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	178	None	replace
1603	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  type,  scope);  [CE]  cannot  find  symbol  compiler  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  type,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  type,  scope);	  NodeTraversal.traverse(compiler,    node,    this,    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	99	None	replace
1604	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  type,  qualifiedName);  [CE]  cannot  find  symbol  compiler  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  type,  qualifiedName);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  type,  qualifiedName);	  NodeTraversal.traverse(compiler,    node,    this,    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	99	None	replace
1605	[BUG]  [BUGGY]  scope.inferQualifiedSlot(type,  origType,  UNKNOWN_TYPE);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(type,  origType,  UNKNOWN_TYPE);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(type,  origType,  UNKNOWN_TYPE);	  scope.inferQualifiedSlot(node,    UNKNOWN_TYPE,    origType,    type);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	227	None	replace
1606	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  type,  origType,  unknownType);  [CE]  cannot  find  symbol  unknownType  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  type,  origType,  unknownType);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  type,  origType,  unknownType);	  scope.inferQualifiedSlot(node,    UNKNOWN_TYPE,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol  unknownType	227	None	replace
1607	[BUG]  [BUGGY]  Preconditions.checkState(scope.inferQualifiedSlot(node,  qualifiedName,  origType!=  null?  getNativeType(UNKNOWN_TYPE):  type);  [CE]  ')'  expected  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(scope.inferQualifiedSlot(node,  qualifiedName,  origType!=  null?  getNativeType(UNKNOWN_TYPE):  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(scope.inferQualifiedSlot(node,  qualifiedName,  origType!=  null?  getNativeType(UNKNOWN_TYPE):  type);	          Preconditions.checkNotNull(type);    Preconditions.checkState(type!=    null);    	non-compiled	[CE]  ')'  expected	25	None	replace
1608	[BUG]  [BUGGY]  Preconditions.checkState(scope.inferQualifiedSlot(node,  qualifiedName,  origType  ==  null?  getNativeType(UNKNOWN_TYPE):  node);  [CE]  ')'  expected  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(scope.inferQualifiedSlot(node,  qualifiedName,  origType  ==  null?  getNativeType(UNKNOWN_TYPE):  node);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(scope.inferQualifiedSlot(node,  qualifiedName,  origType  ==  null?  getNativeType(UNKNOWN_TYPE):  node);	          Preconditions.checkNotNull(type);    Preconditions.checkState(type!=    null);    	non-compiled	[CE]  ')'  expected	25	None	replace
1609	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  type,  this);  [CE]  cannot  find  symbol  compiler  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  type,  this);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  type,  this);	  NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE),    this,    scope);    	non-compiled	[CE]  cannot  find  symbol  compiler	125	None	replace
1610	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  this,  scope,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  this,  scope,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  this,  scope,  resultEqualsValue);	  NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE),    this,    scope);    	non-compiled	[CE]  cannot  find  symbol  compiler	125	None	replace
1611	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  this,  typeRegistry);  [CE]  cannot  find  symbol  compiler  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  this,  typeRegistry);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  this,  typeRegistry);	  NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE),    this,    scope);    	non-compiled	[CE]  cannot  find  symbol  compiler	125	None	replace
1612	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  getNativeType(UNKNOWN_TYPE),  this,  scope);  [CE]  cannot  find  symbol  compiler  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  getNativeType(UNKNOWN_TYPE),  this,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  type,  getNativeType(UNKNOWN_TYPE),  this,  scope);	  NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE),    this,    scope);    	non-compiled	[CE]  cannot  find  symbol  compiler	125	None	replace
1613	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.getString());  Node  defined  with  type   "  +  node.getString());  [CE]  [FE]    UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.getString());  Node  defined  with  type   "  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.getString());    Node  defined  with  type   "  +  node.getString());	  	non-compiled	[CE]  	462	None	add
1614	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.getString());  Node  defined  with  type   "  +  node.getString());  if(resultEqualsValue  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.getString());  }  [CE]  [FE]      UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.getString());  Node  defined  with  type   "  +  node.getString());  if(resultEqualsValue  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.getString());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.getString());    Node  defined  with  type   "  +  node.getString());  if(resultEqualsValue  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.getString());  }	  	non-compiled	[CE]  	462	None	add
1615	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.getString());  Node  defined  with  type   "  +  node.getString());  if(resultEqualsValue  ==  null)  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }  [CE]  [FE]        UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.getString());  Node  defined  with  type   "  +  node.getString());  if(resultEqualsValue  ==  null)  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.getString());    Node  defined  with  type   "  +  node.getString());  if(resultEqualsValue  ==  null)  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }	  	non-compiled	[CE]  	462	None	add
1616	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.getString());  Node  defined  with  type   "  +  node.getString());  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.getString());  }  [CE]  [FE]          UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.getString());  Node  defined  with  type   "  +  node.getString());  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.getString());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.getString());    Node  defined  with  type   "  +  node.getString());  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.getString());  }	  	non-compiled	[CE]  	462	None	add
1617	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.getString());  Node  defined  with  type   "  +  node.getString());  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [CE]  [FE]            UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.getString());  Node  defined  with  type   "  +  node.getString());  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.getString());    Node  defined  with  type   "  +  node.getString());  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);	  	non-compiled	[CE]  	462	None	add
1618	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.getString());  Node  defined  with  type   "  +  node.getString());  if(resultEqualsValue!=  null)  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }  [CE]  [FE]              UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.getString());  Node  defined  with  type   "  +  node.getString());  if(resultEqualsValue!=  null)  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.getString());    Node  defined  with  type   "  +  node.getString());  if(resultEqualsValue!=  null)  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }	  	non-compiled	[CE]  	462	None	add
1619	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.getString());  Node  defined  with  type   "  +  node.getString());  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [CE]  [FE]                UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.getString());  Node  defined  with  type   "  +  node.getString());  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.getString());    Node  defined  with  type   "  +  node.getString());  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);	  	non-compiled	[CE]  	462	None	add
1620	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.getString());  Node  defined  with  type   "  +  node.getString());  if(resultEqualsValue)  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }  [CE]  [FE]                  UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.getString());  Node  defined  with  type   "  +  node.getString());  if(resultEqualsValue)  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.getString());    Node  defined  with  type   "  +  node.getString());  if(resultEqualsValue)  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }	  	non-compiled	[CE]  	462	None	add
1621	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.getString());  Node  defined  with  type   "  +  node.getString());  if(resultEqualsValue  ==  null  ||  resultEqualsValue)  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }  [CE]  [FE]                    UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.getString());  Node  defined  with  type   "  +  node.getString());  if(resultEqualsValue  ==  null  ||  resultEqualsValue)  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.getString());    Node  defined  with  type   "  +  node.getString());  if(resultEqualsValue  ==  null  ||  resultEqualsValue)  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }	  	non-compiled	[CE]  	462	None	add
1622	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.getString());  Node  defined  with  type   "  +  node.getString());  if(resultEqualsValue  ==  null)  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;  }  [CE]  [FE]                      UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  type     "  +  node.getString());  Node  defined  with  type   "  +  node.getString());  if(resultEqualsValue  ==  null)  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    type       "    +    node.getString());    Node  defined  with  type   "  +  node.getString());  if(resultEqualsValue  ==  null)  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;  }	  	non-compiled	[CE]  	462	None	add
1623	[BUG]  [BUGGY]  DebugLog.warning(type, "Node  cannot  be  refined.   "  +  node.getLocalName());  [CE]  cannot  find  symbol  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning(type, "Node  cannot  be  refined.   "  +  node.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning(type, "Node  cannot  be  refined.   "  +  node.getLocalName());	  DebugLog.warning(   "Node    cannot    be    refined.   "    +    node.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
1624	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined. "  +  node,  scope.getLocalName());  [CE]  cannot  find  symbol  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning( "Node  cannot  be  refined. "  +  node,  scope.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined. "  +  node,  scope.getLocalName());	  DebugLog.warning(   "Node    cannot    be    refined.   "    +    node.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
1625	[BUG]  [BUGGY]  DebugLog.warning(scope, "Node  cannot  be  refined.   "  +  node.getLocalName());  [CE]  cannot  find  symbol  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning(scope, "Node  cannot  be  refined.   "  +  node.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning(scope, "Node  cannot  be  refined.   "  +  node.getLocalName());	  DebugLog.warning(   "Node    cannot    be    refined.   "    +    node.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
1626	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined. "  +  node,  type.getLocalName());  [CE]  cannot  find  symbol  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning( "Node  cannot  be  refined. "  +  node,  type.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined. "  +  node,  type.getLocalName());	  DebugLog.warning(   "Node    cannot    be    refined.   "    +    node.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
1627	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined.   "  +  node.getLocalName(),  type);  [CE]  cannot  find  symbol  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning( "Node  cannot  be  refined.   "  +  node.getLocalName(),  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined.   "  +  node.getLocalName(),  type);	  DebugLog.warning(   "Node    cannot    be    refined.   "    +    node.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
1628	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null);  NodeTraversal.traverse(compiler,  node,  type);  [CE]  cannot  find  symbol  compiler  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(type!=  null);  NodeTraversal.traverse(compiler,  node,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(type!=  null);  NodeTraversal.traverse(compiler,  node,  type);	          Preconditions.checkNotNull(type);    NodeTraversal.traverse(compiler,    node,    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	31	None	replace
1629	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  null);  NodeTraversal.traverse(compiler,  node,  type);  [CE]  cannot  find  symbol  compiler  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(type  ==  null);  NodeTraversal.traverse(compiler,  node,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(type  ==  null);  NodeTraversal.traverse(compiler,  node,  type);	          Preconditions.checkNotNull(type);    NodeTraversal.traverse(compiler,    node,    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	31	None	replace
1630	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  node,  type);  [CE]  cannot  find  symbol  compiler  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  node,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  node,  type);	          Preconditions.checkNotNull(type);    NodeTraversal.traverse(compiler,    node,    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	31	None	replace
1631	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  NodeTraversal.traverse(compiler,  node,  type);  [CE]  cannot  find  symbol  compiler  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  NodeTraversal.traverse(compiler,  node,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  NodeTraversal.traverse(compiler,  node,  type);	          Preconditions.checkNotNull(type);    NodeTraversal.traverse(compiler,    node,    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	31	None	replace
1632	[BUG]  [BUGGY]  Preconditions.checkNotNull(qualifiedName);  NodeTraversal.traverse(compiler,  node,  type);  [CE]  cannot  find  symbol  compiler  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkNotNull(qualifiedName);  NodeTraversal.traverse(compiler,  node,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkNotNull(qualifiedName);  NodeTraversal.traverse(compiler,  node,  type);	          Preconditions.checkNotNull(type);    NodeTraversal.traverse(compiler,    node,    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	31	None	replace
1633	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  type);  NodeTraversal.traverse(compiler,  node,  type);  [CE]  incomparable  types:  int  and  JSType  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node.getType()  ==  type);  NodeTraversal.traverse(compiler,  node,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(node.getType()  ==  type);  NodeTraversal.traverse(compiler,  node,  type);	          Preconditions.checkNotNull(type);    NodeTraversal.traverse(compiler,    node,    type);    	non-compiled	[CE]  incomparable  types:  int  and  JSType	31	None	replace
1634	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  NodeTraversal.traverse(compiler,  node,  type);  [CE]  cannot  find  symbol  compiler  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  NodeTraversal.traverse(compiler,  node,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(node.getType()  ==  Token.GETPROP);  NodeTraversal.traverse(compiler,  node,  type);	          Preconditions.checkNotNull(type);    NodeTraversal.traverse(compiler,    node,    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	31	None	replace
1635	[BUG]  [BUGGY]  Preconditions.checkNotNull(type);  NodeTraversal.traverse(compiler,  node,  type,  scope);  [CE]  cannot  find  symbol  compiler  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkNotNull(type);  NodeTraversal.traverse(compiler,  node,  type,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkNotNull(type);  NodeTraversal.traverse(compiler,  node,  type,  scope);	          Preconditions.checkNotNull(type);    NodeTraversal.traverse(compiler,    node,    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	31	None	replace
1636	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  does  not  exist:  node.getName()  = "  +  node.getName());  [CE]  cannot  find  symbol  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  does  not  exist:  node.getName()  = "  +  node.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  does  not  exist:  node.getName()  = "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:    node.getName()   "    +    node.getName());    	non-compiled	[CE]  cannot  find  symbol	430	None	replace
1637	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  does  not  exist:  node.getName()  ' "  +  node.getName());  [CE]  cannot  find  symbol  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  does  not  exist:  node.getName()  ' "  +  node.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  does  not  exist:  node.getName()  ' "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:    node.getName()   "    +    node.getName());    	non-compiled	[CE]  cannot  find  symbol	430	None	replace
1638	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  does  not  exist:  node.getName()   "  +  node.getName());  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  does  not  exist:  node.getName()   "  +  node.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  does  not  exist:  node.getName()   "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:    node.getName()   "    +    node.getName());    	non-compiled	[CE]  <identifier>  expected	430	None	replace
1639	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  does  not  exist:  node.getName(), "  +  node.getName());  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  does  not  exist:  node.getName(), "  +  node.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  does  not  exist:  node.getName(), "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:    node.getName()   "    +    node.getName());    	non-compiled	[CE]  <identifier>  expected	430	None	replace
1640	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  does  not  exist:  node.getName(), "  +  node.getName());  [CE]  cannot  find  symbol  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  does  not  exist:  node.getName(), "  +  node.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  does  not  exist:  node.getName(), "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:    node.getName()   "    +    node.getName());    	non-compiled	[CE]  cannot  find  symbol	430	None	replace
1641	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  does  not  exist:  node.getName()  = "  +  node.getName());  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  does  not  exist:  node.getName()  = "  +  node.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  does  not  exist:  node.getName()  = "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:    node.getName()   "    +    node.getName());    	non-compiled	[CE]  <identifier>  expected	430	None	replace
1642	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  does  not  exist:  node.getName()  -  node.getName()   "  +  node.getName());  [CE]  cannot  find  symbol  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  does  not  exist:  node.getName()  -  node.getName()   "  +  node.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  does  not  exist:  node.getName()  -  node.getName()   "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:    node.getName()   "    +    node.getName());    	non-compiled	[CE]  cannot  find  symbol	430	None	replace
1643	[BUG]  [BUGGY]  new  IllegalArgumentException( "Node  does  not  exist:  node.getName()  ' "  +  node.getName());  [CE]  cannot  find  symbol  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  new  IllegalArgumentException( "Node  does  not  exist:  node.getName()  ' "  +  node.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	new  IllegalArgumentException( "Node  does  not  exist:  node.getName()  ' "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:    node.getName()   "    +    node.getName());    	non-compiled	[CE]  cannot  find  symbol	430	None	replace
1644	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  does  not  exist:  node.getName()   "  +  node.getName());  [CE]  cannot  find  symbol  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  does  not  exist:  node.getName()   "  +  node.getName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  does  not  exist:  node.getName()   "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    does    not    exist:    node.getName()   "    +    node.getName());    	non-compiled	[CE]  cannot  find  symbol	430	None	replace
1645	[BUG]  [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  type,  results);  [CE]  cannot  find  symbol  results  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  type,  results);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(node,  qualifiedName,  origType,  type,  results);	  scope.inferSlot(node,    qualifiedName,    origType,    type,    eventEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  results	256	None	replace
1646	[BUG]  [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  resultEqualsValue,  type);  [CE]  cannot  find  symbol  resultEqualsValue  [FE]                                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  resultEqualsValue,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(node,  qualifiedName,  origType,  resultEqualsValue,  type);	  scope.inferSlot(node,    qualifiedName,    origType,    type,    eventEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  resultEqualsValue	256	None	replace
1647	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  sourceName,  type,  scope);  [CE]  cannot  find  symbol  compiler  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  sourceName,  type,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  sourceName,  type,  scope);	  NodeTraversal.traverse(compiler,    node,    sourceName,    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	101	None	replace
1648	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  sourceName);  [CE]  cannot  find  symbol  compiler  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  sourceName);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  type,  sourceName);	  NodeTraversal.traverse(compiler,    node,    sourceName,    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	101	None	replace
1649	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  sourceName,  resultEqualsValue,  type);  [CE]  cannot  find  symbol  compiler  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  sourceName,  resultEqualsValue,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  sourceName,  resultEqualsValue,  type);	  NodeTraversal.traverse(compiler,    node,    sourceName,    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	101	None	replace
1650	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  sourceName,  scope,  type);  [CE]  cannot  find  symbol  compiler  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  sourceName,  scope,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  sourceName,  scope,  type);	  NodeTraversal.traverse(compiler,    node,    sourceName,    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	101	None	replace
1651	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  sourceName,  type);  [CE]  cannot  find  symbol  compiler  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  sourceName,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  sourceName,  type);	  NodeTraversal.traverse(compiler,    node,    sourceName,    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	101	None	replace
1652	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  resultEqualsValue);  [CE]  cannot  find  symbol  resultEqualsValue  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  qualifiedName,  origType,  resultEqualsValue);	  scope.inferQualifiedSlot(node,    value,    qualifiedName,    origType);    	non-compiled	[CE]  cannot  find  symbol  resultEqualsValue	370	None	replace
1653	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  name,  qualifiedName,  origType);  [CE]  cannot  find  symbol  name  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  name,  qualifiedName,  origType);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  name,  qualifiedName,  origType);	  scope.inferQualifiedSlot(node,    value,    qualifiedName,    origType);    	non-compiled	[CE]  cannot  find  symbol  name	370	None	replace
1654	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined.   "  +  node,  qualifiedName,  scope.toStringTree());  [CE]  cannot  find  symbol  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning( "Node  cannot  be  refined.   "  +  node,  qualifiedName,  scope.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined.   "  +  node,  qualifiedName,  scope.toStringTree());	  DebugLog.warning(   "Node    cannot    be    refined.   "    +    node,    qualifiedName.toStringTree());    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
1655	[BUG]  [BUGGY]  DebugLog.warning(type, "Node  cannot  be  refined.   "  +  node,  qualifiedName.toStringTree());  [CE]  cannot  find  symbol  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning(type, "Node  cannot  be  refined.   "  +  node,  qualifiedName.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning(type, "Node  cannot  be  refined.   "  +  node,  qualifiedName.toStringTree());	  DebugLog.warning(   "Node    cannot    be    refined.   "    +    node,    qualifiedName.toStringTree());    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
1656	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined.   "  +  qualifiedName,  scope.toStringTree());  [CE]  cannot  find  symbol  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning( "Node  cannot  be  refined.   "  +  qualifiedName,  scope.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined.   "  +  qualifiedName,  scope.toStringTree());	  DebugLog.warning(   "Node    cannot    be    refined.   "    +    node,    qualifiedName.toStringTree());    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
1657	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined. "  +  qualifiedName,  node.toStringTree());  [CE]  cannot  find  symbol  DebugLog  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning( "Node  cannot  be  refined. "  +  qualifiedName,  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined. "  +  qualifiedName,  node.toStringTree());	  DebugLog.warning(   "Node    cannot    be    refined.   "    +    node,    qualifiedName.toStringTree());    	non-compiled	[CE]  cannot  find  symbol  DebugLog	130	None	replace
1658	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined.   "  +  node,  qualifiedName,  type.toStringTree());  [CE]  cannot  find  symbol  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning( "Node  cannot  be  refined.   "  +  node,  qualifiedName,  type.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined.   "  +  node,  qualifiedName,  type.toStringTree());	  DebugLog.warning(   "Node    cannot    be    refined.   "    +    node,    qualifiedName.toStringTree());    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
1659	[BUG]  [BUGGY]  DebugLog.warning(qualifiedName, "Node  cannot  be  refined.   "  +  node,  scope.toStringTree());  [CE]  cannot  find  symbol  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning(qualifiedName, "Node  cannot  be  refined.   "  +  node,  scope.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning(qualifiedName, "Node  cannot  be  refined.   "  +  node,  scope.toStringTree());	  DebugLog.warning(   "Node    cannot    be    refined.   "    +    node,    qualifiedName.toStringTree());    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
1660	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name  =   "  +  node.getQualifiedName());  Node  defined  with  qualified  name  =   "  +  node.getQualifiedName());  [CE]  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name  =   "  +  node.getQualifiedName());  Node  defined  with  qualified  name  =   "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    qualified    name    =   "    +    node.getQualifiedName());    Node  defined  with  qualified  name  =   "  +  node.getQualifiedName());	  	non-compiled	[CE]  	512	None	add
1661	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name  =   "  +  node.getQualifiedName());  Node  defined  with  qualifiedName  =   "  +  node.getQualifiedName());  [CE]  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name  =   "  +  node.getQualifiedName());  Node  defined  with  qualifiedName  =   "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    qualified    name    =   "    +    node.getQualifiedName());    Node  defined  with  qualifiedName  =   "  +  node.getQualifiedName());	  	non-compiled	[CE]  	512	None	add
1662	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name  =   "  +  node.getQualifiedName());  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name  =   "  +  node.getQualifiedName());  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name  =   "  +  node.getQualifiedName());  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name  =   "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    qualified    name    =   "    +    node.getQualifiedName());    IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name  =   "  +  node.getQualifiedName());	  	non-compiled	[CE]  cannot  find  symbol	512	None	add
1663	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name  =   "  +  node.getQualifiedName());  Node  defined  with  qualified  name  =(  +  node.getQualifiedName());  [CE]  [FE]          IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name  =   "  +  node.getQualifiedName());  Node  defined  with  qualified  name  =(  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    qualified    name    =   "    +    node.getQualifiedName());    Node  defined  with  qualified  name  =(  +  node.getQualifiedName());	  	non-compiled	[CE]  	512	None	add
1664	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name  =   "  +  node.getQualifiedName());  Node  defined  with  qualifiedName  =(  +  node.getQualifiedName());  [CE]  [FE]            IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name  =   "  +  node.getQualifiedName());  Node  defined  with  qualifiedName  =(  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    qualified    name    =   "    +    node.getQualifiedName());    Node  defined  with  qualifiedName  =(  +  node.getQualifiedName());	  	non-compiled	[CE]  	512	None	add
1665	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name  =   "  +  node.getQualifiedName());  Node  defined  with  qualified  name  =   "  +  node.getQualifiedName());  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [CE]  [FE]              IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name  =   "  +  node.getQualifiedName());  Node  defined  with  qualified  name  =   "  +  node.getQualifiedName());  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    qualified    name    =   "    +    node.getQualifiedName());    Node  defined  with  qualified  name  =   "  +  node.getQualifiedName());  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);	  	non-compiled	[CE]  	512	None	add
1666	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name  =   "  +  node.getQualifiedName());  Node  defined  with  qualifiedName  =   "  +  node.getQualifiedName());  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [CE]  [FE]                IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name  =   "  +  node.getQualifiedName());  Node  defined  with  qualifiedName  =   "  +  node.getQualifiedName());  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    qualified    name    =   "    +    node.getQualifiedName());    Node  defined  with  qualifiedName  =   "  +  node.getQualifiedName());  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);	  	non-compiled	[CE]  	512	None	add
1667	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name  =   "  +  node.getQualifiedName());  Node  definedWith  qualifiedName  =   "  +  node.getQualifiedName());  [CE]  [FE]                  IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  Node  defined  with  qualified  name  =   "  +  node.getQualifiedName());  Node  definedWith  qualifiedName  =   "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    qualified    name    =   "    +    node.getQualifiedName());    Node  definedWith  qualifiedName  =   "  +  node.getQualifiedName());	  	non-compiled	[CE]  	512	None	add
1668	[BUG]  [BUGGY]  Node  node  =  scope.getTypeRegistry().getNativeType(UNKNOWN_TYPE,  type);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.getTypeRegistry().getNativeType(UNKNOWN_TYPE,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getTypeRegistry().getNativeType(UNKNOWN_TYPE,  type);	  Node    node    =    scope.getTypeRegistry().getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	411	None	replace
1669	[BUG]  [BUGGY]  Node  node  =  scope.getTypeRegistry().getNativeType(UNKNOWN_TYPE,  qualifiedName);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.getTypeRegistry().getNativeType(UNKNOWN_TYPE,  qualifiedName);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getTypeRegistry().getNativeType(UNKNOWN_TYPE,  qualifiedName);	  Node    node    =    scope.getTypeRegistry().getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	411	None	replace
1670	[BUG]  [BUGGY]  Node  node  =  scope.getTypeRegistry().getNativeType(JSTypeNative.UNKNOWN_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.getTypeRegistry().getNativeType(JSTypeNative.UNKNOWN_TYPE);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getTypeRegistry().getNativeType(JSTypeNative.UNKNOWN_TYPE);	  Node    node    =    scope.getTypeRegistry().getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	411	None	replace
1671	[BUG]  [BUGGY]  Node  node  =  scope.getTypeRegistry().getNativeType(UNKNOWN_TYPE),  type);  [CE]  ';'  expected  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.getTypeRegistry().getNativeType(UNKNOWN_TYPE),  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getTypeRegistry().getNativeType(UNKNOWN_TYPE),  type);	  Node    node    =    scope.getTypeRegistry().getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	411	None	replace
1672	[BUG]  [BUGGY]  Node  node  =  scope.getTypeRegistry().getNativeType(NODE_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.getTypeRegistry().getNativeType(NODE_TYPE);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getTypeRegistry().getNativeType(NODE_TYPE);	  Node    node    =    scope.getTypeRegistry().getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	411	None	replace
1673	[BUG]  [BUGGY]  Node  node  =  scope.getTypeRegistry().getNativeType(UNKNOWN_TYPE)+  1;  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.getTypeRegistry().getNativeType(UNKNOWN_TYPE)+  1;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getTypeRegistry().getNativeType(UNKNOWN_TYPE)+  1;	  Node    node    =    scope.getTypeRegistry().getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	411	None	replace
1674	[BUG]  [BUGGY]  Node  node  =  scope.getTypeRegistry().getNativeType(UNKNOWN_TYPE,  name);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.getTypeRegistry().getNativeType(UNKNOWN_TYPE,  name);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getTypeRegistry().getNativeType(UNKNOWN_TYPE,  name);	  Node    node    =    scope.getTypeRegistry().getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	411	None	replace
1675	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  sourceName,  scope,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  sourceName,  scope,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  sourceName,  scope,  resultEqualsValue);	  NodeTraversal.traverse(compiler,    node,    sourceName,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	446	None	replace
1676	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  sourceName);  [CE]  cannot  find  symbol  compiler  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  sourceName);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  sourceName);	  NodeTraversal.traverse(compiler,    node,    sourceName,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	446	None	replace
1677	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  sourceName,  resultEqualsValue,  scope);  [CE]  cannot  find  symbol  compiler  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  sourceName,  resultEqualsValue,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  sourceName,  resultEqualsValue,  scope);	  NodeTraversal.traverse(compiler,    node,    sourceName,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	446	None	replace
1678	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  type,  true);  [CE]  cannot  find  symbol  compiler  [FE]                                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  type,  true);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  type,  true);	  NodeTraversal.traverse(compiler,    node,    this,    type,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	224	None	replace
1679	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  scope,  false);  [CE]  cannot  find  symbol  compiler  [FE]                                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  scope,  false);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  scope,  false);	  NodeTraversal.traverse(compiler,    node,    this,    type,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	224	None	replace
1680	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  origType,  false);  [CE]  cannot  find  symbol  compiler  [FE]                                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  origType,  false);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  origType,  false);	  NodeTraversal.traverse(compiler,    node,    this,    type,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	224	None	replace
1681	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  type,  false,  scope);  [CE]  cannot  find  symbol  compiler  [FE]                                                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  type,  false,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  type,  false,  scope);	  NodeTraversal.traverse(compiler,    node,    this,    type,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	224	None	replace
1682	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  this,  type,  false);  [CE]  cannot  find  symbol  compiler  [FE]                                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  this,  type,  false);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope,  this,  type,  false);	  NodeTraversal.traverse(compiler,    node,    this,    type,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	224	None	replace
1683	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  this,  false);  [CE]  cannot  find  symbol  compiler  [FE]                                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  this,  false);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope,  this,  false);	  NodeTraversal.traverse(compiler,    node,    this,    type,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	224	None	replace
1684	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  qualifiedName,  false);  [CE]  cannot  find  symbol  compiler  [FE]                                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  qualifiedName,  false);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  qualifiedName,  false);	  NodeTraversal.traverse(compiler,    node,    this,    type,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	224	None	replace
1685	[BUG]  [BUGGY]  Node  node  =  scope.initializeChildNodes(node,  type);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.initializeChildNodes(node,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.initializeChildNodes(node,  type);	  Node    node    =    scope.initializeChildNodes(node);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	432	None	replace
1686	[BUG]  [BUGGY]  Node  node  =  scope.initializeChildNodes(node,  qualifiedName);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.initializeChildNodes(node,  qualifiedName);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.initializeChildNodes(node,  qualifiedName);	  Node    node    =    scope.initializeChildNodes(node);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	432	None	replace
1687	[BUG]  [BUGGY]  Node  node  =  scope.initializeChildNodes(type);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.initializeChildNodes(type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.initializeChildNodes(type);	  Node    node    =    scope.initializeChildNodes(node);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	432	None	replace
1688	[BUG]  [BUGGY]  Node  node  =  scope.initializeChildNodes(node,  value);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.initializeChildNodes(node,  value);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.initializeChildNodes(node,  value);	  Node    node    =    scope.initializeChildNodes(node);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	432	None	replace
1689	[BUG]  [BUGGY]  Node  node  =  scope.initializeChildNodes(value);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.initializeChildNodes(value);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.initializeChildNodes(value);	  Node    node    =    scope.initializeChildNodes(node);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	432	None	replace
1690	[BUG]  [BUGGY]  Node  node  =  scope.initializeChildNodes(scope,  node);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.initializeChildNodes(scope,  node);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.initializeChildNodes(scope,  node);	  Node    node    =    scope.initializeChildNodes(node);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	432	None	replace
1691	[BUG]  [BUGGY]  Node  node  =  scope.initializeChildNodes(type,  node);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.initializeChildNodes(type,  node);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.initializeChildNodes(type,  node);	  Node    node    =    scope.initializeChildNodes(node);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	432	None	replace
1692	[BUG]  [BUGGY]  Node  node  =  scope.initializeChildNodes(node,  name);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  scope.initializeChildNodes(node,  name);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.initializeChildNodes(node,  name);	  Node    node    =    scope.initializeChildNodes(node);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	432	None	replace
1693	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  node,  type,  qualifiedName);  [CE]  cannot  find  symbol  name  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(name,  node,  type,  qualifiedName);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(name,  node,  type,  qualifiedName);	  scope.inferQualifiedSlot(node,    type,    qualifiedName);    	non-compiled	[CE]  cannot  find  symbol  name	118	None	replace
1694	[BUG]  [BUGGY]  scope.inferQualifiedSlot(value,  node,  type,  qualifiedName);  [CE]  cannot  find  symbol  value  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(value,  node,  type,  qualifiedName);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(value,  node,  type,  qualifiedName);	  scope.inferQualifiedSlot(node,    type,    qualifiedName);    	non-compiled	[CE]  cannot  find  symbol  value	118	None	replace
1695	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name  ' "  +  node.getQualifiedName()  + "' ");  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name  ' "  +  node.getQualifiedName()  + "' ");	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    qualified    name    '   "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	80	1	replace
1696	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name  ' "  +  node.getQualifiedName()  + "' ");  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name  ' "  +  node.getQualifiedName()  + "' ");  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name  ' "  +  node.getQualifiedName()  + "' ");	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    qualified    name    '   "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	80	1	replace
1697	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name  ' "  +  node.getQualifiedName());  [CE]  <identifier>  expected  [FE]      IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name  ' "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name  ' "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    qualified    name    '   "    +    node.getQualifiedName());    	non-compiled	[CE]  <identifier>  expected	80	None	replace
1698	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name  ' "  +  node.getQualifiedName());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name  ' "  +  node.getQualifiedName());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    qualified    name    '   "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	80	1	replace
1699	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name  ' "  +  node.getQualifiedName());  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name  ' "  +  node.getQualifiedName());  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name  ' "  +  node.getQualifiedName());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    qualified    name    '   "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	80	1	replace
1700	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name  ' "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name  ' "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    qualified    name    '   "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	80	1	replace
1701	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name  ' "  +  node.toStringTree());  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name  ' "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name  ' "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    qualified    name    '   "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	80	1	replace
1702	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name  ' "  +  node.getQualifiedName()  + "'. ");  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name  ' "  +  node.getQualifiedName()  + "'. ");	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    qualified    name    '   "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	80	1	replace
1703	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name  ' "  +  node.getQualifiedName()  + "'. ");  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name  ' "  +  node.getQualifiedName()  + "'. ");  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name  ' "  +  node.getQualifiedName()  + "'. ");	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    qualified    name    '   "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	80	1	replace
1704	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name  ' "  +  node.getQualifiedName());  }  else  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }  [CE]  variable  qualifiedName  might  not  have  been  initialized  [FE]                  IllegalArgumentException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name  ' "  +  node.getQualifiedName());  }  else  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name  ' "  +  node.getQualifiedName());  }  else  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    defined    with    qualified    name    '   "    +    node.getQualifiedName());    	non-compiled	[CE]  variable  qualifiedName  might  not  have  been  initialized	80	None	replace
1705	[BUG]  [BUGGY]  Node  node  =  node.getQualifiedName();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  node  =  node.getQualifiedName();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  node.getQualifiedName();	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getQualifiedName());    n    =    node.getQualifiedName();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	304	None	replace
1706	[BUG]  [BUGGY]  n  =  node.getQualifiedName();  [CE]  cannot  find  symbol  n  [FE]            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  n  =  node.getQualifiedName();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	n  =  node.getQualifiedName();	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getQualifiedName());    n    =    node.getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol  n	304	None	replace
1707	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName());  n  =  node.getQualifiedName();  [CE]  cannot  find  symbol  n  [FE]              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName());  n  =  node.getQualifiedName();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName());  n  =  node.getQualifiedName();	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getQualifiedName());    n    =    node.getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol  n	304	None	replace
1708	[BUG]  [BUGGY]  node  =  node.getQualifiedName();  [CE]  incompatible  types  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  node  =  node.getQualifiedName();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	node  =  node.getQualifiedName();	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getQualifiedName());    n    =    node.getQualifiedName();    	non-compiled	[CE]  incompatible  types	304	None	replace
1709	[BUG]  [BUGGY]  Node  cannot  be  refined.   "  +  node.getQualifiedName());  n  =  node.getQualifiedName();  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Node  cannot  be  refined.   "  +  node.getQualifiedName());  n  =  node.getQualifiedName();  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  cannot  be  refined.   "  +  node.getQualifiedName());  n  =  node.getQualifiedName();	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.getQualifiedName());    n    =    node.getQualifiedName();    	non-compiled	[CE]  	304	None	replace
1710	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  scope,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  scope,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  qualifiedName,  scope,  resultEqualsValue);	  NodeTraversal.traverse(compiler,    node,    qualifiedName,    type,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	144	None	replace
1711	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  type,  resultEqualsValue,  scope);  [CE]  cannot  find  symbol  compiler  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  type,  resultEqualsValue,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  qualifiedName,  type,  resultEqualsValue,  scope);	  NodeTraversal.traverse(compiler,    node,    qualifiedName,    type,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	144	None	replace
1712	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  qualifiedName);  [CE]  cannot  find  symbol  compiler  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  qualifiedName);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  qualifiedName);	  NodeTraversal.traverse(compiler,    node,    qualifiedName,    type,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	144	None	replace
1713	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  resultEqualsValue,  scope);  [CE]  cannot  find  symbol  compiler  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  resultEqualsValue,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  qualifiedName,  resultEqualsValue,  scope);	  NodeTraversal.traverse(compiler,    node,    qualifiedName,    type,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	144	None	replace
1714	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(type  ==  null);  Preconditions.checkState(type  ==  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	Preconditions.checkState(type    ==    null);    Preconditions.checkState(type  ==  null);	  	compilable	  [FE]  IllegalStateException  	267	1	add
1715	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  null);  Preconditions.checkState(type  ==  null);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(type  ==  null);  Preconditions.checkState(type  ==  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(type    ==    null);    Preconditions.checkState(type  ==  null);	  	compilable	  [FE]  IllegalStateException  	267	1	add
1716	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(type  ==  null);  Preconditions.checkState(type!=  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	Preconditions.checkState(type    ==    null);    Preconditions.checkState(type!=  null);	  	compilable	  [FE]  IllegalStateException  	267	1	add
1717	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  null);  Preconditions.checkState(type!=  null);  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(type  ==  null);  Preconditions.checkState(type!=  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(type    ==    null);    Preconditions.checkState(type!=  null);	  	compilable	  [FE]  IllegalStateException  	267	1	add
1718	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  null);  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  Preconditions.checkState(type  ==  null);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]        IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(type  ==  null);  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  Preconditions.checkState(type  ==  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(type    ==    null);    Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  Preconditions.checkState(type  ==  null);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	267	None	add
1719	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  null);  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  Preconditions.checkState(type!=  null);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]          IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(type  ==  null);  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  Preconditions.checkState(type!=  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(type    ==    null);    Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  Preconditions.checkState(type!=  null);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	267	None	add
1720	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  null);  NodeTraversal.traverse(compiler,  node,  type,  resultEqualsValue);  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [CE]  cannot  find  symbol  compiler  [FE]            IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(type  ==  null);  NodeTraversal.traverse(compiler,  node,  type,  resultEqualsValue);  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(type    ==    null);    NodeTraversal.traverse(compiler,  node,  type,  resultEqualsValue);  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);	  	non-compiled	[CE]  cannot  find  symbol  compiler	267	None	add
1721	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  null);  NodeTraversal.traverse(compiler,  node,  type,  resultEqualsValue);  Preconditions.checkState(type  ==  null);  [CE]  cannot  find  symbol  compiler  [FE]              IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(type  ==  null);  NodeTraversal.traverse(compiler,  node,  type,  resultEqualsValue);  Preconditions.checkState(type  ==  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(type    ==    null);    NodeTraversal.traverse(compiler,  node,  type,  resultEqualsValue);  Preconditions.checkState(type  ==  null);	  	non-compiled	[CE]  cannot  find  symbol  compiler	267	None	add
1722	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  null);  NodeTraversal.traverse(compiler,  node,  type,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(type  ==  null);  NodeTraversal.traverse(compiler,  node,  type,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(type    ==    null);    NodeTraversal.traverse(compiler,  node,  type,  resultEqualsValue);	  	non-compiled	[CE]  cannot  find  symbol  compiler	267	None	add
1723	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  null);  Node  node  =  scope.getFirstChild();  Preconditions.checkState(type  ==  null);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                  IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(type  ==  null);  Node  node  =  scope.getFirstChild();  Preconditions.checkState(type  ==  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(type    ==    null);    Node  node  =  scope.getFirstChild();  Preconditions.checkState(type  ==  null);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	267	None	add
1724	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  null);  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  preconditions.checkState(type  ==  null);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                    IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(type  ==  null);  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  preconditions.checkState(type  ==  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(type    ==    null);    Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  preconditions.checkState(type  ==  null);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	267	None	add
1725	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  null);  NodeTraversal.traverse(compiler,  node,  type,  resultEqualsValue);  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  null);  [CE]  cannot  find  symbol  compiler  [FE]                      IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(type  ==  null);  NodeTraversal.traverse(compiler,  node,  type,  resultEqualsValue);  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(type    ==    null);    NodeTraversal.traverse(compiler,  node,  type,  resultEqualsValue);  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  null);	  	non-compiled	[CE]  cannot  find  symbol  compiler	267	None	add
1726	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  null?  getNativeType(UNKNOWN_TYPE):  type);  [CE]  no  suitable  method  found  for  checkArgument(JSType)  [FE]              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(type  ==  null?  getNativeType(UNKNOWN_TYPE):  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkArgument(type  ==  null?  getNativeType(UNKNOWN_TYPE):  type);	          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type    ==    null?    getNativeType(UNKNOWN_TYPE):    type);    	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(JSType)	27	None	replace
1727	[BUG]  [BUGGY]  Preconditions.checkNotNull(qualifiedName);  Preconditions.checkArgument(type  ==  null?  getNativeType(UNKNOWN_TYPE):  type);  [CE]  no  suitable  method  found  for  checkArgument(JSType)  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkNotNull(qualifiedName);  Preconditions.checkArgument(type  ==  null?  getNativeType(UNKNOWN_TYPE):  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkNotNull(qualifiedName);  Preconditions.checkArgument(type  ==  null?  getNativeType(UNKNOWN_TYPE):  type);	          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type    ==    null?    getNativeType(UNKNOWN_TYPE):    type);    	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(JSType)	27	None	replace
1728	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null?  getNativeType(UNKNOWN_TYPE):  type);  [CE]  no  suitable  method  found  for  checkState(JSType)  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(type!=  null?  getNativeType(UNKNOWN_TYPE):  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(type!=  null?  getNativeType(UNKNOWN_TYPE):  type);	          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type    ==    null?    getNativeType(UNKNOWN_TYPE):    type);    	non-compiled	[CE]  no  suitable  method  found  for  checkState(JSType)	27	None	replace
1729	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  null?  getNativeType(UNKNOWN_TYPE):  type);  [CE]  no  suitable  method  found  for  checkState(JSType)  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(type  ==  null?  getNativeType(UNKNOWN_TYPE):  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(type  ==  null?  getNativeType(UNKNOWN_TYPE):  type);	          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type    ==    null?    getNativeType(UNKNOWN_TYPE):    type);    	non-compiled	[CE]  no  suitable  method  found  for  checkState(JSType)	27	None	replace
1730	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  null?  getNativeType(UNKNOWN_TYPE):  type,  resultEqualsValue);  [CE]  cannot  find  symbol  resultEqualsValue  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkArgument(type  ==  null?  getNativeType(UNKNOWN_TYPE):  type,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkArgument(type  ==  null?  getNativeType(UNKNOWN_TYPE):  type,  resultEqualsValue);	          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type    ==    null?    getNativeType(UNKNOWN_TYPE):    type);    	non-compiled	[CE]  cannot  find  symbol  resultEqualsValue	27	None	replace
1731	[BUG]  [BUGGY]  Preconditions.checkNotNull(type);  Preconditions.checkArgument(type  ==  null?  getNativeType(UNKNOWN_TYPE):  type,  scope);  [CE]  no  suitable  method  found  for  checkArgument(JSType,FlowScope)  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkNotNull(type);  Preconditions.checkArgument(type  ==  null?  getNativeType(UNKNOWN_TYPE):  type,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkNotNull(type);  Preconditions.checkArgument(type  ==  null?  getNativeType(UNKNOWN_TYPE):  type,  scope);	          Preconditions.checkNotNull(type);    Preconditions.checkArgument(type    ==    null?    getNativeType(UNKNOWN_TYPE):    type);    	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(JSType,FlowScope)	27	None	replace
1732	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined.  node: "  +  node,  type.toStringTree());  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning( "Node  cannot  be  refined.  node: "  +  node,  type.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined.  node: "  +  node,  type.toStringTree());	  DebugLog.warning(   "Node    cannot    be    refined.    node:   "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
1733	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined.  node: "  +  node,  scope.toStringTree());  [CE]  cannot  find  symbol  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning( "Node  cannot  be  refined.  node: "  +  node,  scope.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined.  node: "  +  node,  scope.toStringTree());	  DebugLog.warning(   "Node    cannot    be    refined.    node:   "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
1734	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined.  node: "  +  node.getQualifiedName());  [CE]  cannot  find  symbol  DebugLog  [FE]                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning( "Node  cannot  be  refined.  node: "  +  node.getQualifiedName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined.  node: "  +  node.getQualifiedName());	  DebugLog.warning(   "Node    cannot    be    refined.    node:   "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol  DebugLog	127	None	replace
1735	[BUG]  [BUGGY]  DebugLog.warning(scope, "Node  cannot  be  refined.  node: "  +  node.toStringTree());  [CE]  cannot  find  symbol  DebugLog  [FE]                          IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning(scope, "Node  cannot  be  refined.  node: "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning(scope, "Node  cannot  be  refined.  node: "  +  node.toStringTree());	  DebugLog.warning(   "Node    cannot    be    refined.    node:   "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol  DebugLog	127	None	replace
1736	[BUG]  [BUGGY]  DebugLog.warning(type, "Node  cannot  be  refined.  node: "  +  node.toStringTree());  [CE]  cannot  find  symbol  DebugLog  [FE]                            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning(type, "Node  cannot  be  refined.  node: "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning(type, "Node  cannot  be  refined.  node: "  +  node.toStringTree());	  DebugLog.warning(   "Node    cannot    be    refined.    node:   "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol  DebugLog	127	None	replace
1737	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined.  node: "  +  node.getLocalName());  [CE]  cannot  find  symbol  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  DebugLog.warning( "Node  cannot  be  refined.  node: "  +  node.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined.  node: "  +  node.getLocalName());	  DebugLog.warning(   "Node    cannot    be    refined.    node:   "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
1738	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  qualifier,  origType,  type);  break;  [CE]  cannot  find  symbol  qualifier  [FE]                              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferQualifiedSlot(node,  qualifier,  origType,  type);  break;  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  qualifier,  origType,  type);  break;	  scope.inferQualifiedSlot(node,    name,    origType,    type);    break;    	non-compiled	[CE]  cannot  find  symbol  qualifier	216	None	replace
1739	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.toStringTree());  [CE]  not  a  statement  [FE]            IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.toStringTree());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.toStringTree());    Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n       "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	159	None	replace
1740	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  can  be  refined. "  +  node.toStringTree());  [CE]  not  a  statement  [FE]              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  can  be  refined. "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  can  be  refined. "  +  node.toStringTree());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.toStringTree());    Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n       "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	159	None	replace
1741	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  NON-NLS-1 "  +  node.toStringTree());  [CE]  not  a  statement  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  NON-NLS-1 "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  NON-NLS-1 "  +  node.toStringTree());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.toStringTree());    Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n       "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	159	None	replace
1742	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined ",  node.toStringTree());  [CE]  not  a  statement  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined ",  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined ",  node.toStringTree());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.toStringTree());    Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n       "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	159	None	replace
1743	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined: "  +  node.toStringTree());  [CE]  not  a  statement  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined: "  +  node.toStringTree());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined: "  +  node.toStringTree());	  throw    new    IllegalArgumentException(       "Node    cannot    be    refined.    n       "    +    node.toStringTree());    Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n       "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	159	None	replace
1744	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLocalName(),  type);  [CE]  not  a  statement  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLocalName(),  type);  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLocalName(),  type);	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.       "    +    node.getLocalName());    	non-compiled	[CE]  not  a  statement	139	None	replace
1745	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  scope,  this);  [CE]  cannot  find  symbol  compiler  [FE]              IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  scope,  this);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  scope,  this);	  NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE),    this,    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	352	None	replace
1746	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  this,  type,  scope);  [CE]  cannot  find  symbol  compiler  [FE]                IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  this,  type,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  this,  type,  scope);	  NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE),    this,    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	352	None	replace
1747	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(NODE_TYPE),  this,  type);  [CE]  cannot  find  symbol  compiler  [FE]                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(NODE_TYPE),  this,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(NODE_TYPE),  this,  type);	  NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE),    this,    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	352	None	replace
1748	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  getNativeType(UNKNOWN_TYPE),  this,  type);  [CE]  cannot  find  symbol  compiler  [FE]                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  getNativeType(UNKNOWN_TYPE),  this,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope,  getNativeType(UNKNOWN_TYPE),  this,  type);	  NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE),    this,    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	352	None	replace
1749	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  origType,  type);  [CE]  cannot  find  symbol  compiler  [FE]                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  origType,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  origType,  type);	  NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE),    this,    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	352	None	replace
1750	[BUG]  [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  typeRegistry,  resultEqualsValue);  [CE]  cannot  find  symbol  resultEqualsValue  [FE]                                  IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  typeRegistry,  resultEqualsValue);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(node,  qualifiedName,  origType,  typeRegistry,  resultEqualsValue);	  scope.inferSlot(node,    qualifiedName,    origType,    typeRegistry);    	non-compiled	[CE]  cannot  find  symbol  resultEqualsValue	364	None	replace
1751	[BUG]  [BUGGY]  scope.inferSlot(node,  name,  origType,  typeRegistry);  [CE]  cannot  find  symbol  name  [FE]                                    IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferSlot(node,  name,  origType,  typeRegistry);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(node,  name,  origType,  typeRegistry);	  scope.inferSlot(node,    qualifiedName,    origType,    typeRegistry);    	non-compiled	[CE]  cannot  find  symbol  name	364	None	replace
1752	[BUG]  [BUGGY]  scope.inferSlot(ode,  qualifiedName,  origType,  typeRegistry);  [CE]  cannot  find  symbol  ode  [FE]                                      IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferSlot(ode,  qualifiedName,  origType,  typeRegistry);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(ode,  qualifiedName,  origType,  typeRegistry);	  scope.inferSlot(node,    qualifiedName,    origType,    typeRegistry);    	non-compiled	[CE]  cannot  find  symbol  ode	364	None	replace
1753	[BUG]  [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  typeRegistry));  [CE]  ';'  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  typeRegistry));  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(node,  qualifiedName,  origType,  typeRegistry));	  scope.inferSlot(node,    qualifiedName,    origType,    typeRegistry);    	non-compiled	[CE]  ';'  expected	364	None	replace
1754	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME,  scope);	  Preconditions.checkState(node.getType()    ==    Token.NAME);    	compilable	  [FE]  IllegalStateException  	482	1	replace
1755	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  scope);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  scope);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME,  scope);	  Preconditions.checkState(node.getType()    ==    Token.NAME);    	compilable	  [FE]  IllegalStateException  	482	1	replace
1756	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME,  type);	  Preconditions.checkState(node.getType()    ==    Token.NAME);    	compilable	  [FE]  IllegalStateException  	482	1	replace
1757	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  type);  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME,  type);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME,  type);	  Preconditions.checkState(node.getType()    ==    Token.NAME);    	compilable	  [FE]  IllegalStateException  	482	1	replace
1758	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]          IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.NAME);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(scope.getType()  ==  Token.NAME);	  Preconditions.checkState(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	482	None	replace
1759	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.FUNCTION);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(node.getType()    ==    Token.NAME);    	compilable	  [FE]  IllegalStateException  	482	1	replace
1760	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.FUNCTION);  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.FUNCTION);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(node.getType()    ==    Token.NAME);    	compilable	  [FE]  IllegalStateException  	482	1	replace
1761	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);	  Preconditions.checkState(node.getType()    ==    Token.NAME);    	compilable	  [FE]  IllegalStateException  	482	1	replace
1762	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP);	  Preconditions.checkState(node.getType()    ==    Token.NAME);    	compilable	  [FE]  IllegalStateException  	482	1	replace
1763	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(node.getType()    ==    Token.NAME);    	compilable	  [FE]  IllegalStateException  	482	1	replace
1764	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.EXPR_RESULT);  [FE]  IllegalStateException  [FE]                IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(node.getType()    ==    Token.NAME);    	compilable	  [FE]  IllegalStateException  	482	1	replace
1765	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.isFunctionDeclaration(node));  [CE]  cannot  find  symbol  NodeUtil  [FE]                  IllegalStateException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.isFunctionDeclaration(node));  [BUGGY]      throw  new  IllegalArgumentException(     "Node  cannot  be  refined.  \n     "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME  &&  NodeUtil.isFunctionDeclaration(node));	  Preconditions.checkState(node.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  NodeUtil	482	None	replace
1766	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  has  been  refined. "  +  node.getLocalName());  [CE]  cannot  find  symbol  [FE]    UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  has  been  refined. "  +  node.getLocalName());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  has  been  refined. "  +  node.getLocalName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    has    been    refined.   "    +    node.getString());    	non-compiled	[CE]  cannot  find  symbol	460	None	replace
1767	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  has  been  refined. "  +  node.getString());  [CE]  <identifier>  expected  [FE]      UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  has  been  refined. "  +  node.getString());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  has  been  refined. "  +  node.getString());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    has    been    refined.   "    +    node.getString());    	non-compiled	[CE]  <identifier>  expected	460	None	replace
1768	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  has  been  refined. "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  has  been  refined. "  +  node.getLineno());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    has    been    refined.   "    +    node.getString());    	compilable	  [FE]  IllegalArgumentException  	460	1	replace
1769	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  has  been  refined. "  +  node.getLineno());  [FE]  IllegalArgumentException  [FE]        UnsupportedOperationException    [CONTEXT]      Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:      [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  has  been  refined. "  +  node.getLineno());  [BUGGY]      node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  has  been  refined. "  +  node.getLineno());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    Node    has    been    refined.   "    +    node.getString());    	compilable	  [FE]  IllegalArgumentException  	460	1	replace
