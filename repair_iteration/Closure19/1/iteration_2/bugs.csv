bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree());  }	  if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    }    	compilable	  [FE]  IllegalArgumentException  	16	1	replace
2	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree());  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree());  }	  if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    }    	compilable	  [FE]  IllegalArgumentException  	16	1	replace
3	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.toStringTree());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.toStringTree());  }	  if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    }    	compilable	  [FE]  IllegalArgumentException  	16	1	replace
4	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.toStringTree());  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.toStringTree());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.toStringTree());  }	  if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    }    	compilable	  [FE]  IllegalArgumentException  	16	1	replace
5	[BUG]  [BUGGY]  Node  cannot  be  refined.  n   "  +  node.toStringTree());  [CE]  [FE]          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Node  cannot  be  refined.  n   "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  cannot  be  refined.  n   "  +  node.toStringTree());	  if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    }    	non-compiled	[CE]  	16	None	replace
6	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  can  be  refined. "  +  node.toStringTree());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  can  be  refined. "  +  node.toStringTree());  }	  if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    }    	compilable	  [FE]  IllegalArgumentException  	16	1	replace
7	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  can  be  refined. "  +  node.toStringTree());  }  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  can  be  refined. "  +  node.toStringTree());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  can  be  refined. "  +  node.toStringTree());  }	  if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    }    	compilable	  [FE]  IllegalArgumentException  	16	1	replace
8	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.toStringTree());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.toStringTree());  }	  if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    }    	compilable	  [FE]  IllegalArgumentException  	16	1	replace
9	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.toStringTree());  }  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.toStringTree());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.toStringTree());  }	  if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    }    	compilable	  [FE]  IllegalArgumentException  	16	1	replace
10	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());  Node  cannot  be  refined.   "  +  node.toStringTree());  [CE]  [FE]    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());  Node  cannot  be  refined.   "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.   "    +    node.toStringTree());    Node  cannot  be  refined.   "  +  node.toStringTree());	  	non-compiled	[CE]  	13	None	add
11	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.   "    +    node.toStringTree());    IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());	  	non-compiled	[CE]  cannot  find  symbol	13	None	add
12	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());  Throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());  [CE]  not  a  statement  [FE]        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());  Throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.   "    +    node.toStringTree());    Throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());	  	non-compiled	[CE]  not  a  statement	13	None	add
13	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());  [CE]  unreachable  statement  [FE]          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.   "    +    node.toStringTree());    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());	  	non-compiled	[CE]  unreachable  statement	13	None	add
14	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());  JSType  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());  JSType  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.   "    +    node.toStringTree());    JSType  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	13	None	add
15	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());  Node  cannot  be  refined.   "  +  node.toStringTree());  break;  [CE]  [FE]              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());  Node  cannot  be  refined.   "  +  node.toStringTree());  break;  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.   "    +    node.toStringTree());    Node  cannot  be  refined.   "  +  node.toStringTree());  break;	  	non-compiled	[CE]  	13	None	add
16	[BUG]  [BUGGY]  Node  node  =  scope.getLastChild();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Node  node  =  scope.getLastChild();  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getLastChild();	      Node    node    =    scope.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	36	None	replace
17	[BUG]  [BUGGY]  Node  node  =  scope.getNext();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Node  node  =  scope.getNext();  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getNext();	      Node    node    =    scope.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	36	None	replace
18	[BUG]  [BUGGY]  Node  node  =  type.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                  IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Node  node  =  type.getFirstChild();  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  type.getFirstChild();	      Node    node    =    scope.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	36	None	replace
19	[BUG]  [BUGGY]  Node  node  =  this.scope.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Node  node  =  this.scope.getFirstChild();  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  this.scope.getFirstChild();	      Node    node    =    scope.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	36	None	replace
20	[BUG]  [BUGGY]  Node  node  =  scope.getParent();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Node  node  =  scope.getParent();  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getParent();	      Node    node    =    scope.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	36	None	replace
21	[BUG]  [BUGGY]  Node  node  =  scope.getFirstChild(),  type);  [CE]  ';'  expected  [FE]                        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Node  node  =  scope.getFirstChild(),  type);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getFirstChild(),  type);	      Node    node    =    scope.getFirstChild();    	non-compiled	[CE]  ';'  expected	36	None	replace
22	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]      Preconditions.checkNotNull(type);  Preconditions.checkNotNull(type);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	        Preconditions.checkNotNull(type);    Preconditions.checkNotNull(type);	  	compilable	  [FE]  IllegalArgumentException  	27	1	add
23	[BUG]  [BUGGY]      Preconditions.checkNotNull(type);  Preconditions.checkNotNull(type);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]      Preconditions.checkNotNull(type);  Preconditions.checkNotNull(type);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	        Preconditions.checkNotNull(type);    Preconditions.checkNotNull(type);	  	compilable	  [FE]  IllegalArgumentException  	27	1	add
24	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]      Preconditions.checkNotNull(type);  Preconditions.checkState(type!=  null);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	        Preconditions.checkNotNull(type);    Preconditions.checkState(type!=  null);	  	compilable	  [FE]  IllegalArgumentException  	27	1	add
25	[BUG]  [BUGGY]      Preconditions.checkNotNull(type);  Preconditions.checkState(type!=  null);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]      Preconditions.checkNotNull(type);  Preconditions.checkState(type!=  null);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	        Preconditions.checkNotNull(type);    Preconditions.checkState(type!=  null);	  	compilable	  [FE]  IllegalArgumentException  	27	1	add
26	[BUG]  [BUGGY]      Preconditions.checkNotNull(type);  Preconditions.checkArgument(type!=  null?  getNativeType(UNKNOWN_TYPE):  type);  [CE]  no  suitable  method  found  for  checkArgument(JSType)  [FE]        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]      Preconditions.checkNotNull(type);  Preconditions.checkArgument(type!=  null?  getNativeType(UNKNOWN_TYPE):  type);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	        Preconditions.checkNotNull(type);    Preconditions.checkArgument(type!=  null?  getNativeType(UNKNOWN_TYPE):  type);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(JSType)	27	None	add
27	[BUG]  [BUGGY]      Preconditions.checkNotNull(type);  Preconditions.checkArgument(type  ==  null?  getNativeType(UNKNOWN_TYPE):  type);  [CE]  no  suitable  method  found  for  checkArgument(JSType)  [FE]          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]      Preconditions.checkNotNull(type);  Preconditions.checkArgument(type  ==  null?  getNativeType(UNKNOWN_TYPE):  type);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	        Preconditions.checkNotNull(type);    Preconditions.checkArgument(type  ==  null?  getNativeType(UNKNOWN_TYPE):  type);	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(JSType)	27	None	add
28	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]      Preconditions.checkNotNull(type);  Preconditions.checkState(type  ==  null);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	        Preconditions.checkNotNull(type);    Preconditions.checkState(type  ==  null);	  	compilable	  [FE]  IllegalStateException  	27	1	add
29	[BUG]  [BUGGY]      Preconditions.checkNotNull(type);  Preconditions.checkState(type  ==  null);  [FE]  IllegalStateException  [FE]            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]      Preconditions.checkNotNull(type);  Preconditions.checkState(type  ==  null);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	        Preconditions.checkNotNull(type);    Preconditions.checkState(type  ==  null);	  	compilable	  [FE]  IllegalStateException  	27	1	add
30	[BUG]  [BUGGY]      Preconditions.checkNotNull(type);  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]      Preconditions.checkNotNull(type);  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	        Preconditions.checkNotNull(type);    Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	27	None	add
31	[BUG]  [BUGGY]      Preconditions.checkNotNull(type);  NodeTraversal.traverse(compiler,  node,  type);  [CE]  cannot  find  symbol  compiler  [FE]                IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]      Preconditions.checkNotNull(type);  NodeTraversal.traverse(compiler,  node,  type);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	        Preconditions.checkNotNull(type);    NodeTraversal.traverse(compiler,  node,  type);	  	non-compiled	[CE]  cannot  find  symbol  compiler	27	None	add
32	[BUG]  [BUGGY]      Preconditions.checkNotNull(type);  Preconditions.checkArgument(type!=  null? "Node  cannot  be  refined.  n "  +  node.toStringTree());  [CE]  :  expected  [FE]                  IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]      Preconditions.checkNotNull(type);  Preconditions.checkArgument(type!=  null? "Node  cannot  be  refined.  n "  +  node.toStringTree());  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	        Preconditions.checkNotNull(type);    Preconditions.checkArgument(type!=  null? "Node  cannot  be  refined.  n "  +  node.toStringTree());	  	non-compiled	[CE]  :  expected	27	None	add
33	[BUG]  [BUGGY]      Preconditions.checkNotNull(type);  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  Preconditions.checkNotNull(type);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]      Preconditions.checkNotNull(type);  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  Preconditions.checkNotNull(type);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	        Preconditions.checkNotNull(type);    Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  Preconditions.checkNotNull(type);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	27	None	add
34	[BUG]  [BUGGY]      Preconditions.checkNotNull(type);  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  Preconditions.checkNotNull(node);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]      Preconditions.checkNotNull(type);  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  Preconditions.checkNotNull(node);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	        Preconditions.checkNotNull(type);    Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  Preconditions.checkNotNull(node);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	27	None	add
35	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  type.toStringTree());  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  type.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  type.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    type.toStringTree());    	non-compiled	[CE]  <identifier>  expected	37	None	replace
36	[BUG]  [BUGGY]  Throwable  node  =  type.toStringTree();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Throwable  node  =  type.toStringTree();  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  type.toStringTree();	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    type.toStringTree());    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	37	None	replace
37	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  type.toStringTree());  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  type.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  type.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    type.toStringTree());    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
38	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  type.toStringTree());  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  type.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  type.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    type.toStringTree());    	non-compiled	[CE]  <identifier>  expected	37	None	replace
39	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getString());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getString());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getString());    	compilable	  [FE]  UnsupportedOperationException  	40	1	replace
40	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getString());  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getString());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getString());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getString());    	compilable	  [FE]  UnsupportedOperationException  	40	1	replace
41	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getString());  [CE]  <identifier>  expected  [FE]        UnsupportedOperationException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getString());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getString());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getString());    	non-compiled	[CE]  <identifier>  expected	40	None	replace
42	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getString());  }  else  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }  [CE]  variable  qualifiedName  might  not  have  been  initialized  [FE]          UnsupportedOperationException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  if(node.getType()  ==  Token.NAME)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getString());  }  else  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(node.getType()  ==  Token.NAME)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getString());  }  else  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getString());    	non-compiled	[CE]  variable  qualifiedName  might  not  have  been  initialized	40	None	replace
43	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]            UnsupportedOperationException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getString());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getString());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getString());    	compilable	  [FE]  UnsupportedOperationException  	40	1	replace
44	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getString());  [FE]  UnsupportedOperationException  [FE]            UnsupportedOperationException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getString());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getString());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getString());    	compilable	  [FE]  UnsupportedOperationException  	40	1	replace
45	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getString());  }  else  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType);  }  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]              UnsupportedOperationException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  if(node.getType()  ==  Token.NAME)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getString());  }  else  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType);  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(node.getType()  ==  Token.NAME)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getString());  }  else  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType);  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getString());    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	40	None	replace
46	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  [CE]  <identifier>  expected  [FE]      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  <identifier>  expected	12	None	replace
47	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  }  else  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }  [CE]  variable  qualifiedName  might  not  have  been  initialized  [FE]        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  if(node.getType()  ==  Token.NAME)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  }  else  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(node.getType()  ==  Token.NAME)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  }  else  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  variable  qualifiedName  might  not  have  been  initialized	12	None	replace
48	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getQualifiedName());  Node  cannot  be  refined.  n   "  +  node.getQualifiedName());  [CE]  [FE]    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getQualifiedName());  Node  cannot  be  refined.  n   "  +  node.getQualifiedName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getQualifiedName());    Node  cannot  be  refined.  n   "  +  node.getQualifiedName());	  	non-compiled	[CE]  	20	None	add
49	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getQualifiedName());  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getQualifiedName());  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getQualifiedName());  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getQualifiedName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getQualifiedName());    IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getQualifiedName());	  	non-compiled	[CE]  cannot  find  symbol	20	None	add
50	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getQualifiedName());  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.getQualifiedName());  [CE]  not  a  statement  [FE]        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getQualifiedName());  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.getQualifiedName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getQualifiedName());    Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.getQualifiedName());	  	non-compiled	[CE]  not  a  statement	20	None	add
51	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getQualifiedName());  JSType  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getQualifiedName());  JSType  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getQualifiedName());    JSType  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	20	None	add
52	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getQualifiedName());  JSType  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getQualifiedName());  JSType  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getQualifiedName());    JSType  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	20	None	add
53	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getQualifiedName());  Node  cannot  be  refined.  n   "  +  node.getQualifiedName());  break;  [CE]  [FE]              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getQualifiedName());  Node  cannot  be  refined.  n   "  +  node.getQualifiedName());  break;  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getQualifiedName());    Node  cannot  be  refined.  n   "  +  node.getQualifiedName());  break;	  	non-compiled	[CE]  	20	None	add
54	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getString());  Node  cannot  be  refined.  n   "  +  node.getString());  [CE]  [FE]    UnsupportedOperationException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getString());  Node  cannot  be  refined.  n   "  +  node.getString());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getString());    Node  cannot  be  refined.  n   "  +  node.getString());	  	non-compiled	[CE]  	39	None	add
55	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getString());  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.getString());  [CE]  cannot  find  symbol  [FE]      UnsupportedOperationException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getString());  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.getString());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getString());    IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.getString());	  	non-compiled	[CE]  cannot  find  symbol	39	None	add
56	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getString());  JSType  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]        UnsupportedOperationException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getString());  JSType  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getString());    JSType  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	39	None	add
57	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getString());  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]          UnsupportedOperationException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getString());  Node  node  =  node.getFirstChild();  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getString());    Node  node  =  node.getFirstChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	39	None	add
58	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getString());  Node  not  defined.  n   "  +  node.getString());  [CE]  [FE]            UnsupportedOperationException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getString());  Node  not  defined.  n   "  +  node.getString());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getString());    Node  not  defined.  n   "  +  node.getString());	  	non-compiled	[CE]  	39	None	add
59	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getString());  JSType  node  =  node.getJSType();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]              UnsupportedOperationException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getString());  JSType  node  =  node.getJSType();  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getString());    JSType  node  =  node.getJSType();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	39	None	add
60	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getString());  JSType  node  =  scope.inferQualifiedSlot(node,  qualifiedName,  origType);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                UnsupportedOperationException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getString());  JSType  node  =  scope.inferQualifiedSlot(node,  qualifiedName,  origType);  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getString());    JSType  node  =  scope.inferQualifiedSlot(node,  qualifiedName,  origType);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	39	None	add
61	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getString());  Node  cannot  be  refined.  n   "  +  node.getString());  break;  [CE]  [FE]                  UnsupportedOperationException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getString());  Node  cannot  be  refined.  n   "  +  node.getString());  break;  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getString());    Node  cannot  be  refined.  n   "  +  node.getString());  break;	  	non-compiled	[CE]  	39	None	add
62	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getString());  Node  node  =  node.getJSType();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                    UnsupportedOperationException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getString());  Node  node  =  node.getJSType();  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getString());    Node  node  =  node.getJSType();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	39	None	add
63	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getString());  JSType  node  =  scope.inferQualifiedSlot(node,  qualifiedName);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                      UnsupportedOperationException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getString());  JSType  node  =  scope.inferQualifiedSlot(node,  qualifiedName);  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getString());    JSType  node  =  scope.inferQualifiedSlot(node,  qualifiedName);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	39	None	add
64	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  new  RestrictByTrueTypeOfResultVisitor());  [CE]  cannot  find  symbol  compiler  [FE]              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  new  RestrictByTrueTypeOfResultVisitor());  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  qualifiedName,  new  RestrictByTrueTypeOfResultVisitor());	      NodeTraversal.traverse(compiler,    node,    type,    new    RestrictByTrueTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	30	None	replace
65	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  type,  new  RestrictByTrueTypeOfResultVisitor());  [CE]  cannot  find  symbol  compiler  [FE]                IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  type,  new  RestrictByTrueTypeOfResultVisitor());  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  qualifiedName,  type,  new  RestrictByTrueTypeOfResultVisitor());	      NodeTraversal.traverse(compiler,    node,    type,    new    RestrictByTrueTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	30	None	replace
66	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  new  RestrictByTrueTypeOfResultVisitor());  [CE]  cannot  find  symbol  compiler  [FE]                  IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  new  RestrictByTrueTypeOfResultVisitor());  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  new  RestrictByTrueTypeOfResultVisitor());	      NodeTraversal.traverse(compiler,    node,    type,    new    RestrictByTrueTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	30	None	replace
67	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  type,  new  RestrictByTrueTypeOfResultVisitor());  [CE]  cannot  find  symbol  compiler  [FE]                    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  type,  new  RestrictByTrueTypeOfResultVisitor());  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  type,  new  RestrictByTrueTypeOfResultVisitor());	      NodeTraversal.traverse(compiler,    node,    type,    new    RestrictByTrueTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	30	None	replace
68	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  new  RestrictByTrueTypeOfResultVisitor(),  scope);  [CE]  cannot  find  symbol  compiler  [FE]                      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  new  RestrictByTrueTypeOfResultVisitor(),  scope);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  type,  new  RestrictByTrueTypeOfResultVisitor(),  scope);	      NodeTraversal.traverse(compiler,    node,    type,    new    RestrictByTrueTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	30	None	replace
69	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  new  RestrictByTrueTypeOfResultVisitor());  [CE]  cannot  find  symbol  compiler  [FE]                        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  new  RestrictByTrueTypeOfResultVisitor());  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope,  new  RestrictByTrueTypeOfResultVisitor());	      NodeTraversal.traverse(compiler,    node,    type,    new    RestrictByTrueTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	30	None	replace
70	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  new  RestrictByTrueTypeOfResultVisitor(),  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  new  RestrictByTrueTypeOfResultVisitor(),  resultEqualsValue);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  type,  new  RestrictByTrueTypeOfResultVisitor(),  resultEqualsValue);	      NodeTraversal.traverse(compiler,    node,    type,    new    RestrictByTrueTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	30	None	replace
71	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  new  RestrictByFalseTypeOfResultVisitor());  [CE]  cannot  find  symbol  compiler  [FE]                            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  new  RestrictByFalseTypeOfResultVisitor());  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  type,  new  RestrictByFalseTypeOfResultVisitor());	      NodeTraversal.traverse(compiler,    node,    type,    new    RestrictByTrueTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	30	None	replace
72	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	21	1	replace
73	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName());  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	21	1	replace
74	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName());  [CE]  <identifier>  expected  [FE]      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getQualifiedName());    	non-compiled	[CE]  <identifier>  expected	21	None	replace
75	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  qualified  name: "  +  node.getQualifiedName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  qualified  name: "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	21	1	replace
76	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  qualified  name: "  +  node.getQualifiedName());  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  qualified  name: "  +  node.getQualifiedName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  qualified  name: "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	21	1	replace
77	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getQualifiedName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	21	1	replace
78	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getQualifiedName());  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getQualifiedName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	21	1	replace
79	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name  ' "  +  node.getQualifiedName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name  ' "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	21	1	replace
80	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name  ' "  +  node.getQualifiedName());  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name  ' "  +  node.getQualifiedName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name  ' "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	21	1	replace
81	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.getQualifiedName());  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.getQualifiedName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getQualifiedName());    	non-compiled	[CE]  <identifier>  expected	21	None	replace
82	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree());  }	  if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    }    	compilable	  [FE]  IllegalArgumentException  	24	1	replace
83	[BUG]  [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree());  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree());  }	  if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    }    	compilable	  [FE]  IllegalArgumentException  	24	1	replace
84	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.toStringTree());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.toStringTree());  }	  if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    }    	compilable	  [FE]  IllegalArgumentException  	24	1	replace
85	[BUG]  [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.toStringTree());  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.toStringTree());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.toStringTree());  }	  if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    }    	compilable	  [FE]  IllegalArgumentException  	24	1	replace
86	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node.toStringTree());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node.toStringTree());  }	  if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    }    	compilable	  [FE]  IllegalArgumentException  	24	1	replace
87	[BUG]  [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node.toStringTree());  }  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node.toStringTree());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node.toStringTree());  }	  if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    }    	compilable	  [FE]  IllegalArgumentException  	24	1	replace
88	[BUG]  [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined ",  node.toStringTree());  }  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,String)  [FE]              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined ",  node.toStringTree());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined ",  node.toStringTree());  }	  if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    }    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,String)	24	None	replace
89	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    }    if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }	  	compilable	  [FE]  IllegalArgumentException  	15	1	add
90	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    }    if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }	  	compilable	  [FE]  IllegalArgumentException  	15	1	add
91	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    }    if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }	  	compilable	  [FE]  IllegalArgumentException  	15	1	add
92	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    }    if(type  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }	  	compilable	  [FE]  IllegalArgumentException  	15	1	add
93	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n ",  +  node.toStringTree());  }  [CE]  bad  operand  type  String  for  unary  operator  [FE]        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n ",  +  node.toStringTree());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    }    if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n ",  +  node.toStringTree());  }	  	non-compiled	[CE]  bad  operand  type  String  for  unary  operator  	15	None	add
94	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n'  +  node.toStringTree());  }  [CE]  unclosed  string  literal  [FE]          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n'  +  node.toStringTree());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    }    if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n'  +  node.toStringTree());  }	  	non-compiled	[CE]  unclosed  string  literal	15	None	add
95	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  scope);  [CE]  cannot  find  symbol  compiler  [FE]            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  scope);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  type,  scope);	      NodeTraversal.traverse(compiler,    node,    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	3	None	replace
96	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  type);  [CE]  cannot  find  symbol  compiler  [FE]              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  type);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  type);	      NodeTraversal.traverse(compiler,    node,    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	3	None	replace
97	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope);  [CE]  cannot  find  symbol  compiler  [FE]                IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope);	      NodeTraversal.traverse(compiler,    node,    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	3	None	replace
98	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  type);  [CE]  cannot  find  symbol  compiler  [FE]                  IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  type);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  qualifiedName,  type);	      NodeTraversal.traverse(compiler,    node,    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	3	None	replace
99	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  type);  [CE]  cannot  find  symbol  compiler  [FE]                    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  type);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  type);	      NodeTraversal.traverse(compiler,    node,    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	3	None	replace
100	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  type);  [CE]  cannot  find  symbol  compiler  [FE]                      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  type);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope,  type);	      NodeTraversal.traverse(compiler,    node,    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	3	None	replace
101	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  sourceName,  type);  [CE]  cannot  find  symbol  compiler  [FE]                        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  sourceName,  type);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  sourceName,  type);	      NodeTraversal.traverse(compiler,    node,    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	3	None	replace
102	[BUG]  [BUGGY]  Node  node  =  scope.inferQualifiedSlot(qualifiedName,  node.getFirstChild());  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Node  node  =  scope.inferQualifiedSlot(qualifiedName,  node.getFirstChild());  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.inferQualifiedSlot(qualifiedName,  node.getFirstChild());	      Node    node    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	29	None	replace
103	[BUG]  [BUGGY]  Node  node  =  this.node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Node  node  =  this.node.getFirstChild();  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  this.node.getFirstChild();	      Node    node    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	29	None	replace
104	[BUG]  [BUGGY]  Node  node  =  node.getLastChild();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Node  node  =  node.getLastChild();  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  node.getLastChild();	      Node    node    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	29	None	replace
105	[BUG]  [BUGGY]  Node  node  =  scope.inferQualifiedSlot(qualifiedName,  node.getFirstChild(),  type);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                  IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Node  node  =  scope.inferQualifiedSlot(qualifiedName,  node.getFirstChild(),  type);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.inferQualifiedSlot(qualifiedName,  node.getFirstChild(),  type);	      Node    node    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	29	None	replace
106	[BUG]  [BUGGY]  Node  node  =  n.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Node  node  =  n.getFirstChild();  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  n.getFirstChild();	      Node    node    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	29	None	replace
107	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  scope);  [CE]  cannot  find  symbol  compiler  [FE]            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  scope);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  scope);	      NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE),    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	35	None	replace
108	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  type,  scope);  [CE]  cannot  find  symbol  compiler  [FE]              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  type,  scope);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  type,  scope);	      NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE),    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	35	None	replace
109	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  resultEqualsValue,  type);  [CE]  cannot  find  symbol  compiler  [FE]                IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  resultEqualsValue,  type);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  resultEqualsValue,  type);	      NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE),    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	35	None	replace
110	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                  IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  resultEqualsValue);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  resultEqualsValue);	      NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE),    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	35	None	replace
111	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  getNativeType(UNKNOWN_TYPE));  [CE]  cannot  find  symbol  compiler  [FE]                    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  getNativeType(UNKNOWN_TYPE));  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  type,  getNativeType(UNKNOWN_TYPE));	      NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE),    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	35	None	replace
112	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  getNativeType(UNKNOWN_TYPE),  type);  [CE]  cannot  find  symbol  compiler  [FE]                      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  getNativeType(UNKNOWN_TYPE),  type);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope,  getNativeType(UNKNOWN_TYPE),  type);	      NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE),    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	35	None	replace
113	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  qualifiedName);  [CE]  cannot  find  symbol  compiler  [FE]                        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  qualifiedName);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  qualifiedName);	      NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE),    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	35	None	replace
114	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  origType);  [CE]  cannot  find  symbol  compiler  [FE]                          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  origType);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  origType);	      NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE),    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	35	None	replace
115	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  qualifiedName,  type,  origType);  [CE]  variable  qualifiedName  might  not  have  been  initialized  [FE]                          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferQualifiedSlot(node,  qualifiedName,  type,  origType);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  qualifiedName,  type,  origType);	      scope.inferQualifiedSlot(node,    qualifiedName,    origType);    	non-compiled	[CE]  variable  qualifiedName  might  not  have  been  initialized	10	None	replace
116	[BUG]  [BUGGY]  scope.inferQualifiedSlot(qualifiedName,  node,  type);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferQualifiedSlot(qualifiedName,  node,  type);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(qualifiedName,  node,  type);	      scope.inferQualifiedSlot(node,    qualifiedName,    origType);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	10	None	replace
117	[BUG]  [BUGGY]  scope.inferQualifiedSlot(type,  qualifiedName,  origType);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferQualifiedSlot(type,  qualifiedName,  origType);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(type,  qualifiedName,  origType);	      scope.inferQualifiedSlot(node,    qualifiedName,    origType);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	10	None	replace
118	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  type,  qualifiedName);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                                IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferQualifiedSlot(node,  type,  qualifiedName);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  type,  qualifiedName);	      scope.inferQualifiedSlot(node,    qualifiedName,    origType);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	10	None	replace
119	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  type,  qualifiedName,  origType);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                                  IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferQualifiedSlot(node,  type,  qualifiedName,  origType);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  type,  qualifiedName,  origType);	      scope.inferQualifiedSlot(node,    qualifiedName,    origType);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	10	None	replace
120	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  node,  qualifiedName,  origType);  [CE]  cannot  find  symbol  name  [FE]                                    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferQualifiedSlot(name,  node,  qualifiedName,  origType);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(name,  node,  qualifiedName,  origType);	      scope.inferQualifiedSlot(node,    qualifiedName,    origType);    	non-compiled	[CE]  cannot  find  symbol  name	10	None	replace
121	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  getNativeType(UNKNOWN_TYPE),  this);  [CE]  cannot  find  symbol  compiler  [FE]        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  getNativeType(UNKNOWN_TYPE),  this);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  type,  getNativeType(UNKNOWN_TYPE),  this);	      NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE),    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	33	None	replace
122	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  getNativeType(UNKNOWN_TYPE),  this);  [CE]  cannot  find  symbol  compiler  [FE]          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  getNativeType(UNKNOWN_TYPE),  this);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope,  getNativeType(UNKNOWN_TYPE),  this);	      NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE),    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	33	None	replace
123	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(NODE_TYPE),  this);  [CE]  cannot  find  symbol  compiler  [FE]            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(NODE_TYPE),  this);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(NODE_TYPE),  this);	      NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE),    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	33	None	replace
124	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  getNativeType(UNKNOWN_TYPE),  this);  [CE]  cannot  find  symbol  compiler  [FE]              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  getNativeType(UNKNOWN_TYPE),  this);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  getNativeType(UNKNOWN_TYPE),  this);	      NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE),    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	33	None	replace
125	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  this,  scope);  [CE]  cannot  find  symbol  compiler  [FE]                IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  this,  scope);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  this,  scope);	      NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE),    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	33	None	replace
126	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined. "  +  node.toStringTree());  [CE]  cannot  find  symbol  DebugLog  [FE]              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  DebugLog.warning( "Node  cannot  be  refined. "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined. "  +  node.toStringTree());	  DebugLog.warning(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol  DebugLog	25	None	replace
127	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined.  node: "  +  node.toStringTree());  [CE]  cannot  find  symbol  DebugLog  [FE]                IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  DebugLog.warning( "Node  cannot  be  refined.  node: "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined.  node: "  +  node.toStringTree());	  DebugLog.warning(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol  DebugLog	25	None	replace
128	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined:  node  ' "  +  node.toStringTree());  [CE]  cannot  find  symbol  DebugLog  [FE]                  IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  DebugLog.warning( "Node  cannot  be  refined:  node  ' "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined:  node  ' "  +  node.toStringTree());	  DebugLog.warning(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol  DebugLog	25	None	replace
129	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined,  node: "  +  node.toStringTree());  [CE]  cannot  find  symbol  DebugLog  [FE]                    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  DebugLog.warning( "Node  cannot  be  refined,  node: "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined,  node: "  +  node.toStringTree());	  DebugLog.warning(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol  DebugLog	25	None	replace
130	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined. "  +  node,  qualifiedName.toStringTree());  [CE]  cannot  find  symbol  [FE]                      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  DebugLog.warning( "Node  cannot  be  refined. "  +  node,  qualifiedName.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined. "  +  node,  qualifiedName.toStringTree());	  DebugLog.warning(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
131	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined. "  +  node.getQualifiedName());  [CE]  cannot  find  symbol  DebugLog  [FE]                        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  DebugLog.warning( "Node  cannot  be  refined. "  +  node.getQualifiedName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined. "  +  node.getQualifiedName());	  DebugLog.warning(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol  DebugLog	25	None	replace
132	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined. "  +  node.getLocalName());  [CE]  cannot  find  symbol  [FE]                          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  DebugLog.warning( "Node  cannot  be  refined. "  +  node.getLocalName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined. "  +  node.getLocalName());	  DebugLog.warning(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
133	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  scope);  [CE]  cannot  find  symbol  compiler  [FE]        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  scope);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  scope);	      NodeTraversal.traverse(compiler,    node,    new    RestrictByTrueTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	26	None	replace
134	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  type);  [CE]  cannot  find  symbol  compiler  [FE]          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  type);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  type);	      NodeTraversal.traverse(compiler,    node,    new    RestrictByTrueTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	26	None	replace
135	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByFalseTypeOfResultVisitor());  [CE]  cannot  find  symbol  compiler  [FE]            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByFalseTypeOfResultVisitor());  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  new  RestrictByFalseTypeOfResultVisitor());	      NodeTraversal.traverse(compiler,    node,    new    RestrictByTrueTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	26	None	replace
136	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  new  RestrictByTrueTypeOfResultVisitor());  [CE]  cannot  find  symbol  compiler  [FE]              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  new  RestrictByTrueTypeOfResultVisitor());  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  new  RestrictByTrueTypeOfResultVisitor());	      NodeTraversal.traverse(compiler,    node,    new    RestrictByTrueTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	26	None	replace
137	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  resultEqualsValue);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  resultEqualsValue);	      NodeTraversal.traverse(compiler,    node,    new    RestrictByTrueTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	26	None	replace
138	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree());  [CE]  not  a  statement  [FE]              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	41	None	replace
139	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLocalName());  [CE]  not  a  statement  [FE]                IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLocalName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLocalName());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	41	None	replace
140	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  [CE]  not  a  statement  [FE]                  IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	41	None	replace
141	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException(node.toStringTree());  [CE]  not  a  statement  [FE]                    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Throw  new  IllegalArgumentException(node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException(node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	41	None	replace
142	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getClass());  [CE]  not  a  statement  [FE]                      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getClass());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getClass());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	41	None	replace
143	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getMessage());  [CE]  not  a  statement  [FE]                        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getMessage());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getMessage());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	41	None	replace
144	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  type,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  type,  resultEqualsValue);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  qualifiedName,  type,  resultEqualsValue);	      NodeTraversal.traverse(compiler,    node,    type,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	4	None	replace
145	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  resultEqualsValue,  scope);  [CE]  cannot  find  symbol  compiler  [FE]                IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  resultEqualsValue,  scope);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  type,  resultEqualsValue,  scope);	      NodeTraversal.traverse(compiler,    node,    type,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	4	None	replace
146	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                  IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  resultEqualsValue);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  qualifiedName,  resultEqualsValue);	      NodeTraversal.traverse(compiler,    node,    type,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	4	None	replace
147	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  resultEqualsValue);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope,  resultEqualsValue);	      NodeTraversal.traverse(compiler,    node,    type,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	4	None	replace
148	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  scope);  [CE]  cannot  find  symbol  compiler  [FE]                      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  scope);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  scope);	      NodeTraversal.traverse(compiler,    node,    type,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	4	None	replace
149	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  sourceName,  type,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  sourceName,  type,  resultEqualsValue);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  sourceName,  type,  resultEqualsValue);	      NodeTraversal.traverse(compiler,    node,    type,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	4	None	replace
150	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  type,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  type,  resultEqualsValue);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  type,  resultEqualsValue);	      NodeTraversal.traverse(compiler,    node,    type,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	4	None	replace
151	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  type,  this);  [CE]  cannot  find  symbol  compiler  [FE]                  IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  type,  this);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  qualifiedName,  type,  this);	      NodeTraversal.traverse(compiler,    node,    type,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	6	None	replace
152	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  this);  [CE]  cannot  find  symbol  compiler  [FE]                    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  this);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  qualifiedName,  this);	      NodeTraversal.traverse(compiler,    node,    type,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	6	None	replace
153	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  this,  scope);  [CE]  cannot  find  symbol  compiler  [FE]                      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  this,  scope);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  type,  this,  scope);	      NodeTraversal.traverse(compiler,    node,    type,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	6	None	replace
154	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  this,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  this,  resultEqualsValue);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  type,  this,  resultEqualsValue);	      NodeTraversal.traverse(compiler,    node,    type,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	6	None	replace
155	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  null);  [CE]  cannot  find  symbol  compiler  [FE]                          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  null);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  type,  null);	      NodeTraversal.traverse(compiler,    node,    type,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	6	None	replace
156	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  this);  [CE]  cannot  find  symbol  compiler  [FE]                            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  this);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope,  this);	      NodeTraversal.traverse(compiler,    node,    type,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	6	None	replace
157	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  Node  cannot  be  refined.  n   "  +  node.toStringTree());  [CE]  [FE]    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  Node  cannot  be  refined.  n   "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    Node  cannot  be  refined.  n   "  +  node.toStringTree());	  	non-compiled	[CE]  	11	None	add
158	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
159	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree());  [CE]  not  a  statement  [FE]        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree());	  	non-compiled	[CE]  not  a  statement	11	None	add
160	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  JSType  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  JSType  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    JSType  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	11	None	add
161	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  Node  cannot  be  refined.  n   "  +  node.toStringTree());  break;  [CE]  [FE]            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  Node  cannot  be  refined.  n   "  +  node.toStringTree());  break;  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    Node  cannot  be  refined.  n   "  +  node.toStringTree());  break;	  	non-compiled	[CE]  	11	None	add
162	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  n   "  +  node.toStringTree());  [CE]  unclosed  string  literal  [FE]              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  n   "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    n   "  +  node.toStringTree());	  	non-compiled	[CE]  unclosed  string  literal	11	None	add
163	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getLineno());  Node  cannot  be  refined.  n   "  +  node.getLineno());  [CE]  [FE]    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getLineno());  Node  cannot  be  refined.  n   "  +  node.getLineno());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLineno());    Node  cannot  be  refined.  n   "  +  node.getLineno());	  	non-compiled	[CE]  	17	None	add
164	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getLineno());  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getLineno());  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getLineno());  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getLineno());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLineno());    IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getLineno());	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
165	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getLineno());  Node  cannot  be  refined.  n   "  +  node.getLineno());  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [CE]  [FE]        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getLineno());  Node  cannot  be  refined.  n   "  +  node.getLineno());  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLineno());    Node  cannot  be  refined.  n   "  +  node.getLineno());  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);	  	non-compiled	[CE]  	17	None	add
166	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getLineno());  Node  node  =  node.getLineno();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getLineno());  Node  node  =  node.getLineno();  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLineno());    Node  node  =  node.getLineno();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	17	None	add
167	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getLineno());  Node  cannot  be  refined.  n   "  +  node.getLineno());  }  else  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [CE]  [FE]            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getLineno());  Node  cannot  be  refined.  n   "  +  node.getLineno());  }  else  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLineno());    Node  cannot  be  refined.  n   "  +  node.getLineno());  }  else  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);	  	non-compiled	[CE]  	17	None	add
168	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getLineno());  Node  not  defined.  n   "  +  node.getLineno());  [CE]  [FE]              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getLineno());  Node  not  defined.  n   "  +  node.getLineno());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLineno());    Node  not  defined.  n   "  +  node.getLineno());	  	non-compiled	[CE]  	17	None	add
169	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getLineno());  Node  cannot  be  refined.  n   "  +  node.getLineno());  break;  [CE]  [FE]                IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getLineno());  Node  cannot  be  refined.  n   "  +  node.getLineno());  break;  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLineno());    Node  cannot  be  refined.  n   "  +  node.getLineno());  break;	  	non-compiled	[CE]  	17	None	add
170	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getLineno());  Node  cannot  be  refined.  n   "  +  node.getLineno());  }  else  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;  [CE]  [FE]                  IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getLineno());  Node  cannot  be  refined.  n   "  +  node.getLineno());  }  else  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLineno());    Node  cannot  be  refined.  n   "  +  node.getLineno());  }  else  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;	  	non-compiled	[CE]  	17	None	add
171	[BUG]  [BUGGY]  Node  node  =  scope.getNativeType(UNKNOWN_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Node  node  =  scope.getNativeType(UNKNOWN_TYPE);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getNativeType(UNKNOWN_TYPE);	      Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	5	None	replace
172	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  scope);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                  IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  scope);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  scope);	      Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	5	None	replace
173	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  qualifiedName);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  qualifiedName);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  qualifiedName);	      Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	5	None	replace
174	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  resultEqualsValue);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  resultEqualsValue);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  resultEqualsValue);	      Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	5	None	replace
175	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE),  scope);  [CE]  ';'  expected  [FE]                        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE),  scope);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE),  scope);	      Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	5	None	replace
176	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(JSTypeNative.UNKNOWN_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Node  node  =  typeRegistry.getNativeType(JSTypeNative.UNKNOWN_TYPE);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(JSTypeNative.UNKNOWN_TYPE);	      Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	5	None	replace
177	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(NODE_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Node  node  =  typeRegistry.getNativeType(NODE_TYPE);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(NODE_TYPE);	      Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	5	None	replace
178	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  DEFAULT_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  DEFAULT_TYPE);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  DEFAULT_TYPE);	      Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	5	None	replace
179	[BUG]  [BUGGY]  JSType  node  =  scope.getJSType();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  JSType  node  =  scope.getJSType();  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	JSType  node  =  scope.getJSType();	      JSType    node    =    node.getJSType();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	34	None	replace
180	[BUG]  [BUGGY]  JSType  node  =  type.getJSType();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  JSType  node  =  type.getJSType();  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	JSType  node  =  type.getJSType();	      JSType    node    =    node.getJSType();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	34	None	replace
181	[BUG]  [BUGGY]  JSType  node  =  scope.getNativeType(UNKNOWN_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  JSType  node  =  scope.getNativeType(UNKNOWN_TYPE);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	JSType  node  =  scope.getNativeType(UNKNOWN_TYPE);	      JSType    node    =    node.getJSType();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	34	None	replace
182	[BUG]  [BUGGY]  Node  node  =  scope.getJSType();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Node  node  =  scope.getJSType();  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getJSType();	      JSType    node    =    node.getJSType();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	34	None	replace
183	[BUG]  [BUGGY]  JSType  node  =  n.getJSType();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                  IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  JSType  node  =  n.getJSType();  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	JSType  node  =  n.getJSType();	      JSType    node    =    node.getJSType();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	34	None	replace
184	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  scope);  [CE]  cannot  find  symbol  compiler  [FE]                    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  scope);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  scope);	      NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	7	None	replace
185	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  null);  [CE]  cannot  find  symbol  compiler  [FE]                      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  null);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  null);	      NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	7	None	replace
186	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  resultEqualsValue);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  resultEqualsValue);	      NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	7	None	replace
187	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  scope.toStringTree());  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  scope.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  scope.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    scope.toStringTree());    	non-compiled	[CE]  <identifier>  expected	38	None	replace
188	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  scope.toStringTree());  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  scope.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  scope.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    scope.toStringTree());    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
189	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  scope.toStringTree());  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  scope.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  scope.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    scope.toStringTree());    	non-compiled	[CE]  <identifier>  expected	38	None	replace
190	[BUG]  [BUGGY]  Throwable  node  =  scope.toStringTree();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Throwable  node  =  scope.toStringTree();  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  scope.toStringTree();	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    scope.toStringTree());    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	38	None	replace
191	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope.getNativeType(UNKNOWN_TYPE));  [CE]  cannot  find  symbol  compiler  [FE]                IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope.getNativeType(UNKNOWN_TYPE));  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope.getNativeType(UNKNOWN_TYPE));	      NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  cannot  find  symbol  compiler	31	None	replace
192	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  getNativeType(UNKNOWN_TYPE));  [CE]  cannot  find  symbol  compiler  [FE]                  IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  getNativeType(UNKNOWN_TYPE));  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  getNativeType(UNKNOWN_TYPE));	      NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  cannot  find  symbol  compiler	31	None	replace
193	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope.inferQualifiedSlot(qualifiedName,  type));  [CE]  cannot  find  symbol  compiler  [FE]                    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope.inferQualifiedSlot(qualifiedName,  type));  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope.inferQualifiedSlot(qualifiedName,  type));	      NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  cannot  find  symbol  compiler	31	None	replace
194	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(NODE_TYPE));  [CE]  cannot  find  symbol  compiler  [FE]                      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(NODE_TYPE));  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(NODE_TYPE));	      NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  cannot  find  symbol  compiler	31	None	replace
195	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  getNativeType(UNKNOWN_TYPE));  [CE]  cannot  find  symbol  compiler  [FE]                        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  getNativeType(UNKNOWN_TYPE));  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope,  getNativeType(UNKNOWN_TYPE));	      NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  cannot  find  symbol  compiler	31	None	replace
196	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    }    if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }	  	compilable	  [FE]  IllegalArgumentException  	23	1	add
197	[BUG]  [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    }    if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }	  	compilable	  [FE]  IllegalArgumentException  	23	1	add
198	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  if(node  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    }    if(node  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }	  	compilable	  [FE]  IllegalArgumentException  	23	1	add
199	[BUG]  [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  if(node  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  if(node  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    }    if(node  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }	  	compilable	  [FE]  IllegalArgumentException  	23	1	add
200	[BUG]  [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n ",  +  node.toStringTree());  }  [CE]  bad  operand  type  String  for  unary  operator  [FE]        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n ",  +  node.toStringTree());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    }    if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n ",  +  node.toStringTree());  }	  	non-compiled	[CE]  bad  operand  type  String  for  unary  operator  	23	None	add
201	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLocalName());  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLocalName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLocalName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
202	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLocalName());  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLocalName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLocalName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLocalName());    	non-compiled	[CE]  <identifier>  expected	19	None	replace
203	[BUG]  [BUGGY]  Throwable  node  =  node.getLocalName();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Throwable  node  =  node.getLocalName();  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  node.getLocalName();	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLocalName());    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	19	None	replace
204	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node.getLocalName());  [CE]  cannot  find  symbol  [FE]                          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node.getLocalName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node.getLocalName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
205	[BUG]  [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLocalName());  [CE]  cannot  find  symbol  [FE]                            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLocalName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLocalName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
206	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  name: "  +  node.getLocalName());  [CE]  cannot  find  symbol  [FE]                              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  name: "  +  node.getLocalName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  name: "  +  node.getLocalName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
207	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.getLocalName());  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.getLocalName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.getLocalName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLocalName());    	non-compiled	[CE]  <identifier>  expected	19	None	replace
208	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  type,  origType,  type);  break;  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferQualifiedSlot(node,  type,  origType,  type);  break;  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  type,  origType,  type);  break;	      scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    break;    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	2	None	replace
209	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  value,  origType,  type);  break;  [CE]  cannot  find  symbol  value  [FE]            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferQualifiedSlot(node,  value,  origType,  type);  break;  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  value,  origType,  type);  break;	      scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    break;    	non-compiled	[CE]  cannot  find  symbol  value	2	None	replace
210	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  resultEqualsValue,  origType,  type);  break;  [CE]  cannot  find  symbol  resultEqualsValue  [FE]              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferQualifiedSlot(node,  resultEqualsValue,  origType,  type);  break;  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  resultEqualsValue,  origType,  type);  break;	      scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    break;    	non-compiled	[CE]  cannot  find  symbol  resultEqualsValue	2	None	replace
211	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  UNKNOWN_TYPE,  origType,  type);  break;  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferQualifiedSlot(node,  UNKNOWN_TYPE,  origType,  type);  break;  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  UNKNOWN_TYPE,  origType,  type);  break;	      scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    break;    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	2	None	replace
212	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  type,  origType);  break;  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferQualifiedSlot(node,  type,  origType);  break;  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  type,  origType);  break;	      scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    break;    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	2	None	replace
213	[BUG]  [BUGGY]  scope.inferQualifiedSlot(value,  node,  origType,  type);  break;  [CE]  cannot  find  symbol  value  [FE]                    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferQualifiedSlot(value,  node,  origType,  type);  break;  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(value,  node,  origType,  type);  break;	      scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    break;    	non-compiled	[CE]  cannot  find  symbol  value	2	None	replace
214	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  UNKNOWN_TYPE,  value,  origType,  type);  break;  [CE]  cannot  find  symbol  value  [FE]                      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferQualifiedSlot(node,  UNKNOWN_TYPE,  value,  origType,  type);  break;  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  UNKNOWN_TYPE,  value,  origType,  type);  break;	      scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    break;    	non-compiled	[CE]  cannot  find  symbol  value	2	None	replace
215	[BUG]  [BUGGY]  scope.inferQualifiedSlot(origType,  node,  type);  break;  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferQualifiedSlot(origType,  node,  type);  break;  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(origType,  node,  type);  break;	      scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    break;    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	2	None	replace
216	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  name,  origType,  type);  break;  [CE]  cannot  find  symbol  name  [FE]                          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferQualifiedSlot(node,  name,  origType,  type);  break;  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  name,  origType,  type);  break;	      scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    break;    	non-compiled	[CE]  cannot  find  symbol  name	2	None	replace
217	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  true);  [CE]  cannot  find  symbol  compiler  [FE]                        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  true);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  type,  true);	      NodeTraversal.traverse(compiler,    node,    type,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	9	None	replace
218	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  type,  false);  [CE]  cannot  find  symbol  compiler  [FE]                          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  type,  false);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  qualifiedName,  type,  false);	      NodeTraversal.traverse(compiler,    node,    type,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	9	None	replace
219	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  false);  [CE]  cannot  find  symbol  compiler  [FE]                            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  false);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope,  false);	      NodeTraversal.traverse(compiler,    node,    type,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	9	None	replace
220	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  type,  false);  [CE]  cannot  find  symbol  compiler  [FE]                              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  type,  false);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  type,  false);	      NodeTraversal.traverse(compiler,    node,    type,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	9	None	replace
221	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  false,  scope);  [CE]  cannot  find  symbol  compiler  [FE]                                IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  false,  scope);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  type,  false,  scope);	      NodeTraversal.traverse(compiler,    node,    type,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	9	None	replace
222	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  origType,  false);  [CE]  cannot  find  symbol  compiler  [FE]                                  IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  origType,  false);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  origType,  false);	      NodeTraversal.traverse(compiler,    node,    type,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	9	None	replace
223	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  false);  [CE]  cannot  find  symbol  compiler  [FE]                                    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  qualifiedName,  false);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  qualifiedName,  false);	      NodeTraversal.traverse(compiler,    node,    type,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	9	None	replace
224	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  type,  false);  [CE]  cannot  find  symbol  compiler  [FE]                                      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  type,  false);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  type,  false);	      NodeTraversal.traverse(compiler,    node,    type,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	9	None	replace
225	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  type,  origType,  type);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferQualifiedSlot(node,  type,  origType,  type);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  type,  origType,  type);	      scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	1	None	replace
226	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  value,  origType,  type);  [CE]  cannot  find  symbol  value  [FE]          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferQualifiedSlot(node,  value,  origType,  type);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  value,  origType,  type);	      scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol  value	1	None	replace
227	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  UNKNOWN_TYPE,  origType,  type);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferQualifiedSlot(node,  UNKNOWN_TYPE,  origType,  type);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  UNKNOWN_TYPE,  origType,  type);	      scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	1	None	replace
228	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  resultEqualsValue,  origType,  type);  [CE]  cannot  find  symbol  resultEqualsValue  [FE]              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferQualifiedSlot(node,  resultEqualsValue,  origType,  type);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  resultEqualsValue,  origType,  type);	      scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol  resultEqualsValue	1	None	replace
229	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  UNKNOWN_TYPE,  value,  origType,  type);  [CE]  cannot  find  symbol  value  [FE]                IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferQualifiedSlot(node,  UNKNOWN_TYPE,  value,  origType,  type);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  UNKNOWN_TYPE,  value,  origType,  type);	      scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol  value	1	None	replace
230	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  type,  origType,  qualifiedName);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferQualifiedSlot(node,  type,  origType,  qualifiedName);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  type,  origType,  qualifiedName);	      scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	1	None	replace
231	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  name,  origType,  type);  [CE]  cannot  find  symbol  name  [FE]                    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferQualifiedSlot(node,  name,  origType,  type);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  name,  origType,  type);	      scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol  name	1	None	replace
232	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  new  RestrictByOneTypeOfResultVisitor());  [CE]  cannot  find  symbol  compiler  [FE]                  IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  new  RestrictByOneTypeOfResultVisitor());  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  type,  new  RestrictByOneTypeOfResultVisitor());	      NodeTraversal.traverse(compiler,    node,    new    RestrictByOneTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	32	None	replace
233	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  new  RestrictByOneTypeOfResultVisitor());  [CE]  cannot  find  symbol  compiler  [FE]                    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  scope,  new  RestrictByOneTypeOfResultVisitor());  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  scope,  new  RestrictByOneTypeOfResultVisitor());	      NodeTraversal.traverse(compiler,    node,    new    RestrictByOneTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	32	None	replace
234	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByOneTypeOfResultVisitor(),  scope);  [CE]  cannot  find  symbol  compiler  [FE]                      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByOneTypeOfResultVisitor(),  scope);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  new  RestrictByOneTypeOfResultVisitor(),  scope);	      NodeTraversal.traverse(compiler,    node,    new    RestrictByOneTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	32	None	replace
235	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  new  RestrictByOneTypeOfResultVisitor());  [CE]  cannot  find  symbol  compiler  [FE]                        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  new  RestrictByOneTypeOfResultVisitor());  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  new  RestrictByOneTypeOfResultVisitor());	      NodeTraversal.traverse(compiler,    node,    new    RestrictByOneTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	32	None	replace
236	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  new  RestrictByOneTypeOfResultVisitor());  [CE]  cannot  find  symbol  compiler  [FE]                          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  new  RestrictByOneTypeOfResultVisitor());  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  resultEqualsValue,  new  RestrictByOneTypeOfResultVisitor());	      NodeTraversal.traverse(compiler,    node,    new    RestrictByOneTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	32	None	replace
237	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByOneTypeOfResultVisitor(),  type);  [CE]  cannot  find  symbol  compiler  [FE]                            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByOneTypeOfResultVisitor(),  type);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  new  RestrictByOneTypeOfResultVisitor(),  type);	      NodeTraversal.traverse(compiler,    node,    new    RestrictByOneTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	32	None	replace
238	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByUndefinedVisitor());  [CE]  cannot  find  symbol  compiler  [FE]                              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByUndefinedVisitor());  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  new  RestrictByUndefinedVisitor());	      NodeTraversal.traverse(compiler,    node,    new    RestrictByOneTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	32	None	replace
239	[BUG]  [BUGGY]  Throwable  node  =  node.toStringTree();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Throwable  node  =  node.toStringTree();  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  node.toStringTree();	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.   "    +    node.toStringTree());    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	14	None	replace
240	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.   "    +    node.toStringTree());    	compilable	  [FE]  IllegalArgumentException  	14	1	replace
241	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.   "    +    node.toStringTree());    	compilable	  [FE]  IllegalArgumentException  	14	1	replace
242	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  }  else  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }  [CE]  variable  qualifiedName  might  not  have  been  initialized  [FE]        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  }  else  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  }  else  {  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.   "    +    node.toStringTree());    	non-compiled	[CE]  variable  qualifiedName  might  not  have  been  initialized	14	None	replace
243	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getName());  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getName());    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
244	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getName());  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getName());    	non-compiled	[CE]  <identifier>  expected	42	None	replace
245	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getName());  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getName());    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
246	[BUG]  [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getName());  [CE]  cannot  find  symbol  [FE]                      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getName());    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
247	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name  ' "  +  node.getName());  [CE]  cannot  find  symbol  [FE]                        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name  ' "  +  node.getName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name  ' "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getName());    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
248	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name   "  +  node.getName());  [CE]  cannot  find  symbol  [FE]                          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name   "  +  node.getName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  qualified  name   "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getName());    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
249	[BUG]  [BUGGY]  Throwable  node  =  node.getCause();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Throwable  node  =  node.getCause();  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  node.getCause();	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getName());    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	42	None	replace
250	[BUG]  [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  type,  resultEqualsValue);  [CE]  cannot  find  symbol  resultEqualsValue  [FE]                      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  type,  resultEqualsValue);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(node,  qualifiedName,  origType,  type,  resultEqualsValue);	      scope.inferSlot(node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol  resultEqualsValue	8	None	replace
251	[BUG]  [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  type,  value);  [CE]  cannot  find  symbol  value  [FE]                        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  type,  value);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(node,  qualifiedName,  origType,  type,  value);	      scope.inferSlot(node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol  value	8	None	replace
252	[BUG]  [BUGGY]  scope.inferSlot(node,  qualifiedName,  type,  origType);  [CE]  cannot  find  symbol  [FE]                          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferSlot(node,  qualifiedName,  type,  origType);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(node,  qualifiedName,  type,  origType);	      scope.inferSlot(node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
253	[BUG]  [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  type,  state);  [CE]  cannot  find  symbol  state  [FE]                            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  type,  state);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(node,  qualifiedName,  origType,  type,  state);	      scope.inferSlot(node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol  state	8	None	replace
254	[BUG]  [BUGGY]  scope.inferSlot(node,  type,  qualifiedName,  origType);  [CE]  cannot  find  symbol  [FE]                              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferSlot(node,  type,  qualifiedName,  origType);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(node,  type,  qualifiedName,  origType);	      scope.inferSlot(node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
255	[BUG]  [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  type,  errorEqualsValue);  [CE]  cannot  find  symbol  errorEqualsValue  [FE]                                IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  type,  errorEqualsValue);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(node,  qualifiedName,  origType,  type,  errorEqualsValue);	      scope.inferSlot(node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol  errorEqualsValue	8	None	replace
256	[BUG]  [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  type,  eventEqualsValue);  [CE]  cannot  find  symbol  eventEqualsValue  [FE]                                  IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  type,  eventEqualsValue);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(node,  qualifiedName,  origType,  type,  eventEqualsValue);	      scope.inferSlot(node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol  eventEqualsValue	8	None	replace
257	[BUG]  [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  type,  event);  [CE]  cannot  find  symbol  event  [FE]                                    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  type,  event);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(node,  qualifiedName,  origType,  type,  event);	      scope.inferSlot(node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol  event	8	None	replace
258	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getMessage());  [CE]  cannot  find  symbol  [FE]                        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getMessage());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getMessage());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getMessage());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
259	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getMessage());  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getMessage());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getMessage());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getMessage());    	non-compiled	[CE]  <identifier>  expected	22	None	replace
260	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node.getMessage());  [CE]  cannot  find  symbol  [FE]                            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node.getMessage());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node.getMessage());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getMessage());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
261	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getMessage());  [CE]  cannot  find  symbol  [FE]                              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getMessage());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getMessage());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getMessage());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
262	[BUG]  [BUGGY]  Throwable  node  =  node.getMessage();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                                IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Throwable  node  =  node.getMessage();  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  node.getMessage();	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getMessage());    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	22	None	replace
263	[BUG]  [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getMessage());  [CE]  cannot  find  symbol  [FE]                                  IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getMessage());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getMessage());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getMessage());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
264	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.getMessage());  [CE]  cannot  find  symbol  [FE]                                    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.getMessage());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.getMessage());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getMessage());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
265	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                                      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getClass());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getClass());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getMessage());    	compilable	  [FE]  IllegalArgumentException  	22	1	replace
266	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getClass());  [FE]  IllegalArgumentException  [FE]                                      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getClass());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getClass());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getMessage());    	compilable	  [FE]  IllegalArgumentException  	22	1	replace
267	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Preconditions.checkState(type  ==  null);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	Preconditions.checkState(type  ==  null);	      Preconditions.checkNotNull(type);    	compilable	  [FE]  IllegalStateException  	28	1	replace
268	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  null);  [FE]  IllegalStateException  [FE]      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Preconditions.checkState(type  ==  null);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(type  ==  null);	      Preconditions.checkNotNull(type);    	compilable	  [FE]  IllegalStateException  	28	1	replace
269	[BUG]  [BUGGY]  Preconditions.checkNotNull(qualifiedName);  [CE]  variable  qualifiedName  might  not  have  been  initialized  [FE]          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Preconditions.checkNotNull(qualifiedName);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkNotNull(qualifiedName);	      Preconditions.checkNotNull(type);    	non-compiled	[CE]  variable  qualifiedName  might  not  have  been  initialized	28	None	replace
270	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Preconditions.checkArgument(type  ==  null);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	Preconditions.checkArgument(type  ==  null);	      Preconditions.checkNotNull(type);    	compilable	  [FE]  IllegalArgumentException  	28	1	replace
271	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  null);  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Preconditions.checkArgument(type  ==  null);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkArgument(type  ==  null);	      Preconditions.checkNotNull(type);    	compilable	  [FE]  IllegalArgumentException  	28	1	replace
272	[BUG]  [BUGGY]  Preconditions.checkState(scope.isUndefinedType());  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Preconditions.checkState(scope.isUndefinedType());  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(scope.isUndefinedType());	      Preconditions.checkNotNull(type);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
273	[BUG]  [BUGGY]  Preconditions.checkState(!type.isUndefinedType());  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Preconditions.checkState(!type.isUndefinedType());  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(!type.isUndefinedType());	      Preconditions.checkNotNull(type);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
274	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  [CE]  <identifier>  expected  [FE]    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwables.throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLineno());    	non-compiled	[CE]  <identifier>  expected	18	None	replace
275	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getLineno());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getLineno());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLineno());    	compilable	  [FE]  IllegalArgumentException  	18	1	replace
276	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getLineno());  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getLineno());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getLineno());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLineno());    	compilable	  [FE]  IllegalArgumentException  	18	1	replace
277	[BUG]  [BUGGY]  Throwable  node  =  node.getLineno();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Throwable  node  =  node.getLineno();  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  node.getLineno();	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLineno());    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	18	None	replace
278	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getLineno());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getLineno());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLineno());    	compilable	  [FE]  IllegalArgumentException  	18	1	replace
279	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getLineno());  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getLineno());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node: "  +  node.getLineno());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLineno());    	compilable	  [FE]  IllegalArgumentException  	18	1	replace
280	[BUG]  [BUGGY]  JSType  node  =  getNativeType(UNKNOWN_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  JSType  node  =  getNativeType(UNKNOWN_TYPE);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	JSType  node  =  getNativeType(UNKNOWN_TYPE);	      JSType    node    =    node.getJSType();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	34	None	replace
281	[BUG]  [BUGGY]  JSType  node  =  scope.getJSType(node);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  JSType  node  =  scope.getJSType(node);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	JSType  node  =  scope.getJSType(node);	      JSType    node    =    node.getJSType();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	34	None	replace
282	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getString());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getString());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getString());    	compilable	  [FE]  UnsupportedOperationException  	40	1	replace
283	[BUG]  [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getString());  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getString());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getString());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getString());    	compilable	  [FE]  UnsupportedOperationException  	40	1	replace
284	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getString());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getString());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getString());    	compilable	  [FE]  UnsupportedOperationException  	40	1	replace
285	[BUG]  [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getString());  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getString());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getString());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getString());    	compilable	  [FE]  UnsupportedOperationException  	40	1	replace
286	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist:  node.getLocalName() "  +  node.getLocalName());  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist:  node.getLocalName() "  +  node.getLocalName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist:  node.getLocalName() "  +  node.getLocalName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
287	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getLocalName());  [CE]  cannot  find  symbol  [FE]                      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getLocalName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getLocalName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
288	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getLocalName());  [CE]  cannot  find  symbol  [FE]                        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getLocalName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getLocalName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
289	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getLocalName()   "  +  node.getLocalName());  [CE]  cannot  find  symbol  [FE]                          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getLocalName()   "  +  node.getLocalName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getLocalName()   "  +  node.getLocalName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
290	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined. "  +  node,  type.toStringTree());  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  DebugLog.warning( "Node  cannot  be  refined. "  +  node,  type.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined. "  +  node,  type.toStringTree());	  DebugLog.warning(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
291	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined ",  node.toStringTree());  [CE]  cannot  find  symbol  DebugLog  [FE]                IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  DebugLog.warning( "Node  cannot  be  refined ",  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined ",  node.toStringTree());	  DebugLog.warning(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol  DebugLog	25	None	replace
292	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(), "  +  node.toStringTree());  [CE]  cannot  find  symbol  DebugLog  [FE]                  IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  DebugLog.warning( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(), "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(), "  +  node.toStringTree());	  DebugLog.warning(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol  DebugLog	25	None	replace
293	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined. "  +  node.getClass());  [CE]  cannot  find  symbol  DebugLog  [FE]                    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  DebugLog.warning( "Node  cannot  be  refined. "  +  node.getClass());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined. "  +  node.getClass());	  DebugLog.warning(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol  DebugLog	25	None	replace
294	[BUG]  [BUGGY]      Preconditions.checkNotNull(type);  Preconditions.checkState(type!=  null? "Node  cannot  be  refined.  n "  +  node.toStringTree());  [CE]  :  expected  [FE]    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]      Preconditions.checkNotNull(type);  Preconditions.checkState(type!=  null? "Node  cannot  be  refined.  n "  +  node.toStringTree());  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	        Preconditions.checkNotNull(type);    Preconditions.checkState(type!=  null? "Node  cannot  be  refined.  n "  +  node.toStringTree());	  	non-compiled	[CE]  :  expected	27	None	add
295	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]      Preconditions.checkNotNull(type);  Preconditions.checkArgument(type!=  null);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	        Preconditions.checkNotNull(type);    Preconditions.checkArgument(type!=  null);	  	compilable	  [FE]  IllegalArgumentException  	27	1	add
296	[BUG]  [BUGGY]      Preconditions.checkNotNull(type);  Preconditions.checkArgument(type!=  null);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]      Preconditions.checkNotNull(type);  Preconditions.checkArgument(type!=  null);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	        Preconditions.checkNotNull(type);    Preconditions.checkArgument(type!=  null);	  	compilable	  [FE]  IllegalArgumentException  	27	1	add
297	[BUG]  [BUGGY]      Preconditions.checkNotNull(type);  Preconditions.checkArgument(type!=  null? "node  cannot  be  refined.  n "  +  node.toStringTree());  [CE]  :  expected  [FE]        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]      Preconditions.checkNotNull(type);  Preconditions.checkArgument(type!=  null? "node  cannot  be  refined.  n "  +  node.toStringTree());  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	        Preconditions.checkNotNull(type);    Preconditions.checkArgument(type!=  null? "node  cannot  be  refined.  n "  +  node.toStringTree());	  	non-compiled	[CE]  :  expected	27	None	add
298	[BUG]  [BUGGY]      Preconditions.checkNotNull(type);  Preconditions.checkArgument(type!=  null?  getNativeType(UNKNOWN_TYPE):  node.toStringTree());  [CE]  no  suitable  method  found  for  checkArgument(Serializable)  [FE]          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]      Preconditions.checkNotNull(type);  Preconditions.checkArgument(type!=  null?  getNativeType(UNKNOWN_TYPE):  node.toStringTree());  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	        Preconditions.checkNotNull(type);    Preconditions.checkArgument(type!=  null?  getNativeType(UNKNOWN_TYPE):  node.toStringTree());	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(Serializable)	27	None	add
299	[BUG]  [BUGGY]  Node  node  =  scope.inferQualifiedSlot(qualifiedName);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Node  node  =  scope.inferQualifiedSlot(qualifiedName);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.inferQualifiedSlot(qualifiedName);	      Node    node    =    scope.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	36	None	replace
300	[BUG]  [BUGGY]  Node  node  =  scope.getFirstChild().getNext();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Node  node  =  scope.getFirstChild().getNext();  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getFirstChild().getNext();	      Node    node    =    scope.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	36	None	replace
301	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  resultEqualsValue,  value);  [CE]  cannot  find  symbol  compiler  [FE]              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  resultEqualsValue,  value);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  type,  resultEqualsValue,  value);	      NodeTraversal.traverse(compiler,    node,    type,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	4	None	replace
302	[BUG]  [BUGGY]  Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  scope.toStringTree());  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  scope.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  scope.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    scope.toStringTree());    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	38	None	replace
303	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getQualifiedName());  JSType  node  =  node.getJSType();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getQualifiedName());  JSType  node  =  node.getJSType();  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getQualifiedName());    JSType  node  =  node.getJSType();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	20	None	add
304	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getQualifiedName());  n  =  node.getQualifiedName();  [CE]  cannot  find  symbol  n  [FE]      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getQualifiedName());  n  =  node.getQualifiedName();  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getQualifiedName());    n  =  node.getQualifiedName();	  	non-compiled	[CE]  cannot  find  symbol  n	20	None	add
305	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getLineno());  n  =  node.getLineno();  [CE]  cannot  find  symbol  n  [FE]    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getLineno());  n  =  node.getLineno();  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLineno());    n  =  node.getLineno();	  	non-compiled	[CE]  cannot  find  symbol  n	17	None	add
306	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getLineno());  SimpleNodeTraversal.traverse(compiler,  node,  type);  [CE]  cannot  find  symbol  compiler  [FE]      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getLineno());  SimpleNodeTraversal.traverse(compiler,  node,  type);  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLineno());    SimpleNodeTraversal.traverse(compiler,  node,  type);	  	non-compiled	[CE]  cannot  find  symbol  compiler	17	None	add
307	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getLineno());  JSType  node  =  node.getLineno();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getLineno());  JSType  node  =  node.getLineno();  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLineno());    JSType  node  =  node.getLineno();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	17	None	add
308	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getLineno());  SimpleNodeTraversal.traverse(compiler,  node,  type,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getLineno());  SimpleNodeTraversal.traverse(compiler,  node,  type,  resultEqualsValue);  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLineno());    SimpleNodeTraversal.traverse(compiler,  node,  type,  resultEqualsValue);	  	non-compiled	[CE]  cannot  find  symbol  compiler	17	None	add
309	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getLineno());  FlowScope  <  Node>  node  =  scope.getNode();  [CE]  type  FlowScope  does  not  take  parameters  [FE]            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getLineno());  FlowScope  <  Node>  node  =  scope.getNode();  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLineno());    FlowScope  <  Node>  node  =  scope.getNode();	  	non-compiled	[CE]  type  FlowScope  does  not  take  parameters	17	None	add
310	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getLineno());  SimpleNodeTraversal.traverse(compiler,  node,  this);  [CE]  cannot  find  symbol  compiler  [FE]              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getLineno());  SimpleNodeTraversal.traverse(compiler,  node,  this);  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLineno());    SimpleNodeTraversal.traverse(compiler,  node,  this);	  	non-compiled	[CE]  cannot  find  symbol  compiler	17	None	add
311	[BUG]  [BUGGY]  parent!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  parent!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	parent!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }	  if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    }    	non-compiled	[CE]  not  a  statement	16	None	replace
312	[BUG]  [BUGGY]  parent!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  }  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  parent!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	parent!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.toStringTree());  }	  if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    }    	non-compiled	[CE]  not  a  statement	16	None	replace
313	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());  FlowScope  <  Node>  node  =  scope.inferQualifiedSlot(qualifiedName,  node.toStringTree());  [CE]  type  FlowScope  does  not  take  parameters  [FE]    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());  FlowScope  <  Node>  node  =  scope.inferQualifiedSlot(qualifiedName,  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.   "    +    node.toStringTree());    FlowScope  <  Node>  node  =  scope.inferQualifiedSlot(qualifiedName,  node.toStringTree());	  	non-compiled	[CE]  type  FlowScope  does  not  take  parameters	13	None	add
314	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());  FlowScope  <  Node>  node  =  scope.inferQualifiedSlot(value,  node.toStringTree());  [CE]  type  FlowScope  does  not  take  parameters  [FE]      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());  FlowScope  <  Node>  node  =  scope.inferQualifiedSlot(value,  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.   "    +    node.toStringTree());    FlowScope  <  Node>  node  =  scope.inferQualifiedSlot(value,  node.toStringTree());	  	non-compiled	[CE]  type  FlowScope  does  not  take  parameters	13	None	add
315	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());  FlowScope  <  Node>  node  =  scope.inferQualifiedSlot(node,  qualifiedName);  [CE]  type  FlowScope  does  not  take  parameters  [FE]        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());  FlowScope  <  Node>  node  =  scope.inferQualifiedSlot(node,  qualifiedName);  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.   "    +    node.toStringTree());    FlowScope  <  Node>  node  =  scope.inferQualifiedSlot(node,  qualifiedName);	  	non-compiled	[CE]  type  FlowScope  does  not  take  parameters	13	None	add
316	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());  FlowScope  <  Node>  node  =  scope.inferQualifiedSlot(node,  qualifiedName,  origType);  [CE]  type  FlowScope  does  not  take  parameters  [FE]          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());  FlowScope  <  Node>  node  =  scope.inferQualifiedSlot(node,  qualifiedName,  origType);  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.   "    +    node.toStringTree());    FlowScope  <  Node>  node  =  scope.inferQualifiedSlot(node,  qualifiedName,  origType);	  	non-compiled	[CE]  type  FlowScope  does  not  take  parameters	13	None	add
317	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  origType,  this);  [CE]  cannot  find  symbol  compiler  [FE]                  IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  origType,  this);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  origType,  this);	      NodeTraversal.traverse(compiler,    node,    type,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	6	None	replace
318	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  value);  [CE]  cannot  find  symbol  compiler  [FE]            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  value);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  type,  value);	      NodeTraversal.traverse(compiler,    node,    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	3	None	replace
319	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  origType);  [CE]  cannot  find  symbol  compiler  [FE]              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  origType);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  origType);	      NodeTraversal.traverse(compiler,    node,    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	3	None	replace
320	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  resultEqualsValue);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  resultEqualsValue);	      NodeTraversal.traverse(compiler,    node,    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	3	None	replace
321	[BUG]  [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n ")  +  node.toStringTree());  }  [CE]  [FE]    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n ")  +  node.toStringTree());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    }    if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n ")  +  node.toStringTree());  }	  	non-compiled	[CE]  	23	None	add
322	[BUG]  [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n'  +  node.toStringTree());  }  [CE]  unclosed  string  literal  [FE]      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n'  +  node.toStringTree());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    }    if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n'  +  node.toStringTree());  }	  	non-compiled	[CE]  unclosed  string  literal	23	None	add
323	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  origType,  new  RestrictByTrueTypeOfResultVisitor());  [CE]  cannot  find  symbol  compiler  [FE]              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  origType,  new  RestrictByTrueTypeOfResultVisitor());  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  origType,  new  RestrictByTrueTypeOfResultVisitor());	      NodeTraversal.traverse(compiler,    node,    type,    new    RestrictByTrueTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	30	None	replace
324	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  sourceName,  new  RestrictByTrueTypeOfResultVisitor());  [CE]  cannot  find  symbol  compiler  [FE]                IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  sourceName,  new  RestrictByTrueTypeOfResultVisitor());  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  sourceName,  new  RestrictByTrueTypeOfResultVisitor());	      NodeTraversal.traverse(compiler,    node,    type,    new    RestrictByTrueTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	30	None	replace
325	[BUG]  [BUGGY]  scope.inferQualifiedSlot(value,  node,  type,  origType);  break;  [CE]  cannot  find  symbol  value  [FE]          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferQualifiedSlot(value,  node,  type,  origType);  break;  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(value,  node,  type,  origType);  break;	      scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    break;    	non-compiled	[CE]  cannot  find  symbol  value	2	None	replace
326	[BUG]  [BUGGY]  scope.inferQualifiedSlot(type,  node,  qualifiedName,  origType);  break;  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferQualifiedSlot(type,  node,  qualifiedName,  origType);  break;  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(type,  node,  qualifiedName,  origType);  break;	      scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    break;    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	2	None	replace
327	[BUG]  [BUGGY]  scope.inferQualifiedSlot(value,  origType,  type);  break;  [CE]  cannot  find  symbol  value  [FE]              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferQualifiedSlot(value,  origType,  type);  break;  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(value,  origType,  type);  break;	      scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    break;    	non-compiled	[CE]  cannot  find  symbol  value	2	None	replace
328	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(OPTIONAL_TYPE));  [CE]  cannot  find  symbol  compiler  [FE]                IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(OPTIONAL_TYPE));  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(OPTIONAL_TYPE));	      NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  cannot  find  symbol  compiler	31	None	replace
329	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	21	1	replace
330	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName());  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getQualifiedName());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	21	1	replace
331	[BUG]  [BUGGY]  Throwable  node  =  node.getQualifiedName();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Throwable  node  =  node.getQualifiedName();  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  node.getQualifiedName();	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getQualifiedName());    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	21	None	replace
332	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getString());  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [CE]  incompatible  types  [FE]    UnsupportedOperationException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getString());  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getString());    boolean  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);	  	non-compiled	[CE]  incompatible  types	39	None	add
333	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getString());  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName,  origType);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]      UnsupportedOperationException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getString());  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName,  origType);  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getString());    boolean  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName,  origType);	  	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	39	None	add
334	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getString());  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(qualifiedName,  node.getString());  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]        UnsupportedOperationException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getString());  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(qualifiedName,  node.getString());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getString());    boolean  resultEqualsValue  =  scope.inferQualifiedSlot(qualifiedName,  node.getString());	  	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	39	None	add
335	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getString());  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]          UnsupportedOperationException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getString());  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName);  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getString());    boolean  resultEqualsValue  =  scope.inferQualifiedSlot(node,  qualifiedName);	  	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	39	None	add
336	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getString());  Node  cannot  be  refined.  n   "  +  node.getString();  [CE]  [FE]            UnsupportedOperationException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getString());  Node  cannot  be  refined.  n   "  +  node.getString();  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getString());    Node  cannot  be  refined.  n   "  +  node.getString();	  	non-compiled	[CE]  	39	None	add
337	[BUG]  [BUGGY]  Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  type.toStringTree());  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  type.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  type.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    type.toStringTree());    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	37	None	replace
338	[BUG]  [BUGGY]  Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  type.toStringTree());  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  type.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throwable  node  =  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  type.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    type.toStringTree());    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	37	None	replace
339	[BUG]  [BUGGY]  Preconditions.checkNotNull(resultEqualsValue);  [CE]  cannot  find  symbol  resultEqualsValue  [FE]    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Preconditions.checkNotNull(resultEqualsValue);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkNotNull(resultEqualsValue);	      Preconditions.checkNotNull(type);    	non-compiled	[CE]  cannot  find  symbol  resultEqualsValue	28	None	replace
340	[BUG]  [BUGGY]  Preconditions.checkNotNull(value);  [CE]  cannot  find  symbol  value  [FE]      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Preconditions.checkNotNull(value);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkNotNull(value);	      Preconditions.checkNotNull(type);    	non-compiled	[CE]  cannot  find  symbol  value	28	None	replace
341	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null?  getNativeType(UNKNOWN_TYPE):  type);  [CE]  no  suitable  method  found  for  checkArgument(JSType)  [FE]        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Preconditions.checkArgument(type!=  null?  getNativeType(UNKNOWN_TYPE):  type);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkArgument(type!=  null?  getNativeType(UNKNOWN_TYPE):  type);	      Preconditions.checkNotNull(type);    	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(JSType)	28	None	replace
342	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null? "null "  :  type);  [CE]  no  suitable  method  found  for  checkArgument(Serializable)  [FE]          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Preconditions.checkArgument(type!=  null? "null "  :  type);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkArgument(type!=  null? "null "  :  type);	      Preconditions.checkNotNull(type);    	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(Serializable)	28	None	replace
343	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.isUnknownType());  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	Preconditions.checkArgument(type!=  null  &&  type.isUnknownType());	      Preconditions.checkNotNull(type);    	compilable	  [FE]  IllegalArgumentException  	28	1	replace
344	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.isUnknownType());  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.isUnknownType());  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkArgument(type!=  null  &&  type.isUnknownType());	      Preconditions.checkNotNull(type);    	compilable	  [FE]  IllegalArgumentException  	28	1	replace
345	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  JSError.make(scope,  node,  MISSING_NAMESPACE_ERROR, "Node  cannot  be  refined.  n "  +  node.toStringTree());  [CE]  cannot  find  symbol  MISSING_NAMESPACE_ERROR  [FE]    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  JSError.make(scope,  node,  MISSING_NAMESPACE_ERROR, "Node  cannot  be  refined.  n "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    JSError.make(scope,  node,  MISSING_NAMESPACE_ERROR, "Node  cannot  be  refined.  n "  +  node.toStringTree());	  	non-compiled	[CE]  cannot  find  symbol  MISSING_NAMESPACE_ERROR	11	None	add
346	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  JSError.make(scope,  node,  MISSING_NAMESPACE_ERROR, "Node  cannot  be  refined.  n ")  +  node.toStringTree());  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  JSError.make(scope,  node,  MISSING_NAMESPACE_ERROR, "Node  cannot  be  refined.  n ")  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    JSError.make(scope,  node,  MISSING_NAMESPACE_ERROR, "Node  cannot  be  refined.  n ")  +  node.toStringTree());	  	non-compiled	[CE]  not  a  statement	11	None	add
347	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLineno());    	compilable	  [FE]  IllegalArgumentException  	18	1	replace
348	[BUG]  [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLineno());    	compilable	  [FE]  IllegalArgumentException  	18	1	replace
349	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLineno());    	compilable	  [FE]  IllegalArgumentException  	18	1	replace
350	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getLineno());  }	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLineno());    	compilable	  [FE]  IllegalArgumentException  	18	1	replace
351	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(OPTIONAL_TYPE),  this);  [CE]  cannot  find  symbol  compiler  [FE]        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(OPTIONAL_TYPE),  this);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(OPTIONAL_TYPE),  this);	      NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE),    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	33	None	replace
352	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  this,  type);  [CE]  cannot  find  symbol  compiler  [FE]          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  this,  type);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  this,  type);	      NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE),    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	33	None	replace
353	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(ROOT_TYPE),  this);  [CE]  cannot  find  symbol  compiler  [FE]            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(ROOT_TYPE),  this);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(ROOT_TYPE),  this);	      NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE),    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	33	None	replace
354	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getMessage());  [CE]  cannot  find  symbol  [FE]                        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getMessage());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.getMessage());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getMessage());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
355	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist:  node.getMessage());  [CE]  unclosed  string  literal  [FE]                          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist:  node.getMessage());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist:  node.getMessage());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getMessage());    	non-compiled	[CE]  unclosed  string  literal	22	None	replace
356	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  same  type.   "  +  node.getMessage());  [CE]  cannot  find  symbol  [FE]                            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  same  type.   "  +  node.getMessage());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  same  type.   "  +  node.getMessage());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getMessage());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
357	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName()  = "  +  node.getMessage());  [CE]  cannot  find  symbol  [FE]                              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName()  = "  +  node.getMessage());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName()  = "  +  node.getMessage());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getMessage());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
358	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  null);  [CE]  cannot  find  symbol  compiler  [FE]                    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  null);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  null);	      NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	7	None	replace
359	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  value);  [CE]  cannot  find  symbol  compiler  [FE]                      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  value);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  value);	      NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	7	None	replace
360	[BUG]  [BUGGY]  scope.inferSlot(node,  type,  origType,  qualifiedName);  [CE]  cannot  find  symbol  [FE]                      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferSlot(node,  type,  origType,  qualifiedName);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(node,  type,  origType,  qualifiedName);	      scope.inferSlot(node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
361	[BUG]  [BUGGY]  scope.inferSlot(value,  node,  qualifiedName,  origType,  type);  [CE]  cannot  find  symbol  value  [FE]                        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferSlot(value,  node,  qualifiedName,  origType,  type);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(value,  node,  qualifiedName,  origType,  type);	      scope.inferSlot(node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol  value	8	None	replace
362	[BUG]  [BUGGY]  scope.inferSlot(node,  name,  origType,  type);  [CE]  cannot  find  symbol  name  [FE]                          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferSlot(node,  name,  origType,  type);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(node,  name,  origType,  type);	      scope.inferSlot(node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol  name	8	None	replace
363	[BUG]  [BUGGY]  scope.inferSlot(node,  qualifiedName,  value,  origType,  type);  [CE]  cannot  find  symbol  value  [FE]                            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferSlot(node,  qualifiedName,  value,  origType,  type);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(node,  qualifiedName,  value,  origType,  type);	      scope.inferSlot(node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol  value	8	None	replace
364	[BUG]  [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  typeRegistry);  [CE]  cannot  find  symbol  [FE]                              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  typeRegistry);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(node,  qualifiedName,  origType,  typeRegistry);	      scope.inferSlot(node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
365	[BUG]  [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  value);  [CE]  cannot  find  symbol  value  [FE]                                IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  value);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(node,  qualifiedName,  origType,  value);	      scope.inferSlot(node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol  value	8	None	replace
366	[BUG]  [BUGGY]  node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree());  }  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree());  }	  if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    }    	non-compiled	[CE]  not  a  statement	24	None	replace
367	[BUG]  [BUGGY]  scope.inferQualifiedSlot(value,  node,  qualifiedName,  origType);  [CE]  cannot  find  symbol  value  [FE]                          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferQualifiedSlot(value,  node,  qualifiedName,  origType);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(value,  node,  qualifiedName,  origType);	      scope.inferQualifiedSlot(node,    qualifiedName,    origType);    	non-compiled	[CE]  cannot  find  symbol  value	10	None	replace
368	[BUG]  [BUGGY]  scope.inferQualifiedSlot(type,  node,  qualifiedName,  origType);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferQualifiedSlot(type,  node,  qualifiedName,  origType);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(type,  node,  qualifiedName,  origType);	      scope.inferQualifiedSlot(node,    qualifiedName,    origType);    	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	10	None	replace
369	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  value);  [CE]  cannot  find  symbol  value  [FE]                              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  value);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  qualifiedName,  origType,  value);	      scope.inferQualifiedSlot(node,    qualifiedName,    origType);    	non-compiled	[CE]  cannot  find  symbol  value	10	None	replace
370	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  value,  qualifiedName,  origType);  [CE]  cannot  find  symbol  value  [FE]                                IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferQualifiedSlot(node,  value,  qualifiedName,  origType);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  value,  qualifiedName,  origType);	      scope.inferQualifiedSlot(node,    qualifiedName,    origType);    	non-compiled	[CE]  cannot  find  symbol  value	10	None	replace
371	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  qualifiedName,  value,  origType);  [CE]  cannot  find  symbol  value  [FE]                                  IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferQualifiedSlot(node,  qualifiedName,  value,  origType);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  qualifiedName,  value,  origType);	      scope.inferQualifiedSlot(node,    qualifiedName,    origType);    	non-compiled	[CE]  cannot  find  symbol  value	10	None	replace
372	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByTypeOfResultVisitor());  [CE]  cannot  find  symbol  compiler  [FE]                  IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByTypeOfResultVisitor());  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  new  RestrictByTypeOfResultVisitor());	      NodeTraversal.traverse(compiler,    node,    new    RestrictByOneTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	32	None	replace
373	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n ")  +  node.toStringTree());  }  [CE]  [FE]    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n ")  +  node.toStringTree());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    }    if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n ")  +  node.toStringTree());  }	  	non-compiled	[CE]  	15	None	add
374	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  If(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  [CE]  [FE]      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  If(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    }    If(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }	  	non-compiled	[CE]  	15	None	add
375	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n'   "  +  node.toStringTree());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    }    if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n'   "  +  node.toStringTree());  }	  	compilable	  [FE]  IllegalArgumentException  	15	1	add
376	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n'   "  +  node.toStringTree());  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n'   "  +  node.toStringTree());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    }    if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n'   "  +  node.toStringTree());  }	  	compilable	  [FE]  IllegalArgumentException  	15	1	add
377	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName()  : "  +  node.getName());  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName()  : "  +  node.getName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName()  : "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getName());    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
378	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getName());  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getName());    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
379	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getName(), "  +  node.getName());  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getName(), "  +  node.getName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getName(), "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getName());    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
380	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName()  = "  +  node.getName());  [CE]  cannot  find  symbol  [FE]                      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName()  = "  +  node.getName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName()  = "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getName());    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
381	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName(), "  +  node.getName());  [CE]  cannot  find  symbol  [FE]                        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName(), "  +  node.getName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.getName(), "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getName());    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
382	[BUG]  [BUGGY]  scope.inferQualifiedSlot(value,  node,  origType,  type);  [CE]  cannot  find  symbol  value  [FE]        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferQualifiedSlot(value,  node,  origType,  type);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(value,  node,  origType,  type);	      scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol  value	1	None	replace
383	[BUG]  [BUGGY]  scope.inferQualifiedSlot(value,  node,  type,  origType);  [CE]  cannot  find  symbol  value  [FE]          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferQualifiedSlot(value,  node,  type,  origType);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(value,  node,  type,  origType);	      scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol  value	1	None	replace
384	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  resultEqualsValue,  false);  [CE]  cannot  find  symbol  compiler  [FE]                        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  type,  resultEqualsValue,  false);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  type,  resultEqualsValue,  false);	      NodeTraversal.traverse(compiler,    node,    type,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	9	None	replace
385	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.toStringTree());  [CE]  not  a  statement  [FE]              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  node: "  +  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	41	None	replace
386	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node()  cannot  be  refined. "  +  node.toStringTree());  [CE]  not  a  statement  [FE]                IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node()  cannot  be  refined. "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node()  cannot  be  refined. "  +  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	41	None	replace
387	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.toStringTree());  [CE]  not  a  statement  [FE]                  IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named: "  +  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	41	None	replace
388	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(), "  +  node.toStringTree());  [CE]  not  a  statement  [FE]                    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(), "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(), "  +  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	41	None	replace
389	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node  ' "  +  node.toStringTree());  [CE]  not  a  statement  [FE]                      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node  ' "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node  ' "  +  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	41	None	replace
390	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.toStringTree()  : "  +  node.toStringTree());  [CE]  not  a  statement  [FE]                        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.toStringTree()  : "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  named  with  node.toStringTree()  : "  +  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	41	None	replace
391	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  value);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  value);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  value);	      Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	5	None	replace
392	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  name);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                  IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  name);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  name);	      Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	5	None	replace
393	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  NODE_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  NODE_TYPE);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  NODE_TYPE);	      Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	5	None	replace
394	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(NODE_TYPE),  type);  [CE]  cannot  find  symbol  compiler  [FE]            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(NODE_TYPE),  type);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(NODE_TYPE),  type);	      NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE),    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	35	None	replace
395	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(OPTIONAL_TYPE),  type);  [CE]  cannot  find  symbol  compiler  [FE]              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(OPTIONAL_TYPE),  type);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(OPTIONAL_TYPE),  type);	      NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE),    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	35	None	replace
396	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(ROOT_TYPE),  type);  [CE]  cannot  find  symbol  compiler  [FE]                IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(ROOT_TYPE),  type);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(ROOT_TYPE),  type);	      NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE),    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	35	None	replace
397	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  type,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                  IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  type,  resultEqualsValue);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  type,  resultEqualsValue);	      NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE),    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	35	None	replace
398	[BUG]  [BUGGY]  aughtException( "Node  cannot  be  refined. "  +  node.toStringTree());  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  aughtException( "Node  cannot  be  refined. "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	aughtException( "Node  cannot  be  refined. "  +  node.toStringTree());	  if(node!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    }    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
399	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getString());  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getString());  [CE]  unreachable  statement  [FE]    UnsupportedOperationException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getString());  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getString());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getString());    new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getString());	  	non-compiled	[CE]  unreachable  statement	39	None	add
400	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getString());  n   "  +  node.getString());  [CE]  unclosed  string  literal  [FE]      UnsupportedOperationException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getString());  n   "  +  node.getString());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getString());    n   "  +  node.getString());	  	non-compiled	[CE]  unclosed  string  literal	39	None	add
401	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getString());  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(qualifiedName,  origType);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]        UnsupportedOperationException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getString());  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(qualifiedName,  origType);  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getString());    boolean  resultEqualsValue  =  scope.inferQualifiedSlot(qualifiedName,  origType);	  	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	39	None	add
402	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getString());  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(qualifiedName,  origType,  type);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]          UnsupportedOperationException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getString());  boolean  resultEqualsValue  =  scope.inferQualifiedSlot(qualifiedName,  origType,  type);  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getString());    boolean  resultEqualsValue  =  scope.inferQualifiedSlot(qualifiedName,  origType,  type);	  	non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	39	None	add
403	[BUG]  [BUGGY]  JSType  node  =  scope.getJSType(type);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  JSType  node  =  scope.getJSType(type);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	JSType  node  =  scope.getJSType(type);	      JSType    node    =    node.getJSType();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	34	None	replace
404	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    scope.toStringTree());    	compilable	  [FE]  IllegalArgumentException  	38	1	replace
405	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.toStringTree());  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  cannot  be  refined. "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    scope.toStringTree());    	compilable	  [FE]  IllegalArgumentException  	38	1	replace
406	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    scope.toStringTree());    	compilable	  [FE]  IllegalArgumentException  	38	1	replace
407	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.toStringTree());  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    scope.toStringTree());    	compilable	  [FE]  IllegalArgumentException  	38	1	replace
408	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  scope.toStringTree());  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  scope.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  scope.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    scope.toStringTree());    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
409	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  same  type.   "  +  scope.toStringTree());  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  same  type.   "  +  scope.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  same  type.   "  +  scope.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    scope.toStringTree());    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
410	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  this);  [CE]  cannot  find  symbol  compiler  [FE]        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  this);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor(),  this);	      NodeTraversal.traverse(compiler,    node,    new    RestrictByTrueTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	26	None	replace
411	[BUG]  [BUGGY]  Node  node  =  scope.getTypeRegistry().getNativeType(UNKNOWN_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Node  node  =  scope.getTypeRegistry().getNativeType(UNKNOWN_TYPE);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getTypeRegistry().getNativeType(UNKNOWN_TYPE);	      Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	5	None	replace
412	[BUG]  [BUGGY]  Node  node  =  scope.getScope().getNativeType(UNKNOWN_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                  IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Node  node  =  scope.getScope().getNativeType(UNKNOWN_TYPE);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getScope().getNativeType(UNKNOWN_TYPE);	      Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	5	None	replace
413	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE)+  1;  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE)+  1;  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE)+  1;	      Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	5	None	replace
414	[BUG]  [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  DEFAULT_NODE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  DEFAULT_NODE);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE,  DEFAULT_NODE);	      Node    node    =    typeRegistry.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	5	None	replace
415	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  targetType);  [CE]  cannot  find  symbol  compiler  [FE]            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  targetType);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  targetType);	      NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE),    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	35	None	replace
416	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  typeRegistry);  [CE]  cannot  find  symbol  compiler  [FE]              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  typeRegistry);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  typeRegistry);	      NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE),    type);    	non-compiled	[CE]  cannot  find  symbol  compiler	35	None	replace
417	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.   "    +    node.toStringTree());    new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());	  	non-compiled	[CE]  unreachable  statement	13	None	add
418	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());  JSError.make(scope,  node,  NON_GLOBAL_TYPE,  type));  [CE]  [FE]      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.   "  +  node.toStringTree());  JSError.make(scope,  node,  NON_GLOBAL_TYPE,  type));  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.   "    +    node.toStringTree());    JSError.make(scope,  node,  NON_GLOBAL_TYPE,  type));	  	non-compiled	[CE]  	13	None	add
419	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());	  	non-compiled	[CE]  unreachable  statement	11	None	add
420	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  if(Node  cannot  be  refined.  n   "  +  node.toStringTree())  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  [CE]  [FE]      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  if(Node  cannot  be  refined.  n   "  +  node.toStringTree())  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    if(Node  cannot  be  refined.  n   "  +  node.toStringTree())  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree());  }	  	non-compiled	[CE]  	11	None	add
421	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  if(Node  cannot  be  refined.  n   "  +  node.toStringTree())  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree());  [CE]  [FE]        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.toStringTree());  if(Node  cannot  be  refined.  n   "  +  node.toStringTree())  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    if(Node  cannot  be  refined.  n   "  +  node.toStringTree())  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.toStringTree());	  	non-compiled	[CE]  	11	None	add
422	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.getLocalName());  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.getLocalName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.getLocalName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
423	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  is  defined  as  a  field  name. "  +  node.getLocalName());  [CE]  cannot  find  symbol  [FE]                      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  is  defined  as  a  field  name. "  +  node.getLocalName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  is  defined  as  a  field  name. "  +  node.getLocalName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
424	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node,  scope.getLocalName());  [CE]  cannot  find  symbol  [FE]                        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node,  scope.getLocalName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  can  be  refined. "  +  node,  scope.getLocalName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
425	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  origType,  getNativeType(UNKNOWN_TYPE));  [CE]  cannot  find  symbol  compiler  [FE]                IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  origType,  getNativeType(UNKNOWN_TYPE));  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  origType,  getNativeType(UNKNOWN_TYPE));	      NodeTraversal.traverse(compiler,    node,    getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  cannot  find  symbol  compiler	31	None	replace
426	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  type.toStringTree());  [CE]  not  a  statement  [FE]        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  type.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  type.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    type.toStringTree());    	non-compiled	[CE]  not  a  statement	37	None	replace
427	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  is  defined. "  +  type.toStringTree());  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  is  defined. "  +  type.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  is  defined. "  +  type.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    type.toStringTree());    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
428	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  same  type. "  +  type.toStringTree());  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  same  type. "  +  type.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  same  type. "  +  type.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    type.toStringTree());    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
429	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getName());  [CE]  not  a  statement  [FE]                IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.   "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getName());    	non-compiled	[CE]  not  a  statement	42	None	replace
430	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist:  node.getName() "  +  node.getName());  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist:  node.getName() "  +  node.getName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist:  node.getName() "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getName());    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
431	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  same  type.   "  +  node.getName());  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  same  type.   "  +  node.getName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  same  type.   "  +  node.getName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getName());    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
432	[BUG]  [BUGGY]  Node  node  =  scope.initializeChildNodes(node);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Node  node  =  scope.initializeChildNodes(node);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.initializeChildNodes(node);	      Node    node    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	29	None	replace
433	[BUG]  [BUGGY]  Node  node  =  scope.getParentNode();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Node  node  =  scope.getParentNode();  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.getParentNode();	      Node    node    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	29	None	replace
434	[BUG]  [BUGGY]  Node  node  =  scope.initialize(node);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]                IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Node  node  =  scope.initialize(node);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.initialize(node);	      Node    node    =    node.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	29	None	replace
435	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.toStringTree());  [CE]  not  a  statement  [FE]              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	41	None	replace
436	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree() "  +  node.toStringTree());  [CE]  not  a  statement  [FE]                IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree() "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree() "  +  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	41	None	replace
437	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  a  string  node. "  +  node.toStringTree());  [CE]  not  a  statement  [FE]                  IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  a  string  node. "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  a  string  node. "  +  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	41	None	replace
438	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.toStringTree());  [CE]  not  a  statement  [FE]                    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  does  not  exist: "  +  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	41	None	replace
439	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(). "  +  node.toStringTree());  [CE]  not  a  statement  [FE]                      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(). "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(). "  +  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	41	None	replace
440	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type. "  +  node.toStringTree());  [CE]  not  a  statement  [FE]                        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type. "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type. "  +  node.toStringTree());	  Throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  not  a  statement	41	None	replace
441	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  attributeName,  origType,  type);  break;  [CE]  cannot  find  symbol  attributeName  [FE]          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferQualifiedSlot(node,  attributeName,  origType,  type);  break;  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  attributeName,  origType,  type);  break;	      scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    break;    	non-compiled	[CE]  cannot  find  symbol  attributeName	2	None	replace
442	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  inputName,  origType,  type);  break;  [CE]  cannot  find  symbol  inputName  [FE]            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferQualifiedSlot(node,  inputName,  origType,  type);  break;  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  inputName,  origType,  type);  break;	      scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    break;    	non-compiled	[CE]  cannot  find  symbol  inputName	2	None	replace
443	[BUG]  [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  type,  outcomeEqualsValue);  [CE]  cannot  find  symbol  outcomeEqualsValue  [FE]                      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferSlot(node,  qualifiedName,  origType,  type,  outcomeEqualsValue);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(node,  qualifiedName,  origType,  type,  outcomeEqualsValue);	      scope.inferSlot(node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol  outcomeEqualsValue	8	None	replace
444	[BUG]  [BUGGY]  scope.inferSlot(ode,  qualifiedName,  origType,  type);  [CE]  cannot  find  symbol  ode  [FE]                        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferSlot(ode,  qualifiedName,  origType,  type);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferSlot(ode,  qualifiedName,  origType,  type);	      scope.inferSlot(node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol  ode	8	None	replace
445	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  origType,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  origType,  resultEqualsValue);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  origType,  resultEqualsValue);	      NodeTraversal.traverse(compiler,    node,    type,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	4	None	replace
446	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  sourceName,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]                IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  sourceName,  resultEqualsValue);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  sourceName,  resultEqualsValue);	      NodeTraversal.traverse(compiler,    node,    type,    resultEqualsValue);    	non-compiled	[CE]  cannot  find  symbol  compiler	4	None	replace
447	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getQualifiedName());  if(Node  cannot  be  refined.  n   "  +  node.getQualifiedName())  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.getQualifiedName());  }  [CE]  [FE]    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getQualifiedName());  if(Node  cannot  be  refined.  n   "  +  node.getQualifiedName())  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.getQualifiedName());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getQualifiedName());    if(Node  cannot  be  refined.  n   "  +  node.getQualifiedName())  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.getQualifiedName());  }	  	non-compiled	[CE]  	20	None	add
448	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getQualifiedName());  if(Node  cannot  be  refined.  n   "  +  node.getQualifiedName())  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.getQualifiedName());  [CE]  [FE]      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getQualifiedName());  if(Node  cannot  be  refined.  n   "  +  node.getQualifiedName())  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.getQualifiedName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getQualifiedName());    if(Node  cannot  be  refined.  n   "  +  node.getQualifiedName())  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n   "  +  node.getQualifiedName());	  	non-compiled	[CE]  	20	None	add
449	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getQualifiedName());  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getQualifiedName());  [CE]  unreachable  statement  [FE]        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getQualifiedName());  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getQualifiedName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getQualifiedName());    new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getQualifiedName());	  	non-compiled	[CE]  unreachable  statement	20	None	add
450	[BUG]  [BUGGY]  scope.inferQualifiedSlot(node,  attributeName,  origType,  type);  [CE]  cannot  find  symbol  attributeName  [FE]        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  scope.inferQualifiedSlot(node,  attributeName,  origType,  type);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	scope.inferQualifiedSlot(node,  attributeName,  origType,  type);	      scope.inferQualifiedSlot(node,    qualifiedName,    origType,    type);    	non-compiled	[CE]  cannot  find  symbol  attributeName	1	None	replace
451	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  OPEN_TYPE,  type,  false);  [CE]  cannot  find  symbol  compiler  [FE]                        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  OPEN_TYPE,  type,  false);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  OPEN_TYPE,  type,  false);	      NodeTraversal.traverse(compiler,    node,    type,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	9	None	replace
452	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getLineno());  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getLineno());  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getLineno());  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getLineno());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLineno());    new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getLineno());	  	non-compiled	[CE]  unreachable  statement	17	None	add
453	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getLineno());  Throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getLineno());  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getLineno());  Throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getLineno());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLineno());    Throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getLineno());	  	non-compiled	[CE]  not  a  statement	17	None	add
454	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getLineno());  n   "  +  node.getLineno());  [CE]  unclosed  string  literal  [FE]        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  n   "  +  node.getLineno());  n   "  +  node.getLineno());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLineno());    n   "  +  node.getLineno());	  	non-compiled	[CE]  unclosed  string  literal	17	None	add
455	[BUG]  [BUGGY]  DebugLog.warning(type, "Node  cannot  be  refined. "  +  node.toStringTree());  [CE]  cannot  find  symbol  DebugLog  [FE]              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  DebugLog.warning(type, "Node  cannot  be  refined. "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning(type, "Node  cannot  be  refined. "  +  node.toStringTree());	  DebugLog.warning(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol  DebugLog	25	None	replace
456	[BUG]  [BUGGY]  DebugLog.warning(scope,  qualifiedName  + "  cannot  be  refined. "  +  node.toStringTree());  [CE]  cannot  find  symbol  DebugLog  [FE]                IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  DebugLog.warning(scope,  qualifiedName  + "  cannot  be  refined. "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning(scope,  qualifiedName  + "  cannot  be  refined. "  +  node.toStringTree());	  DebugLog.warning(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	non-compiled	[CE]  cannot  find  symbol  DebugLog	25	None	replace
457	[BUG]  [BUGGY]  parent  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  parent  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	parent  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }	  if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    }    	non-compiled	[CE]  not  a  statement	16	None	replace
458	[BUG]  [BUGGY]  parent  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree());  }  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  parent  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree());  }  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	parent  ==  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree());  }	  if(type!=    null)    {    throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    }    	non-compiled	[CE]  not  a  statement	16	None	replace
459	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  has  been  refined. "  +  node.getString());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  has  been  refined. "  +  node.getString());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getString());    	compilable	  [FE]  UnsupportedOperationException  	40	1	replace
460	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  has  been  refined. "  +  node.getString());  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  has  been  refined. "  +  node.getString());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  has  been  refined. "  +  node.getString());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getString());    	compilable	  [FE]  UnsupportedOperationException  	40	1	replace
461	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getString());  [CE]  not  a  statement  [FE]      UnsupportedOperationException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getString());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.getString());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getString());    	non-compiled	[CE]  not  a  statement	40	None	replace
462	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.getString());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.getString());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getString());    	compilable	  [FE]  UnsupportedOperationException  	40	1	replace
463	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.getString());  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.getString());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.getString());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getString());    	compilable	  [FE]  UnsupportedOperationException  	40	1	replace
464	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getString());  [CE]  unclosed  string  literal  [FE]          UnsupportedOperationException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getString());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getString());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getString());    	non-compiled	[CE]  unclosed  string  literal	40	None	replace
465	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]            UnsupportedOperationException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [ "  +  node.getString());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [ "  +  node.getString());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getString());    	compilable	  [FE]  UnsupportedOperationException  	40	1	replace
466	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [ "  +  node.getString());  [FE]  UnsupportedOperationException  [FE]            UnsupportedOperationException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [ "  +  node.getString());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  type  must  be  in  the  range  [ "  +  node.getString());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getString());    	compilable	  [FE]  UnsupportedOperationException  	40	1	replace
467	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]              UnsupportedOperationException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getString(), "  +  node.getString());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getString(), "  +  node.getString());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getString());    	compilable	  [FE]  UnsupportedOperationException  	40	1	replace
468	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getString(), "  +  node.getString());  [FE]  UnsupportedOperationException  [FE]              UnsupportedOperationException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getString(), "  +  node.getString());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getString(), "  +  node.getString());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getString());    	compilable	  [FE]  UnsupportedOperationException  	40	1	replace
469	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  has  been  refined. "  +  node.getMessage());  [CE]  cannot  find  symbol  [FE]                        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  has  been  refined. "  +  node.getMessage());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  has  been  refined. "  +  node.getMessage());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getMessage());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
470	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  a  string  node. "  +  node.getMessage());  [CE]  cannot  find  symbol  [FE]                          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  a  string  node. "  +  node.getMessage());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  a  string  node. "  +  node.getMessage());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getMessage());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
471	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  at  least  one  of  the  following  names. "  +  node.getMessage());  [CE]  cannot  find  symbol  [FE]                            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  at  least  one  of  the  following  names. "  +  node.getMessage());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  at  least  one  of  the  following  names. "  +  node.getMessage());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getMessage());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
472	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.getLineno());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.getLineno());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLineno());    	compilable	  [FE]  IllegalArgumentException  	18	1	replace
473	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.getLineno());  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.getLineno());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  for  type: "  +  node.getLineno());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLineno());    	compilable	  [FE]  IllegalArgumentException  	18	1	replace
474	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.getLineno()  [FE]      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getLineno(), "  +  node.getCharno());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getLineno(), "  +  node.getCharno());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLineno());    	compilable	  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.getLineno()  	18	1	replace
475	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getLineno(), "  +  node.getCharno());  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.getLineno()  [FE]      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getLineno(), "  +  node.getCharno());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getLineno(), "  +  node.getCharno());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLineno());    	compilable	  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.getLineno()  	18	1	replace
476	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.getLineno()  [FE]        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getLineno(), "  +  node.getLineno());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getLineno(), "  +  node.getLineno());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLineno());    	compilable	  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.getLineno()  	18	1	replace
477	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getLineno(), "  +  node.getLineno());  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.getLineno()  [FE]        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getLineno(), "  +  node.getLineno());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getLineno(), "  +  node.getLineno());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLineno());    	compilable	  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.getLineno()  	18	1	replace
478	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.getLineno());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.getLineno());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLineno());    	compilable	  [FE]  IllegalArgumentException  	18	1	replace
479	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.getLineno());  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.getLineno());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.getLineno());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getLineno());    	compilable	  [FE]  IllegalArgumentException  	18	1	replace
480	[BUG]  [BUGGY]  Node  node  =  scope.initializeChildren();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Node  node  =  scope.initializeChildren();  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Node  node  =  scope.initializeChildren();	      Node    node    =    scope.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	36	None	replace
481	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	Preconditions.checkState(node.getType()  ==  Token.NAME);	      Preconditions.checkNotNull(type);    	compilable	  [FE]  IllegalStateException  	28	1	replace
482	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  [FE]  IllegalStateException  [FE]      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.NAME);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(node.getType()  ==  Token.NAME);	      Preconditions.checkNotNull(type);    	compilable	  [FE]  IllegalStateException  	28	1	replace
483	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	Preconditions.checkState(node.getType()  ==  Token.FUNCTION);	      Preconditions.checkNotNull(type);    	compilable	  [FE]  IllegalStateException  	28	1	replace
484	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  [FE]  IllegalStateException  [FE]        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FUNCTION);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Preconditions.checkState(node.getType()  ==  Token.FUNCTION);	      Preconditions.checkNotNull(type);    	compilable	  [FE]  IllegalStateException  	28	1	replace
485	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  thisType,  new  RestrictByTrueTypeOfResultVisitor());  [CE]  cannot  find  symbol  compiler  [FE]              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  thisType,  new  RestrictByTrueTypeOfResultVisitor());  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  thisType,  new  RestrictByTrueTypeOfResultVisitor());	      NodeTraversal.traverse(compiler,    node,    type,    new    RestrictByTrueTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	30	None	replace
486	[BUG]  [BUGGY]      Preconditions.checkNotNull(type);  Preconditions.checkArgument(type  ==  null? "Node  cannot  be  refined.  n "  +  node.toStringTree());  [CE]  :  expected  [FE]    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]      Preconditions.checkNotNull(type);  Preconditions.checkArgument(type  ==  null? "Node  cannot  be  refined.  n "  +  node.toStringTree());  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	        Preconditions.checkNotNull(type);    Preconditions.checkArgument(type  ==  null? "Node  cannot  be  refined.  n "  +  node.toStringTree());	  	non-compiled	[CE]  :  expected	27	None	add
487	[BUG]  [BUGGY]      Preconditions.checkNotNull(type);  Preconditions.checkArgument(type!=  null? "Node  cannot  be  refined. "  :  node.toStringTree());  [CE]  no  suitable  method  found  for  checkArgument(String)  [FE]      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]      Preconditions.checkNotNull(type);  Preconditions.checkArgument(type!=  null? "Node  cannot  be  refined. "  :  node.toStringTree());  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	        Preconditions.checkNotNull(type);    Preconditions.checkArgument(type!=  null? "Node  cannot  be  refined. "  :  node.toStringTree());	  	non-compiled	[CE]  no  suitable  method  found  for  checkArgument(String)	27	None	add
488	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]      Preconditions.checkNotNull(type);  Preconditions.checkArgument(type  ==  null);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	        Preconditions.checkNotNull(type);    Preconditions.checkArgument(type  ==  null);	  	compilable	  [FE]  IllegalArgumentException  	27	1	add
489	[BUG]  [BUGGY]      Preconditions.checkNotNull(type);  Preconditions.checkArgument(type  ==  null);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]      Preconditions.checkNotNull(type);  Preconditions.checkArgument(type  ==  null);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	        Preconditions.checkNotNull(type);    Preconditions.checkArgument(type  ==  null);	  	compilable	  [FE]  IllegalArgumentException  	27	1	add
490	[BUG]  [BUGGY]      Preconditions.checkNotNull(type);  Preconditions.checkArgument(type!=  null? "Node  type  cannot  be  refined.  n "  +  node.toStringTree());  [CE]  :  expected  [FE]          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]      Preconditions.checkNotNull(type);  Preconditions.checkArgument(type!=  null? "Node  type  cannot  be  refined.  n "  +  node.toStringTree());  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	        Preconditions.checkNotNull(type);    Preconditions.checkArgument(type!=  null? "Node  type  cannot  be  refined.  n "  +  node.toStringTree());	  	non-compiled	[CE]  :  expected	27	None	add
491	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  new  FlowScope());  [CE]  cannot  find  symbol  compiler  [FE]                    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  new  FlowScope());  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  new  FlowScope());	      NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	7	None	replace
492	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  target);  [CE]  cannot  find  symbol  compiler  [FE]                      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  target);  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  this,  target);	      NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	7	None	replace
493	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByTreeTypeOfResultVisitor());  [CE]  cannot  find  symbol  compiler  [FE]                  IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RestrictByTreeTypeOfResultVisitor());  [BUGGY]    throw  new  IllegalArgumentException(   "Node  cannot  be  refined.  \n   "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	NodeTraversal.traverse(compiler,  node,  new  RestrictByTreeTypeOfResultVisitor());	      NodeTraversal.traverse(compiler,    node,    new    RestrictByOneTypeOfResultVisitor());    	non-compiled	[CE]  cannot  find  symbol  compiler	32	None	replace
494	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree() "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree() "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	compilable	  [FE]  IllegalArgumentException  	12	1	replace
495	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree() "  +  node.toStringTree());  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree() "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree() "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	compilable	  [FE]  IllegalArgumentException  	12	1	replace
496	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.toStringTree()  [FE]      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(), "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(), "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	compilable	  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.toStringTree()  	12	1	replace
497	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(), "  +  node.toStringTree());  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.toStringTree()  [FE]      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(), "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(), "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	compilable	  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.toStringTree()  	12	1	replace
498	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	compilable	  [FE]  IllegalArgumentException  	12	1	replace
499	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.toStringTree());  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  type   "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	compilable	  [FE]  IllegalArgumentException  	12	1	replace
500	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(). "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(). "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	compilable	  [FE]  IllegalArgumentException  	12	1	replace
501	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(). "  +  node.toStringTree());  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(). "  +  node.toStringTree());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.toStringTree(). "  +  node.toStringTree());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.toStringTree());    	compilable	  [FE]  IllegalArgumentException  	12	1	replace
502	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name   "  +  node.getQualifiedName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name   "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	21	1	replace
503	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name   "  +  node.getQualifiedName());  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name   "  +  node.getQualifiedName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name   "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	21	1	replace
504	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  has  been  refined. "  +  node.getQualifiedName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  has  been  refined. "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	21	1	replace
505	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  has  been  refined. "  +  node.getQualifiedName());  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  has  been  refined. "  +  node.getQualifiedName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  has  been  refined. "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	21	1	replace
506	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()  [FE]        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName(), "  +  node.getQualifiedName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName(), "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getQualifiedName());    	compilable	  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()  	21	1	replace
507	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName(), "  +  node.getQualifiedName());  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()  [FE]        IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName(), "  +  node.getQualifiedName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName(), "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getQualifiedName());    	compilable	  [FE]  java.lang.IllegalArgumentException:  Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()  	21	1	replace
508	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()   "  +  node.getQualifiedName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()   "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	21	1	replace
509	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()   "  +  node.getQualifiedName());  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()   "  +  node.getQualifiedName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  node.getQualifiedName()   "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	21	1	replace
510	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  range  [ "  +  node.getQualifiedName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  range  [ "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	21	1	replace
511	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  range  [ "  +  node.getQualifiedName());  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  range  [ "  +  node.getQualifiedName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  must  be  in  the  range  [ "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	21	1	replace
512	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name  = "  +  node.getQualifiedName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name  = "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	21	1	replace
513	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name  = "  +  node.getQualifiedName());  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]    Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:    [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name  = "  +  node.getQualifiedName());  [BUGGY]    node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  Node  defined  with  qualified  name  = "  +  node.getQualifiedName());	  throw    new    IllegalArgumentException(   "Node    cannot    be    refined.    n   "    +    node.getQualifiedName());    	compilable	  [FE]  IllegalArgumentException  	21	1	replace
