bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [CE]  variable  qualifiedName  might  not  have  been  initialized  [FE]    IllegalArgumentException  [CONTEXT]  Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:  [BUGGY]    scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  \n "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	    scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);		non-compiled	[CE]  variable  qualifiedName  might  not  have  been  initialized	2	None	add
2	[BUG]  [BUGGY]    scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;  [CE]  variable  qualifiedName  might  not  have  been  initialized  [FE]      IllegalArgumentException  [CONTEXT]  Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:  [BUGGY]    scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  \n "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	    scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;		non-compiled	[CE]  variable  qualifiedName  might  not  have  been  initialized	2	None	add
3	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  node,  type);  [CE]  cannot  find  symbol  compiler  [FE]        IllegalArgumentException  [CONTEXT]  Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:  [BUGGY]    NodeTraversal.traverse(compiler,  node,  type);  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  \n "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	    NodeTraversal.traverse(compiler,  node,  type);		non-compiled	[CE]  cannot  find  symbol  compiler	2	None	add
4	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  node,  type,  resultEqualsValue);  [CE]  cannot  find  symbol  compiler  [FE]          IllegalArgumentException  [CONTEXT]  Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:  [BUGGY]    NodeTraversal.traverse(compiler,  node,  type,  resultEqualsValue);  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  \n "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	    NodeTraversal.traverse(compiler,  node,  type,  resultEqualsValue);		non-compiled	[CE]  cannot  find  symbol  compiler	2	None	add
5	[BUG]  [BUGGY]    Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]            IllegalArgumentException  [CONTEXT]  Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:  [BUGGY]    Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  \n "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	    Node  node  =  typeRegistry.getNativeType(UNKNOWN_TYPE);		non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	2	None	add
6	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  node,  type,  this);  [CE]  cannot  find  symbol  compiler  [FE]              IllegalArgumentException  [CONTEXT]  Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:  [BUGGY]    NodeTraversal.traverse(compiler,  node,  type,  this);  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  \n "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	    NodeTraversal.traverse(compiler,  node,  type,  this);		non-compiled	[CE]  cannot  find  symbol  compiler	2	None	add
7	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  node,  this);  [CE]  cannot  find  symbol  compiler  [FE]                IllegalArgumentException  [CONTEXT]  Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:  [BUGGY]    NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  \n "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	    NodeTraversal.traverse(compiler,  node,  this);		non-compiled	[CE]  cannot  find  symbol  compiler	2	None	add
8	[BUG]  [BUGGY]    scope.inferSlot(node,  qualifiedName,  origType,  type);  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException  [CONTEXT]  Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:  [BUGGY]    scope.inferSlot(node,  qualifiedName,  origType,  type);  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  \n "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	    scope.inferSlot(node,  qualifiedName,  origType,  type);		non-compiled	[CE]  cannot  find  symbol	2	None	add
9	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  node,  type,  false);  [CE]  cannot  find  symbol  compiler  [FE]                    IllegalArgumentException  [CONTEXT]  Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:  [BUGGY]    NodeTraversal.traverse(compiler,  node,  type,  false);  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  \n "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	    NodeTraversal.traverse(compiler,  node,  type,  false);		non-compiled	[CE]  cannot  find  symbol  compiler	2	None	add
10	[BUG]  [BUGGY]    scope.inferQualifiedSlot(node,  qualifiedName,  origType);  [CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;  [FE]                      IllegalArgumentException  [CONTEXT]  Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:  [BUGGY]    scope.inferQualifiedSlot(node,  qualifiedName,  origType);  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  \n "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	    scope.inferQualifiedSlot(node,  qualifiedName,  origType);		non-compiled	[CE]  method  inferQualifiedSlot  in  interface  FlowScope  cannot  be  applied  to  given  types;	2	None	add
11	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException  [CONTEXT]  Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  [BUGGY]  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  \n "  +  node.toStringTree());  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
12	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException  [CONTEXT]  Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  [BUGGY]  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  \n "  +  node.toStringTree());  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
13	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException  [CONTEXT]  Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree());  [BUGGY]  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree());	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  \n "  +  node.toStringTree());  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
14	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree());  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException  [CONTEXT]  Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree());  [BUGGY]  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined. "  +  node.toStringTree());	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  \n "  +  node.toStringTree());  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
15	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException  [CONTEXT]  Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  [BUGGY]  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  \n "  +  node.toStringTree());  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
16	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException  [CONTEXT]  Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  [BUGGY]  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(type!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  \n "  +  node.toStringTree());  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
17	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException  [CONTEXT]  Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.getLineno());  [BUGGY]  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.getLineno());	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  \n "  +  node.toStringTree());  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
18	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.getLineno());  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException  [CONTEXT]  Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.getLineno());  [BUGGY]  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.getLineno());	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  \n "  +  node.toStringTree());  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
19	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.getLocalName());  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException  [CONTEXT]  Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.getLocalName());  [BUGGY]  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.getLocalName());	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  \n "  +  node.toStringTree());  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
20	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException  [CONTEXT]  Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.getQualifiedName());  [BUGGY]  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.getQualifiedName());	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  \n "  +  node.toStringTree());  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
21	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.getQualifiedName());  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException  [CONTEXT]  Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.getQualifiedName());  [BUGGY]  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.getQualifiedName());	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  \n "  +  node.toStringTree());  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
22	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.getMessage());  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException  [CONTEXT]  Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.getMessage());  [BUGGY]  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.getMessage());	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  \n "  +  node.toStringTree());  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
23	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException  [CONTEXT]  Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:  [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  [BUGGY]  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  \n "  +  node.toStringTree());  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
24	[BUG]  [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException  [CONTEXT]  Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:  [BUGGY]  if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }  [BUGGY]  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	if(node!=  null)  {  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  }	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  \n "  +  node.toStringTree());  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
25	[BUG]  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined.  n "  +  node.toStringTree());  [CE]  cannot  find  symbol  DebugLog  [FE]          IllegalArgumentException  [CONTEXT]  Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:  [BUGGY]  DebugLog.warning( "Node  cannot  be  refined.  n "  +  node.toStringTree());  [BUGGY]  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	DebugLog.warning( "Node  cannot  be  refined.  n "  +  node.toStringTree());	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  \n "  +  node.toStringTree());  	non-compiled	[CE]  cannot  find  symbol  DebugLog	1	None	replace
26	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor());  [CE]  cannot  find  symbol  compiler  [FE]    IllegalArgumentException  [CONTEXT]  Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:  [BUGGY]    NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor());  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  \n "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	    NodeTraversal.traverse(compiler,  node,  new  RestrictByTrueTypeOfResultVisitor());		non-compiled	[CE]  cannot  find  symbol  compiler	2	None	add
27	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException  [CONTEXT]  Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:  [BUGGY]    Preconditions.checkNotNull(type);  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  \n "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	    Preconditions.checkNotNull(type);		compilable	  [FE]  IllegalArgumentException  	2	1	add
28	[BUG]  [BUGGY]    Preconditions.checkNotNull(type);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException  [CONTEXT]  Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:  [BUGGY]    Preconditions.checkNotNull(type);  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  \n "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	    Preconditions.checkNotNull(type);		compilable	  [FE]  IllegalArgumentException  	2	1	add
29	[BUG]  [BUGGY]    Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]        IllegalArgumentException  [CONTEXT]  Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:  [BUGGY]    Node  node  =  node.getFirstChild();  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  \n "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	    Node  node  =  node.getFirstChild();		non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	2	None	add
30	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  node,  type,  new  RestrictByTrueTypeOfResultVisitor());  [CE]  cannot  find  symbol  compiler  [FE]          IllegalArgumentException  [CONTEXT]  Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:  [BUGGY]    NodeTraversal.traverse(compiler,  node,  type,  new  RestrictByTrueTypeOfResultVisitor());  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  \n "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	    NodeTraversal.traverse(compiler,  node,  type,  new  RestrictByTrueTypeOfResultVisitor());		non-compiled	[CE]  cannot  find  symbol  compiler	2	None	add
31	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE));  [CE]  cannot  find  symbol  compiler  [FE]            IllegalArgumentException  [CONTEXT]  Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:  [BUGGY]    NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE));  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  \n "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	    NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE));		non-compiled	[CE]  cannot  find  symbol  compiler	2	None	add
32	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  node,  new  RestrictByOneTypeOfResultVisitor());  [CE]  cannot  find  symbol  compiler  [FE]              IllegalArgumentException  [CONTEXT]  Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:  [BUGGY]    NodeTraversal.traverse(compiler,  node,  new  RestrictByOneTypeOfResultVisitor());  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  \n "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	    NodeTraversal.traverse(compiler,  node,  new  RestrictByOneTypeOfResultVisitor());		non-compiled	[CE]  cannot  find  symbol  compiler	2	None	add
33	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  this);  [CE]  cannot  find  symbol  compiler  [FE]    IllegalArgumentException  [CONTEXT]  Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:  [BUGGY]    NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  this);  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  \n "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	    NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  this);		non-compiled	[CE]  cannot  find  symbol  compiler	2	None	add
34	[BUG]  [BUGGY]    JSType  node  =  node.getJSType();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]      IllegalArgumentException  [CONTEXT]  Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:  [BUGGY]    JSType  node  =  node.getJSType();  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  \n "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	    JSType  node  =  node.getJSType();		non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	2	None	add
35	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  type);  [CE]  cannot  find  symbol  compiler  [FE]        IllegalArgumentException  [CONTEXT]  Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:  [BUGGY]    NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  type);  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  \n "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	    NodeTraversal.traverse(compiler,  node,  getNativeType(UNKNOWN_TYPE),  type);		non-compiled	[CE]  cannot  find  symbol  compiler	2	None	add
36	[BUG]  [BUGGY]    Node  node  =  scope.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)  [FE]          IllegalArgumentException  [CONTEXT]  Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:  [BUGGY]    Node  node  =  scope.getFirstChild();  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  \n "  +    node.toStringTree());  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	    Node  node  =  scope.getFirstChild();		non-compiled	[CE]  variable  node  is  already  defined  in  method  declareNameInScope(FlowScope,Node,JSType)	2	None	add
37	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  type.toStringTree());  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException  [CONTEXT]  Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  type.toStringTree());  [BUGGY]  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  type.toStringTree());	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  \n "  +  node.toStringTree());  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
38	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  scope.toStringTree());  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException  [CONTEXT]  Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  scope.toStringTree());  [BUGGY]  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  scope.toStringTree());	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  \n "  +  node.toStringTree());  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
39	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        IllegalArgumentException  [CONTEXT]  Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.getString());  [BUGGY]  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.getString());	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  \n "  +  node.toStringTree());  	compilable	  [FE]  UnsupportedOperationException  	1	1	replace
40	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.getString());  [FE]  UnsupportedOperationException  [FE]        IllegalArgumentException  [CONTEXT]  Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.getString());  [BUGGY]  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.getString());	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  \n "  +  node.toStringTree());  	compilable	  [FE]  UnsupportedOperationException  	1	1	replace
41	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  [CE]  not  a  statement  [FE]          IllegalArgumentException  [CONTEXT]  Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:  [BUGGY]  Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());  [BUGGY]  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	Throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.toStringTree());	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  \n "  +  node.toStringTree());  	non-compiled	[CE]  not  a  statement	1	None	replace
42	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.getName());  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException  [CONTEXT]  Preconditions.checkNotNull(qualifiedName);  JSType  origType  =  node.getJSType();  origType  =  origType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  origType;  scope.inferQualifiedSlot(node,  qualifiedName,  origType,  type);  break;    default:  [BUGGY]  throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.getName());  [BUGGY]  node.toStringTree());  }  }  [CLASS]  ChainableReverseAbstractInterpreter  1  2  RestrictByTypeOfResultVisitor  RestrictByTrueTypeOfResultVisitor  RestrictByFalseTypeOfResultVisitor  RestrictByOneTypeOfResultVisitor  [METHOD]  declareNameInScope  [RETURN_TYPE]  void  FlowScope  scope  Node  node  JSType  type  [VARIABLES]  JSTypeRegistry  typeRegistry  boolean  outcome  resultEqualsValue  JSType  origType  type  Visitor  restrictNullVisitor  restrictUndefinedVisitor  ChainableReverseAbstractInterpreter  firstLink  lastLink  nextLink  CodingConvention  convention  Node  node  String  qualifiedName  value  FlowScope  scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  n "  +  node.getName());	throw  new  IllegalArgumentException( "Node  cannot  be  refined.  \n "  +  node.toStringTree());  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
