bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree()); [FE] IllegalArgumentException [CONTEXT] Preconditions.checkNotNull(qualifiedName); JSType origType = node.getJSType(); origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType; scope.inferQualifiedSlot(node, qualifiedName, origType, type); break;   default: [BUGGY] throw new IllegalArgumentException("Node cannot be refined. \n" +   node.toStringTree()); [BUGGY] node.toStringTree()); } } [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor [METHOD] declareNameInScope [RETURN_TYPE] void  FlowScope scope Node node JSType type [VARIABLES] JSTypeRegistry typeRegistry boolean outcome resultEqualsValue JSType origType type Visitor restrictNullVisitor restrictUndefinedVisitor ChainableReverseAbstractInterpreter firstLink lastLink nextLink CodingConvention convention Node node String qualifiedName value FlowScope scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	replace	
2	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] Preconditions.checkNotNull(qualifiedName); JSType origType = node.getJSType(); origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType; scope.inferQualifiedSlot(node, qualifiedName, origType, type); break;   default: [BUGGY] [BUGGY] throw new IllegalArgumentException("Node cannot be refined. \n" +   node.toStringTree()); node.toStringTree()); } } [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor [METHOD] declareNameInScope [RETURN_TYPE] void  FlowScope scope Node node JSType type [VARIABLES] JSTypeRegistry typeRegistry boolean outcome resultEqualsValue JSType origType type Visitor restrictNullVisitor restrictUndefinedVisitor ChainableReverseAbstractInterpreter firstLink lastLink nextLink CodingConvention convention Node node String qualifiedName value FlowScope scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	1.0	175	176	1	add	
3	[BUG] [BUGGY] return typeRegistry.getNativeType(typeId); [FE] IllegalArgumentException [CONTEXT] JSType getNativeType(JSTypeNative typeId) { [BUGGY] return typeRegistry.getNativeType(typeId); [BUGGY] } [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor [METHOD] getNativeType [RETURN_TYPE] JSType  JSTypeNative typeId [VARIABLES] JSTypeRegistry typeRegistry boolean outcome resultEqualsValue Visitor restrictNullVisitor restrictUndefinedVisitor ChainableReverseAbstractInterpreter firstLink lastLink nextLink CodingConvention convention String qualifiedName result value JSTypeNative typeId  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	0.30151134457776363	680	680	1	replace	
4	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] JSType getNativeType(JSTypeNative typeId) { [BUGGY] [BUGGY] return typeRegistry.getNativeType(typeId); } [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor [METHOD] getNativeType [RETURN_TYPE] JSType  JSTypeNative typeId [VARIABLES] JSTypeRegistry typeRegistry boolean outcome resultEqualsValue Visitor restrictNullVisitor restrictUndefinedVisitor ChainableReverseAbstractInterpreter firstLink lastLink nextLink CodingConvention convention String qualifiedName result value JSTypeNative typeId  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	0.30151134457776363	680	680	1	add	
5	[BUG] [BUGGY] return null; [FE] IllegalArgumentException [CONTEXT] propVarType = propVar.getType(); } if (propVarType == null) { propVarType = node.getJSType(); } if (propVarType == null) { propVarType = getNativeType(UNKNOWN_TYPE); } return propVarType; } [BUGGY] return null; [BUGGY] } [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor [METHOD] getTypeIfRefinable [RETURN_TYPE] JSType  Node node FlowScope scope [VARIABLES] JSTypeRegistry typeRegistry StaticSlot nameVar propVar boolean outcome resultEqualsValue JSType nameVarType propVarType Visitor restrictNullVisitor restrictUndefinedVisitor ChainableReverseAbstractInterpreter firstLink lastLink nextLink CodingConvention convention Node node String qualifiedName value FlowScope scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	0.25	149	149	1	replace	
6	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] propVarType = propVar.getType(); } if (propVarType == null) { propVarType = node.getJSType(); } if (propVarType == null) { propVarType = getNativeType(UNKNOWN_TYPE); } return propVarType; } [BUGGY] [BUGGY] return null; } [CLASS] ChainableReverseAbstractInterpreter 1 2 RestrictByTypeOfResultVisitor RestrictByTrueTypeOfResultVisitor RestrictByFalseTypeOfResultVisitor RestrictByOneTypeOfResultVisitor [METHOD] getTypeIfRefinable [RETURN_TYPE] JSType  Node node FlowScope scope [VARIABLES] JSTypeRegistry typeRegistry StaticSlot nameVar propVar boolean outcome resultEqualsValue JSType nameVarType propVarType Visitor restrictNullVisitor restrictUndefinedVisitor ChainableReverseAbstractInterpreter firstLink lastLink nextLink CodingConvention convention Node node String qualifiedName value FlowScope scope  	projects/Closure19/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java	0.25	149	149	1	add	
