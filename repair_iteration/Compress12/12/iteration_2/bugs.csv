bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  byte[]  headerBuf  =  getRecord();  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  byte[]  headerBuf  =  getRecord();  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	byte[]  headerBuf  =  getRecord();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
2	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
3	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
4	[BUG]  [BUGGY]  if(headerBuf.length()  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf.length()  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length()  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
5	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
6	[BUG]  [BUGGY]  if(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
7	[BUG]  [BUGGY]  if(headerBuf.length()  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf.length()  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length()  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
8	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf!=  null  &&  hasHitEOF)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  hasHitEOF)  {	  if(hasHitEOF    &&    headerBuf!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
9	[BUG]  [BUGGY]  if(headerBuf  ==  null  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf  ==  null  &&  hasHitEOF)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  &&  hasHitEOF)  {	  if(hasHitEOF    &&    headerBuf!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
10	[BUG]  [BUGGY]  if(hasHitEOF  &&  headerBuf  ==  null)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(hasHitEOF  &&  headerBuf  ==  null)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(hasHitEOF  &&  headerBuf  ==  null)  {	  if(hasHitEOF    &&    headerBuf!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
11	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf!=  null  ||  hasHitEOF)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  ||  hasHitEOF)  {	  if(hasHitEOF    &&    headerBuf!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
12	[BUG]  [BUGGY]  if(!hasHitEOF  &&  headerBuf!=  null)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(!hasHitEOF  &&  headerBuf!=  null)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(!hasHitEOF  &&  headerBuf!=  null)  {	  if(hasHitEOF    &&    headerBuf!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
13	[BUG]  [BUGGY]  if(!hasHitEOF  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(!hasHitEOF  &&  headerBuf.length  >  0)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(!hasHitEOF  &&  headerBuf.length  >  0)  {	  if(!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
14	[BUG]  [BUGGY]  if(!hasHitEOF  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(!hasHitEOF  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(!hasHitEOF  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
15	[BUG]  [BUGGY]  if(!hasHitEOF  &&  headerBuf.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(!hasHitEOF  &&  headerBuf.length()  >  0)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(!hasHitEOF  &&  headerBuf.length()  >  0)  {	  if(!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
16	[BUG]  [BUGGY]  if(!hasHitEOF  &&  headerBuf.charAt(headerBuf.length  -  1)!=  'n')  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(!hasHitEOF  &&  headerBuf.charAt(headerBuf.length  -  1)!=  'n')  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(!hasHitEOF  &&  headerBuf.charAt(headerBuf.length  -  1)!=  'n')  {	  if(!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
17	[BUG]  [BUGGY]  if(!hasHitEOF  &&  headerBuf.charAt(headerBuf.length  -  1)!=  ':')  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(!hasHitEOF  &&  headerBuf.charAt(headerBuf.length  -  1)!=  ':')  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(!hasHitEOF  &&  headerBuf.charAt(headerBuf.length  -  1)!=  ':')  {	  if(!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
18	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  ==  0)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  ||  headerBuf.length  ==  0)  {	  if(headerBuf.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
19	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  ==  0)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  ||  headerBuf.length  ==  0)  {	  if(headerBuf.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
20	[BUG]  [BUGGY]  if(headerBuf.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf.length!=  0)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  0)  {	  if(headerBuf.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
21	[BUG]  [BUGGY]  if(headerBuf.length  ==  0  ||  headerBuf.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf.length  ==  0  ||  headerBuf.length  ==  0)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  ==  0  ||  headerBuf.length  ==  0)  {	  if(headerBuf.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
22	[BUG]  [BUGGY]  if(headerBuf.length!=  0  ||  headerBuf.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf.length!=  0  ||  headerBuf.length  ==  0)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  0  ||  headerBuf.length  ==  0)  {	  if(headerBuf.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
23	[BUG]  [BUGGY]  if(headerBuf.length  ==  0  ||  headerBuf.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf.length  ==  0  ||  headerBuf.length!=  0)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  ==  0  ||  headerBuf.length!=  0)  {	  if(headerBuf.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
24	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  >  0)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  ||  headerBuf.length  >  0)  {	  if(headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
25	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  >  0)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  ||  headerBuf.length  >  0)  {	  if(headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
26	[BUG]  [BUGGY]  if(headerBuf.length  >  0  ||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf.length  >  0  ||  headerBuf.length  >  0)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >  0  ||  headerBuf.length  >  0)  {	  if(headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
27	[BUG]  [BUGGY]  if(headerBuf.length  >  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf.length  >  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
28	[BUG]  [BUGGY]  if(headerBuf.length  >=  numToSkip)  {  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf.length  >=  numToSkip)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >=  numToSkip)  {	  if(headerBuf.length!=    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
29	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length!=  numToSkip)  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length!=  numToSkip)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  ||  headerBuf.length!=  numToSkip)  {	  if(headerBuf.length!=    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
30	[BUG]  [BUGGY]  if(headerBuf.length!=  numToSkip  ||  headerBuf.length  >=  numRead)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf.length!=  numToSkip  ||  headerBuf.length  >=  numRead)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  numToSkip  ||  headerBuf.length  >=  numRead)  {	  if(headerBuf.length!=    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
31	[BUG]  [BUGGY]  if(headerBuf.length!=  numToSkip  ||  headerBuf.length!=  numRead)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf.length!=  numToSkip  ||  headerBuf.length!=  numRead)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  numToSkip  ||  headerBuf.length!=  numRead)  {	  if(headerBuf.length!=    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
32	[BUG]  [BUGGY]  if(headerBuf.length!=  numToSkip  +  1)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf.length!=  numToSkip  +  1)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  numToSkip  +  1)  {	  if(headerBuf.length!=    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
33	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length!=  0)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length!=  0)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  ||  headerBuf.length!=  0)  {	  if(headerBuf    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
34	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  >=  0)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  >=  0)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  ||  headerBuf.length  >=  0)  {	  if(headerBuf    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
35	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  <  0)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  <  0)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  ||  headerBuf.length  <  0)  {	  if(headerBuf    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
36	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  >=  0)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  >=  0)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  ||  headerBuf.length  >=  0)  {	  if(headerBuf!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
37	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  ==  numToSkip)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  ==  numToSkip)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  ||  headerBuf.length  ==  numToSkip)  {	  if(headerBuf.length    ==    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
38	[BUG]  [BUGGY]  if(headerBuf.length  ==  numToSkip  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf.length  ==  numToSkip  &&  headerBuf.length  >  0)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  ==  numToSkip  &&  headerBuf.length  >  0)  {	  if(headerBuf.length    ==    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
39	[BUG]  [BUGGY]  if(headerBuf.length  ==  numToSkip  +  1)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf.length  ==  numToSkip  +  1)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  ==  numToSkip  +  1)  {	  if(headerBuf.length    ==    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
40	[BUG]  [BUGGY]  if(headerBuf.length  ==  numToSkip  ||  headerBuf.length  ==  numRead)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf.length  ==  numToSkip  ||  headerBuf.length  ==  numRead)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  ==  numToSkip  ||  headerBuf.length  ==  numRead)  {	  if(headerBuf.length    ==    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
41	[BUG]  [BUGGY]  if(headerBuf.length  >  0  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf.length  >  0  &&  hasHitEOF)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >  0  &&  hasHitEOF)  {	  if(hasHitEOF    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
42	[BUG]  [BUGGY]  if(headerBuf.length  >  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf.length  >  0  ||  hasHitEOF)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >  0  ||  hasHitEOF)  {	  if(hasHitEOF    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
43	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  >  0)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf.length  >  0)  {	  if(hasHitEOF    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
44	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  hasHitEOF  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf!=  null  ||  hasHitEOF  &&  headerBuf.length  >  0)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  ||  hasHitEOF  &&  headerBuf.length  >  0)  {	  if(hasHitEOF    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
45	[BUG]  [BUGGY]  if(headerBuf.length  ==  readBuf.length)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf.length  ==  readBuf.length)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  ==  readBuf.length)  {	  if(headerBuf.length    ==    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
46	[BUG]  [BUGGY]  if(headerBuf.length!=  readBuf.length)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf.length!=  readBuf.length)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  readBuf.length)  {	  if(headerBuf.length    ==    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
47	[BUG]  [BUGGY]  if(headerBuf.length  >  numToSkip)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf.length  >  numToSkip)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >  numToSkip)  {	  if(headerBuf.length    ==    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
48	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length!=  0)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length!=  0)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  ||  headerBuf.length!=  0)  {	  if(headerBuf!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
49	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  hasHitEOF  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf  ==  null  ||  hasHitEOF  &&  headerBuf.length  >  0)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  ||  hasHitEOF  &&  headerBuf.length  >  0)  {	  if(hasHitEOF    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
50	[BUG]  [BUGGY]  if(headerBuf.length!=  numToSkip  ||  headerBuf.length  >=  numToSkip)  {  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf.length!=  numToSkip  ||  headerBuf.length  >=  numToSkip)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  numToSkip  ||  headerBuf.length  >=  numToSkip)  {	  if(headerBuf.length!=    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
51	[BUG]  [BUGGY]  byte[]  buf  =  getBuffer();  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  byte[]  buf  =  getBuffer();  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	byte[]  buf  =  getBuffer();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
52	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  readBuf[i];  }  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  readBuf[i];  }  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  readBuf[i];  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
53	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  currEntry[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  currEntry[i]  =  buffer[i];  }  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  currEntry[i]  =  buffer[i];  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
54	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry[i]  =  buffer[i];  }  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry[i]  =  buffer[i];  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
55	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  getNextTarEntry(headerBuf[i]);  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  getNextTarEntry(headerBuf[i]);  }  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  getNextTarEntry(headerBuf[i]);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
56	[BUG]  [BUGGY]  if(headerBuf.length  >  0  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf.length  >  0  &&  headerBuf.length  >  0)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >  0  &&  headerBuf.length  >  0)  {	  if(headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
57	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  <  numToSkip)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  <  numToSkip)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  ||  headerBuf.length  <  numToSkip)  {	  if(headerBuf    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
58	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf!=  null)  {  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf!=  null  &&  headerBuf!=  null)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf!=  null)  {	  if(hasHitEOF    &&    headerBuf!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
59	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  <  numToSkip)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  <  numToSkip)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  ||  headerBuf.length  <  numToSkip)  {	  if(headerBuf!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
60	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  <  0)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  <  0)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  ||  headerBuf.length  <  0)  {	  if(headerBuf!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
61	[BUG]  [BUGGY]  if(headerBuf.length  >=  hasHitEOF  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf.length  >=  hasHitEOF  &&  headerBuf.length  >  0)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >=  hasHitEOF  &&  headerBuf.length  >  0)  {	  if(hasHitEOF    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
62	[BUG]  [BUGGY]  longName  =  getHitEOF();  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  longName  =  getHitEOF();  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	longName  =  getHitEOF();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
63	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readBuf[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readBuf[i]  =  buffer[i];  }  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readBuf[i]  =  buffer[i];  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
64	[BUG]  [BUGGY]  longName  =  getHitEOF(headerBuf);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  longName  =  getHitEOF(headerBuf);  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	longName  =  getHitEOF(headerBuf);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
65	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readerBuf[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readerBuf[i]  =  buffer[i];  }  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readerBuf[i]  =  buffer[i];  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
66	[BUG]  [BUGGY]  if(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
67	[BUG]  [BUGGY]  if(hasHitEOF  &&  headerBuf!=  null  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(hasHitEOF  &&  headerBuf!=  null  &&  headerBuf.length  >  0)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(hasHitEOF  &&  headerBuf!=  null  &&  headerBuf.length  >  0)  {	  if(hasHitEOF    &&    headerBuf!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
68	[BUG]  [BUGGY]  if(headerBuf.length!=  entrySize)  {  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf.length!=  entrySize)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  entrySize)  {	  if(headerBuf.length!=    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
69	[BUG]  [BUGGY]  if(headerBuf.length!=  numToSkip  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf.length!=  numToSkip  &&  headerBuf.length  >  0)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  numToSkip  &&  headerBuf.length  >  0)  {	  if(headerBuf.length!=    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
70	[BUG]  [BUGGY]  if(headerBuf.length!=  entryOffset)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf.length!=  entryOffset)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  entryOffset)  {	  if(headerBuf.length!=    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
71	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  ==  0)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf.length  ==  0)  {	  if(headerBuf.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
72	[BUG]  [BUGGY]  if(headerBuf.length  ==  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf.length  ==  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  ==  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(headerBuf.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
73	[BUG]  [BUGGY]  if(headerBuf.length  >  0  ||  headerBuf.length  <  numToSkip)  {  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf.length  >  0  ||  headerBuf.length  <  numToSkip)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >  0  ||  headerBuf.length  <  numToSkip)  {	  if(headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
74	[BUG]  [BUGGY]  if(headerBuf.length  >  0  ||  headerBuf.length  >  SMALL_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf.length  >  0  ||  headerBuf.length  >  SMALL_BUFFER_SIZE)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >  0  ||  headerBuf.length  >  SMALL_BUFFER_SIZE)  {	  if(headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
75	[BUG]  [BUGGY]  if(headerBuf.length  ==  numToSkip  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf.length  ==  numToSkip  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  ==  numToSkip  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(headerBuf.length    ==    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
76	[BUG]  [BUGGY]  if(headerBuf.length  ==  numToSkip  -  1)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf.length  ==  numToSkip  -  1)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  ==  numToSkip  -  1)  {	  if(headerBuf.length    ==    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
77	[BUG]  [BUGGY]  if(!hasHitEOF  &&  headerBuf.endsWith( "/ "))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(!hasHitEOF  &&  headerBuf.endsWith( "/ "))  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(!hasHitEOF  &&  headerBuf.endsWith( "/ "))  {	  if(!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
78	[BUG]  [BUGGY]  if(!hasHitEOF  &&  headerBuf.endsWith( ".zip "))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(!hasHitEOF  &&  headerBuf.endsWith( ".zip "))  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(!hasHitEOF  &&  headerBuf.endsWith( ".zip "))  {	  if(!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
79	[BUG]  [BUGGY]  if(!hasHitEOF  &&  headerBuf  ==  null)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(!hasHitEOF  &&  headerBuf  ==  null)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(!hasHitEOF  &&  headerBuf  ==  null)  {	  if(!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
80	[BUG]  [BUGGY]  if(!hasHitEOF  &&  headerBuf.endsWith( ".js "))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(!hasHitEOF  &&  headerBuf.endsWith( ".js "))  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(!hasHitEOF  &&  headerBuf.endsWith( ".js "))  {	  if(!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
81	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length!=  numToSkip)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();    [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length!=  numToSkip)  {  [BUGGY]    currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  ||  headerBuf.length!=  numToSkip)  {	  if(headerBuf    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
