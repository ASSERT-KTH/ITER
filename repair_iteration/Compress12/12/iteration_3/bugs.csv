bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(headerBuf.length!=  0  ||  headerBuf.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  0  ||  headerBuf.length!=  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  0  ||  headerBuf.length!=  0)  {	  if(headerBuf.length    ==    0    ||    headerBuf.length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
2	[BUG]  [BUGGY]  if(headerBuf.length  ==  0  ||  headerBuf.length  >=  0)  {  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  ==  0  ||  headerBuf.length  >=  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  ==  0  ||  headerBuf.length  >=  0)  {	  if(headerBuf.length    ==    0    ||    headerBuf.length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
3	[BUG]  [BUGGY]  if(headerBuf.length  >  0  ||  headerBuf.length  <  =  numToSkip)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >  0  ||  headerBuf.length  <  =  numToSkip)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >  0  ||  headerBuf.length  <  =  numToSkip)  {	  if(headerBuf.length    >    0    ||    headerBuf.length    <    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
4	[BUG]  [BUGGY]  if(headerBuf.length  <  0  ||  headerBuf.length  <  numToSkip)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  <  0  ||  headerBuf.length  <  numToSkip)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  <  0  ||  headerBuf.length  <  numToSkip)  {	  if(headerBuf.length    >    0    ||    headerBuf.length    <    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
5	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  >  0  ||  headerBuf.length  <  numToSkip)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  >  0  ||  headerBuf.length  <  numToSkip)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  ||  headerBuf.length  >  0  ||  headerBuf.length  <  numToSkip)  {	  if(headerBuf.length    >    0    ||    headerBuf.length    <    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
6	[BUG]  [BUGGY]  if(headerBuf.length  >  0  ||  headerBuf.length  >=  numToSkip)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >  0  ||  headerBuf.length  >=  numToSkip)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >  0  ||  headerBuf.length  >=  numToSkip)  {	  if(headerBuf.length    >    0    ||    headerBuf.length    <    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
7	[BUG]  [BUGGY]  if(headerBuf.length  >=  0  ||  headerBuf.length  <  numToSkip)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >=  0  ||  headerBuf.length  <  numToSkip)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >=  0  ||  headerBuf.length  <  numToSkip)  {	  if(headerBuf.length    >    0    ||    headerBuf.length    <    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
8	[BUG]  [BUGGY]  if(headerBuf.length  >  0  ||  headerBuf.length  ==  numToSkip)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >  0  ||  headerBuf.length  ==  numToSkip)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >  0  ||  headerBuf.length  ==  numToSkip)  {	  if(headerBuf.length    >    0    ||    headerBuf.length    <    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
9	[BUG]  [BUGGY]  if(headerBuf.length  ==  headerBuf.length)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  ==  headerBuf.length)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  ==  headerBuf.length)  {	  if(headerBuf.length    ==    readBuf.length)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
10	[BUG]  [BUGGY]  if(headerBuf.length!=  headerBuf.length)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  headerBuf.length)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  headerBuf.length)  {	  if(headerBuf.length    ==    readBuf.length)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
11	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  ==  readBuf.length)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  ==  readBuf.length)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  ||  headerBuf.length  ==  readBuf.length)  {	  if(headerBuf.length    ==    readBuf.length)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
12	[BUG]  [BUGGY]  if(headerBuf.length  ==  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  ==  buffer.length)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  ==  buffer.length)  {	  if(headerBuf.length    ==    readBuf.length)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
13	[BUG]  [BUGGY]  if(headerBuf.length!=  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  buffer.length)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  buffer.length)  {	  if(headerBuf.length    ==    readBuf.length)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
14	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  >>  0)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  >>  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  ||  headerBuf.length  >>  0)  {	  if(headerBuf!=    null    ||    headerBuf.length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
15	[BUG]  [BUGGY]  if(headerBuf.length!=  0  ||  headerBuf.length  >=  0)  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  0  ||  headerBuf.length  >=  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  0  ||  headerBuf.length  >=  0)  {	  if(headerBuf.length!=    0    ||    headerBuf.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
16	[BUG]  [BUGGY]  if(headerBuf.length  >=  0  ||  headerBuf.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >=  0  ||  headerBuf.length  ==  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >=  0  ||  headerBuf.length  ==  0)  {	  if(headerBuf.length!=    0    ||    headerBuf.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
17	[BUG]  [BUGGY]  if(headerBuf.length!=  hasHitEOF  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  hasHitEOF  &&  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  hasHitEOF  &&  headerBuf.length  >  0)  {	  if(headerBuf.length    >=    hasHitEOF    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
18	[BUG]  [BUGGY]  if(headerBuf.length  ==  hasHitEOF  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  ==  hasHitEOF  &&  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  ==  hasHitEOF  &&  headerBuf.length  >  0)  {	  if(headerBuf.length    >=    hasHitEOF    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
19	[BUG]  [BUGGY]  if(headerBuf.length  >>  hasHitEOF  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >>  hasHitEOF  &&  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >>  hasHitEOF  &&  headerBuf.length  >  0)  {	  if(headerBuf.length    >=    hasHitEOF    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
20	[BUG]  [BUGGY]  if(headerBuf.length  >=  headerBuf.length  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >=  headerBuf.length  &&  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >=  headerBuf.length  &&  headerBuf.length  >  0)  {	  if(headerBuf.length    >=    hasHitEOF    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
21	[BUG]  [BUGGY]  if(headerBuf.length!=  hasHitEOF  &&  headerBuf.length  >  1)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  hasHitEOF  &&  headerBuf.length  >  1)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  hasHitEOF  &&  headerBuf.length  >  1)  {	  if(headerBuf.length    >=    hasHitEOF    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
22	[BUG]  [BUGGY]  if(headerBuf.length  >=  hasHitEOF  ||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >=  hasHitEOF  ||  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >=  hasHitEOF  ||  headerBuf.length  >  0)  {	  if(headerBuf.length    >=    hasHitEOF    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
23	[BUG]  [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  getNextTarEntry(headerBuf[i]);  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  getNextTarEntry(headerBuf[i]);  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  getNextTarEntry(headerBuf[i]);  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    getNextTarEntry(headerBuf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
24	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  getNextTarEntry(headerBuf[i]);  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  getNextTarEntry(headerBuf[i]);  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  getNextTarEntry(headerBuf[i]);  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    getNextTarEntry(headerBuf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  getNextTarEntry(headerBuf[i]);  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  getNextTarEntry(headerBuf[i]);  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  getNextTarEntry(headerBuf[i]);  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    getNextTarEntry(headerBuf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
26	[BUG]  [BUGGY]  buffer[i]  =  getNextTarEntry(headerBuf[i]);  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  buffer[i]  =  getNextTarEntry(headerBuf[i]);  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	buffer[i]  =  getNextTarEntry(headerBuf[i]);	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    getNextTarEntry(headerBuf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
27	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  getNextTarEntry(headerBuf[i],  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  getNextTarEntry(headerBuf[i],  hasHitEOF);  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  getNextTarEntry(headerBuf[i],  hasHitEOF);  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    getNextTarEntry(headerBuf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
28	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  getNextTarEntry(headerBuf[i].getName());  }  [CE]  illegal  start  of  type  [FE]                                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  getNextTarEntry(headerBuf[i].getName());  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  getNextTarEntry(headerBuf[i].getName());  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    getNextTarEntry(headerBuf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
29	[BUG]  [BUGGY]  if(!hasHitEOF  &&  headerBuf.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(!hasHitEOF  &&  headerBuf.length!=  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(!hasHitEOF  &&  headerBuf.length!=  0)  {	  if(!hasHitEOF    &&    headerBuf!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
30	[BUG]  [BUGGY]  if(headerBuf.length!=  0  &&!hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  0  &&!hasHitEOF)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  0  &&!hasHitEOF)  {	  if(!hasHitEOF    &&    headerBuf!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
31	[BUG]  [BUGGY]  if(headerBuf.length  ==  0  &&!hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  ==  0  &&!hasHitEOF)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  ==  0  &&!hasHitEOF)  {	  if(!hasHitEOF    &&    headerBuf!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
32	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  <  =  numToSkip)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  <  =  numToSkip)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  ||  headerBuf.length  <  =  numToSkip)  {	  if(headerBuf    ==    null    ||    headerBuf.length    <    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
33	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  >=  numToSkip)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  >=  numToSkip)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  ||  headerBuf.length  >=  numToSkip)  {	  if(headerBuf    ==    null    ||    headerBuf.length    <    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
34	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  <  readBuf.length)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  <  readBuf.length)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  ||  headerBuf.length  <  readBuf.length)  {	  if(headerBuf    ==    null    ||    headerBuf.length    <    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
35	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  <  length)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  <  length)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  ||  headerBuf.length  <  length)  {	  if(headerBuf    ==    null    ||    headerBuf.length    <    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
36	[BUG]  [BUGGY]  if(headerBuf.length  ==  headerBuf.length  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  ==  headerBuf.length  &&  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  ==  headerBuf.length  &&  headerBuf.length  >  0)  {	  if(headerBuf.length    ==    numToSkip    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
37	[BUG]  [BUGGY]  if(headerBuf.length  ==  numToSkip  &&  headerBuf.length  >  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  ==  numToSkip  &&  headerBuf.length  >  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  ==  numToSkip  &&  headerBuf.length  >  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(headerBuf.length    ==    numToSkip    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
38	[BUG]  [BUGGY]  if(headerBuf.length  >=  numToSkip  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >=  numToSkip  &&  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >=  numToSkip  &&  headerBuf.length  >  0)  {	  if(headerBuf.length    ==    numToSkip    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
39	[BUG]  [BUGGY]  if(headerBuf.length  ==  numToSkip  ||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  ==  numToSkip  ||  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  ==  numToSkip  ||  headerBuf.length  >  0)  {	  if(headerBuf.length    ==    numToSkip    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
40	[BUG]  [BUGGY]  if(headerBuf.length!=  headerBuf.length  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  headerBuf.length  &&  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  headerBuf.length  &&  headerBuf.length  >  0)  {	  if(headerBuf.length    ==    numToSkip    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
41	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  >>  0)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  >>  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  ||  headerBuf.length  >>  0)  {	  if(headerBuf    ==    null    ||    headerBuf.length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
42	[BUG]  [BUGGY]  if(headerBuf.length  <  numToSkip)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  <  numToSkip)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  <  numToSkip)  {	  if(headerBuf.length    >    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
43	[BUG]  [BUGGY]  if(headerBuf.length  >  numToSkip  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >  numToSkip  &&  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >  numToSkip  &&  headerBuf.length  >  0)  {	  if(headerBuf.length    >    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
44	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  ==  numToSkip)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  ==  numToSkip)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  ||  headerBuf.length  ==  numToSkip)  {	  if(headerBuf    ==    null    ||    headerBuf.length!=    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
45	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  >=  numToSkip)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  >=  numToSkip)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  ||  headerBuf.length  >=  numToSkip)  {	  if(headerBuf    ==    null    ||    headerBuf.length!=    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
46	[BUG]  [BUGGY]  byte[]  headerBuf  =  getHeaderBuf();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  byte[]  headerBuf  =  getHeaderBuf();  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	byte[]  headerBuf  =  getHeaderBuf();	  byte[]    headerBuf    =    getRecord();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
47	[BUG]  [BUGGY]  byte[]  headerBuf  =  getRecord(numToSkip);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  byte[]  headerBuf  =  getRecord(numToSkip);  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	byte[]  headerBuf  =  getRecord(numToSkip);	  byte[]    headerBuf    =    getRecord();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
48	[BUG]  [BUGGY]  byte[]  headerBuf  =  getRecordBytes();  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  byte[]  headerBuf  =  getRecordBytes();  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	byte[]  headerBuf  =  getRecordBytes();	  byte[]    headerBuf    =    getRecord();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
49	[BUG]  [BUGGY]  byte[]  headerBuf  =  getRecordInput();  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  byte[]  headerBuf  =  getRecordInput();  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	byte[]  headerBuf  =  getRecordInput();	  byte[]    headerBuf    =    getRecord();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
50	[BUG]  [BUGGY]  byte[]  headerBuf  =  getRecordInputStream();  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  byte[]  headerBuf  =  getRecordInputStream();  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	byte[]  headerBuf  =  getRecordInputStream();	  byte[]    headerBuf    =    getRecord();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
51	[BUG]  [BUGGY]  if(headerBuf.length  >  0  ||  headerBuf.length  <  SMALL_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >  0  ||  headerBuf.length  <  SMALL_BUFFER_SIZE)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >  0  ||  headerBuf.length  <  SMALL_BUFFER_SIZE)  {	  if(headerBuf.length    >    0    ||    headerBuf.length    >    SMALL_BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
52	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  >  0  ||  headerBuf.length  >  SMALL_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  >  0  ||  headerBuf.length  >  SMALL_BUFFER_SIZE)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  ||  headerBuf.length  >  0  ||  headerBuf.length  >  SMALL_BUFFER_SIZE)  {	  if(headerBuf.length    >    0    ||    headerBuf.length    >    SMALL_BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
53	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  >  0  ||  headerBuf.length  >  SMALL_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  >  0  ||  headerBuf.length  >  SMALL_BUFFER_SIZE)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  ||  headerBuf.length  >  0  ||  headerBuf.length  >  SMALL_BUFFER_SIZE)  {	  if(headerBuf.length    >    0    ||    headerBuf.length    >    SMALL_BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
54	[BUG]  [BUGGY]  if(headerBuf.length  >  0  ||  headerBuf.length  <  =  SMALL_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >  0  ||  headerBuf.length  <  =  SMALL_BUFFER_SIZE)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >  0  ||  headerBuf.length  <  =  SMALL_BUFFER_SIZE)  {	  if(headerBuf.length    >    0    ||    headerBuf.length    >    SMALL_BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
55	[BUG]  [BUGGY]  if(headerBuf.length  >  0  ||  headerBuf.length  >=  SMALL_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >  0  ||  headerBuf.length  >=  SMALL_BUFFER_SIZE)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >  0  ||  headerBuf.length  >=  SMALL_BUFFER_SIZE)  {	  if(headerBuf.length    >    0    ||    headerBuf.length    >    SMALL_BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
56	[BUG]  [BUGGY]  if(headerBuf.length  <  0  ||  headerBuf.length  >  SMALL_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  <  0  ||  headerBuf.length  >  SMALL_BUFFER_SIZE)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  <  0  ||  headerBuf.length  >  SMALL_BUFFER_SIZE)  {	  if(headerBuf.length    >    0    ||    headerBuf.length    >    SMALL_BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
57	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  >  0  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  >  0  &&  hasHitEOF)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf.length  >  0  &&  hasHitEOF)  {	  if(headerBuf.length    >    0    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
58	[BUG]  [BUGGY]  if(headerBuf.length  ==  0  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  ==  0  &&  hasHitEOF)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  ==  0  &&  hasHitEOF)  {	  if(headerBuf.length    >    0    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
59	[BUG]  [BUGGY]  if(headerBuf.length  >=  0  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >=  0  &&  hasHitEOF)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >=  0  &&  hasHitEOF)  {	  if(headerBuf.length    >    0    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
60	[BUG]  [BUGGY]  if(headerBuf.length  <  0  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  <  0  &&  hasHitEOF)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  <  0  &&  hasHitEOF)  {	  if(headerBuf.length    >    0    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
61	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  <  0  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  <  0  &&  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  ||  headerBuf.length  <  0  &&  headerBuf.length  >  0)  {	  if(headerBuf!=    null    ||    hasHitEOF    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
62	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  >=  0  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  >=  0  &&  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  ||  headerBuf.length  >=  0  &&  headerBuf.length  >  0)  {	  if(headerBuf!=    null    ||    hasHitEOF    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
63	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  >  0  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  >  0  &&  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf.length  >  0  &&  headerBuf.length  >  0)  {	  if(headerBuf.length    >    0    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
64	[BUG]  [BUGGY]  if(headerBuf.length  >  0  &&  headerBuf.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >  0  &&  headerBuf.length  <  =  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >  0  &&  headerBuf.length  <  =  0)  {	  if(headerBuf.length    >    0    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
65	[BUG]  [BUGGY]  if(headerBuf.length  >  0  &&  headerBuf.length  >  0  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >  0  &&  headerBuf.length  >  0  &&  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >  0  &&  headerBuf.length  >  0  &&  headerBuf.length  >  0)  {	  if(headerBuf.length    >    0    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
66	[BUG]  [BUGGY]  if(headerBuf.length  >=  0  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >=  0  &&  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >=  0  &&  headerBuf.length  >  0)  {	  if(headerBuf.length    >    0    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
67	[BUG]  [BUGGY]  if(headerBuf.length  ==  0  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  ==  0  &&  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  ==  0  &&  headerBuf.length  >  0)  {	  if(headerBuf.length    >    0    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
68	[BUG]  [BUGGY]  if(headerBuf.length  >=  numToSkip  +  1)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >=  numToSkip  +  1)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >=  numToSkip  +  1)  {	  if(headerBuf.length    ==    numToSkip    +    1)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
69	[BUG]  [BUGGY]  if(headerBuf.length  ==  headerBuf.length  +  1)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  ==  headerBuf.length  +  1)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  ==  headerBuf.length  +  1)  {	  if(headerBuf.length    ==    numToSkip    +    1)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
70	[BUG]  [BUGGY]  if(headerBuf.length  >  numToSkip  +  1)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >  numToSkip  +  1)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >  numToSkip  +  1)  {	  if(headerBuf.length    ==    numToSkip    +    1)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
71	[BUG]  [BUGGY]  if(numToSkip  ==  headerBuf.length  +  1)  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(numToSkip  ==  headerBuf.length  +  1)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(numToSkip  ==  headerBuf.length  +  1)  {	  if(headerBuf.length    ==    numToSkip    +    1)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
72	[BUG]  [BUGGY]  if(headerBuf.length!=  headerBuf.length  +  1)  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  headerBuf.length  +  1)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  headerBuf.length  +  1)  {	  if(headerBuf.length    ==    numToSkip    +    1)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
73	[BUG]  [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
74	[BUG]  [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
75	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  new  byte[4];  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  new  byte[4];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  new  byte[4];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
76	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  new  byte[1];  }  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  new  byte[1];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  new  byte[1];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
77	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
78	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  <  0  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  <  0  &&  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  ||  headerBuf.length  <  0  &&  headerBuf.length  >  0)  {	  if(headerBuf    ==    null    ||    hasHitEOF    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
79	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  >=  0  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  >=  0  &&  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  ||  headerBuf.length  >=  0  &&  headerBuf.length  >  0)  {	  if(headerBuf    ==    null    ||    hasHitEOF    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
80	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  hasHitEOF  &&  headerBuf.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null  ||  hasHitEOF  &&  headerBuf.length  <  =  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  ||  hasHitEOF  &&  headerBuf.length  <  =  0)  {	  if(headerBuf    ==    null    ||    hasHitEOF    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
81	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  if(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }	  if(headerBuf.length    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
82	[BUG]  [BUGGY]  ||  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  ||  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	||  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }	  if(headerBuf.length    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
83	[BUG]  [BUGGY]  while(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  while(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	while(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }	  if(headerBuf.length    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
84	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }	  if(headerBuf.length    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
85	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  new  byte[4];  }  [CE]  illegal  start  of  type  [FE]                                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  new  byte[4];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  if(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  new  byte[4];  }	  if(headerBuf.length    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
86	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  <  =  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  ||  headerBuf.length  <  =  0)  {	  if(headerBuf    ==    null    ||    headerBuf.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
87	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  <  =  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  ||  headerBuf.length  <  =  0)  {	  if(headerBuf    ==    null    ||    headerBuf.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
88	[BUG]  [BUGGY]  if(headerBuf.length  <  =  numToSkip)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  <  =  numToSkip)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  <  =  numToSkip)  {	  if(headerBuf.length    >=    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
89	[BUG]  [BUGGY]  if(headerBuf.length  >>  numToSkip)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >>  numToSkip)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >>  numToSkip)  {	  if(headerBuf.length    >=    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
90	[BUG]  [BUGGY]  if(headerBuf.length  ==  numToSkip  ||  headerBuf.length!=  numRead)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  ==  numToSkip  ||  headerBuf.length!=  numRead)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  ==  numToSkip  ||  headerBuf.length!=  numRead)  {	  if(headerBuf.length    ==    numToSkip    ||    headerBuf.length    ==    numRead)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
91	[BUG]  [BUGGY]  if(headerBuf.length!=  numToSkip  ||  headerBuf.length  ==  numRead)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  numToSkip  ||  headerBuf.length  ==  numRead)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  numToSkip  ||  headerBuf.length  ==  numRead)  {	  if(headerBuf.length    ==    numToSkip    ||    headerBuf.length    ==    numRead)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
92	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  ==  numToSkip  ||  headerBuf.length  ==  numRead)  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  ==  numToSkip  ||  headerBuf.length  ==  numRead)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  ||  headerBuf.length  ==  numToSkip  ||  headerBuf.length  ==  numRead)  {	  if(headerBuf.length    ==    numToSkip    ||    headerBuf.length    ==    numRead)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
93	[BUG]  [BUGGY]  if(headerBuf.length  ==  numToSkip  ||  headerBuf.length  >=  numRead)  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  ==  numToSkip  ||  headerBuf.length  >=  numRead)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  ==  numToSkip  ||  headerBuf.length  >=  numRead)  {	  if(headerBuf.length    ==    numToSkip    ||    headerBuf.length    ==    numRead)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
94	[BUG]  [BUGGY]  if(headerBuf.length  ==  numToSkip  ||  headerBuf.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  ==  numToSkip  ||  headerBuf.length  ==  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  ==  numToSkip  ||  headerBuf.length  ==  0)  {	  if(headerBuf.length    ==    numToSkip    ||    headerBuf.length    ==    numRead)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
95	[BUG]  [BUGGY]  if(headerBuf.length  ==  numToSkip  ||  headerBuf.length  ==  SMALL_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  ==  numToSkip  ||  headerBuf.length  ==  SMALL_BUFFER_SIZE)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  ==  numToSkip  ||  headerBuf.length  ==  SMALL_BUFFER_SIZE)  {	  if(headerBuf.length    ==    numToSkip    ||    headerBuf.length    ==    numRead)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
96	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  >  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  >  0  ||  hasHitEOF)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  ||  headerBuf.length  >  0  ||  hasHitEOF)  {	  if(headerBuf.length    >    0    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
97	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  >  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  >  0  ||  hasHitEOF)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  ||  headerBuf.length  >  0  ||  hasHitEOF)  {	  if(headerBuf.length    >    0    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
98	[BUG]  [BUGGY]  if(headerBuf.length  >  0  ||  headerBuf.length  <  =  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >  0  ||  headerBuf.length  <  =  hasHitEOF)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >  0  ||  headerBuf.length  <  =  hasHitEOF)  {	  if(headerBuf.length    >    0    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
99	[BUG]  [BUGGY]  if(headerBuf.length  <  0  ||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  <  0  ||  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  <  0  ||  headerBuf.length  >  0)  {	  if(headerBuf.length    >    0    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
100	[BUG]  [BUGGY]  if(headerBuf.length  ==  entrySize)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  ==  entrySize)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  ==  entrySize)  {	  if(headerBuf.length!=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
101	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length!=  entrySize)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length!=  entrySize)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  ||  headerBuf.length!=  entrySize)  {	  if(headerBuf.length!=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
102	[BUG]  [BUGGY]  if(headerBuf.length  ==  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  ==  entryOffset)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  ==  entryOffset)  {	  if(headerBuf.length!=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
103	[BUG]  [BUGGY]  if(headerBuf.length  >=  entrySize)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >=  entrySize)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >=  entrySize)  {	  if(headerBuf.length!=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
104	[BUG]  [BUGGY]  if(headerBuf.length  >=  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >=  entryOffset)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >=  entryOffset)  {	  if(headerBuf.length!=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
105	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf!=  null  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf!=  null  &&  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf!=  null  &&  headerBuf.length  >  0)  {	  if(hasHitEOF    &&    headerBuf!=    null    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
106	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  hasHitEOF  &&  headerBuf!=  null  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  hasHitEOF  &&  headerBuf!=  null  &&  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  hasHitEOF  &&  headerBuf!=  null  &&  headerBuf.length  >  0)  {	  if(hasHitEOF    &&    headerBuf!=    null    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
107	[BUG]  [BUGGY]  if(headerBuf  ==  null  &&  headerBuf!=  null  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null  &&  headerBuf!=  null  &&  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  &&  headerBuf!=  null  &&  headerBuf.length  >  0)  {	  if(hasHitEOF    &&    headerBuf!=    null    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
108	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf  ==  null  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf  ==  null  &&  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf  ==  null  &&  headerBuf.length  >  0)  {	  if(hasHitEOF    &&    headerBuf!=    null    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
109	[BUG]  [BUGGY]  if(!hasHitEOF  &&  headerBuf!=  null  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(!hasHitEOF  &&  headerBuf!=  null  &&  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(!hasHitEOF  &&  headerBuf!=  null  &&  headerBuf.length  >  0)  {	  if(hasHitEOF    &&    headerBuf!=    null    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
110	[BUG]  [BUGGY]  if(headerBuf  ==  null  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null  &&  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  &&  headerBuf.length  >  0)  {	  if(headerBuf!=    null    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
111	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  >  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  >  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf.length  >  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(headerBuf!=    null    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
112	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  >  0  ||  headerBuf.charAt(headerBuf.length  -  1)  ==  '/')  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  >  0  ||  headerBuf.charAt(headerBuf.length  -  1)  ==  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf.length  >  0  ||  headerBuf.charAt(headerBuf.length  -  1)  ==  '/')  {	  if(headerBuf!=    null    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
113	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  >  0  ||  (headerBuf.length  >  0  &&  headerBuf.length  >  0))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  >  0  ||  (headerBuf.length  >  0  &&  headerBuf.length  >  0))  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf.length  >  0  ||  (headerBuf.length  >  0  &&  headerBuf.length  >  0))  {	  if(headerBuf!=    null    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
114	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null  ||  hasHitEOF)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  ||  hasHitEOF)  {	  if(headerBuf!=    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
115	[BUG]  [BUGGY]  if(headerBuf.length!=  numToSkip  ||  headerBuf.length  ==  numToSkip)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  numToSkip  ||  headerBuf.length  ==  numToSkip)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  numToSkip  ||  headerBuf.length  ==  numToSkip)  {	  if(headerBuf.length!=    numToSkip    ||    headerBuf.length    >=    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
116	[BUG]  [BUGGY]  if(headerBuf.length!=  numToSkip  ||  headerBuf.length!=  numToSkip)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  numToSkip  ||  headerBuf.length!=  numToSkip)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  numToSkip  ||  headerBuf.length!=  numToSkip)  {	  if(headerBuf.length!=    numToSkip    ||    headerBuf.length    >=    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
117	[BUG]  [BUGGY]  if(headerBuf.length!=  numToSkip  ||  headerBuf.length  >  numToSkip)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  numToSkip  ||  headerBuf.length  >  numToSkip)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  numToSkip  ||  headerBuf.length  >  numToSkip)  {	  if(headerBuf.length!=    numToSkip    ||    headerBuf.length    >=    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
118	[BUG]  [BUGGY]  if(headerBuf.length  >=  numToSkip  ||  headerBuf.length!=  numToSkip)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >=  numToSkip  ||  headerBuf.length!=  numToSkip)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >=  numToSkip  ||  headerBuf.length!=  numToSkip)  {	  if(headerBuf.length!=    numToSkip    ||    headerBuf.length    >=    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
119	[BUG]  [BUGGY]  if(headerBuf.length!=  numToSkip  ||  headerBuf.length  <  numToSkip)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  numToSkip  ||  headerBuf.length  <  numToSkip)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  numToSkip  ||  headerBuf.length  <  numToSkip)  {	  if(headerBuf.length!=    numToSkip    ||    headerBuf.length    >=    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
120	[BUG]  [BUGGY]  if(headerBuf.length  >=  numToSkip  ||  headerBuf.length  ==  numToSkip)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >=  numToSkip  ||  headerBuf.length  ==  numToSkip)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >=  numToSkip  ||  headerBuf.length  ==  numToSkip)  {	  if(headerBuf.length!=    numToSkip    ||    headerBuf.length    >=    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
121	[BUG]  [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  readBuf[i];  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  readBuf[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  readBuf[i];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    readBuf[i];    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
122	[BUG]  [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  readBuf[i];  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  readBuf[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  readBuf[i];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    readBuf[i];    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
123	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  readBuf[i];  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  readBuf[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  readBuf[i];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    readBuf[i];    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
124	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  readBuf[i];  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  readBuf[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  readBuf[i];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    readBuf[i];    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
125	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  readBuf.length;  i++)  {  buffer[i]  =  readBuf[i];  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  readBuf.length;  i++)  {  buffer[i]  =  readBuf[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  readBuf.length;  i++)  {  buffer[i]  =  readBuf[i];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    readBuf[i];    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
126	[BUG]  [BUGGY]  if(headerBuf.length!=  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(headerBuf.length    ==    0    ||    headerBuf.charAt(headerBuf.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
127	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length()  ==  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length()  ==  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  ||  headerBuf.length()  ==  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(headerBuf.length    ==    0    ||    headerBuf.charAt(headerBuf.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
128	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(headerBuf.length    ==    0    ||    headerBuf.charAt(headerBuf.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
129	[BUG]  [BUGGY]  if(headerBuf.length  >=  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >=  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >=  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(headerBuf.length    ==    0    ||    headerBuf.charAt(headerBuf.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
130	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length()  ==  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length()  ==  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  ||  headerBuf.length()  ==  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(headerBuf.length    ==    0    ||    headerBuf.charAt(headerBuf.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
131	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(headerBuf.length    ==    0    ||    headerBuf.charAt(headerBuf.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
132	[BUG]  [BUGGY]  if(headerBuf.length  >=  numToSkip  ||  headerBuf.length!=  numRead)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >=  numToSkip  ||  headerBuf.length!=  numRead)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >=  numToSkip  ||  headerBuf.length!=  numRead)  {	  if(headerBuf.length!=    numToSkip    ||    headerBuf.length    >=    numRead)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
133	[BUG]  [BUGGY]  if(headerBuf.length!=  numToSkip  ||  headerBuf.length  <  numRead)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  numToSkip  ||  headerBuf.length  <  numRead)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  numToSkip  ||  headerBuf.length  <  numRead)  {	  if(headerBuf.length!=    numToSkip    ||    headerBuf.length    >=    numRead)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
134	[BUG]  [BUGGY]  if(headerBuf.length!=  numToSkip  ||  headerBuf.length  >>  numRead)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  numToSkip  ||  headerBuf.length  >>  numRead)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  numToSkip  ||  headerBuf.length  >>  numRead)  {	  if(headerBuf.length!=    numToSkip    ||    headerBuf.length    >=    numRead)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
135	[BUG]  [BUGGY]  if(headerBuf.length  >=  numToSkip  ||  headerBuf.length  ==  numRead)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >=  numToSkip  ||  headerBuf.length  ==  numRead)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >=  numToSkip  ||  headerBuf.length  ==  numRead)  {	  if(headerBuf.length!=    numToSkip    ||    headerBuf.length    >=    numRead)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
136	[BUG]  [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
137	[BUG]  [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
138	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  new  byte[4];  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  new  byte[4];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  new  byte[4];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
139	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
140	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length!=  numToSkip)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length!=  numToSkip)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf.length!=  numToSkip)  {	  if(headerBuf!=    null    ||    headerBuf.length!=    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
141	[BUG]  [BUGGY]  if(!hasHitEOF  &&  headerBuf.endsWith( "/.js "))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(!hasHitEOF  &&  headerBuf.endsWith( "/.js "))  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(!hasHitEOF  &&  headerBuf.endsWith( "/.js "))  {	  if(!hasHitEOF    &&    headerBuf.endsWith(   ".js   "))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
142	[BUG]  [BUGGY]  if(!hasHitEOF  &&  headerBuf.endsWith( ".jar "))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(!hasHitEOF  &&  headerBuf.endsWith( ".jar "))  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(!hasHitEOF  &&  headerBuf.endsWith( ".jar "))  {	  if(!hasHitEOF    &&    headerBuf.endsWith(   ".js   "))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
143	[BUG]  [BUGGY]  if(!hasHitEOF  &&  headerBuf.endsWith( ".java "))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(!hasHitEOF  &&  headerBuf.endsWith( ".java "))  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(!hasHitEOF  &&  headerBuf.endsWith( ".java "))  {	  if(!hasHitEOF    &&    headerBuf.endsWith(   ".js   "))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
144	[BUG]  [BUGGY]  if(!hasHitEOF  &&  headerBuf.endsWith( "- "))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(!hasHitEOF  &&  headerBuf.endsWith( "- "))  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(!hasHitEOF  &&  headerBuf.endsWith( "- "))  {	  if(!hasHitEOF    &&    headerBuf.endsWith(   ".js   "))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
145	[BUG]  [BUGGY]  if(!hasHitEOF  &&  headerBuf.endsWith( "@js "))  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(!hasHitEOF  &&  headerBuf.endsWith( "@js "))  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(!hasHitEOF  &&  headerBuf.endsWith( "@js "))  {	  if(!hasHitEOF    &&    headerBuf.endsWith(   ".js   "))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
146	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry[i]  =  buffer[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry[i]  =  buffer[i];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    currEntry[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
147	[BUG]  [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry[i]  =  buffer[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry[i]  =  buffer[i];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    currEntry[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
148	[BUG]  [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry[i]  =  buffer[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry[i]  =  buffer[i];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    currEntry[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
149	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry[i]  =  buffer[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry[i]  =  buffer[i];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    currEntry[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
150	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry[i]  =  new  TarArchiveEntry(headerBuf);  }  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry[i]  =  new  TarArchiveEntry(headerBuf);  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry[i]  =  new  TarArchiveEntry(headerBuf);  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    currEntry[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
151	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry[i]  =  headerBuf[i];  }  [CE]  illegal  start  of  type  [FE]                                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry[i]  =  headerBuf[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry[i]  =  headerBuf[i];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    currEntry[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
152	[BUG]  [BUGGY]  if(headerBuf.length!=  entryOffset  ||  headerBuf.length!=  entrySize)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  entryOffset  ||  headerBuf.length!=  entrySize)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  entryOffset  ||  headerBuf.length!=  entrySize)  {	  if(headerBuf.length!=    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
153	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length!=  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length!=  entryOffset)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  ||  headerBuf.length!=  entryOffset)  {	  if(headerBuf.length!=    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
154	[BUG]  [BUGGY]  if(headerBuf.length!=  entryOffset  ||  headerBuf.length  >=  entrySize)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  entryOffset  ||  headerBuf.length  >=  entrySize)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  entryOffset  ||  headerBuf.length  >=  entrySize)  {	  if(headerBuf.length!=    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
155	[BUG]  [BUGGY]  if(headerBuf.length!=  numToSkip  -  1)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  numToSkip  -  1)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  numToSkip  -  1)  {	  if(headerBuf.length    ==    numToSkip    -    1)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
156	[BUG]  [BUGGY]  if(headerBuf.length  >=  numToSkip  -  1)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >=  numToSkip  -  1)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >=  numToSkip  -  1)  {	  if(headerBuf.length    ==    numToSkip    -    1)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
157	[BUG]  [BUGGY]  if(headerBuf.length  >  numToSkip  -  1)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >  numToSkip  -  1)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >  numToSkip  -  1)  {	  if(headerBuf.length    ==    numToSkip    -    1)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
158	[BUG]  [BUGGY]  if(numToSkip  ==  headerBuf.length  -  1)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(numToSkip  ==  headerBuf.length  -  1)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(numToSkip  ==  headerBuf.length  -  1)  {	  if(headerBuf.length    ==    numToSkip    -    1)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
159	[BUG]  [BUGGY]  if(headerBuf.length()  ==  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  ':')  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length()  ==  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  ':')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length()  ==  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  ':')  {	  if(!hasHitEOF    &&    headerBuf.charAt(headerBuf.length    -    1)!=    ':')    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
160	[BUG]  [BUGGY]  if(headerBuf.length()!=  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  ':')  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length()!=  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  ':')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length()!=  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  ':')  {	  if(!hasHitEOF    &&    headerBuf.charAt(headerBuf.length    -    1)!=    ':')    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
161	[BUG]  [BUGGY]  if(headerBuf.length  >  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  ':')  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  ':')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  ':')  {	  if(!hasHitEOF    &&    headerBuf.charAt(headerBuf.length    -    1)!=    ':')    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
162	[BUG]  [BUGGY]  if(headerBuf.length()  ==  numToSkip  &&  headerBuf.charAt(headerBuf.length  -  1)!=  ':')  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length()  ==  numToSkip  &&  headerBuf.charAt(headerBuf.length  -  1)!=  ':')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length()  ==  numToSkip  &&  headerBuf.charAt(headerBuf.length  -  1)!=  ':')  {	  if(!hasHitEOF    &&    headerBuf.charAt(headerBuf.length    -    1)!=    ':')    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
163	[BUG]  [BUGGY]  if(headerBuf.length()!=  numToSkip  &&  headerBuf.charAt(headerBuf.length  -  1)!=  ':')  {  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length()!=  numToSkip  &&  headerBuf.charAt(headerBuf.length  -  1)!=  ':')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length()!=  numToSkip  &&  headerBuf.charAt(headerBuf.length  -  1)!=  ':')  {	  if(!hasHitEOF    &&    headerBuf.charAt(headerBuf.length    -    1)!=    ':')    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
164	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length()!=  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  ':')  {  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length()!=  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  ':')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf.length()!=  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  ':')  {	  if(!hasHitEOF    &&    headerBuf.charAt(headerBuf.length    -    1)!=    ':')    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
165	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  >  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  >  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  ||  headerBuf.length  >  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(headerBuf.length    >    0    ||    headerBuf.charAt(headerBuf.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
166	[BUG]  [BUGGY]  if(headerBuf.length  <  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  <  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  <  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(headerBuf.length    >    0    ||    headerBuf.charAt(headerBuf.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
167	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  >  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  >  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  ||  headerBuf.length  >  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(headerBuf.length    >    0    ||    headerBuf.charAt(headerBuf.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
168	[BUG]  [BUGGY]  if(numToSkip!=  headerBuf.length  +  1)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(numToSkip!=  headerBuf.length  +  1)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(numToSkip!=  headerBuf.length  +  1)  {	  if(headerBuf.length!=    numToSkip    +    1)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
169	[BUG]  [BUGGY]  if(headerBuf.length  >=  headerBuf.length  +  1)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >=  headerBuf.length  +  1)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >=  headerBuf.length  +  1)  {	  if(headerBuf.length!=    numToSkip    +    1)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
170	[BUG]  [BUGGY]  if(numToSkip  >=  headerBuf.length  +  1)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(numToSkip  >=  headerBuf.length  +  1)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(numToSkip  >=  headerBuf.length  +  1)  {	  if(headerBuf.length!=    numToSkip    +    1)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
171	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  <  =  numToSkip)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  <  =  numToSkip)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  ||  headerBuf.length  <  =  numToSkip)  {	  if(headerBuf!=    null    ||    headerBuf.length    <    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
172	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  <  numToSkip)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  <  numToSkip)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf.length  <  numToSkip)  {	  if(headerBuf!=    null    ||    headerBuf.length    <    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
173	[BUG]  [BUGGY]  longName  =  getHitEOF(headerBuf,  numToSkip);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  longName  =  getHitEOF(headerBuf,  numToSkip);  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	longName  =  getHitEOF(headerBuf,  numToSkip);	  longName    =    getHitEOF(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
174	[BUG]  [BUGGY]  longName  =  getHitEOF(headerBuf,  0);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  longName  =  getHitEOF(headerBuf,  0);  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	longName  =  getHitEOF(headerBuf,  0);	  longName    =    getHitEOF(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
175	[BUG]  [BUGGY]  longName  =  getHitEOF(headerBuf,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  longName  =  getHitEOF(headerBuf,  hasHitEOF);  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	longName  =  getHitEOF(headerBuf,  hasHitEOF);	  longName    =    getHitEOF(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
176	[BUG]  [BUGGY]  longName  =  getHitEOF(headerBuf,  readBuf);  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  longName  =  getHitEOF(headerBuf,  readBuf);  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	longName  =  getHitEOF(headerBuf,  readBuf);	  longName    =    getHitEOF(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
177	[BUG]  [BUGGY]  longName  =  getHitEOF(headerBuf,  false);  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  longName  =  getHitEOF(headerBuf,  false);  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	longName  =  getHitEOF(headerBuf,  false);	  longName    =    getHitEOF(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
178	[BUG]  [BUGGY]  longName  =  getHitEOF(buf,  headerBuf);  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  longName  =  getHitEOF(buf,  headerBuf);  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	longName  =  getHitEOF(buf,  headerBuf);	  longName    =    getHitEOF(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
179	[BUG]  [BUGGY]  longName  =  getHitEOF(headerBuf,  buffer.length);  [CE]  illegal  start  of  type  [FE]                                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  longName  =  getHitEOF(headerBuf,  buffer.length);  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	longName  =  getHitEOF(headerBuf,  buffer.length);	  longName    =    getHitEOF(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
180	[BUG]  [BUGGY]  if(headerBuf.length  >  0  ||  headerBuf.length  <  0)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >  0  ||  headerBuf.length  <  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >  0  ||  headerBuf.length  <  0)  {	  if(headerBuf.length    >    0    ||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
181	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  >  0  ||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  >  0  ||  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  ||  headerBuf.length  >  0  ||  headerBuf.length  >  0)  {	  if(headerBuf.length    >    0    ||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
182	[BUG]  [BUGGY]  if(headerBuf.length  >  0  ||  headerBuf.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >  0  ||  headerBuf.length  <  =  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >  0  ||  headerBuf.length  <  =  0)  {	  if(headerBuf.length    >    0    ||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
183	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  >  0  ||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  >  0  ||  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  ||  headerBuf.length  >  0  ||  headerBuf.length  >  0)  {	  if(headerBuf.length    >    0    ||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
184	[BUG]  [BUGGY]  if(headerBuf.length  >  0  ||  headerBuf.length  >=  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >  0  ||  headerBuf.length  >=  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >  0  ||  headerBuf.length  >=  0)  {	  if(headerBuf.length    >    0    ||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
185	[BUG]  [BUGGY]  if(headerBuf.length  >  0  ||  headerBuf.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >  0  ||  headerBuf.length  ==  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >  0  ||  headerBuf.length  ==  0)  {	  if(headerBuf.length    >    0    ||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
186	[BUG]  [BUGGY]  if(headerBuf.length!=  numToSkip  &&  headerBuf.length  >  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  numToSkip  &&  headerBuf.length  >  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  numToSkip  &&  headerBuf.length  >  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(headerBuf.length!=    numToSkip    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
187	[BUG]  [BUGGY]  if(numToSkip!=  headerBuf.length  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(numToSkip!=  headerBuf.length  &&  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(numToSkip!=  headerBuf.length  &&  headerBuf.length  >  0)  {	  if(headerBuf.length!=    numToSkip    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
188	[BUG]  [BUGGY]  if(headerBuf.length!=  numToSkip  ||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  numToSkip  ||  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  numToSkip  ||  headerBuf.length  >  0)  {	  if(headerBuf.length!=    numToSkip    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
189	[BUG]  [BUGGY]  if(headerBuf.length  >=  0)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >=  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >=  0)  {	  if(headerBuf.length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
190	[BUG]  [BUGGY]  if(headerBuf.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length()  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length()  >  0)  {	  if(!hasHitEOF    &&    headerBuf.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
191	[BUG]  [BUGGY]  if(headerBuf!=  null  ||!hasHitEOF  &&  headerBuf.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  ||!hasHitEOF  &&  headerBuf.length()  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  ||!hasHitEOF  &&  headerBuf.length()  >  0)  {	  if(!hasHitEOF    &&    headerBuf.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
192	[BUG]  [BUGGY]  if(!hasHitEOF  &&  headerBuf.length()  >  0  ||  headerBuf.charAt(headerBuf.length()  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(!hasHitEOF  &&  headerBuf.length()  >  0  ||  headerBuf.charAt(headerBuf.length()  -  1)!=  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(!hasHitEOF  &&  headerBuf.length()  >  0  ||  headerBuf.charAt(headerBuf.length()  -  1)!=  '/')  {	  if(!hasHitEOF    &&    headerBuf.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
193	[BUG]  [BUGGY]  if(!hasHitEOF  &&  headerBuf.length()  >  0  &&  headerBuf.charAt(headerBuf.length()  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(!hasHitEOF  &&  headerBuf.length()  >  0  &&  headerBuf.charAt(headerBuf.length()  -  1)!=  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(!hasHitEOF  &&  headerBuf.length()  >  0  &&  headerBuf.charAt(headerBuf.length()  -  1)!=  '/')  {	  if(!hasHitEOF    &&    headerBuf.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
194	[BUG]  [BUGGY]  if(!hasHitEOF  &&  headerBuf.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(!hasHitEOF  &&  headerBuf.length()  ==  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(!hasHitEOF  &&  headerBuf.length()  ==  0)  {	  if(!hasHitEOF    &&    headerBuf.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
195	[BUG]  [BUGGY]  if(!hasHitEOF  &&  headerBuf.length()  >  0  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(!hasHitEOF  &&  headerBuf.length()  >  0  &&  hasHitEOF)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(!hasHitEOF  &&  headerBuf.length()  >  0  &&  hasHitEOF)  {	  if(!hasHitEOF    &&    headerBuf.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
196	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf!=  null)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  ||  headerBuf!=  null)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  ||  headerBuf!=  null)  {	  if(headerBuf!=    null    &&    headerBuf!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
197	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf  ==  null)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  ||  headerBuf  ==  null)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  ||  headerBuf  ==  null)  {	  if(headerBuf!=    null    &&    headerBuf!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
198	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf!=  null)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null  ||  headerBuf!=  null)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  ||  headerBuf!=  null)  {	  if(headerBuf!=    null    &&    headerBuf!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
199	[BUG]  [BUGGY]  if(headerBuf  ==  null  &&  headerBuf!=  null)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null  &&  headerBuf!=  null)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  &&  headerBuf!=  null)  {	  if(headerBuf!=    null    &&    headerBuf!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
200	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf  ==  null)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf  ==  null)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf  ==  null)  {	  if(headerBuf!=    null    &&    headerBuf!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
201	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf  ==  null)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null  ||  headerBuf  ==  null)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  ||  headerBuf  ==  null)  {	  if(headerBuf!=    null    &&    headerBuf!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
202	[BUG]  [BUGGY]  readerBuf[i]  =  buffer[i];  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  readerBuf[i]  =  buffer[i];  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	readerBuf[i]  =  buffer[i];	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    readerBuf[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
203	[BUG]  [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readerBuf[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readerBuf[i]  =  buffer[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readerBuf[i]  =  buffer[i];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    readerBuf[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
204	[BUG]  [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readerBuf[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readerBuf[i]  =  buffer[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readerBuf[i]  =  buffer[i];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    readerBuf[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
205	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readerBuf[i]  =  new  byte[buffer[i];  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readerBuf[i]  =  new  byte[buffer[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readerBuf[i]  =  new  byte[buffer[i];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    readerBuf[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
206	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readerBuf[i]  =  buf[i];  }  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readerBuf[i]  =  buf[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readerBuf[i]  =  buf[i];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    readerBuf[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
207	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readerBuf[i]  =  new  byte[4];  }  [CE]  illegal  start  of  type  [FE]                                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readerBuf[i]  =  new  byte[4];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readerBuf[i]  =  new  byte[4];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    readerBuf[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
208	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  >=  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  >=  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf.length  >=  0)  {	  if(headerBuf!=    null    &&    headerBuf.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
209	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  <  =  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf.length  <  =  0)  {	  if(headerBuf!=    null    &&    headerBuf.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
210	[BUG]  [BUGGY]  if(headerBuf.length!=  numToSkip  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  numToSkip  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  numToSkip  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(headerBuf.length    ==    numToSkip    &&    headerBuf.charAt(headerBuf.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
211	[BUG]  [BUGGY]  if(headerBuf.length  >=  numToSkip  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >=  numToSkip  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >=  numToSkip  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(headerBuf.length    ==    numToSkip    &&    headerBuf.charAt(headerBuf.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
212	[BUG]  [BUGGY]  if(headerBuf.length  ==  headerBuf.length  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  ==  headerBuf.length  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  ==  headerBuf.length  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(headerBuf.length    ==    numToSkip    &&    headerBuf.charAt(headerBuf.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
213	[BUG]  [BUGGY]  if(headerBuf.length  ==  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  ==  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  ==  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(headerBuf.length    ==    numToSkip    &&    headerBuf.charAt(headerBuf.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
214	[BUG]  [BUGGY]  if(headerBuf.length!=  headerBuf.length  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  headerBuf.length  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  headerBuf.length  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(headerBuf.length    ==    numToSkip    &&    headerBuf.charAt(headerBuf.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
215	[BUG]  [BUGGY]  if(headerBuf.length  ==  numToSkip  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  ==  numToSkip  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  ==  numToSkip  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(headerBuf.length    ==    numToSkip    &&    headerBuf.charAt(headerBuf.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
216	[BUG]  [BUGGY]  ||  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  ||  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	||  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }	  if(headerBuf.length    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
217	[BUG]  [BUGGY]  while(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  while(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	while(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }	  if(headerBuf.length    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
218	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  if(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }	  if(headerBuf.length    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
219	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  new  byte[4];  }  [CE]  illegal  start  of  type  [FE]                                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  new  byte[4];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  if(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  new  byte[4];  }	  if(headerBuf.length    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
220	[BUG]  [BUGGY]  if(!hasHitEOF  &&  headerBuf.length  >  0  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(!hasHitEOF  &&  headerBuf.length  >  0  &&  hasHitEOF)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(!hasHitEOF  &&  headerBuf.length  >  0  &&  hasHitEOF)  {	  if(!hasHitEOF    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
221	[BUG]  [BUGGY]  if(!hasHitEOF  &&  headerBuf.length  >  0  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(!hasHitEOF  &&  headerBuf.length  >  0  &&  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(!hasHitEOF  &&  headerBuf.length  >  0  &&  headerBuf.length  >  0)  {	  if(!hasHitEOF    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
222	[BUG]  [BUGGY]  if(!hasHitEOF  &&  headerBuf.length  >  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(!hasHitEOF  &&  headerBuf.length  >  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(!hasHitEOF  &&  headerBuf.length  >  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(!hasHitEOF    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
223	[BUG]  [BUGGY]  if(!hasHitEOF  &&  headerBuf.length  >  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(!hasHitEOF  &&  headerBuf.length  >  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(!hasHitEOF  &&  headerBuf.length  >  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(!hasHitEOF    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
224	[BUG]  [BUGGY]  if(headerBuf!=  null  ||!hasHitEOF  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  ||!hasHitEOF  &&  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  ||!hasHitEOF  &&  headerBuf.length  >  0)  {	  if(!hasHitEOF    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
225	[BUG]  [BUGGY]  byte[]  buf  =  getBuffer().toByteArray();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  byte[]  buf  =  getBuffer().toByteArray();  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	byte[]  buf  =  getBuffer().toByteArray();	  byte[]    buf    =    getBuffer();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
226	[BUG]  [BUGGY]  byte[]  buf  =  getBuffer(headerBuf);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  byte[]  buf  =  getBuffer(headerBuf);  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	byte[]  buf  =  getBuffer(headerBuf);	  byte[]    buf    =    getBuffer();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
227	[BUG]  [BUGGY]  byte[]  buf  =  getBufferInsertionBuffer();  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  byte[]  buf  =  getBufferInsertionBuffer();  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	byte[]  buf  =  getBufferInsertionBuffer();	  byte[]    buf    =    getBuffer();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
228	[BUG]  [BUGGY]  byte[]  buf  =  getBuffer(0);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  byte[]  buf  =  getBuffer(0);  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	byte[]  buf  =  getBuffer(0);	  byte[]    buf    =    getBuffer();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
229	[BUG]  [BUGGY]  byte[]  buf  =  getBufferInputStream();  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  byte[]  buf  =  getBufferInputStream();  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	byte[]  buf  =  getBufferInputStream();	  byte[]    buf    =    getBuffer();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
230	[BUG]  [BUGGY]  byte[]  buf  =  getBuffer().length;  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  byte[]  buf  =  getBuffer().length;  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	byte[]  buf  =  getBuffer().length;	  byte[]    buf    =    getBuffer();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
231	[BUG]  [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  currEntry[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  currEntry[i]  =  buffer[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  currEntry[i]  =  buffer[i];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    currEntry[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
232	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  currEntry[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  currEntry[i]  =  buffer[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  currEntry[i]  =  buffer[i];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    currEntry[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
233	[BUG]  [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  currEntry[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  currEntry[i]  =  buffer[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  currEntry[i]  =  buffer[i];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    currEntry[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
234	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  currEntry[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  currEntry[i]  =  buffer[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  currEntry[i]  =  buffer[i];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    currEntry[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
235	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  currEntry[i]  =  new  TarArchiveEntry(headerBuf);  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  currEntry[i]  =  new  TarArchiveEntry(headerBuf);  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  currEntry[i]  =  new  TarArchiveEntry(headerBuf);  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    currEntry[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
236	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  currEntry[i]  =  new  TarArchiveEntry(headerBuf,  headerSize);  }  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  currEntry[i]  =  new  TarArchiveEntry(headerBuf,  headerSize);  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  currEntry[i]  =  new  TarArchiveEntry(headerBuf,  headerSize);  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    currEntry[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
237	[BUG]  [BUGGY]  ||  headerBuf.length()  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  ||  headerBuf.length()  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	||  headerBuf.length()  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }	  if(headerBuf.length()    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
238	[BUG]  [BUGGY]  while(headerBuf.length()  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  while(headerBuf.length()  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	while(headerBuf.length()  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }	  if(headerBuf.length()    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
239	[BUG]  [BUGGY]  if(headerBuf.length()  ==  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length()  ==  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length()  ==  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }	  if(headerBuf.length()    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
240	[BUG]  [BUGGY]  if(headerBuf.length()!=  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length()!=  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length()!=  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }	  if(headerBuf.length()    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
241	[BUG]  [BUGGY]  while(headerBuf.length()  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  while(headerBuf.length()  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	while(headerBuf.length()  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];	  if(headerBuf.length()    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
242	[BUG]  [BUGGY]  if(headerBuf.length()  ==  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  'n')  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length()  ==  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  'n')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length()  ==  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  'n')  {	  if(!hasHitEOF    &&    headerBuf.charAt(headerBuf.length    -    1)!=    'n')    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
243	[BUG]  [BUGGY]  if(headerBuf.length()!=  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  'n')  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length()!=  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  'n')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length()!=  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  'n')  {	  if(!hasHitEOF    &&    headerBuf.charAt(headerBuf.length    -    1)!=    'n')    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
244	[BUG]  [BUGGY]  if(headerBuf.length()  ==  numToSkip  &&  headerBuf.charAt(headerBuf.length  -  1)!=  'n')  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length()  ==  numToSkip  &&  headerBuf.charAt(headerBuf.length  -  1)!=  'n')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length()  ==  numToSkip  &&  headerBuf.charAt(headerBuf.length  -  1)!=  'n')  {	  if(!hasHitEOF    &&    headerBuf.charAt(headerBuf.length    -    1)!=    'n')    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
245	[BUG]  [BUGGY]  if(headerBuf.length()!=  numToSkip  &&  headerBuf.charAt(headerBuf.length  -  1)!=  'n')  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length()!=  numToSkip  &&  headerBuf.charAt(headerBuf.length  -  1)!=  'n')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length()!=  numToSkip  &&  headerBuf.charAt(headerBuf.length  -  1)!=  'n')  {	  if(!hasHitEOF    &&    headerBuf.charAt(headerBuf.length    -    1)!=    'n')    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
246	[BUG]  [BUGGY]  if(headerBuf.length  >  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  'n')  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  'n')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  'n')  {	  if(!hasHitEOF    &&    headerBuf.charAt(headerBuf.length    -    1)!=    'n')    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
247	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length()!=  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  'n')  {  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length()!=  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  'n')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf.length()!=  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  'n')  {	  if(!hasHitEOF    &&    headerBuf.charAt(headerBuf.length    -    1)!=    'n')    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
248	[BUG]  [BUGGY]  if(headerBuf.length()  ==  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length()  ==  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length()  ==  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(!hasHitEOF    &&    headerBuf.charAt(headerBuf.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
249	[BUG]  [BUGGY]  if(headerBuf.length()!=  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length()!=  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length()!=  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(!hasHitEOF    &&    headerBuf.charAt(headerBuf.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
250	[BUG]  [BUGGY]  if(headerBuf.length()  ==  numToSkip  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length()  ==  numToSkip  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length()  ==  numToSkip  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(!hasHitEOF    &&    headerBuf.charAt(headerBuf.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
251	[BUG]  [BUGGY]  if(headerBuf.length  >  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(!hasHitEOF    &&    headerBuf.charAt(headerBuf.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
252	[BUG]  [BUGGY]  if(headerBuf.length()!=  numToSkip  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length()!=  numToSkip  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length()!=  numToSkip  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(!hasHitEOF    &&    headerBuf.charAt(headerBuf.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
253	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length()!=  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length()!=  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf.length()!=  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(!hasHitEOF    &&    headerBuf.charAt(headerBuf.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
254	[BUG]  [BUGGY]  longName  =  getHitEOF()  +  1;  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  longName  =  getHitEOF()  +  1;  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	longName  =  getHitEOF()  +  1;	  longName    =    getHitEOF();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
255	[BUG]  [BUGGY]  longName  =  getHitEOF()  +  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  longName  =  getHitEOF()  +  headerBuf.length;  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	longName  =  getHitEOF()  +  headerBuf.length;	  longName    =    getHitEOF();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
256	[BUG]  [BUGGY]  longName  =  getHitEOF()  -  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  longName  =  getHitEOF()  -  headerBuf.length;  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	longName  =  getHitEOF()  -  headerBuf.length;	  longName    =    getHitEOF();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
257	[BUG]  [BUGGY]  longName  =  getHitEOF()  +  numToSkip;  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  longName  =  getHitEOF()  +  numToSkip;  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	longName  =  getHitEOF()  +  numToSkip;	  longName    =    getHitEOF();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
258	[BUG]  [BUGGY]  longName  =  getHitEOF()  /  2;  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  longName  =  getHitEOF()  /  2;  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	longName  =  getHitEOF()  /  2;	  longName    =    getHitEOF();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
259	[BUG]  [BUGGY]  if(!hasHitEOF  &&  headerBuf.endsWith( "/.zip "))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(!hasHitEOF  &&  headerBuf.endsWith( "/.zip "))  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(!hasHitEOF  &&  headerBuf.endsWith( "/.zip "))  {	  if(!hasHitEOF    &&    headerBuf.endsWith(   ".zip   "))    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
260	[BUG]  [BUGGY]  if(headerBuf!=  null  &&!hasHitEOF  &&  headerBuf.endsWith( ".zip "))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&!hasHitEOF  &&  headerBuf.endsWith( ".zip "))  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&!hasHitEOF  &&  headerBuf.endsWith( ".zip "))  {	  if(!hasHitEOF    &&    headerBuf.endsWith(   ".zip   "))    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
261	[BUG]  [BUGGY]  if(!hasHitEOF  &&  headerBuf.endsWith( "tar.zip "))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(!hasHitEOF  &&  headerBuf.endsWith( "tar.zip "))  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(!hasHitEOF  &&  headerBuf.endsWith( "tar.zip "))  {	  if(!hasHitEOF    &&    headerBuf.endsWith(   ".zip   "))    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
262	[BUG]  [BUGGY]  if(!hasHitEOF  &&  headerBuf.endsWith( "ArchiveEntry.zip "))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(!hasHitEOF  &&  headerBuf.endsWith( "ArchiveEntry.zip "))  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(!hasHitEOF  &&  headerBuf.endsWith( "ArchiveEntry.zip "))  {	  if(!hasHitEOF    &&    headerBuf.endsWith(   ".zip   "))    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
263	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length!=  numToSkip  ||  headerBuf.length!=  numRead)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length!=  numToSkip  ||  headerBuf.length!=  numRead)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  ||  headerBuf.length!=  numToSkip  ||  headerBuf.length!=  numRead)  {	  if(headerBuf.length!=    numToSkip    ||    headerBuf.length!=    numRead)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
264	[BUG]  [BUGGY]  if(numToSkip!=  headerBuf.length  ||  headerBuf.length!=  numRead)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(numToSkip!=  headerBuf.length  ||  headerBuf.length!=  numRead)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(numToSkip!=  headerBuf.length  ||  headerBuf.length!=  numRead)  {	  if(headerBuf.length!=    numToSkip    ||    headerBuf.length!=    numRead)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
265	[BUG]  [BUGGY]  ||  headerBuf.length()  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  ||  headerBuf.length()  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	||  headerBuf.length()  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }	  if(headerBuf.length()    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
266	[BUG]  [BUGGY]  while(headerBuf.length()  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  while(headerBuf.length()  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	while(headerBuf.length()  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }	  if(headerBuf.length()    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
267	[BUG]  [BUGGY]  if(headerBuf.length()  ==  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length()  ==  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length()  ==  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }	  if(headerBuf.length()    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
268	[BUG]  [BUGGY]  if(headerBuf.length()!=  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length()!=  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length()!=  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }	  if(headerBuf.length()    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
269	[BUG]  [BUGGY]  if(headerBuf.length()  ==  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  new  byte[4];  }  [CE]  illegal  start  of  type  [FE]                                              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length()  ==  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  new  byte[4];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length()  ==  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  new  byte[4];  }	  if(headerBuf.length()    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
270	[BUG]  [BUGGY]  if(!hasHitEOF  &&  headerBuf.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(!hasHitEOF  &&  headerBuf.length  ==  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(!hasHitEOF  &&  headerBuf.length  ==  0)  {	  if(!hasHitEOF    &&    headerBuf    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
271	[BUG]  [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readBuf[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readBuf[i]  =  buffer[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readBuf[i]  =  buffer[i];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    readBuf[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
272	[BUG]  [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readBuf[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readBuf[i]  =  buffer[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readBuf[i]  =  buffer[i];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    readBuf[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
273	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readBuf[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readBuf[i]  =  buffer[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readBuf[i]  =  buffer[i];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    readBuf[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
274	[BUG]  [BUGGY]  while(headerBuf!=  null  &&  hasHitEOF)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readBuf[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  while(headerBuf!=  null  &&  hasHitEOF)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readBuf[i]  =  buffer[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	while(headerBuf!=  null  &&  hasHitEOF)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readBuf[i]  =  buffer[i];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    readBuf[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
275	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readBuf[i]  =  buf[i];  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readBuf[i]  =  buf[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readBuf[i]  =  buf[i];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    readBuf[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
276	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readBuf[i]  =  new  byte[buffer[i];  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readBuf[i]  =  new  byte[buffer[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readBuf[i]  =  new  byte[buffer[i];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    readBuf[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
277	[BUG]  [BUGGY]  if(headerBuf!=  null  &&!hasHitEOF  &&  headerBuf.endsWith( "/   "))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&!hasHitEOF  &&  headerBuf.endsWith( "/   "))  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&!hasHitEOF  &&  headerBuf.endsWith( "/   "))  {	  if(!hasHitEOF    &&    headerBuf.endsWith(   "/   "))    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
278	[BUG]  [BUGGY]  if(headerBuf.length()  ==  0  &&!hasHitEOF  &&  headerBuf.endsWith( "/   "))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length()  ==  0  &&!hasHitEOF  &&  headerBuf.endsWith( "/   "))  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length()  ==  0  &&!hasHitEOF  &&  headerBuf.endsWith( "/   "))  {	  if(!hasHitEOF    &&    headerBuf.endsWith(   "/   "))    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
279	[BUG]  [BUGGY]  if(!hasHitEOF  &&  headerBuf.startsWith( "/ "))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(!hasHitEOF  &&  headerBuf.startsWith( "/ "))  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(!hasHitEOF  &&  headerBuf.startsWith( "/ "))  {	  if(!hasHitEOF    &&    headerBuf.endsWith(   "/   "))    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
280	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length!=  readBuf.length)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length!=  readBuf.length)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  ||  headerBuf.length!=  readBuf.length)  {	  if(headerBuf.length!=    readBuf.length)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
281	[BUG]  [BUGGY]  if(headerBuf.length  >=  readBuf.length)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >=  readBuf.length)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >=  readBuf.length)  {	  if(headerBuf.length!=    readBuf.length)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
282	[BUG]  [BUGGY]  if(headerBuf.length!=  len)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  len)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  len)  {	  if(headerBuf.length!=    readBuf.length)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
283	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length!=  0)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length!=  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf.length!=  0)  {	  if(headerBuf!=    null    &&    headerBuf!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
284	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  readBuf!=  null)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  readBuf!=  null)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  readBuf!=  null)  {	  if(headerBuf!=    null    &&    headerBuf!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
285	[BUG]  [BUGGY]  longName  =  getHitEOF(headerBuf,  headerSize);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  longName  =  getHitEOF(headerBuf,  headerSize);  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	longName  =  getHitEOF(headerBuf,  headerSize);	  longName    =    getHitEOF(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
286	[BUG]  [BUGGY]  longName  =  getHitEOF(headerBuf,  headerOffset);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  longName  =  getHitEOF(headerBuf,  headerOffset);  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	longName  =  getHitEOF(headerBuf,  headerOffset);	  longName    =    getHitEOF(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
287	[BUG]  [BUGGY]  longName  =  getHitEOF(headerBuf,  null);  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  longName  =  getHitEOF(headerBuf,  null);  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	longName  =  getHitEOF(headerBuf,  null);	  longName    =    getHitEOF(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
288	[BUG]  [BUGGY]  if(headerBuf.length  ==  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  'n')  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  ==  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  'n')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  ==  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  'n')  {	  if(!hasHitEOF    &&    headerBuf.charAt(headerBuf.length    -    1)!=    'n')    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
289	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.charAt(headerBuf.length  -  1)!=  'n')  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.charAt(headerBuf.length  -  1)!=  'n')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf.charAt(headerBuf.length  -  1)!=  'n')  {	  if(!hasHitEOF    &&    headerBuf.charAt(headerBuf.length    -    1)!=    'n')    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
290	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length()  ==  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  'n')  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length()  ==  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  'n')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf.length()  ==  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  'n')  {	  if(!hasHitEOF    &&    headerBuf.charAt(headerBuf.length    -    1)!=    'n')    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
291	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length()  >  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  'n')  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length()  >  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  'n')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf.length()  >  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  'n')  {	  if(!hasHitEOF    &&    headerBuf.charAt(headerBuf.length    -    1)!=    'n')    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
292	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readBuf[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readBuf[i]  =  buffer[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readBuf[i]  =  buffer[i];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    readBuf[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
293	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  readBuf.length;  ++i)  {  readBuf[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  readBuf.length;  ++i)  {  readBuf[i]  =  buffer[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  readBuf.length;  ++i)  {  readBuf[i]  =  buffer[i];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    readBuf[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
294	[BUG]  [BUGGY]  if(numToSkip  ==  headerBuf.length  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(numToSkip  ==  headerBuf.length  &&  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(numToSkip  ==  headerBuf.length  &&  headerBuf.length  >  0)  {	  if(headerBuf.length    ==    numToSkip    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
295	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  <  readBuf.length)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  <  readBuf.length)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  ||  headerBuf.length  <  readBuf.length)  {	  if(headerBuf!=    null    ||    headerBuf.length    <    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
296	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  new  byte[buffer.length];  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  new  byte[buffer.length];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  new  byte[buffer.length];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
297	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  currEntry.getName();  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  currEntry.getName();  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  currEntry.getName();  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
298	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||!hasHitEOF  &&  headerBuf.endsWith( "/   "))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null  ||!hasHitEOF  &&  headerBuf.endsWith( "/   "))  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  ||!hasHitEOF  &&  headerBuf.endsWith( "/   "))  {	  if(!hasHitEOF    &&    headerBuf.endsWith(   "/   "))    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
299	[BUG]  [BUGGY]  if(headerBuf!=  null  ||!hasHitEOF  &&  headerBuf.endsWith( "/   "))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  ||!hasHitEOF  &&  headerBuf.endsWith( "/   "))  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  ||!hasHitEOF  &&  headerBuf.endsWith( "/   "))  {	  if(!hasHitEOF    &&    headerBuf.endsWith(   "/   "))    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
300	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.endsWith( ".jpg "))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.endsWith( ".jpg "))  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf.endsWith( ".jpg "))  {	  if(!hasHitEOF    &&    headerBuf.endsWith(   "/   "))    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
301	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.endsWith( "/   "))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.endsWith( "/   "))  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf.endsWith( "/   "))  {	  if(!hasHitEOF    &&    headerBuf.endsWith(   "/   "))    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
302	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  ==  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  ==  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  ||  headerBuf.length  ==  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(headerBuf.length    ==    0    ||    headerBuf.charAt(headerBuf.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
303	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  <  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  <  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  ||  headerBuf.length  <  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(headerBuf.length    ==    0    ||    headerBuf.charAt(headerBuf.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
304	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  <  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  <  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  ||  headerBuf.length  <  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(headerBuf.length    ==    0    ||    headerBuf.charAt(headerBuf.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
305	[BUG]  [BUGGY]  if(!hashEOF  &&  headerBuf!=  null)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(!hashEOF  &&  headerBuf!=  null)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(!hashEOF  &&  headerBuf!=  null)  {	  if(!hasHitEOF    &&    headerBuf!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
306	[BUG]  [BUGGY]  if(headerBuf.length  <  numToSkip  -  1)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  <  numToSkip  -  1)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  <  numToSkip  -  1)  {	  if(headerBuf.length    ==    numToSkip    -    1)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
307	[BUG]  [BUGGY]  if(headerBuf.length  ==  readBuf.length  +  1)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  ==  readBuf.length  +  1)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  ==  readBuf.length  +  1)  {	  if(headerBuf.length    ==    numToSkip    +    1)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
308	[BUG]  [BUGGY]  if(headerBuf.length  <  numToSkip  +  1)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  <  numToSkip  +  1)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  <  numToSkip  +  1)  {	  if(headerBuf.length    ==    numToSkip    +    1)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
309	[BUG]  [BUGGY]  if(headerBuf.length  ==  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  ':')  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  ==  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  ':')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  ==  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  ':')  {	  if(!hasHitEOF    &&    headerBuf.charAt(headerBuf.length    -    1)!=    ':')    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
310	[BUG]  [BUGGY]  if(headerBuf.length  >=  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  ':')  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >=  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  ':')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >=  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  ':')  {	  if(!hasHitEOF    &&    headerBuf.charAt(headerBuf.length    -    1)!=    ':')    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
311	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.charAt(headerBuf.length  -  1)!=  ':')  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.charAt(headerBuf.length  -  1)!=  ':')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf.charAt(headerBuf.length  -  1)!=  ':')  {	  if(!hasHitEOF    &&    headerBuf.charAt(headerBuf.length    -    1)!=    ':')    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
312	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length()  ==  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  ':')  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length()  ==  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  ':')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf.length()  ==  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  ':')  {	  if(!hasHitEOF    &&    headerBuf.charAt(headerBuf.length    -    1)!=    ':')    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
313	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length()  >  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  ':')  {  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length()  >  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  ':')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf.length()  >  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  ':')  {	  if(!hasHitEOF    &&    headerBuf.charAt(headerBuf.length    -    1)!=    ':')    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
314	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  >  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  ':')  {  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  >  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  ':')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf.length  >  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  ':')  {	  if(!hasHitEOF    &&    headerBuf.charAt(headerBuf.length    -    1)!=    ':')    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
315	[BUG]  [BUGGY]  if(readBuf.length!=  headerBuf.length)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(readBuf.length!=  headerBuf.length)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(readBuf.length!=  headerBuf.length)  {	  if(headerBuf.length!=    readBuf.length)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
316	[BUG]  [BUGGY]  if(headerBuf.length!=  readBuf.length  ||  headerBuf.length!=  readBuf.length)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  readBuf.length  ||  headerBuf.length!=  readBuf.length)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  readBuf.length  ||  headerBuf.length!=  readBuf.length)  {	  if(headerBuf.length!=    readBuf.length)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
317	[BUG]  [BUGGY]  longName  =  hasHitEOF?  getHitEOF()  :  headerBuf;  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  longName  =  hasHitEOF?  getHitEOF()  :  headerBuf;  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	longName  =  hasHitEOF?  getHitEOF()  :  headerBuf;	  longName    =    getHitEOF();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
318	[BUG]  [BUGGY]  if(headerBuf.length  >  0  &&  headerBuf.length  >  SMALL_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >  0  &&  headerBuf.length  >  SMALL_BUFFER_SIZE)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >  0  &&  headerBuf.length  >  SMALL_BUFFER_SIZE)  {	  if(headerBuf.length    >    0    ||    headerBuf.length    >    SMALL_BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
319	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  >  0  ||  headerBuf.length  >  SMALL_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  >  0  ||  headerBuf.length  >  SMALL_BUFFER_SIZE)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf.length  >  0  ||  headerBuf.length  >  SMALL_BUFFER_SIZE)  {	  if(headerBuf.length    >    0    ||    headerBuf.length    >    SMALL_BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
320	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  headerBuf[i];  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  headerBuf[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  headerBuf[i];  }	  if(headerBuf.length()    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
321	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  new  byte[headerBuf.length()  ];  }  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  new  byte[headerBuf.length()  ];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  new  byte[headerBuf.length()  ];  }	  if(headerBuf.length()    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
322	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  headerBuf[i];  }  [CE]  illegal  start  of  type  [FE]                                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  headerBuf[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  headerBuf[i];  }	  if(headerBuf.length()    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
323	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  getNextTarEntry(headerBuf);  }  [CE]  illegal  start  of  type  [FE]                                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  getNextTarEntry(headerBuf);  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  getNextTarEntry(headerBuf);  }	  if(headerBuf.length()    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
324	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.endsWith( ".js "))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.endsWith( ".js "))  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf.endsWith( ".js "))  {	  if(!hasHitEOF    &&    headerBuf.endsWith(   ".js   "))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
325	[BUG]  [BUGGY]  if(headerBuf!=  null  &&!hasHitEOF  &&  headerBuf.endsWith( ".js "))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&!hasHitEOF  &&  headerBuf.endsWith( ".js "))  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&!hasHitEOF  &&  headerBuf.endsWith( ".js "))  {	  if(!hasHitEOF    &&    headerBuf.endsWith(   ".js   "))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
326	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.endsWith( "/.js "))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.endsWith( "/.js "))  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf.endsWith( "/.js "))  {	  if(!hasHitEOF    &&    headerBuf.endsWith(   ".js   "))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
327	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  >  0  ||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  >  0  ||  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf.length  >  0  ||  headerBuf.length  >  0)  {	  if(headerBuf.length    >    0    ||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
328	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  currEntry[i]  =  readBuf[i];  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  currEntry[i]  =  readBuf[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  currEntry[i]  =  readBuf[i];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    currEntry[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
329	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  currEntry[i]  =  new  byte[buffer.length];  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  currEntry[i]  =  new  byte[buffer.length];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  currEntry[i]  =  new  byte[buffer.length];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    currEntry[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
330	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  new  TarArchiveEntry(headerBuf[i]);  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  new  TarArchiveEntry(headerBuf[i]);  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  new  TarArchiveEntry(headerBuf[i]);  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    getNextTarEntry(headerBuf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
331	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  >  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  >  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf.length  >  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(headerBuf.length    >    0    ||    headerBuf.charAt(headerBuf.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
332	[BUG]  [BUGGY]  if(headerBuf.length!=  readBuf.length  +  1)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  readBuf.length  +  1)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  readBuf.length  +  1)  {	  if(headerBuf.length!=    numToSkip    +    1)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
333	[BUG]  [BUGGY]  if(headerBuf.length  >>  numToSkip  +  1)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >>  numToSkip  +  1)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >>  numToSkip  +  1)  {	  if(headerBuf.length!=    numToSkip    +    1)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
334	[BUG]  [BUGGY]  if(headerBuf.length!=  numToSkip  +  2)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  numToSkip  +  2)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  numToSkip  +  2)  {	  if(headerBuf.length!=    numToSkip    +    1)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
335	[BUG]  [BUGGY]  byte[]  headerBuf  =  getHeaderBuffer();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  byte[]  headerBuf  =  getHeaderBuffer();  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	byte[]  headerBuf  =  getHeaderBuffer();	  byte[]    headerBuf    =    getRecord();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
336	[BUG]  [BUGGY]  byte[]  headerBuf  =  getRecord(headerBuf);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  byte[]  headerBuf  =  getRecord(headerBuf);  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	byte[]  headerBuf  =  getRecord(headerBuf);	  byte[]    headerBuf    =    getRecord();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
337	[BUG]  [BUGGY]  byte[]  headerBuf  =  getRecord().getHeaderBuffer();  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  byte[]  headerBuf  =  getRecord().getHeaderBuffer();  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	byte[]  headerBuf  =  getRecord().getHeaderBuffer();	  byte[]    headerBuf    =    getRecord();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
338	[BUG]  [BUGGY]  byte[]  headerBuf  =  getRecordEscaped();  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  byte[]  headerBuf  =  getRecordEscaped();  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	byte[]  headerBuf  =  getRecordEscaped();	  byte[]    headerBuf    =    getRecord();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
339	[BUG]  [BUGGY]  byte[]  headerBuf  =  getRecord().buffer;  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  byte[]  headerBuf  =  getRecord().buffer;  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	byte[]  headerBuf  =  getRecord().buffer;	  byte[]    headerBuf    =    getRecord();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
340	[BUG]  [BUGGY]  if(headerBuf  ==  null  &&  headerBuf.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null  &&  headerBuf.length!=  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  &&  headerBuf.length!=  0)  {	  if(headerBuf!=    null    &&    headerBuf.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
341	[BUG]  [BUGGY]  if(readBuf.length  ==  headerBuf.length)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(readBuf.length  ==  headerBuf.length)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(readBuf.length  ==  headerBuf.length)  {	  if(headerBuf.length    ==    readBuf.length)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
342	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  ==  readBuf.length)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  ==  readBuf.length)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  ||  headerBuf.length  ==  readBuf.length)  {	  if(headerBuf.length    ==    readBuf.length)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
343	[BUG]  [BUGGY]  if(headerBuf.length  ==  readBuf.length  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  ==  readBuf.length  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  ==  readBuf.length  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(headerBuf.length    ==    readBuf.length)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
344	[BUG]  [BUGGY]  if(headerBuf.length!=  0  &&  headerBuf.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  0  &&  headerBuf.length  ==  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  0  &&  headerBuf.length  ==  0)  {	  if(headerBuf.length!=    0    ||    headerBuf.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
345	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length!=  0  ||  headerBuf.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length!=  0  ||  headerBuf.length  ==  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf.length!=  0  ||  headerBuf.length  ==  0)  {	  if(headerBuf.length!=    0    ||    headerBuf.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
346	[BUG]  [BUGGY]  if(headerBuf.length!=  numToSkip  &&  headerBuf.length!=  numRead)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  numToSkip  &&  headerBuf.length!=  numRead)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  numToSkip  &&  headerBuf.length!=  numRead)  {	  if(headerBuf.length!=    numToSkip    ||    headerBuf.length!=    numRead)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
347	[BUG]  [BUGGY]  if(headerBuf.length!=  numToSkip  ||  headerBuf.length  >  numRead)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  numToSkip  ||  headerBuf.length  >  numRead)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  numToSkip  ||  headerBuf.length  >  numRead)  {	  if(headerBuf.length!=    numToSkip    ||    headerBuf.length!=    numRead)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
348	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||!hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null  ||!hasHitEOF)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  ||!hasHitEOF)  {	  if(!hasHitEOF    &&    headerBuf    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
349	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry[i]  =  readBuf[i];  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry[i]  =  readBuf[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry[i]  =  readBuf[i];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    currEntry[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
350	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  hasHitEOF  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  hasHitEOF  &&  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  hasHitEOF  &&  headerBuf.length  >  0)  {	  if(headerBuf!=    null    ||    hasHitEOF    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
351	[BUG]  [BUGGY]  if(headerBuf  ==  null  &&  hasHitEOF  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null  &&  hasHitEOF  &&  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  &&  hasHitEOF  &&  headerBuf.length  >  0)  {	  if(headerBuf!=    null    ||    hasHitEOF    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
352	[BUG]  [BUGGY]  if(headerBuf!=  null  &&!hasHitEOF  &&  headerBuf.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&!hasHitEOF  &&  headerBuf.length()  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&!hasHitEOF  &&  headerBuf.length()  >  0)  {	  if(!hasHitEOF    &&    headerBuf.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
353	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||!hasHitEOF  &&  headerBuf.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null  ||!hasHitEOF  &&  headerBuf.length()  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  ||!hasHitEOF  &&  headerBuf.length()  >  0)  {	  if(!hasHitEOF    &&    headerBuf.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
354	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length()  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf.length()  >  0)  {	  if(!hasHitEOF    &&    headerBuf.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
355	[BUG]  [BUGGY]  if(headerBuf.length  ==  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  ==  0  ||  hasHitEOF)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  ==  0  ||  hasHitEOF)  {	  if(headerBuf.length    >    0    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
356	[BUG]  [BUGGY]  if(headerBuf.length  >=  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >=  0  ||  hasHitEOF)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >=  0  ||  hasHitEOF)  {	  if(headerBuf.length    >    0    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
357	[BUG]  [BUGGY]  if(headerBuf.length  <  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  <  0  ||  hasHitEOF)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  <  0  ||  hasHitEOF)  {	  if(headerBuf.length    >    0    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
358	[BUG]  [BUGGY]  if(headerBuf.length!=  numToSkip  &&  headerBuf.length  >=  numRead)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  numToSkip  &&  headerBuf.length  >=  numRead)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  numToSkip  &&  headerBuf.length  >=  numRead)  {	  if(headerBuf.length!=    numToSkip    ||    headerBuf.length    >=    numRead)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
359	[BUG]  [BUGGY]  if(headerBuf.length!=  numToSkip  ||  headerBuf.length  >=  readBuf.length)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  numToSkip  ||  headerBuf.length  >=  readBuf.length)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  numToSkip  ||  headerBuf.length  >=  readBuf.length)  {	  if(headerBuf.length!=    numToSkip    ||    headerBuf.length    >=    numRead)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
360	[BUG]  [BUGGY]  if(headerBuf.length  ==  numToSkip  &&  headerBuf.length  ==  numRead)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  ==  numToSkip  &&  headerBuf.length  ==  numRead)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  ==  numToSkip  &&  headerBuf.length  ==  numRead)  {	  if(headerBuf.length    ==    numToSkip    ||    headerBuf.length    ==    numRead)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
361	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||!hasHitEOF  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null  ||!hasHitEOF  &&  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  ||!hasHitEOF  &&  headerBuf.length  >  0)  {	  if(!hasHitEOF    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
362	[BUG]  [BUGGY]  if(headerBuf!=  null  &&!hasHitEOF  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&!hasHitEOF  &&  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&!hasHitEOF  &&  headerBuf.length  >  0)  {	  if(!hasHitEOF    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
363	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  new  byte[1];  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  new  byte[1];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  new  byte[1];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
364	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  new  byte[buffer.length];  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  new  byte[buffer.length];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  new  byte[buffer.length];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
365	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  new  byte[5];  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  new  byte[5];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  new  byte[5];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
366	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  currEntry.getName();  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  currEntry.getName();  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  currEntry.getName();  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
367	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  new  byte[6];  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  new  byte[6];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  new  byte[6];  }	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
368	[BUG]  [BUGGY]  if(headerBuf.length!=  entryOffset  +  1)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  entryOffset  +  1)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  entryOffset  +  1)  {	  if(headerBuf.length!=    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
369	[BUG]  [BUGGY]  if(headerBuf.length  >=  readBuf.length  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >=  readBuf.length  &&  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >=  readBuf.length  &&  headerBuf.length  >  0)  {	  if(headerBuf.length    >=    hasHitEOF    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
370	[BUG]  [BUGGY]  if(headerBuf.length  >=  hasHitEOF  &&  headerBuf.length  >  1)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >=  hasHitEOF  &&  headerBuf.length  >  1)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >=  hasHitEOF  &&  headerBuf.length  >  1)  {	  if(headerBuf.length    >=    hasHitEOF    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
371	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf!=  null  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  ||  headerBuf!=  null  &&  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  ||  headerBuf!=  null  &&  headerBuf.length  >  0)  {	  if(hasHitEOF    &&    headerBuf!=    null    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
372	[BUG]  [BUGGY]  if(headerBuf  >=  null  &&  headerBuf!=  null  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  >=  null  &&  headerBuf!=  null  &&  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  >=  null  &&  headerBuf!=  null  &&  headerBuf.length  >  0)  {	  if(hasHitEOF    &&    headerBuf!=    null    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
373	[BUG]  [BUGGY]  byte[]  buf  =  getBuffer(buffer.length);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  byte[]  buf  =  getBuffer(buffer.length);  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	byte[]  buf  =  getBuffer(buffer.length);	  byte[]    buf    =    getBuffer();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
374	[BUG]  [BUGGY]  byte[]  buf  =  getBuffer().toCharArray();  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  byte[]  buf  =  getBuffer().toCharArray();  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	byte[]  buf  =  getBuffer().toCharArray();	  byte[]    buf    =    getBuffer();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
375	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  headerBuf[i];  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  headerBuf[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  headerBuf[i];  }	  if(headerBuf.length()    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
376	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  new  byte[headerBuf.length()  ];  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  new  byte[headerBuf.length()  ];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  new  byte[headerBuf.length()  ];  }	  if(headerBuf.length()    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
377	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  headerBuf[i];  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  headerBuf[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  headerBuf[i];  }	  if(headerBuf.length()    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
378	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  ==  numToSkip  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  ==  numToSkip  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf.length  ==  numToSkip  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(headerBuf.length    ==    numToSkip    &&    headerBuf.charAt(headerBuf.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
379	[BUG]  [BUGGY]  if(headerBuf.length  ==  len  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  ==  len  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  ==  len  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(headerBuf.length    ==    numToSkip    &&    headerBuf.charAt(headerBuf.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
380	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  new  byte[headerBuf.length];  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  new  byte[headerBuf.length];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  new  byte[headerBuf.length];  }	  if(headerBuf.length    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
381	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  getNextTarEntry(headerBuf);  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  getNextTarEntry(headerBuf);  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  getNextTarEntry(headerBuf);  }	  if(headerBuf.length    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
382	[BUG]  [BUGGY]  while(headerBuf.length  <  numToSkip)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  while(headerBuf.length  <  numToSkip)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	while(headerBuf.length  <  numToSkip)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }	  if(headerBuf.length    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
383	[BUG]  [BUGGY]  if(headerBuf.length  >=  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >=  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >=  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(!hasHitEOF    &&    headerBuf.charAt(headerBuf.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
384	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(!hasHitEOF    &&    headerBuf.charAt(headerBuf.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
385	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length()  ==  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length()  ==  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf.length()  ==  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(!hasHitEOF    &&    headerBuf.charAt(headerBuf.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
386	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length()  >  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length()  >  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf.length()  >  0  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(!hasHitEOF    &&    headerBuf.charAt(headerBuf.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
387	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  ==  numToSkip)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  ==  numToSkip)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf.length  ==  numToSkip)  {	  if(headerBuf!=    null    ||    headerBuf.length    ==    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
388	[BUG]  [BUGGY]  if(headerBuf  ==  null  &&  headerBuf  ==  null)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null  &&  headerBuf  ==  null)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  &&  headerBuf  ==  null)  {	  if(hasHitEOF    &&    headerBuf    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
389	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  new  byte[headerBuf.length];  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  new  byte[headerBuf.length];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  new  byte[headerBuf.length];  }	  if(headerBuf.length    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
390	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  readBuf[i];  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  readBuf[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  readBuf[i];  }	  if(headerBuf.length    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
391	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  >  0  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  >  0  &&  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  ||  headerBuf.length  >  0  &&  headerBuf.length  >  0)  {	  if(headerBuf.length    >    0    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
392	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  >  0  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  >  0  &&  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  ||  headerBuf.length  >  0  &&  headerBuf.length  >  0)  {	  if(headerBuf.length    >    0    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
393	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.endsWith( ".zip "))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.endsWith( ".zip "))  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf.endsWith( ".zip "))  {	  if(!hasHitEOF    &&    headerBuf.endsWith(   ".zip   "))    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
394	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||!hasHitEOF  &&  headerBuf.endsWith( ".zip "))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null  ||!hasHitEOF  &&  headerBuf.endsWith( ".zip "))  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  ||!hasHitEOF  &&  headerBuf.endsWith( ".zip "))  {	  if(!hasHitEOF    &&    headerBuf.endsWith(   ".zip   "))    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
395	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  readBuf.length  -  1;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  readBuf[i];  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  readBuf.length  -  1;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  readBuf[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  readBuf.length  -  1;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  readBuf[i];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    readBuf[i];    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
396	[BUG]  [BUGGY]  if(headerBuf.length!=  numToSkip  &&  headerBuf.length  >  1)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  numToSkip  &&  headerBuf.length  >  1)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  numToSkip  &&  headerBuf.length  >  1)  {	  if(headerBuf.length!=    numToSkip    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
397	[BUG]  [BUGGY]  if(headerBuf.length  >  0  &&  headerBuf.length  <  numToSkip)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >  0  &&  headerBuf.length  <  numToSkip)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >  0  &&  headerBuf.length  <  numToSkip)  {	  if(headerBuf.length    >    0    ||    headerBuf.length    <    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
398	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  >  0  ||  headerBuf.length  <  numToSkip)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  >  0  ||  headerBuf.length  <  numToSkip)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  ||  headerBuf.length  >  0  ||  headerBuf.length  <  numToSkip)  {	  if(headerBuf.length    >    0    ||    headerBuf.length    <    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
399	[BUG]  [BUGGY]  if(headerBuf.length  >  0  ||  headerBuf.length  <  readBuf.length)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >  0  ||  headerBuf.length  <  readBuf.length)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >  0  ||  headerBuf.length  <  readBuf.length)  {	  if(headerBuf.length    >    0    ||    headerBuf.length    <    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
400	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  headBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headBuf.length  >  0)  {	  if(headerBuf!=    null    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
401	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  <  0)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  <  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf.length  <  0)  {	  if(headerBuf!=    null    ||    headerBuf.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
402	[BUG]  [BUGGY]  if(headerBuf.length!=  0  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  0  &&  hasHitEOF)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  0  &&  hasHitEOF)  {	  if(headerBuf.length    >    0    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
403	[BUG]  [BUGGY]  if(headerBuf.length!=  numToSkip  &&  headerBuf.length  >=  numToSkip)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  numToSkip  &&  headerBuf.length  >=  numToSkip)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  numToSkip  &&  headerBuf.length  >=  numToSkip)  {	  if(headerBuf.length!=    numToSkip    ||    headerBuf.length    >=    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
404	[BUG]  [BUGGY]  if(headerBuf.length  ==  numToSkip  ||  headerBuf.length  >=  numToSkip)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  ==  numToSkip  ||  headerBuf.length  >=  numToSkip)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  ==  numToSkip  ||  headerBuf.length  >=  numToSkip)  {	  if(headerBuf.length!=    numToSkip    ||    headerBuf.length    >=    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
405	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readerBuf[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readerBuf[i]  =  buffer[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readerBuf[i]  =  buffer[i];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    readerBuf[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
406	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readerBuf[i]  =  new  byte[buffer.length];  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readerBuf[i]  =  new  byte[buffer.length];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readerBuf[i]  =  new  byte[buffer.length];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    readerBuf[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
407	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readerBuf[i]  =  readBuf[i];  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readerBuf[i]  =  readBuf[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readerBuf[i]  =  readBuf[i];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    readerBuf[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
408	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  getNextTarEntry();  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  getNextTarEntry();  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  getNextTarEntry();  }	  if(headerBuf.length()    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
409	[BUG]  [BUGGY]  if(headerBuf.length  ==  0  ||  headerBuf.length  ==  numToSkip)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  ==  0  ||  headerBuf.length  ==  numToSkip)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  ==  0  ||  headerBuf.length  ==  numToSkip)  {	  if(headerBuf.length    ==    numToSkip    ||    headerBuf.length    ==    numRead)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
410	[BUG]  [BUGGY]  if(headerBuf.length  >=  headerBuf.length)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >=  headerBuf.length)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >=  headerBuf.length)  {	  if(headerBuf.length    ==    readBuf.length)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
411	[BUG]  [BUGGY]  if(headerBuf.length!=  headerBuf.length)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  headerBuf[i];  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  headerBuf.length)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  headerBuf[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  headerBuf.length)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  headerBuf[i];  }	  if(headerBuf.length    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
412	[BUG]  [BUGGY]  if(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  headerBuf[i];  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  headerBuf[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  headerBuf[i];  }	  if(headerBuf.length    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
413	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  currEntry[i]  =  headerBuf[i];  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  currEntry[i]  =  headerBuf[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  currEntry[i]  =  headerBuf[i];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    currEntry[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
414	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  <  2  ||  headerBuf.length  <  2)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  <  2  ||  headerBuf.length  <  2)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  ||  headerBuf.length  <  2  ||  headerBuf.length  <  2)  {	  if(headerBuf    ==    null    ||    headerBuf.length    <    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
415	[BUG]  [BUGGY]  if(headerBuf.length!=  headerBuf.length)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  headerBuf[i];  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  headerBuf.length)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  headerBuf[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  headerBuf.length)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  headerBuf[i];  }	  if(headerBuf.length    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
416	[BUG]  [BUGGY]  while(headerBuf.length  <  headerSize)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  while(headerBuf.length  <  headerSize)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	while(headerBuf.length  <  headerSize)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }	  if(headerBuf.length    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
417	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  getNextTarEntry();  }  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  getNextTarEntry();  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  getNextTarEntry();  }	  if(headerBuf.length    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
418	[BUG]  [BUGGY]  if(headerBuf.length!=  numToSkip  ||  headerBuf.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  numToSkip  ||  headerBuf.length  ==  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  numToSkip  ||  headerBuf.length  ==  0)  {	  if(headerBuf.length!=    0    ||    headerBuf.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
419	[BUG]  [BUGGY]  if(headerBuf.length  <  numToSkip  ||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  <  numToSkip  ||  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  <  numToSkip  ||  headerBuf.length  >  0)  {	  if(headerBuf.length    >    0    ||    headerBuf.length    <    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
420	[BUG]  [BUGGY]  if(headerBuf.length  ==  0  ||  headerBuf.length  <  numToSkip)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  ==  0  ||  headerBuf.length  <  numToSkip)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  ==  0  ||  headerBuf.length  <  numToSkip)  {	  if(headerBuf.length    >    0    ||    headerBuf.length    <    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
421	[BUG]  [BUGGY]  if(headerBuf.endsWith( "/ "))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.endsWith( "/ "))  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.endsWith( "/ "))  {	  if(!hasHitEOF    &&    headerBuf.endsWith(   "/   "))    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
422	[BUG]  [BUGGY]  if(headerBuf!=  null  &&!hasHitEOF  &&  headerBuf.endsWith( ".java "))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&!hasHitEOF  &&  headerBuf.endsWith( ".java "))  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&!hasHitEOF  &&  headerBuf.endsWith( ".java "))  {	  if(!hasHitEOF    &&    headerBuf.endsWith(   "/   "))    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
423	[BUG]  [BUGGY]  longName  =  getHitEOF(headerBuf,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  longName  =  getHitEOF(headerBuf,  headerBuf.length);  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	longName  =  getHitEOF(headerBuf,  headerBuf.length);	  longName    =    getHitEOF(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
424	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readBuf[i]  =  headerBuf[i];  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readBuf[i]  =  headerBuf[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readBuf[i]  =  headerBuf[i];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    readBuf[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
425	[BUG]  [BUGGY]  readBuf  =  readBuf[i];  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  readBuf  =  readBuf[i];  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	readBuf  =  readBuf[i];	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    readBuf[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
426	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readBuf[i]  =  new  byte[4];  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readBuf[i]  =  new  byte[4];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readBuf[i]  =  new  byte[4];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    readBuf[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
427	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readBuf[i]  =  new  byte[buffer.length];  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readBuf[i]  =  new  byte[buffer.length];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readBuf[i]  =  new  byte[buffer.length];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    readBuf[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
428	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readBuf[i]  =  new  byte[1];  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readBuf[i]  =  new  byte[1];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readBuf[i]  =  new  byte[1];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    readBuf[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
429	[BUG]  [BUGGY]  if(headerBuf.length  ==  entrySize  +  1)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  ==  entrySize  +  1)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  ==  entrySize  +  1)  {	  if(headerBuf.length    ==    numToSkip    +    1)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
430	[BUG]  [BUGGY]  if(headerBuf.length!=  entrySize  +  1)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  entrySize  +  1)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  entrySize  +  1)  {	  if(headerBuf.length    ==    numToSkip    +    1)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
431	[BUG]  [BUGGY]  if(!hasHitEOF  &&  headerBuf.startsWith( "/.js "))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(!hasHitEOF  &&  headerBuf.startsWith( "/.js "))  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(!hasHitEOF  &&  headerBuf.startsWith( "/.js "))  {	  if(!hasHitEOF    &&    headerBuf.endsWith(   ".js   "))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
432	[BUG]  [BUGGY]  if(headerBuf.length  <  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  ':')  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  <  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  ':')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  <  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  ':')  {	  if(!hasHitEOF    &&    headerBuf.charAt(headerBuf.length    -    1)!=    ':')    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
433	[BUG]  [BUGGY]  if(!hasHitEOF  &&  headerBuf.charAt(headerBuf.length  -  1)  ==  ':')  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(!hasHitEOF  &&  headerBuf.charAt(headerBuf.length  -  1)  ==  ':')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(!hasHitEOF  &&  headerBuf.charAt(headerBuf.length  -  1)  ==  ':')  {	  if(!hasHitEOF    &&    headerBuf.charAt(headerBuf.length    -    1)!=    ':')    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
434	[BUG]  [BUGGY]  if(headerBuf  ==  null  &&  headerBuf.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null  &&  headerBuf.length  ==  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  &&  headerBuf.length  ==  0)  {	  if(headerBuf!=    null    &&    headerBuf.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
435	[BUG]  [BUGGY]  byte[]  buf  =  getBufferInputBuffer();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  byte[]  buf  =  getBufferInputBuffer();  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	byte[]  buf  =  getBufferInputBuffer();	  byte[]    buf    =    getBuffer();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
436	[BUG]  [BUGGY]  byte[]  buf  =  getBufferRecord();  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  byte[]  buf  =  getBufferRecord();  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	byte[]  buf  =  getBufferRecord();	  byte[]    buf    =    getBuffer();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
437	[BUG]  [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  getNextTarEntry(headerBuf[i]);  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  getNextTarEntry(headerBuf[i]);  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  getNextTarEntry(headerBuf[i]);  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    getNextTarEntry(headerBuf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
438	[BUG]  [BUGGY]  if(headerBuf  >=  null  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  >=  null  ||  hasHitEOF)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  >=  null  ||  hasHitEOF)  {	  if(headerBuf    ==    null    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
439	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  <  =  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  <  =  hasHitEOF)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf.length  <  =  hasHitEOF)  {	  if(headerBuf    ==    null    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
440	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  <  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  <  hasHitEOF)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf.length  <  hasHitEOF)  {	  if(headerBuf    ==    null    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
441	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readerBuf[i]  =  headerBuf[i];  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readerBuf[i]  =  headerBuf[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  readerBuf[i]  =  headerBuf[i];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    readerBuf[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
442	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  <  2)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  <  2)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  ||  headerBuf.length  <  2)  {	  if(headerBuf    ==    null    ||    headerBuf.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
443	[BUG]  [BUGGY]  if(headerBuf.endsWith( ".zip "))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.endsWith( ".zip "))  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.endsWith( ".zip "))  {	  if(!hasHitEOF    &&    headerBuf.endsWith(   ".zip   "))    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
444	[BUG]  [BUGGY]  if(headerBuf.length()  ==  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length()  ==  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length()  ==  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(!hasHitEOF    &&    headerBuf.charAt(headerBuf.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
445	[BUG]  [BUGGY]  if(!hasHitEOF  &&  headerBuf.charAt(headerBuf.length  -  1)  ==  '/')  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(!hasHitEOF  &&  headerBuf.charAt(headerBuf.length  -  1)  ==  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(!hasHitEOF  &&  headerBuf.charAt(headerBuf.length  -  1)  ==  '/')  {	  if(!hasHitEOF    &&    headerBuf.charAt(headerBuf.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
446	[BUG]  [BUGGY]  if(headerBuf.length!=  entrySize  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  entrySize  &&  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  entrySize  &&  headerBuf.length  >  0)  {	  if(headerBuf.length!=    numToSkip    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
447	[BUG]  [BUGGY]  if(headerBuf.length  ==  entrySize  -  1)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  ==  entrySize  -  1)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  ==  entrySize  -  1)  {	  if(headerBuf.length    ==    numToSkip    -    1)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
448	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  ==  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  ==  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf.length  ==  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(headerBuf.length    ==    0    ||    headerBuf.charAt(headerBuf.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
449	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length()!=  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length()!=  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  ||  headerBuf.length()!=  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(headerBuf.length    ==    0    ||    headerBuf.charAt(headerBuf.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
450	[BUG]  [BUGGY]  if(headerBuf.length!=  headerBuf.length  ||  headerBuf.length!=  readBuf.length)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  headerBuf.length  ||  headerBuf.length!=  readBuf.length)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  headerBuf.length  ||  headerBuf.length!=  readBuf.length)  {	  if(headerBuf.length!=    readBuf.length)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
451	[BUG]  [BUGGY]  longName  =  getHitEOF()  &  BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  longName  =  getHitEOF()  &  BUFFER_SIZE;  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	longName  =  getHitEOF()  &  BUFFER_SIZE;	  longName    =    getHitEOF();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
452	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  <  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  <  hasHitEOF)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  ||  headerBuf.length  <  hasHitEOF)  {	  if(headerBuf!=    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
453	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length!=  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length!=  hasHitEOF)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  ||  headerBuf.length!=  hasHitEOF)  {	  if(headerBuf!=    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
454	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  ==  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  ==  hasHitEOF)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  ||  headerBuf.length  ==  hasHitEOF)  {	  if(headerBuf!=    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
455	[BUG]  [BUGGY]  if(headerBuf.length  <  numToSkip  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  <  numToSkip  &&  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  <  numToSkip  &&  headerBuf.length  >  0)  {	  if(headerBuf.length    ==    numToSkip    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
456	[BUG]  [BUGGY]  if(headerBuf.length  >=  0  ||  headerBuf.length  >  SMALL_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >=  0  ||  headerBuf.length  >  SMALL_BUFFER_SIZE)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >=  0  ||  headerBuf.length  >  SMALL_BUFFER_SIZE)  {	  if(headerBuf.length    >    0    ||    headerBuf.length    >    SMALL_BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
457	[BUG]  [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  headerBuf[i];  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  headerBuf[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  headerBuf[i];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
458	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  ==  0  ||  headerBuf.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  ==  0  ||  headerBuf.length  ==  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  &&  headerBuf.length  ==  0  ||  headerBuf.length  ==  0)  {	  if(headerBuf.length    ==    0    ||    headerBuf.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
459	[BUG]  [BUGGY]  if(headerBuf.length!=  readBuf.length  ||  headerBuf.length!=  numToSkip)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  readBuf.length  ||  headerBuf.length!=  numToSkip)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  readBuf.length  ||  headerBuf.length!=  numToSkip)  {	  if(headerBuf.length!=    numToSkip    ||    headerBuf.length!=    numRead)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
460	[BUG]  [BUGGY]  if(headerBuf.length!=  0  ||  headerBuf.length!=  numToSkip)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  0  ||  headerBuf.length!=  numToSkip)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  0  ||  headerBuf.length!=  numToSkip)  {	  if(headerBuf.length!=    numToSkip    ||    headerBuf.length!=    numRead)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
461	[BUG]  [BUGGY]  byte[]  headerBuf  =  getRecordInternal();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  byte[]  headerBuf  =  getRecordInternal();  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	byte[]  headerBuf  =  getRecordInternal();	  byte[]    headerBuf    =    getRecord();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
462	[BUG]  [BUGGY]  byte[]  headerBuf  =  getRecordSize();  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  byte[]  headerBuf  =  getRecordSize();  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	byte[]  headerBuf  =  getRecordSize();	  byte[]    headerBuf    =    getRecord();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
463	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  <  2  ||  headerBuf.length  <  2)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  <  2  ||  headerBuf.length  <  2)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf!=  null  ||  headerBuf.length  <  2  ||  headerBuf.length  <  2)  {	  if(headerBuf!=    null    ||    headerBuf.length    <    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
464	[BUG]  [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  headerBuf[i];  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  headerBuf[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  headerBuf[i];  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
465	[BUG]  [BUGGY]  while(headerBuf.length()  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  headerBuf[i];  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  while(headerBuf.length()  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  headerBuf[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	while(headerBuf.length()  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  headerBuf[i];  }	  if(headerBuf.length()    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
466	[BUG]  [BUGGY]  while(headerBuf.length()  <  headerSize)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  while(headerBuf.length()  <  headerSize)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	while(headerBuf.length()  <  headerSize)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }	  if(headerBuf.length()    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
467	[BUG]  [BUGGY]  if(headerBuf.length!=  entryOffset  ||  headerBuf.length  ==  entrySize)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  entryOffset  ||  headerBuf.length  ==  entrySize)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  entryOffset  ||  headerBuf.length  ==  entrySize)  {	  if(headerBuf.length!=    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
468	[BUG]  [BUGGY]  if(headerBuf.length  ==  entrySize  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  ==  entrySize  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  ==  entrySize  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(headerBuf.length    ==    numToSkip    &&    headerBuf.charAt(headerBuf.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
469	[BUG]  [BUGGY]  if(headerBuf.length  >=  numToSkip  ||  headerBuf.length  >  numToSkip)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >=  numToSkip  ||  headerBuf.length  >  numToSkip)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >=  numToSkip  ||  headerBuf.length  >  numToSkip)  {	  if(headerBuf.length!=    numToSkip    ||    headerBuf.length    >=    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
470	[BUG]  [BUGGY]  if(headerBuf.length  >=  numToSkip  ||  headerBuf.length  >=  numRead)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >=  numToSkip  ||  headerBuf.length  >=  numRead)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >=  numToSkip  ||  headerBuf.length  >=  numRead)  {	  if(headerBuf.length!=    numToSkip    ||    headerBuf.length    >=    numRead)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
471	[BUG]  [BUGGY]  if(headerBuf.length!=  entrySize  ||  headerBuf.length!=  entryOffset)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length!=  entrySize  ||  headerBuf.length!=  entryOffset)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length!=  entrySize  ||  headerBuf.length!=  entryOffset)  {	  if(headerBuf.length!=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
472	[BUG]  [BUGGY]  if(headerBuf.length  >=  entrySize  +  1)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >=  entrySize  +  1)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >=  entrySize  +  1)  {	  if(headerBuf.length!=    numToSkip    +    1)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
473	[BUG]  [BUGGY]  if(headerBuf.length  <  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  'n')  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  <  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  'n')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  <  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  'n')  {	  if(!hasHitEOF    &&    headerBuf.charAt(headerBuf.length    -    1)!=    'n')    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
474	[BUG]  [BUGGY]  if(headerBuf.length()  ==  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  'n')  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length()  ==  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  'n')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length()  ==  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  'n')  {	  if(!hasHitEOF    &&    headerBuf.charAt(headerBuf.length    -    1)!=    'n')    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
475	[BUG]  [BUGGY]  if(!hasHitEOF  &&  headerBuf.charAt(headerBuf.length  -  1)  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(!hasHitEOF  &&  headerBuf.charAt(headerBuf.length  -  1)  ==  'n')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(!hasHitEOF  &&  headerBuf.charAt(headerBuf.length  -  1)  ==  'n')  {	  if(!hasHitEOF    &&    headerBuf.charAt(headerBuf.length    -    1)!=    'n')    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
476	[BUG]  [BUGGY]  if(headerBuf.length  >  entrySize)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >  entrySize)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >  entrySize)  {	  if(headerBuf.length    >    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
477	[BUG]  [BUGGY]  if(headerBuf.length  >  numToSkip  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf.length  >  numToSkip  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf.length  >  numToSkip  &&  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(headerBuf.length    >    numToSkip)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
478	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf!=  null  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();      [BUGGY]  if(headerBuf  ==  null  ||  headerBuf!=  null  &&  headerBuf.length  >  0)  {  [BUGGY]      currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	if(headerBuf  ==  null  ||  headerBuf!=  null  &&  headerBuf.length  >  0)  {	  if(hasHitEOF    &&    headerBuf!=    null    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
