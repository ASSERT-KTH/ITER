bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length!=  0)  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length!=  0)  {  return  null;  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null  ||  headerBuf.length!=  0)  {  return  null;  }	  if(headerBuf.length!=    0)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
2	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length!=  0)  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length!=  0)  {  return  null;  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf  ==  null  ||  headerBuf.length!=  0)  {  return  null;  }	  if(headerBuf.length!=    0)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
3	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  return  null;  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  return  null;  }	  if(headerBuf.length!=    0)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
4	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf  ==  null)  {  return  null;  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf  ==  null)  {  return  null;  }	  if(headerBuf.length!=    0)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
5	[BUG]  [BUGGY]  ||  headerBuf.length!=  0)  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  ||  headerBuf.length!=  0)  {  return  null;  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	||  headerBuf.length!=  0)  {  return  null;  }	  if(headerBuf.length!=    0)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
6	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  BUFFER_SIZE);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  BUFFER_SIZE);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize,    SMALL_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
7	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  SMALL_BUFFER_SIZE,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  SMALL_BUFFER_SIZE,  hasHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  SMALL_BUFFER_SIZE,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize,    SMALL_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
8	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  0,  SMALL_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  0,  SMALL_BUFFER_SIZE);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  0,  SMALL_BUFFER_SIZE);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize,    SMALL_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
9	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  blockSize);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  blockSize);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  blockSize);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize,    SMALL_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
10	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  new  TarArchiveEntry(headerBuf,  skipBuf);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  Entry  <  K,  V>  currEntry  =  new  TarArchiveEntry(headerBuf,  skipBuf);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	Entry  <  K,  V>  currEntry  =  new  TarArchiveEntry(headerBuf,  skipBuf);	  if(headerBuf!=    null)    {    currEntry    =    new    TarArchiveEntry(headerBuf,    skipBuf);    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
11	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf);  }  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf);  }	  if(headerBuf!=    null)    {    currEntry    =    new    TarArchiveEntry(headerBuf,    skipBuf);    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
12	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf);  }  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf);  }	  if(headerBuf!=    null)    {    currEntry    =    new    TarArchiveEntry(headerBuf,    skipBuf);    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
13	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  headerSize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  headerSize,  hasHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  headerSize,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
14	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  entrySize,  hasHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  entrySize,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
15	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  hasHitEOF,  0);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  hasHitEOF,  0);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  hasHitEOF,  0);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
16	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  0,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  0,  hasHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  0,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
17	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerLength,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerLength,  hasHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerLength,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf,    headerLength);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
18	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  headerLength,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  headerLength,  hasHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  headerLength,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf,    headerLength);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
19	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerLength  -  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerLength  -  headerBuf.length);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerLength  -  headerBuf.length);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf,    headerLength);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
20	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerLength,  0);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerLength,  0);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerLength,  0);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf,    headerLength);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
21	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  headerBuf,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  headerBuf,  hasHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  headerBuf,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize,    skipBuf);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
22	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  readBuf,  skipBuf);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  readBuf,  skipBuf);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  readBuf,  skipBuf);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize,    skipBuf);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
23	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  headerBuf,  numToSkip);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  headerBuf,  numToSkip);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  headerBuf,  numToSkip);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize,    skipBuf);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
24	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  headerBuf,  entryOffset);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  headerBuf,  entryOffset);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  headerBuf,  entryOffset);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize,    skipBuf);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
25	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  buffer,  skipBuf);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  buffer,  skipBuf);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  buffer,  skipBuf);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize,    skipBuf);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
26	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  0,  headerSize);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  0,  headerSize);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  0,  headerSize);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerOffset,    0);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
27	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  1);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  1);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  1);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerOffset,    0);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
28	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  ==  0)  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  ==  0)  {  return  null;  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null  ||  headerBuf.length  ==  0)  {  return  null;  }	  if(headerBuf.length    ==    0)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
29	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  ==  0)  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  ==  0)  {  return  null;  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf  ==  null  ||  headerBuf.length  ==  0)  {  return  null;  }	  if(headerBuf.length    ==    0)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
30	[BUG]  [BUGGY]  if(headerBuf.length  ==  0  ||  headerBuf.length  ==  0)  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf.length  ==  0  ||  headerBuf.length  ==  0)  {  return  null;  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf.length  ==  0  ||  headerBuf.length  ==  0)  {  return  null;  }	  if(headerBuf.length    ==    0)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
31	[BUG]  [BUGGY]  if(headerBuf.length  ==  0  ||  headerBuf.length!=  0)  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf.length  ==  0  ||  headerBuf.length!=  0)  {  return  null;  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf.length  ==  0  ||  headerBuf.length!=  0)  {  return  null;  }	  if(headerBuf.length    ==    0)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
32	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  false,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  false,  hasHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  false,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerOffset,    false);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
33	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  null);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  null);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  null);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerOffset,    false);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
34	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length  -  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length  -  1,  hasHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length  -  1,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
35	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length  -  2);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length  -  2);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length  -  2);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
36	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length  -  1  +  length);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length  -  1  +  length);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length  -  1  +  length);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
37	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  true,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  true,  hasHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  true,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize,    true);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
38	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  readBuf,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  readBuf,  hasHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  readBuf,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
39	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(readBuf,  headerBuf,  headerBuf);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(readBuf,  headerBuf,  headerBuf);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(readBuf,  headerBuf,  headerBuf);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
40	[BUG]  [BUGGY]  CurrEntry  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerBuf);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  CurrEntry  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerBuf);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	CurrEntry  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerBuf);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
41	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeaderSize(headerBuf[i]);  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeaderSize(headerBuf[i]);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeaderSize(headerBuf[i]);  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    currEntry.setHeaderSize(headerBuf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
42	[BUG]  [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeaderSize(headerBuf[i]);  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeaderSize(headerBuf[i]);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeaderSize(headerBuf[i]);  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    currEntry.setHeaderSize(headerBuf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
43	[BUG]  [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeaderSize(headerBuf[i]);  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeaderSize(headerBuf[i]);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeaderSize(headerBuf[i]);  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    currEntry.setHeaderSize(headerBuf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
44	[BUG]  [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeaderSize(headerBuf[i]  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeaderSize(headerBuf[i]  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeaderSize(headerBuf[i]	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    currEntry.setHeaderSize(headerBuf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
45	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeaderSize(headerBuf[i],  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeaderSize(headerBuf[i],  hasHitEOF);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeaderSize(headerBuf[i],  hasHitEOF);  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    currEntry.setHeaderSize(headerBuf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
46	[BUG]  [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeaderSize(headerBuf[i]);  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeaderSize(headerBuf[i]);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeaderSize(headerBuf[i]);	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    currEntry.setHeaderSize(headerBuf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
47	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(readBuf,  headerBuf,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(readBuf,  headerBuf,  hasHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(readBuf,  headerBuf,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(readBuf,    headerBuf);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
48	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  currEntry  =  new  TarArchiveEntry(readBuf,  headerBuf);  }  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  currEntry  =  new  TarArchiveEntry(readBuf,  headerBuf);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  currEntry  =  new  TarArchiveEntry(readBuf,  headerBuf);  }	  currEntry    =    new    TarArchiveEntry(readBuf,    headerBuf);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
49	[BUG]  [BUGGY]  CurrEntry  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  CurrEntry  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	CurrEntry  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf);	  currEntry    =    new    TarArchiveEntry(readBuf,    headerBuf);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
50	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(readBuf,  headerBuf,  0);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(readBuf,  headerBuf,  0);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(readBuf,  headerBuf,  0);	  currEntry    =    new    TarArchiveEntry(readBuf,    headerBuf);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
51	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  this);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  this);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  this);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    null);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
52	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  null);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  null);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  null);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    null);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
53	[BUG]  [BUGGY]  CurrEntry  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  null);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  CurrEntry  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  null);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	CurrEntry  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  null);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    null);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
54	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  headerOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  headerOffset,  hasHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  headerOffset,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
55	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  headerBuf.length);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  headerBuf.length);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
56	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  hasHitEOF,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  hasHitEOF,  hasHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  hasHitEOF,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
57	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerBuf,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerBuf,  hasHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerBuf,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf,    headerBuf);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
58	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerBuf,  0);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerBuf,  0);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerBuf,  0);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf,    headerBuf);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
59	[BUG]  [BUGGY]  int  entryOffset  =  headerBuf.length()  -  1;  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  int  entryOffset  =  headerBuf.length()  -  1;  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	int  entryOffset  =  headerBuf.length()  -  1;	  int    entryOffset    =    headerBuf.length();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
60	[BUG]  [BUGGY]  int  entryOffset  =  headerBuf.length()  +  1;  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  int  entryOffset  =  headerBuf.length()  +  1;  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	int  entryOffset  =  headerBuf.length()  +  1;	  int    entryOffset    =    headerBuf.length();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
61	[BUG]  [BUGGY]  int  entryOffset  =  headerBuf.length()  -  2;  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  int  entryOffset  =  headerBuf.length()  -  2;  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	int  entryOffset  =  headerBuf.length()  -  2;	  int    entryOffset    =    headerBuf.length();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
62	[BUG]  [BUGGY]  short  entryOffset  =  headerBuf.length();  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  short  entryOffset  =  headerBuf.length();  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	short  entryOffset  =  headerBuf.length();	  int    entryOffset    =    headerBuf.length();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
63	[BUG]  [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  new  String(headerBuf,  0,  headerBuf.length);  }  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  new  String(headerBuf,  0,  headerBuf.length);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  new  String(headerBuf,  0,  headerBuf.length);  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    new    String(headerBuf,    0,    headerBuf.length);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
64	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  new  String(headerBuf,  0,  headerBuf.length);  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  new  String(headerBuf,  0,  headerBuf.length);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  new  String(headerBuf,  0,  headerBuf.length);  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    new    String(headerBuf,    0,    headerBuf.length);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
65	[BUG]  [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  new  String(headerBuf,  0,  headerBuf.length);  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  new  String(headerBuf,  0,  headerBuf.length);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  new  String(headerBuf,  0,  headerBuf.length);  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    new    String(headerBuf,    0,    headerBuf.length);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
66	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  new  String(headerBuf,  0,  headerBuf.length);  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  new  String(headerBuf,  0,  headerBuf.length);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  new  String(headerBuf,  0,  headerBuf.length);  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    new    String(headerBuf,    0,    headerBuf.length);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
67	[BUG]  [BUGGY]  buffer[i]  =  new  String(headerBuf,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  buffer[i]  =  new  String(headerBuf,  0,  headerBuf.length);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	buffer[i]  =  new  String(headerBuf,  0,  headerBuf.length);	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    new    String(headerBuf,    0,    headerBuf.length);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
68	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  new  String(buffer,  0,  headerBuf.length);  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  new  String(buffer,  0,  headerBuf.length);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  new  String(buffer,  0,  headerBuf.length);  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    new    String(headerBuf,    0,    headerBuf.length);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
69	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize  -  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize  -  1,  hasHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize  -  1,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize    -    1);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
70	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize  +  1);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize  +  1);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize  +  1);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize    -    1);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
71	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize  -  2);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize  -  2);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize  -  2);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize    -    1);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
72	[BUG]  [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  getNextTarEntry();  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  getNextTarEntry();  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  getNextTarEntry();  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    getNextTarEntry();    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
73	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  getNextTarEntry();  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  getNextTarEntry();  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  getNextTarEntry();  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    getNextTarEntry();    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
74	[BUG]  [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  getNextTarEntry();  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  getNextTarEntry();  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  getNextTarEntry();  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    getNextTarEntry();    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
75	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  getNextTarEntry();  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  getNextTarEntry();  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  getNextTarEntry();  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    getNextTarEntry();    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
76	[BUG]  [BUGGY]  berEntry!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  getNextTarEntry();  }  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  berEntry!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  getNextTarEntry();  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	berEntry!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  getNextTarEntry();  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    getNextTarEntry();    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
77	[BUG]  [BUGGY]  berEntry  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  getNextTarEntry();  }  [CE]  illegal  start  of  type  [FE]                                          IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  berEntry  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  getNextTarEntry();  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	berEntry  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  getNextTarEntry();  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    getNextTarEntry();    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
78	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length,  headerSize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length,  headerSize,  hasHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length,  headerSize,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf.length,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
79	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length,  hasHitEOF,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length,  hasHitEOF,  hasHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length,  hasHitEOF,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf.length,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
80	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  length,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  length,  hasHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  length,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerOffset,    length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
81	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  0,  length);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  0,  length);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  0,  length);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerOffset,    length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
82	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  length,  0);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  length,  0);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  length,  0);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerOffset,    length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
83	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  length  -  1);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  length  -  1);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerOffset,    length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
84	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  new  TarArchiveEntry(headerBuf,  0);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  Entry  <  K,  V>  currEntry  =  new  TarArchiveEntry(headerBuf,  0);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	Entry  <  K,  V>  currEntry  =  new  TarArchiveEntry(headerBuf,  0);	  if(headerBuf!=    null)    {    currEntry    =    new    TarArchiveEntry(headerBuf,    0);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
85	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerBuf.length);  }  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerBuf.length);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerBuf.length);  }	  if(headerBuf!=    null)    {    currEntry    =    new    TarArchiveEntry(headerBuf,    0);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
86	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  0);  }  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf  ==  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  0);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf  ==  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  0);  }	  if(headerBuf!=    null)    {    currEntry    =    new    TarArchiveEntry(headerBuf,    0);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
87	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerBuf.length);  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf  ==  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerBuf.length);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf  ==  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerBuf.length);  }	  if(headerBuf!=    null)    {    currEntry    =    new    TarArchiveEntry(headerBuf,    0);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
88	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerSize);  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerSize);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerSize);  }	  if(headerBuf!=    null)    {    currEntry    =    new    TarArchiveEntry(headerBuf,    0);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
89	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  0,  headerSize);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  0,  headerSize);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  0,  headerSize);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf,    0);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
90	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  0,  headerBuf.length);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  0,  headerBuf.length);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf,    0);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
91	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerSize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerSize,  hasHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerSize,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    0,    headerSize);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
92	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerSize,  SMALL_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerSize,  SMALL_BUFFER_SIZE);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerSize,  SMALL_BUFFER_SIZE);	  currEntry    =    new    TarArchiveEntry(headerBuf,    0,    headerSize);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
93	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerSize,  0);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerSize,  0);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerSize,  0);	  currEntry    =    new    TarArchiveEntry(headerBuf,    0,    headerSize);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
94	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  length);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  length);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  length);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    length);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
95	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  length,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  length,  hasHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  length,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    length);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
96	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  length,  SMALL_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  length,  SMALL_BUFFER_SIZE);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  length,  SMALL_BUFFER_SIZE);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    length);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
97	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  length  -  1);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  length  -  1);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  length  -  1);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    length);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
98	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  length,  0);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  length,  0);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  length,  0);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    length);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
99	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  SMALL_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  SMALL_BUFFER_SIZE);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  SMALL_BUFFER_SIZE);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    SMALL_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
100	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  SMALL_BUFFER_SIZE);  }  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  SMALL_BUFFER_SIZE);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  SMALL_BUFFER_SIZE);  }	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    SMALL_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
101	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  SMALL_BUFFER_SIZE,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  SMALL_BUFFER_SIZE,  hasHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  SMALL_BUFFER_SIZE,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    SMALL_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
102	[BUG]  [BUGGY]  StringBuffer  longName  =  new  StringBuffer(headerBuf.length  +  1);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  StringBuffer  longName  =  new  StringBuffer(headerBuf.length  +  1);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	StringBuffer  longName  =  new  StringBuffer(headerBuf.length  +  1);	  StringBuffer    longName    =    new    StringBuffer(headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
103	[BUG]  [BUGGY]  StringBuffer  longName  =  new  StringBuffer(headerBuf.length  -  1);  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  StringBuffer  longName  =  new  StringBuffer(headerBuf.length  -  1);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	StringBuffer  longName  =  new  StringBuffer(headerBuf.length  -  1);	  StringBuffer    longName    =    new    StringBuffer(headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
104	[BUG]  [BUGGY]  StringBuffer  longName  =  new  StringBuffer(headerBuf,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  StringBuffer  longName  =  new  StringBuffer(headerBuf,  headerBuf.length);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	StringBuffer  longName  =  new  StringBuffer(headerBuf,  headerBuf.length);	  StringBuffer    longName    =    new    StringBuffer(headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
105	[BUG]  [BUGGY]  StringBuffer  longName  =  new  StringBuffer(headerBuf,  headerSize);  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  StringBuffer  longName  =  new  StringBuffer(headerBuf,  headerSize);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	StringBuffer  longName  =  new  StringBuffer(headerBuf,  headerSize);	  StringBuffer    longName    =    new    StringBuffer(headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
106	[BUG]  [BUGGY]  StringBuffer  longName  =  new  StringBuffer(headerBuf,  headerOffset.length);  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  StringBuffer  longName  =  new  StringBuffer(headerBuf,  headerOffset.length);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	StringBuffer  longName  =  new  StringBuffer(headerBuf,  headerOffset.length);	  StringBuffer    longName    =    new    StringBuffer(headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
107	[BUG]  [BUGGY]  StringBuffer  longName  =  new  StringBuffer(headerBuf.length,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                                          IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  StringBuffer  longName  =  new  StringBuffer(headerBuf.length,  headerBuf.length);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	StringBuffer  longName  =  new  StringBuffer(headerBuf.length,  headerBuf.length);	  StringBuffer    longName    =    new    StringBuffer(headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
108	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  headerBuf);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  headerBuf);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  headerBuf);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    headerSize);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
109	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  headerSize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  headerSize,  hasHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  headerSize,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    headerSize);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
110	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  headerSize);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  final  TarArchiveEntry  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  headerSize);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	final  TarArchiveEntry  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  headerSize);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    headerSize);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
111	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  headerOffset);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  headerOffset);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  headerOffset);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    headerSize);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
112	[BUG]  [BUGGY]  longName  =  headerBuf.length();  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  longName  =  headerBuf.length();  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	longName  =  headerBuf.length();	  if(headerBuf!=    null)    {    longName    =    headerBuf.length();    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
113	[BUG]  [BUGGY]  while(headerBuf!=  null)  {  longName  =  headerBuf.length();  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  while(headerBuf!=  null)  {  longName  =  headerBuf.length();  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	while(headerBuf!=  null)  {  longName  =  headerBuf.length();	  if(headerBuf!=    null)    {    longName    =    headerBuf.length();    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
114	[BUG]  [BUGGY]  (headerBuf!=  null)?  headerBuf.length()  :  Long.parseLong(headerBuf);  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  (headerBuf!=  null)?  headerBuf.length()  :  Long.parseLong(headerBuf);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	(headerBuf!=  null)?  headerBuf.length()  :  Long.parseLong(headerBuf);	  if(headerBuf!=    null)    {    longName    =    headerBuf.length();    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
115	[BUG]  [BUGGY]  while(headerBuf!=  null)  {  longName  =  headerBuf.length();  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  while(headerBuf!=  null)  {  longName  =  headerBuf.length();  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	while(headerBuf!=  null)  {  longName  =  headerBuf.length();  }	  if(headerBuf!=    null)    {    longName    =    headerBuf.length();    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
116	[BUG]  [BUGGY]  (headerBuf!=  null)?  headerBuf.length()  :  longName;  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  (headerBuf!=  null)?  headerBuf.length()  :  longName;  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	(headerBuf!=  null)?  headerBuf.length()  :  longName;	  if(headerBuf!=    null)    {    longName    =    headerBuf.length();    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
117	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeader(headerBuf[i]);  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeader(headerBuf[i]);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeader(headerBuf[i]);  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    currEntry.setHeader(headerBuf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
118	[BUG]  [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeader(headerBuf[i]);  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeader(headerBuf[i]);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeader(headerBuf[i]);  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    currEntry.setHeader(headerBuf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
119	[BUG]  [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeader(headerBuf[i]);  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeader(headerBuf[i]);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeader(headerBuf[i]);  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    currEntry.setHeader(headerBuf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
120	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeader(headerBuf[i]);  }  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeader(headerBuf[i]);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeader(headerBuf[i]);  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    currEntry.setHeader(headerBuf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
121	[BUG]  [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeader(headerBuf[i]  [CE]  illegal  start  of  type  [FE]                                          IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeader(headerBuf[i]  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeader(headerBuf[i]	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    currEntry.setHeader(headerBuf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
122	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeader(headerBuf[i],  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                            IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeader(headerBuf[i],  hasHitEOF);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeader(headerBuf[i],  hasHitEOF);  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    currEntry.setHeader(headerBuf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
123	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerSize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerSize,  hasHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerSize,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
124	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerName,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerName,  hasHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerName,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
125	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerOffset,  hasHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerOffset,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf,    headerOffset);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
126	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  headerOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  headerOffset,  hasHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  headerOffset,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf,    headerOffset);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
127	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerOffset,  0);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerOffset,  0);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerOffset,  0);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf,    headerOffset);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
128	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(readBuf,  headerBuf,  headerOffset);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(readBuf,  headerBuf,  headerOffset);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(readBuf,  headerBuf,  headerOffset);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf,    headerOffset);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
129	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  skipBuf,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  skipBuf,  hasHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  skipBuf,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    skipBuf);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
130	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  readBuf,  skipBuf);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  readBuf,  skipBuf);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  readBuf,  skipBuf);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    skipBuf);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
131	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHitEOF(headerBuf[i]);  }  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHitEOF(headerBuf[i]);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHitEOF(headerBuf[i]);  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    currEntry.setHitEOF(headerBuf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
132	[BUG]  [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHitEOF(headerBuf[i]);  }  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHitEOF(headerBuf[i]);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHitEOF(headerBuf[i]);  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    currEntry.setHitEOF(headerBuf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
133	[BUG]  [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHitEOF(headerBuf[i]);  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHitEOF(headerBuf[i]);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHitEOF(headerBuf[i]);  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    currEntry.setHitEOF(headerBuf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
134	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHitEOF(headerBuf[i]);  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHitEOF(headerBuf[i]);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHitEOF(headerBuf[i]);  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    currEntry.setHitEOF(headerBuf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
135	[BUG]  [BUGGY]  berEntry!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHitEOF(headerBuf[i]);  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  berEntry!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHitEOF(headerBuf[i]);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	berEntry!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHitEOF(headerBuf[i]);  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    currEntry.setHitEOF(headerBuf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
136	[BUG]  [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHitEOF(headerBuf[i]  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHitEOF(headerBuf[i]  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHitEOF(headerBuf[i]	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    currEntry.setHitEOF(headerBuf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
137	[BUG]  [BUGGY]  StringBuffer  longName  =  new  StringBuffer(headerBuf,  0,  headerBuf.length  -  1);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  StringBuffer  longName  =  new  StringBuffer(headerBuf,  0,  headerBuf.length  -  1);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	StringBuffer  longName  =  new  StringBuffer(headerBuf,  0,  headerBuf.length  -  1);	  StringBuffer    longName    =    new    StringBuffer(headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
138	[BUG]  [BUGGY]  StringBuffer  longName  =  new  StringBuffer(headerBuf,  0,  headerBuf.length  +  1);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  StringBuffer  longName  =  new  StringBuffer(headerBuf,  0,  headerBuf.length  +  1);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	StringBuffer  longName  =  new  StringBuffer(headerBuf,  0,  headerBuf.length  +  1);	  StringBuffer    longName    =    new    StringBuffer(headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
139	[BUG]  [BUGGY]  StringBuffer  longName  =  new  StringBuffer(headerBuf,  0,  headerBuf.length  -  2);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  StringBuffer  longName  =  new  StringBuffer(headerBuf,  0,  headerBuf.length  -  2);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	StringBuffer  longName  =  new  StringBuffer(headerBuf,  0,  headerBuf.length  -  2);	  StringBuffer    longName    =    new    StringBuffer(headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
140	[BUG]  [BUGGY]  StringBuffer  longName  =  new  StringBuffer(headerBuf,  0,  headerBuf.length  -  1,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  StringBuffer  longName  =  new  StringBuffer(headerBuf,  0,  headerBuf.length  -  1,  headerBuf.length);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	StringBuffer  longName  =  new  StringBuffer(headerBuf,  0,  headerBuf.length  -  1,  headerBuf.length);	  StringBuffer    longName    =    new    StringBuffer(headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
141	[BUG]  [BUGGY]  StringBuffer  longName  =  new  StringBuffer(headerBuf,  0,  headerBuf.length  -  4);  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  StringBuffer  longName  =  new  StringBuffer(headerBuf,  0,  headerBuf.length  -  4);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	StringBuffer  longName  =  new  StringBuffer(headerBuf,  0,  headerBuf.length  -  4);	  StringBuffer    longName    =    new    StringBuffer(headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
142	[BUG]  [BUGGY]  StringBuffer  longName  =  new  StringBuffer(headerBuf,  0,  headerBuf.length  -  6);  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  StringBuffer  longName  =  new  StringBuffer(headerBuf,  0,  headerBuf.length  -  6);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	StringBuffer  longName  =  new  StringBuffer(headerBuf,  0,  headerBuf.length  -  6);	  StringBuffer    longName    =    new    StringBuffer(headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
143	[BUG]  [BUGGY]  long  entryOffset  =  headerBuf.getOffset();  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  long  entryOffset  =  headerBuf.getOffset();  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	long  entryOffset  =  headerBuf.getOffset();	  long    entryOffset    =    currEntry.getOffset();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
144	[BUG]  [BUGGY]  long  entryOffset  =  currEntry.getEntryOffset();  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  long  entryOffset  =  currEntry.getEntryOffset();  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	long  entryOffset  =  currEntry.getEntryOffset();	  long    entryOffset    =    currEntry.getOffset();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
145	[BUG]  [BUGGY]  int  entryOffset  =  currEntry.getOffset();  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  int  entryOffset  =  currEntry.getOffset();  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	int  entryOffset  =  currEntry.getOffset();	  long    entryOffset    =    currEntry.getOffset();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
146	[BUG]  [BUGGY]  long  entryOffset  =  currEntry.getStartOffset();  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  long  entryOffset  =  currEntry.getStartOffset();  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	long  entryOffset  =  currEntry.getStartOffset();	  long    entryOffset    =    currEntry.getOffset();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
147	[BUG]  [BUGGY]  long  entryOffset  =  currEntry.getSize();  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  long  entryOffset  =  currEntry.getSize();  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	long  entryOffset  =  currEntry.getSize();	  long    entryOffset    =    currEntry.getOffset();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
148	[BUG]  [BUGGY]  long  entryOffset  =  currEntry.getLength();  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  long  entryOffset  =  currEntry.getLength();  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	long  entryOffset  =  currEntry.getLength();	  long    entryOffset    =    currEntry.getOffset();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
149	[BUG]  [BUGGY]  long  entryOffset  =  currEntry.getOffset()  -  1;  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  long  entryOffset  =  currEntry.getOffset()  -  1;  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	long  entryOffset  =  currEntry.getOffset()  -  1;	  long    entryOffset    =    currEntry.getOffset();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
150	[BUG]  [BUGGY]  StringBuffer  longName  =  new  StringBuffer(64);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  StringBuffer  longName  =  new  StringBuffer(64);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	StringBuffer  longName  =  new  StringBuffer(64);	  StringBuffer    longName    =    new    StringBuffer();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
151	[BUG]  [BUGGY]  StringBuffer  longName  =  new  StringBuffer(0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  StringBuffer  longName  =  new  StringBuffer(0,  headerBuf.length);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	StringBuffer  longName  =  new  StringBuffer(0,  headerBuf.length);	  StringBuffer    longName    =    new    StringBuffer();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
152	[BUG]  [BUGGY]  StringBuffer  longName  =  new  StringBuffer(16);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  StringBuffer  longName  =  new  StringBuffer(16);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	StringBuffer  longName  =  new  StringBuffer(16);	  StringBuffer    longName    =    new    StringBuffer();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
153	[BUG]  [BUGGY]  StringBuffer  longName  =  new  StringBuffer(32);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  StringBuffer  longName  =  new  StringBuffer(32);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	StringBuffer  longName  =  new  StringBuffer(32);	  StringBuffer    longName    =    new    StringBuffer();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
154	[BUG]  [BUGGY]  StringBuffer  longName  =  new  StringBuffer(256);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  StringBuffer  longName  =  new  StringBuffer(256);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	StringBuffer  longName  =  new  StringBuffer(256);	  StringBuffer    longName    =    new    StringBuffer();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
155	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length  /  1);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length  /  1);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length  /  1);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf.length    +    1);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
156	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length  +  1,  hasHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length  +  1,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf.length    +    1);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
157	[BUG]  [BUGGY]  ||  headerBuf.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  ||  headerBuf.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	||  headerBuf.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(headerBuf.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
158	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null  ||  headerBuf.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(headerBuf.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
159	[BUG]  [BUGGY]  if(headerBuf.length!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf.length!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf.length!=  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(headerBuf.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
160	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(headerBuf.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
161	[BUG]  [BUGGY]  while(headerBuf.length!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  while(headerBuf.length!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	while(headerBuf.length!=  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(headerBuf.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
162	[BUG]  [BUGGY]  while(headerBuf.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  while(headerBuf.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	while(headerBuf.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(headerBuf.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
163	[BUG]  [BUGGY]  ||  headerBuf.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  ||  headerBuf.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	||  headerBuf.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(headerBuf.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
164	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null  ||  headerBuf.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(headerBuf.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
165	[BUG]  [BUGGY]  if(headerBuf.length()!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf.length()!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf.length()!=  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(headerBuf.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
166	[BUG]  [BUGGY]  if(headerBuf.length()  ==  0  ||  headerBuf.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf.length()  ==  0  ||  headerBuf.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf.length()  ==  0  ||  headerBuf.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(headerBuf.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
167	[BUG]  [BUGGY]  readBuf.length()  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                          IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  readBuf.length()  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	readBuf.length()  {  throw  new  IllegalArgumentException( " ");  }	  if(headerBuf.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
168	[BUG]  [BUGGY]  StringBuffer  headerBuf  =  new  StringBuffer(headerBuf.length());  [CE]  illegal  start  of  type  [FE]                                            IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  StringBuffer  headerBuf  =  new  StringBuffer(headerBuf.length());  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	StringBuffer  headerBuf  =  new  StringBuffer(headerBuf.length());	  if(headerBuf.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
169	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerBuf.length  -  1);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerBuf.length  -  1);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerBuf.length  -  1);	  currEntry    =    new    TarArchiveEntry(headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
170	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerBuf.length  +  1);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerBuf.length  +  1);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerBuf.length  +  1);	  currEntry    =    new    TarArchiveEntry(headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
171	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerBuf.length  -  1,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerBuf.length  -  1,  headerBuf.length);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerBuf.length  -  1,  headerBuf.length);	  currEntry    =    new    TarArchiveEntry(headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
172	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  skipBuf,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  skipBuf,  hasHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  skipBuf,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf,    skipBuf);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
173	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(readBuf,  headerBuf,  skipBuf);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(readBuf,  headerBuf,  skipBuf);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(readBuf,  headerBuf,  skipBuf);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf,    skipBuf);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
174	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerBuf,  skipBuf);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerBuf,  skipBuf);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerBuf,  skipBuf);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf,    skipBuf);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
175	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerSize,  0);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerSize,  0);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerSize,  0);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf,    headerSize);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
176	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(readBuf,  headerBuf,  headerSize);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(readBuf,  headerBuf,  headerSize);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(readBuf,  headerBuf,  headerSize);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf,    headerSize);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
177	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  0,  headerOffset);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  0,  headerOffset);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  0,  headerOffset);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize,    0);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
178	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  1);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  1);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  1);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize,    0);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
179	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  0,  headerSize);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  0,  headerSize);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  0,  headerSize);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize,    0);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
180	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  readBuf,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  readBuf,  hasHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  readBuf,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerOffset,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
181	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(readBuf,  headerOffset,  headerBuf);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(readBuf,  headerOffset,  headerBuf);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(readBuf,  headerOffset,  headerBuf);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerOffset,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
182	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  readBuf,  headerSize);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  readBuf,  headerSize);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  readBuf,  headerSize);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerOffset,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
183	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  0,  headerBuf.length);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  0,  headerBuf.length);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    0,    headerSize);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
184	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  headerSize  -  headerOffset);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  headerSize  -  headerOffset);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  headerSize  -  headerOffset);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    0,    headerSize);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
185	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  headerSize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  headerSize,  hasHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  headerSize,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    0,    headerSize);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
186	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(readBuf,  headerSize,  headerBuf);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(readBuf,  headerSize,  headerBuf);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(readBuf,  headerSize,  headerBuf);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
187	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  readBuf,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  readBuf,  hasHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  readBuf,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
188	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  readBuf,  headerOffset);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  readBuf,  headerOffset);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  readBuf,  headerOffset);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
189	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length,  headerOffset);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length,  headerOffset);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length,  headerOffset);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf.length,    headerSize);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
190	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  entrySize);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  entrySize);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  entrySize);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    skipped);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
191	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  entryOffset,  skipped);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  entryOffset,  skipped);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  entryOffset,  skipped);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    skipped);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
192	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  entrySize,  skipped);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  entrySize,  skipped);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  entrySize,  skipped);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    skipped);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
193	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  headerOffset,  skipped);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  headerOffset,  skipped);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  headerOffset,  skipped);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    skipped);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
194	[BUG]  [BUGGY]  byte[]  headerBuf  =  getHeaderBuf();  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  byte[]  headerBuf  =  getHeaderBuf();  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	byte[]  headerBuf  =  getHeaderBuf();	  byte[]    headerBuf    =    getRecord();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
195	[BUG]  [BUGGY]  byte[]  headerBuf  =  getRecord().toByteArray();  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  byte[]  headerBuf  =  getRecord().toByteArray();  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	byte[]  headerBuf  =  getRecord().toByteArray();	  byte[]    headerBuf    =    getRecord();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
196	[BUG]  [BUGGY]  byte[]  headerBuf  =  getHeaderBuffer();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  byte[]  headerBuf  =  getHeaderBuffer();  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	byte[]  headerBuf  =  getHeaderBuffer();	  byte[]    headerBuf    =    getRecord();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
197	[BUG]  [BUGGY]  byte[]  headerBuf  =  getRecord().getHeaderBuffer();  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  byte[]  headerBuf  =  getRecord().getHeaderBuffer();  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	byte[]  headerBuf  =  getRecord().getHeaderBuffer();	  byte[]    headerBuf    =    getRecord();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
198	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  entrySize,  skipBuf);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  entrySize,  skipBuf);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  entrySize,  skipBuf);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerOffset,    skipBuf);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
199	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  headerBuf,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  headerBuf,  hasHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  headerBuf,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerOffset,    skipBuf);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
200	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  skipBuf,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  skipBuf,  hasHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  skipBuf,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerOffset,    skipBuf);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
201	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  readBuf,  skipBuf);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  readBuf,  skipBuf);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  readBuf,  skipBuf);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerOffset,    skipBuf);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
202	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  true,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  true,  hasHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  true,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerOffset,    true);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
203	[BUG]  [BUGGY]  CurrEntry  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  false);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  CurrEntry  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  false);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	CurrEntry  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  false);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerOffset,    true);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
204	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  hasHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    0);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
205	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  headerOffset);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  headerOffset);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  headerOffset);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    0);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
206	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  false,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  false,  hasHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  false,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize,    false);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
207	[BUG]  [BUGGY]  CurrEntry  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  true);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  CurrEntry  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  true);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	CurrEntry  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  true);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize,    false);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
208	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  null);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  null);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  null);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize,    false);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
209	[BUG]  [BUGGY]  Long  entryOffset  =  getNextTarEntry(headerBuf,  0);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  Long  entryOffset  =  getNextTarEntry(headerBuf,  0);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	Long  entryOffset  =  getNextTarEntry(headerBuf,  0);	  Long    entryOffset    =    getNextTarEntry(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
210	[BUG]  [BUGGY]  Long  entryOffset  =  getNextTarEntry(headerBuf,  headerBuf);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  Long  entryOffset  =  getNextTarEntry(headerBuf,  headerBuf);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	Long  entryOffset  =  getNextTarEntry(headerBuf,  headerBuf);	  Long    entryOffset    =    getNextTarEntry(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
211	[BUG]  [BUGGY]  Long  entryOffset  =  getNextTarEntry(headerBuf,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  Long  entryOffset  =  getNextTarEntry(headerBuf,  headerBuf.length);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	Long  entryOffset  =  getNextTarEntry(headerBuf,  headerBuf.length);	  Long    entryOffset    =    getNextTarEntry(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
212	[BUG]  [BUGGY]  Long  entryOffset  =  getNextTarEntry(headerBuf,  1);  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  Long  entryOffset  =  getNextTarEntry(headerBuf,  1);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	Long  entryOffset  =  getNextTarEntry(headerBuf,  1);	  Long    entryOffset    =    getNextTarEntry(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
213	[BUG]  [BUGGY]  Long  entryOffset  =  getNextTarEntry(headerBuf,  length);  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  Long  entryOffset  =  getNextTarEntry(headerBuf,  length);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	Long  entryOffset  =  getNextTarEntry(headerBuf,  length);	  Long    entryOffset    =    getNextTarEntry(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
214	[BUG]  [BUGGY]  Long  entryOffset  =  getNextTarEntry(headerBuf,  false);  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  Long  entryOffset  =  getNextTarEntry(headerBuf,  false);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	Long  entryOffset  =  getNextTarEntry(headerBuf,  false);	  Long    entryOffset    =    getNextTarEntry(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
215	[BUG]  [BUGGY]  Long  entryOffset  =  getNextTarEntry(headerBuf,  0,  headerBuf.length  -  1);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  Long  entryOffset  =  getNextTarEntry(headerBuf,  0,  headerBuf.length  -  1);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	Long  entryOffset  =  getNextTarEntry(headerBuf,  0,  headerBuf.length  -  1);	  Long    entryOffset    =    getNextTarEntry(headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
216	[BUG]  [BUGGY]  Long  entryOffset  =  getNextTarEntry(headerBuf,  0,  headerBuf.length  -  1,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  Long  entryOffset  =  getNextTarEntry(headerBuf,  0,  headerBuf.length  -  1,  headerBuf.length);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	Long  entryOffset  =  getNextTarEntry(headerBuf,  0,  headerBuf.length  -  1,  headerBuf.length);	  Long    entryOffset    =    getNextTarEntry(headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
217	[BUG]  [BUGGY]  Long  entryOffset  =  getNextTarEntry(headerBuf,  0,  headerBuf.length  +  1);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  Long  entryOffset  =  getNextTarEntry(headerBuf,  0,  headerBuf.length  +  1);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	Long  entryOffset  =  getNextTarEntry(headerBuf,  0,  headerBuf.length  +  1);	  Long    entryOffset    =    getNextTarEntry(headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
218	[BUG]  [BUGGY]  Long  entryOffset  =  getNextTarEntry(headerBuf,  0,  headerBuf.length  -  2);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  Long  entryOffset  =  getNextTarEntry(headerBuf,  0,  headerBuf.length  -  2);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	Long  entryOffset  =  getNextTarEntry(headerBuf,  0,  headerBuf.length  -  2);	  Long    entryOffset    =    getNextTarEntry(headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
219	[BUG]  [BUGGY]  Long  entryOffset  =  getNextTarEntry(headerBuf,  0,  headerBuf.length  -  4);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  Long  entryOffset  =  getNextTarEntry(headerBuf,  0,  headerBuf.length  -  4);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	Long  entryOffset  =  getNextTarEntry(headerBuf,  0,  headerBuf.length  -  4);	  Long    entryOffset    =    getNextTarEntry(headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
220	[BUG]  [BUGGY]  Long  entryOffset  =  getNextTarEntry(headerBuf,  0,  headerBuf.length  -  6);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  Long  entryOffset  =  getNextTarEntry(headerBuf,  0,  headerBuf.length  -  6);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	Long  entryOffset  =  getNextTarEntry(headerBuf,  0,  headerBuf.length  -  6);	  Long    entryOffset    =    getNextTarEntry(headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
221	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  headerBuf.length  -  1);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  headerBuf.length  -  1);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  headerBuf.length  -  1);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
222	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  headerBuf.length  +  1);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  headerBuf.length  +  1);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  headerBuf.length  +  1);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
223	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  0,  SMALL_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  0,  SMALL_BUFFER_SIZE);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  0,  SMALL_BUFFER_SIZE);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf,    SMALL_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
224	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(readBuf,  headerBuf,  SMALL_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(readBuf,  headerBuf,  SMALL_BUFFER_SIZE);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(readBuf,  headerBuf,  SMALL_BUFFER_SIZE);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf,    SMALL_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
225	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  hasHitEOF,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  hasHitEOF,  hasHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  hasHitEOF,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
226	[BUG]  [BUGGY]  long  entryOffset  =  headerBuf.length()  -  1;  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  long  entryOffset  =  headerBuf.length()  -  1;  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	long  entryOffset  =  headerBuf.length()  -  1;	  long    entryOffset    =    headerBuf.length();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
227	[BUG]  [BUGGY]  long  entryOffset  =  headerBuf.length()  +  1;  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  long  entryOffset  =  headerBuf.length()  +  1;  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	long  entryOffset  =  headerBuf.length()  +  1;	  long    entryOffset    =    headerBuf.length();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
228	[BUG]  [BUGGY]  long  entryOffset  =  headerBuf.length()  -  2;  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  long  entryOffset  =  headerBuf.length()  -  2;  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	long  entryOffset  =  headerBuf.length()  -  2;	  long    entryOffset    =    headerBuf.length();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
229	[BUG]  [BUGGY]  long  entryOffset  =  headerBuf.length()  *  2;  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  long  entryOffset  =  headerBuf.length()  *  2;  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	long  entryOffset  =  headerBuf.length()  *  2;	  long    entryOffset    =    headerBuf.length();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
230	[BUG]  [BUGGY]  long  entryOffset  =  headerBuf.length()  -  6;  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  long  entryOffset  =  headerBuf.length()  -  6;  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	long  entryOffset  =  headerBuf.length()  -  6;	  long    entryOffset    =    headerBuf.length();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
231	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize  -  1,  false);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize  -  1,  false);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize  -  1,  false);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize,    false);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
232	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  false,  0);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  false,  0);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  false,  0);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize,    false);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
233	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerOffset  -  1);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerOffset  -  1);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerOffset  -  1);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf,    headerOffset);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
234	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerOffset,  isEOF);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerOffset,  isEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerOffset,  isEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf,    headerOffset);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
235	[BUG]  [BUGGY]  if(currEntry!=  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  0);  }  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(currEntry!=  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  0);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(currEntry!=  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  0);  }	  if(headerBuf!=    null)    {    currEntry    =    new    TarArchiveEntry(headerBuf,    0);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
236	[BUG]  [BUGGY]  if(currEntry!=  null)  {  headerBuf  =  new  TarArchiveEntry(headerBuf,  0);  }  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(currEntry!=  null)  {  headerBuf  =  new  TarArchiveEntry(headerBuf,  0);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(currEntry!=  null)  {  headerBuf  =  new  TarArchiveEntry(headerBuf,  0);  }	  if(headerBuf!=    null)    {    currEntry    =    new    TarArchiveEntry(headerBuf,    0);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
237	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  1);  }  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  1);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  1);  }	  if(headerBuf!=    null)    {    currEntry    =    new    TarArchiveEntry(headerBuf,    0);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
238	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  headerBuf.length  -  2);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  headerBuf.length  -  2);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  headerBuf.length  -  2);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
239	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  headerBuf.length  -  4);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  headerBuf.length  -  4);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  headerBuf.length  -  4);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
240	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHitEOF(headerBuf[i]  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHitEOF(headerBuf[i]  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHitEOF(headerBuf[i]	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    currEntry.setHitEOF(headerBuf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
241	[BUG]  [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHitEOF(headerBuf[i]  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHitEOF(headerBuf[i]  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHitEOF(headerBuf[i]	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    currEntry.setHitEOF(headerBuf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
242	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headBuf.length;  ++i)  {  currEntry.setHitEOF(headerBuf[i]);  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headBuf.length;  ++i)  {  currEntry.setHitEOF(headerBuf[i]);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headBuf.length;  ++i)  {  currEntry.setHitEOF(headerBuf[i]);  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    currEntry.setHitEOF(headerBuf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
243	[BUG]  [BUGGY]  CurrEntry  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerOffset);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  CurrEntry  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerOffset);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	CurrEntry  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerOffset);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerOffset,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
244	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  readBuf,  headerOffset);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  readBuf,  headerOffset);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  readBuf,  headerOffset);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerOffset,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
245	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  0L);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  0L);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  0L);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize,    0);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
246	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  0,  0);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  0,  0);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  0,  0);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf,    SMALL_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
247	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  skipBuf,  0);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  skipBuf,  0);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  skipBuf,  0);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf,    skipBuf);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
248	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerSize  -  1);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerSize  -  1);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerSize  -  1);	  currEntry    =    new    TarArchiveEntry(headerBuf,    0,    headerSize);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
249	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerSize  +  1);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerSize  +  1);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerSize  +  1);	  currEntry    =    new    TarArchiveEntry(headerBuf,    0,    headerSize);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
250	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerOffset);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerOffset);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerOffset);	  currEntry    =    new    TarArchiveEntry(headerBuf,    0,    headerSize);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
251	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  new  String(headerBuf,  0,  headerBuf.length  +  1);  }  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  new  String(headerBuf,  0,  headerBuf.length  +  1);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  new  String(headerBuf,  0,  headerBuf.length  +  1);  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    new    String(headerBuf,    0,    headerBuf.length);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
252	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeaderSize(headerBuf[i]);  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeaderSize(headerBuf[i]);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeaderSize(headerBuf[i]);  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    currEntry.setHeaderSize(headerBuf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
253	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headBuf.length;  ++i)  {  currEntry.setHeaderSize(headerBuf[i]);  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headBuf.length;  ++i)  {  currEntry.setHeaderSize(headerBuf[i]);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headBuf.length;  ++i)  {  currEntry.setHeaderSize(headerBuf[i]);  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    currEntry.setHeaderSize(headerBuf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
254	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeaderSize(headerBuf[i].length);  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeaderSize(headerBuf[i].length);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeaderSize(headerBuf[i].length);  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    currEntry.setHeaderSize(headerBuf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
255	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerHitEOF);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
256	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerName);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerName);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerName);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
257	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf  ==  null  ||  headerBuf.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(headerBuf.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
258	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(headerBuf.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
259	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  skipBuf);  }  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf  ==  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  skipBuf);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf  ==  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  skipBuf);  }	  if(headerBuf!=    null)    {    currEntry    =    new    TarArchiveEntry(headerBuf,    skipBuf);    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
260	[BUG]  [BUGGY]  if(currEntry!=  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  skipBuf);  }  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(currEntry!=  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  skipBuf);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(currEntry!=  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  skipBuf);  }	  if(headerBuf!=    null)    {    currEntry    =    new    TarArchiveEntry(headerBuf,    skipBuf);    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
261	[BUG]  [BUGGY]  if(currEntry  ==  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  skipBuf);  }  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(currEntry  ==  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  skipBuf);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(currEntry  ==  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  skipBuf);  }	  if(headerBuf!=    null)    {    currEntry    =    new    TarArchiveEntry(headerBuf,    skipBuf);    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
262	[BUG]  [BUGGY]  StringBuffer  longName  =  new  StringBuffer(buf.length);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  StringBuffer  longName  =  new  StringBuffer(buf.length);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	StringBuffer  longName  =  new  StringBuffer(buf.length);	  StringBuffer    longName    =    new    StringBuffer(headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
263	[BUG]  [BUGGY]  Long  entryOffset  =  getNextTarEntry(headerBuf,  readBuf);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  Long  entryOffset  =  getNextTarEntry(headerBuf,  readBuf);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	Long  entryOffset  =  getNextTarEntry(headerBuf,  readBuf);	  Long    entryOffset    =    getNextTarEntry(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
264	[BUG]  [BUGGY]  Long  entryOffset  =  getNextTarEntry(headerBuf,  skipBuf);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  Long  entryOffset  =  getNextTarEntry(headerBuf,  skipBuf);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	Long  entryOffset  =  getNextTarEntry(headerBuf,  skipBuf);	  Long    entryOffset    =    getNextTarEntry(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
265	[BUG]  [BUGGY]  Long  entryOffset  =  getNextTarEntry(headerBuf,  buffer);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  Long  entryOffset  =  getNextTarEntry(headerBuf,  buffer);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	Long  entryOffset  =  getNextTarEntry(headerBuf,  buffer);	  Long    entryOffset    =    getNextTarEntry(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
266	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  readBuf);  }  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  readBuf);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  readBuf);  }	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
267	[BUG]  [BUGGY]  CurrEntry  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerSize);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  CurrEntry  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerSize);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	CurrEntry  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerSize);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
268	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  0,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  0,  hasHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  0,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
269	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  length);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  length);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  length);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
270	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  buffer.length);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  buffer.length);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  buffer.length);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
271	[BUG]  [BUGGY]  readBuf.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  readBuf.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	readBuf.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(headerBuf.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
272	[BUG]  [BUGGY]  safeGet(headerBuf,  0,  headerBuf.length))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  safeGet(headerBuf,  0,  headerBuf.length))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	safeGet(headerBuf,  0,  headerBuf.length))  {  throw  new  IllegalArgumentException( " ");  }	  if(headerBuf.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
273	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  SMALL_BUFFER_SIZE  +  1);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  SMALL_BUFFER_SIZE  +  1);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  SMALL_BUFFER_SIZE  +  1);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize,    SMALL_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
274	[BUG]  [BUGGY]  long  entryOffset  =  currEntry.getOffset()  +  1;  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  long  entryOffset  =  currEntry.getOffset()  +  1;  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	long  entryOffset  =  currEntry.getOffset()  +  1;	  long    entryOffset    =    currEntry.getOffset();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
275	[BUG]  [BUGGY]  long  entryOffset  =  currEntry.getOffset()  -  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  long  entryOffset  =  currEntry.getOffset()  -  headerBuf.length;  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	long  entryOffset  =  currEntry.getOffset()  -  headerBuf.length;	  long    entryOffset    =    currEntry.getOffset();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
276	[BUG]  [BUGGY]  long  entryOffset  =  currEntry.getOffset()  +  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  long  entryOffset  =  currEntry.getOffset()  +  headerBuf.length;  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	long  entryOffset  =  currEntry.getOffset()  +  headerBuf.length;	  long    entryOffset    =    currEntry.getOffset();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
277	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  length  +  1);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  length  +  1);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerOffset,    length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
278	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  readBuf,  length);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  readBuf,  length);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  readBuf,  length);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerOffset,    length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
279	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  0,  headerOffset);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  0,  headerOffset);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  0,  headerOffset);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf,    0);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
280	[BUG]  [BUGGY]  (headerBuf!=  null)&&  longName.charAt(headerBuf.length()  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  (headerBuf!=  null)&&  longName.charAt(headerBuf.length()  -  1)!=  '/')  {  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	(headerBuf!=  null)&&  longName.charAt(headerBuf.length()  -  1)!=  '/')  {	  if(headerBuf!=    null)    {    longName    =    headerBuf.length();    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
281	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  longName  =  headerBuf.toString();  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  longName  =  headerBuf.toString();  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  longName  =  headerBuf.toString();  }	  if(headerBuf!=    null)    {    longName    =    headerBuf.length();    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
282	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  longName  =  headerBuf.substring(0,  headerBuf.length()  -  1);  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  longName  =  headerBuf.substring(0,  headerBuf.length()  -  1);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  longName  =  headerBuf.substring(0,  headerBuf.length()  -  1);  }	  if(headerBuf!=    null)    {    longName    =    headerBuf.length();    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
283	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  0);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  0);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  0);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    SMALL_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
284	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  1);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  1);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  1);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    SMALL_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
285	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeader(headerBuf[i].getName());  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeader(headerBuf[i].getName());  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeader(headerBuf[i].getName());  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    currEntry.setHeader(headerBuf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
286	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHader(headerBuf[i]);  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHader(headerBuf[i]);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHader(headerBuf[i]);  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    currEntry.setHeader(headerBuf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
287	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  readBuf);  }  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  readBuf);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  readBuf);  }	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
288	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  readBuf);  }  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf  ==  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  readBuf);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf  ==  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  readBuf);  }	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
289	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  readBuf,  skipped);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  readBuf,  skipped);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  readBuf,  skipped);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    skipped);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
290	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  entryOffset);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  entryOffset);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  entryOffset);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    skipped);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
291	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  skipped);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  skipped);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  skipped);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    skipped);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
292	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  length  +  1);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  length  +  1);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  length  +  1);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    length);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
293	[BUG]  [BUGGY]  if(headerBuf.length  >=  0)  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf.length  >=  0)  {  return  null;  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf.length  >=  0)  {  return  null;  }	  if(headerBuf.length!=    0)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
294	[BUG]  [BUGGY]  if(headerBuf.length!=  0  ||  headerBuf.length!=  0)  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf.length!=  0  ||  headerBuf.length!=  0)  {  return  null;  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf.length!=  0  ||  headerBuf.length!=  0)  {  return  null;  }	  if(headerBuf.length!=    0)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
295	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length  -  4);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length  -  4);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length  -  4);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
296	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length  *  1);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length  *  1);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length  *  1);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
297	[BUG]  [BUGGY]  StringBuffer  longName  =  new  StringBuffer(80);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  StringBuffer  longName  =  new  StringBuffer(80);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	StringBuffer  longName  =  new  StringBuffer(80);	  StringBuffer    longName    =    new    StringBuffer();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
298	[BUG]  [BUGGY]  StringBuffer  longName  =  new  StringBuffer(60);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  StringBuffer  longName  =  new  StringBuffer(60);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	StringBuffer  longName  =  new  StringBuffer(60);	  StringBuffer    longName    =    new    StringBuffer();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
299	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length,  headerSize  -  1);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length,  headerSize  -  1);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length,  headerSize  -  1);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf.length,    headerSize);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
300	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length,  0);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length,  0);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length,  0);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf.length,    headerSize);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
301	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length,  headerSize  +  1);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length,  headerSize  +  1);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length,  headerSize  +  1);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf.length,    headerSize);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
302	[BUG]  [BUGGY]  byte[]  headerBuf  =  getHitEOF();  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  byte[]  headerBuf  =  getHitEOF();  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	byte[]  headerBuf  =  getHitEOF();	  byte[]    headerBuf    =    getRecord();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
303	[BUG]  [BUGGY]  byte[]  headerBuf  =  getRecord(currEntry.getHeaderSize());  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  byte[]  headerBuf  =  getRecord(currEntry.getHeaderSize());  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	byte[]  headerBuf  =  getRecord(currEntry.getHeaderSize());	  byte[]    headerBuf    =    getRecord();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
304	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerSize  -  1);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerSize  -  1);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerSize  -  1);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf,    headerSize);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
305	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerSize,  SMALL_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerSize,  SMALL_BUFFER_SIZE);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerSize,  SMALL_BUFFER_SIZE);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf,    headerSize);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
306	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  false,  0);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  false,  0);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  false,  0);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerOffset,    false);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
307	[BUG]  [BUGGY]  CurrEntry  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  true);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  CurrEntry  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  true);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	CurrEntry  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  true);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerOffset,    false);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
308	[BUG]  [BUGGY]  Long  entryOffset  =  getNextTarEntry(headerBuf,  headerBuf,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  Long  entryOffset  =  getNextTarEntry(headerBuf,  headerBuf,  0,  headerBuf.length);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	Long  entryOffset  =  getNextTarEntry(headerBuf,  headerBuf,  0,  headerBuf.length);	  Long    entryOffset    =    getNextTarEntry(headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
309	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerLength  -  1);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerLength  -  1);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerLength  -  1);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf,    headerLength);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
310	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  0,  headerLength);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  0,  headerLength);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  0,  headerLength);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf,    headerLength);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
311	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerLength,  skipBuf);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerLength,  skipBuf);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerLength,  skipBuf);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf,    headerLength);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
312	[BUG]  [BUGGY]  int  entryOffset  =  currEntry.length();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  int  entryOffset  =  currEntry.length();  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	int  entryOffset  =  currEntry.length();	  int    entryOffset    =    headerBuf.length();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
313	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize  *  1);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize  *  1);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize  *  1);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize    -    1);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
314	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize  -  1  +  1);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize  -  1  +  1);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize  -  1  +  1);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize    -    1);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
315	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headersBuf,  readBuf);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headersBuf,  readBuf);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headersBuf,  readBuf);	  currEntry    =    new    TarArchiveEntry(readBuf,    headerBuf);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
316	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length,  headerBuf.length);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length,  headerBuf.length);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf.length,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
317	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length,  readBuf.length);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length,  readBuf.length);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length,  readBuf.length);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf.length,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
318	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length,  readBuf);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length,  readBuf);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length,  readBuf);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf.length,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
319	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  0,  headerOffset);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  0,  headerOffset);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  0,  headerOffset);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerOffset,    0);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
320	[BUG]  [BUGGY]  StringBuffer  longName  =  new  StringBuffer(headerBuf,  0,  headerBuf.length  +  2);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  StringBuffer  longName  =  new  StringBuffer(headerBuf,  0,  headerBuf.length  +  2);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	StringBuffer  longName  =  new  StringBuffer(headerBuf,  0,  headerBuf.length  +  2);	  StringBuffer    longName    =    new    StringBuffer(headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
321	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  null,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  null,  hasHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  null,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    null);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
322	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  startTarEntry();  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  startTarEntry();  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  startTarEntry();  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    getNextTarEntry();    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
323	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headBuf.length;  ++i)  {  buffer[i]  =  getNextTarEntry();  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headBuf.length;  ++i)  {  buffer[i]  =  getNextTarEntry();  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headBuf.length;  ++i)  {  buffer[i]  =  getNextTarEntry();  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    getNextTarEntry();    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
324	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  getNumberEntry();  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  getNumberEntry();  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  getNumberEntry();  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    getNextTarEntry();    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
325	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  headerSize  -  1);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  headerSize  -  1);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  headerSize  -  1);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    0,    headerSize);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
326	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  headerSize  +  1);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  headerSize  +  1);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  headerSize  +  1);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    0,    headerSize);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
327	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  0,  headerBuf);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  0,  headerBuf);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  0,  headerBuf);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    0,    headerSize);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
328	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerBuf.length  -  2);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerBuf.length  -  2);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerBuf.length  -  2);	  currEntry    =    new    TarArchiveEntry(headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
329	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerBuf.length  -  4);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerBuf.length  -  4);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerBuf.length  -  4);	  currEntry    =    new    TarArchiveEntry(headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
330	[BUG]  [BUGGY]  long  entryOffset  =  currEntry.length();  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  long  entryOffset  =  currEntry.length();  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	long  entryOffset  =  currEntry.length();	  long    entryOffset    =    headerBuf.length();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
331	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerBuf,  isEOF);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerBuf,  isEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerBuf,  isEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf,    headerBuf);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
332	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  headerBuf.length  -  headerOffset);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  headerBuf.length  -  headerOffset);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  headerBuf.length  -  headerOffset);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
333	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  headerBuf.length);  }  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  headerBuf.length);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  headerBuf.length);  }	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
334	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset  -  1);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset  -  1);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset  -  1);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize    -    1);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
335	[BUG]  [BUGGY]  long  entryOffset  =  getNextTarEntry(headerBuf,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  long  entryOffset  =  getNextTarEntry(headerBuf,  0,  headerBuf.length);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	long  entryOffset  =  getNextTarEntry(headerBuf,  0,  headerBuf.length);	  Long    entryOffset    =    getNextTarEntry(headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
336	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  SMALL_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  SMALL_BUFFER_SIZE);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  SMALL_BUFFER_SIZE);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize,    SMALL_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
337	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  entryOffset);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  entryOffset);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  entryOffset);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize,    SMALL_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
338	[BUG]  [BUGGY]  StringBuffer  longName  =  new  StringBuffer(headerBuf,  header.length);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  StringBuffer  longName  =  new  StringBuffer(headerBuf,  header.length);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	StringBuffer  longName  =  new  StringBuffer(headerBuf,  header.length);	  StringBuffer    longName    =    new    StringBuffer(headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
339	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  skip);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  skip);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  skip);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    skipped);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
340	[BUG]  [BUGGY]  int  entryOffset  =  headerBuf.length  -  1;  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  int  entryOffset  =  headerBuf.length  -  1;  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	int  entryOffset  =  headerBuf.length  -  1;	  int    entryOffset    =    headerBuf.length();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
341	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  entryOffset,  hasHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  entryOffset,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
342	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuff,  false);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuff,  false);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuff,  false);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize,    false);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
343	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  headerSize,  SMALL_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  headerSize,  SMALL_BUFFER_SIZE);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  headerSize,  SMALL_BUFFER_SIZE);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    headerSize);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
344	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  1);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  1);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  1);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf,    0);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
345	[BUG]  [BUGGY]  if(headerBuf.length  ==  0  ||  headerBuf.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf.length  ==  0  ||  headerBuf.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf.length  ==  0  ||  headerBuf.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(headerBuf.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
346	[BUG]  [BUGGY]  while(headerBuf.length  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  while(headerBuf.length  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	while(headerBuf.length  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(headerBuf.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
347	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  entrySize);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  entrySize);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  entrySize);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerOffset,    skipBuf);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
348	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  headerBuf);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  headerBuf);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  headerBuf);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf,    headerBuf);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
349	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  readSize);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  readSize);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  readSize);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf,    headerSize);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
350	[BUG]  [BUGGY]  long  entryOffset  =  currEntry.getOffset()  -  2;  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  long  entryOffset  =  currEntry.getOffset()  -  2;  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	long  entryOffset  =  currEntry.getOffset()  -  2;	  long    entryOffset    =    currEntry.getOffset();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
351	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  <  0)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  0);  }  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  <  0)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  0);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null  ||  headerBuf.length  <  0)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  0);  }	  if(headerBuf!=    null)    {    currEntry    =    new    TarArchiveEntry(headerBuf,    0);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
352	[BUG]  [BUGGY]  ||  headerBuf!=  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  0);  }  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  ||  headerBuf!=  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  0);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	||  headerBuf!=  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  0);  }	  if(headerBuf!=    null)    {    currEntry    =    new    TarArchiveEntry(headerBuf,    0);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
353	[BUG]  [BUGGY]  if(headerBuf.length  ==  0  ||  headerBuf.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf.length  ==  0  ||  headerBuf.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf.length  ==  0  ||  headerBuf.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(headerBuf.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
354	[BUG]  [BUGGY]  if(headerBuf.length  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf.length  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf.length  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(headerBuf.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
355	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  1,  SMALL_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  1,  SMALL_BUFFER_SIZE);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  1,  SMALL_BUFFER_SIZE);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    SMALL_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
356	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  readBuf,  0);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  readBuf,  0);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  readBuf,  0);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerOffset,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
357	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  getNextEntry();  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  getNextEntry();  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    getNextTarEntry();    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
358	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  getNextSkipEntry();  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  getNextSkipEntry();  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  getNextSkipEntry();  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    getNextTarEntry();    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
359	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  headerBuf,  0);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  headerBuf,  0);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  headerBuf,  0);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize,    skipBuf);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
360	[BUG]  [BUGGY]  if(headerBuf.length!=  SMALL_BUFFER_SIZE)  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf.length!=  SMALL_BUFFER_SIZE)  {  return  null;  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf.length!=  SMALL_BUFFER_SIZE)  {  return  null;  }	  if(headerBuf.length!=    0)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
361	[BUG]  [BUGGY]  if(headerBuf.length!=  0  ||  headerBuf.length  ==  0)  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf.length!=  0  ||  headerBuf.length  ==  0)  {  return  null;  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf.length!=  0  ||  headerBuf.length  ==  0)  {  return  null;  }	  if(headerBuf.length!=    0)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
362	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  readBuf,  headerLength);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  readBuf,  headerLength);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  readBuf,  headerLength);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf,    headerLength);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
363	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerLength,  SMALL_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerLength,  SMALL_BUFFER_SIZE);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerLength,  SMALL_BUFFER_SIZE);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf,    headerLength);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
364	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  headerLength);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  headerLength);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  headerLength);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf,    headerLength);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
365	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  readBuf,  SMALL_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  readBuf,  SMALL_BUFFER_SIZE);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  readBuf,  SMALL_BUFFER_SIZE);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
366	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHitEOF(headerBuf[i],  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHitEOF(headerBuf[i],  hasHitEOF);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHitEOF(headerBuf[i],  hasHitEOF);  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    currEntry.setHitEOF(headerBuf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
367	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHitEOF(headerBuf,  0,  headerBuf.length);  }  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHitEOF(headerBuf,  0,  headerBuf.length);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHitEOF(headerBuf,  0,  headerBuf.length);  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    currEntry.setHitEOF(headerBuf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
368	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  header.length;  ++i)  {  currEntry.setHitEOF(headerBuf[i]);  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  header.length;  ++i)  {  currEntry.setHitEOF(headerBuf[i]);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  header.length;  ++i)  {  currEntry.setHitEOF(headerBuf[i]);  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    currEntry.setHitEOF(headerBuf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
369	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerBuf.length);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerBuf.length);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
370	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  entryOffset,  hasHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  entryOffset,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
371	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  new  String(header,  0,  headerBuf.length);  }  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  new  String(header,  0,  headerBuf.length);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  new  String(header,  0,  headerBuf.length);  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    new    String(headerBuf,    0,    headerBuf.length);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
372	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  header.length;  ++i)  {  buffer[i]  =  new  String(headerBuf,  0,  headerBuf.length);  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  header.length;  ++i)  {  buffer[i]  =  new  String(headerBuf,  0,  headerBuf.length);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  header.length;  ++i)  {  buffer[i]  =  new  String(headerBuf,  0,  headerBuf.length);  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    new    String(headerBuf,    0,    headerBuf.length);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
373	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeader(headerBuf[i],  headerSize);  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeader(headerBuf[i],  headerSize);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeader(headerBuf[i],  headerSize);  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    currEntry.setHeader(headerBuf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
374	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  header.length;  ++i)  {  currEntry.setHeader(headerBuf[i]);  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  header.length;  ++i)  {  currEntry.setHeader(headerBuf[i]);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  header.length;  ++i)  {  currEntry.setHeader(headerBuf[i]);  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    currEntry.setHeader(headerBuf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
375	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeader(headerBuf,  0,  headerBuf.length);  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeader(headerBuf,  0,  headerBuf.length);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeader(headerBuf,  0,  headerBuf.length);  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    currEntry.setHeader(headerBuf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
376	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length,  hasHitEOF?  headerBuf.length  :  0);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length,  hasHitEOF?  headerBuf.length  :  0);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length,  hasHitEOF?  headerBuf.length  :  0);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf.length,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
377	[BUG]  [BUGGY]  StringBuffer  longName  =  new  StringBuffer(length);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  StringBuffer  longName  =  new  StringBuffer(length);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	StringBuffer  longName  =  new  StringBuffer(length);	  StringBuffer    longName    =    new    StringBuffer();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
378	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeaderSize(headerBuf[i],  headerSize);  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeaderSize(headerBuf[i],  headerSize);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeaderSize(headerBuf[i],  headerSize);  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    currEntry.setHeaderSize(headerBuf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
379	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  header.length;  ++i)  {  currEntry.setHeaderSize(headerBuf[i]);  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  header.length;  ++i)  {  currEntry.setHeaderSize(headerBuf[i]);  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  header.length;  ++i)  {  currEntry.setHeaderSize(headerBuf[i]);  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    currEntry.setHeaderSize(headerBuf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
380	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeaderSize(headerBuf[i].getName());  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeaderSize(headerBuf[i].getName());  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeaderSize(headerBuf[i].getName());  }	  if(headerBuf!=    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    currEntry.setHeaderSize(headerBuf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
381	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  headerSize);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  headerSize);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  headerSize);	  currEntry    =    new    TarArchiveEntry(headerBuf,    0,    headerSize);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
382	[BUG]  [BUGGY]  if(headerBuf.length  ==  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf.length  ==  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  return  null;  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf.length  ==  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  return  null;  }	  if(headerBuf.length    ==    0)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
383	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length()  >  0)  {  longName  =  headerBuf.length();  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length()  >  0)  {  longName  =  headerBuf.length();  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null  &&  headerBuf.length()  >  0)  {  longName  =  headerBuf.length();  }	  if(headerBuf!=    null)    {    longName    =    headerBuf.length();    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
384	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length()  ==  0)  {  longName  =  headerBuf.length();  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length()  ==  0)  {  longName  =  headerBuf.length();  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null  ||  headerBuf.length()  ==  0)  {  longName  =  headerBuf.length();  }	  if(headerBuf!=    null)    {    longName    =    headerBuf.length();    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
385	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  longName  ==  headerBuf.length())  {  longName  =  headerBuf.length();  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  if(headerBuf!=  null  ||  longName  ==  headerBuf.length())  {  longName  =  headerBuf.length();  }  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null  ||  longName  ==  headerBuf.length())  {  longName  =  headerBuf.length();  }	  if(headerBuf!=    null)    {    longName    =    headerBuf.length();    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
386	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length  /  2);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length  /  2);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length  /  2);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf.length    +    1);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
387	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  readBuf,  headerOffset);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  readBuf,  headerOffset);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  readBuf,  headerOffset);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf,    headerOffset);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
388	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  readOffset);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  readOffset);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  readOffset);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf,    headerOffset);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
389	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  length,  SMALL_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  length,  SMALL_BUFFER_SIZE);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  length,  SMALL_BUFFER_SIZE);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerOffset,    length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
390	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  entryOffset,  hasHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  entryOffset,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
391	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  entrySize,  hasHitEOF);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  entrySize,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
392	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  readBuf,  SMALL_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  readBuf,  SMALL_BUFFER_SIZE);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  readBuf,  SMALL_BUFFER_SIZE);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
393	[BUG]  [BUGGY]  long  entryOffset  =  getNextTarEntry(headerBuf);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  long  entryOffset  =  getNextTarEntry(headerBuf);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	long  entryOffset  =  getNextTarEntry(headerBuf);	  Long    entryOffset    =    getNextTarEntry(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
394	[BUG]  [BUGGY]  long  entryOffset  =  getNextTarEntry(headerBuf,  headerBuf);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }      [BUGGY]  long  entryOffset  =  getNextTarEntry(headerBuf,  headerBuf);  [BUGGY]      entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	long  entryOffset  =  getNextTarEntry(headerBuf,  headerBuf);	  Long    entryOffset    =    getNextTarEntry(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
