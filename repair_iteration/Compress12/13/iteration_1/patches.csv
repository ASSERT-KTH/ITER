bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  hasHitEOF);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerOffset);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
2	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  0);  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  0);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  0);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerOffset);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
3	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  length);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  length);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  length);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerOffset);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
4	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  false);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  false);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  false);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerOffset);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
5	[BUG]  [BUGGY]  byte[]  headerBuf  =  getRecord();  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  byte[]  headerBuf  =  getRecord();  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	byte[]  headerBuf  =  getRecord();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
6	[BUG]  [BUGGY]  StringBuffer  longName  =  new  StringBuffer();  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  StringBuffer  longName  =  new  StringBuffer();  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	StringBuffer  longName  =  new  StringBuffer();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
7	[BUG]  [BUGGY]  int  entryOffset  =  headerBuf.length();  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  int  entryOffset  =  headerBuf.length();  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	int  entryOffset  =  headerBuf.length();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
8	[BUG]  [BUGGY]  StringBuffer  longName  =  new  StringBuffer(headerBuf,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  StringBuffer  longName  =  new  StringBuffer(headerBuf,  0,  headerBuf.length);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	StringBuffer  longName  =  new  StringBuffer(headerBuf,  0,  headerBuf.length);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
9	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  longName  =  headerBuf.length();  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  if(headerBuf!=  null)  {  longName  =  headerBuf.length();  }  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  longName  =  headerBuf.length();  }	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
10	[BUG]  [BUGGY]  StringBuffer  longName  =  new  StringBuffer(headerBuf.length);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  StringBuffer  longName  =  new  StringBuffer(headerBuf.length);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	StringBuffer  longName  =  new  StringBuffer(headerBuf.length);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
11	[BUG]  [BUGGY]  if(headerBuf.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  if(headerBuf.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
12	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  hasHitEOF);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    skipBuf);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
13	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  skipBuf);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  skipBuf);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  skipBuf);	  currEntry    =    new    TarArchiveEntry(headerBuf,    skipBuf);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
14	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
15	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  skipBuf);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  skipBuf);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  skipBuf);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
16	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length  -  1);  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length  -  1);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length  -  1);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
17	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  length);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  length);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  length);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
18	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  headerBuf.length);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  headerBuf.length);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
19	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length,  hasHitEOF);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
20	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  hasHitEOF);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
21	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  0);  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  0);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  0);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
22	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  SMALL_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  SMALL_BUFFER_SIZE);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  SMALL_BUFFER_SIZE);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
23	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  false);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  false);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  false);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
24	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  true);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  true);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  true);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
25	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerBuf.length);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerBuf.length);	  currEntry    =    new    TarArchiveEntry(headerBuf,    0);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
26	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerSize);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerSize);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  0,  headerSize);	  currEntry    =    new    TarArchiveEntry(headerBuf,    0);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
27	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  0);  }  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  if(headerBuf!=  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  0);  }  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  0);  }	  currEntry    =    new    TarArchiveEntry(headerBuf,    0);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
28	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerSize);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerSize);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerSize);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
29	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(readBuf,  headerBuf);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  currEntry  =  new  TarArchiveEntry(readBuf,  headerBuf);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(readBuf,  headerBuf);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
30	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerBuf);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerBuf);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerBuf);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
31	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  hasHitEOF);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  hasHitEOF);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
32	[BUG]  [BUGGY]  Long  entryOffset  =  getNextTarEntry(headerBuf,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  Long  entryOffset  =  getNextTarEntry(headerBuf,  0,  headerBuf.length);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	Long  entryOffset  =  getNextTarEntry(headerBuf,  0,  headerBuf.length);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
33	[BUG]  [BUGGY]  if(headerBuf.length  ==  0)  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  if(headerBuf.length  ==  0)  {  return  null;  }  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf.length  ==  0)  {  return  null;  }	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
34	[BUG]  [BUGGY]  if(headerBuf.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  if(headerBuf.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
35	[BUG]  [BUGGY]  Long  entryOffset  =  getNextTarEntry(headerBuf);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  Long  entryOffset  =  getNextTarEntry(headerBuf);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	Long  entryOffset  =  getNextTarEntry(headerBuf);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
36	[BUG]  [BUGGY]  if(headerBuf.length!=  0)  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  if(headerBuf.length!=  0)  {  return  null;  }  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf.length!=  0)  {  return  null;  }	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
37	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize  -  1);  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize  -  1);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize  -  1);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
38	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  skipBuf);  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  skipBuf);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  skipBuf);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
39	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  readBuf);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  readBuf);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerSize,  readBuf);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerSize);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
40	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length,  headerSize);  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length,  headerSize);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length,  headerSize);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
41	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length  +  1);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length  +  1);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf.length  +  1);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
42	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerOffset);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerOffset);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerOffset);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
43	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  0);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  0);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  0);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
44	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  skipBuf);  }  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  if(headerBuf!=  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  skipBuf);  }  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  currEntry  =  new  TarArchiveEntry(headerBuf,  skipBuf);  }	  currEntry    =    new    TarArchiveEntry(headerBuf,    skipBuf);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
45	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  0L);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  0L);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  0L);	  currEntry    =    new    TarArchiveEntry(headerBuf,    0);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
46	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  1);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  1);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  1);	  currEntry    =    new    TarArchiveEntry(headerBuf,    0);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
47	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  skipped);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  skipped);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  skipped);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
48	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  readBuf);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  readBuf);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  readBuf);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
49	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  skipBuf);  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  skipBuf);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  skipBuf);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerOffset);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
50	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  readBuf);  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  readBuf);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  readBuf);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerOffset);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
51	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  SMALL_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  SMALL_BUFFER_SIZE);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  SMALL_BUFFER_SIZE);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
52	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  null);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  null);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  null);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
53	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  headerSize);  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  headerSize);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  0,  headerSize);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
54	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  headerSize);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  headerSize);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerBuf,  headerSize);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
55	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHitEOF(headerBuf[i]);  }  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHitEOF(headerBuf[i]);  }  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHitEOF(headerBuf[i]);  }	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
56	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  new  String(headerBuf,  0,  headerBuf.length);  }  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  new  String(headerBuf,  0,  headerBuf.length);  }  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  new  String(headerBuf,  0,  headerBuf.length);  }	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
57	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeaderSize(headerBuf[i]);  }  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeaderSize(headerBuf[i]);  }  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeaderSize(headerBuf[i]);  }	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
58	[BUG]  [BUGGY]  long  entryOffset  =  currEntry.getOffset();  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  long  entryOffset  =  currEntry.getOffset();  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	long  entryOffset  =  currEntry.getOffset();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
59	[BUG]  [BUGGY]  long  entryOffset  =  headerBuf.length();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  long  entryOffset  =  headerBuf.length();  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	long  entryOffset  =  headerBuf.length();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
60	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  getNextTarEntry();  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  getNextTarEntry();  }  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  getNextTarEntry();  }	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
61	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeader(headerBuf[i]);  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeader(headerBuf[i]);  }  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  currEntry.setHeader(headerBuf[i]);  }	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
62	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  SMALL_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  SMALL_BUFFER_SIZE);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  SMALL_BUFFER_SIZE);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
63	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerLength);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerLength);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  readBuf,  headerLength);	  currEntry    =    new    TarArchiveEntry(headerBuf,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
64	[BUG]  [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  true);  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    readBuf  =  null;  }  byte[]  headerBuf  =  getRecord();  if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }    [BUGGY]  currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  true);  [BUGGY]    entryOffset  =  0;  entrySize  =  currEntry.getSize();  if  (currEntry.isGNULongNameEntry())  {  StringBuffer  longName  =  new  StringBuffer();  byte[]  buf  =  new  byte[SMALL_BUFFER_SIZE];  int  length  =  0;  while  ((length  =  read(buf))  >=  0)  {  longName.append(new  String(buf,  0,  length));  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	currEntry  =  new  TarArchiveEntry(headerBuf,  headerOffset,  true);	  currEntry    =    new    TarArchiveEntry(headerBuf,    headerOffset);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
