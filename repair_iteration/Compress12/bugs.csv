bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] return getNextTarEntry(); [FE] IllegalArgumentException [CONTEXT] public ArchiveEntry getNextEntry() throws IOException { [BUGGY] return getNextTarEntry(); [BUGGY] } [CLASS] TarArchiveInputStream 1 [METHOD] getNextEntry [RETURN_TYPE] ArchiveEntry  [VARIABLES] byte[] buf headerBuf readBuf skipBuf boolean hasHitEOF TarBuffer buffer int BUFFER_SIZE SMALL_BUFFER_SIZE blockSize ch got len length numRead read realSkip recordSize long entryOffset entrySize numToSkip skip skipped TarArchiveEntry currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	395	395	1	replace	
2	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public ArchiveEntry getNextEntry() throws IOException { [BUGGY] [BUGGY] return getNextTarEntry(); } [CLASS] TarArchiveInputStream 1 [METHOD] getNextEntry [RETURN_TYPE] ArchiveEntry  [VARIABLES] byte[] buf headerBuf readBuf skipBuf boolean hasHitEOF TarBuffer buffer int BUFFER_SIZE SMALL_BUFFER_SIZE blockSize ch got len length numRead read realSkip recordSize long entryOffset entrySize numToSkip skip skipped TarArchiveEntry currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	395	395	1	add	
3	[BUG] [BUGGY] this(is, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE); [FE] IllegalArgumentException [CONTEXT] public TarArchiveInputStream(InputStream is) { [BUGGY] this(is, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE); [BUGGY] } [CLASS] TarArchiveInputStream 1 [METHOD] <init> [RETURN_TYPE] InputStream)  InputStream is [VARIABLES] byte[] readBuf boolean hasHitEOF InputStream is TarBuffer buffer int BUFFER_SIZE SMALL_BUFFER_SIZE long entryOffset entrySize TarArchiveEntry currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	61	61	1	replace	
4	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public TarArchiveInputStream(InputStream is) { [BUGGY] [BUGGY] this(is, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE); } [CLASS] TarArchiveInputStream 1 [METHOD] <init> [RETURN_TYPE] InputStream)  InputStream is [VARIABLES] byte[] readBuf boolean hasHitEOF InputStream is TarBuffer buffer int BUFFER_SIZE SMALL_BUFFER_SIZE long entryOffset entrySize TarArchiveEntry currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	61	61	1	add	
5	[BUG] [BUGGY] } [FE] IllegalArgumentException [CONTEXT] public TarArchiveInputStream(InputStream is) { this(is, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE); [BUGGY] } [BUGGY]  [CLASS] TarArchiveInputStream 1 [METHOD] <init> [RETURN_TYPE] InputStream)  InputStream is [VARIABLES] byte[] readBuf boolean hasHitEOF InputStream is TarBuffer buffer int BUFFER_SIZE SMALL_BUFFER_SIZE long entryOffset entrySize TarArchiveEntry currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	62	62	1	replace	
6	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public TarArchiveInputStream(InputStream is) { this(is, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE); [BUGGY] [BUGGY] } [CLASS] TarArchiveInputStream 1 [METHOD] <init> [RETURN_TYPE] InputStream)  InputStream is [VARIABLES] byte[] readBuf boolean hasHitEOF InputStream is TarBuffer buffer int BUFFER_SIZE SMALL_BUFFER_SIZE long entryOffset entrySize TarArchiveEntry currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	62	62	1	add	
7	[BUG] [BUGGY] public TarArchiveInputStream(InputStream is, int blockSize, int recordSize) { [FE] IllegalArgumentException [CONTEXT] [BUGGY] public TarArchiveInputStream(InputStream is, int blockSize, int recordSize) { [BUGGY] this.buffer = new TarBuffer(is, blockSize, recordSize); this.readBuf = null; this.hasHitEOF = false; } [CLASS] TarArchiveInputStream 1 [METHOD] <init> [RETURN_TYPE] InputStream,int,int)  InputStream is int blockSize int recordSize [VARIABLES] byte[] readBuf boolean hasHitEOF InputStream is TarBuffer buffer int BUFFER_SIZE SMALL_BUFFER_SIZE blockSize recordSize long entryOffset entrySize TarArchiveEntry currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	79	79	1	replace	
8	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] [BUGGY] [BUGGY] public TarArchiveInputStream(InputStream is, int blockSize, int recordSize) { this.buffer = new TarBuffer(is, blockSize, recordSize); this.readBuf = null; this.hasHitEOF = false; } [CLASS] TarArchiveInputStream 1 [METHOD] <init> [RETURN_TYPE] InputStream,int,int)  InputStream is int blockSize int recordSize [VARIABLES] byte[] readBuf boolean hasHitEOF InputStream is TarBuffer buffer int BUFFER_SIZE SMALL_BUFFER_SIZE blockSize recordSize long entryOffset entrySize TarArchiveEntry currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	79	79	1	add	
9	[BUG] [BUGGY] this.buffer = new TarBuffer(is, blockSize, recordSize); [FE] IllegalArgumentException [CONTEXT] public TarArchiveInputStream(InputStream is, int blockSize, int recordSize) { [BUGGY] this.buffer = new TarBuffer(is, blockSize, recordSize); [BUGGY] this.readBuf = null; this.hasHitEOF = false; } [CLASS] TarArchiveInputStream 1 [METHOD] <init> [RETURN_TYPE] InputStream,int,int)  InputStream is int blockSize int recordSize [VARIABLES] byte[] readBuf boolean hasHitEOF InputStream is TarBuffer buffer int BUFFER_SIZE SMALL_BUFFER_SIZE blockSize recordSize long entryOffset entrySize TarArchiveEntry currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	80	80	1	replace	
10	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public TarArchiveInputStream(InputStream is, int blockSize, int recordSize) { [BUGGY] [BUGGY] this.buffer = new TarBuffer(is, blockSize, recordSize); this.readBuf = null; this.hasHitEOF = false; } [CLASS] TarArchiveInputStream 1 [METHOD] <init> [RETURN_TYPE] InputStream,int,int)  InputStream is int blockSize int recordSize [VARIABLES] byte[] readBuf boolean hasHitEOF InputStream is TarBuffer buffer int BUFFER_SIZE SMALL_BUFFER_SIZE blockSize recordSize long entryOffset entrySize TarArchiveEntry currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	80	80	1	add	
11	[BUG] [BUGGY] this.readBuf = null; [FE] IllegalArgumentException [CONTEXT] public TarArchiveInputStream(InputStream is, int blockSize, int recordSize) { this.buffer = new TarBuffer(is, blockSize, recordSize); [BUGGY] this.readBuf = null; [BUGGY] this.hasHitEOF = false; } [CLASS] TarArchiveInputStream 1 [METHOD] <init> [RETURN_TYPE] InputStream,int,int)  InputStream is int blockSize int recordSize [VARIABLES] byte[] readBuf boolean hasHitEOF InputStream is TarBuffer buffer int BUFFER_SIZE SMALL_BUFFER_SIZE blockSize recordSize long entryOffset entrySize TarArchiveEntry currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	81	81	1	replace	
12	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public TarArchiveInputStream(InputStream is, int blockSize, int recordSize) { this.buffer = new TarBuffer(is, blockSize, recordSize); [BUGGY] [BUGGY] this.readBuf = null; this.hasHitEOF = false; } [CLASS] TarArchiveInputStream 1 [METHOD] <init> [RETURN_TYPE] InputStream,int,int)  InputStream is int blockSize int recordSize [VARIABLES] byte[] readBuf boolean hasHitEOF InputStream is TarBuffer buffer int BUFFER_SIZE SMALL_BUFFER_SIZE blockSize recordSize long entryOffset entrySize TarArchiveEntry currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	81	81	1	add	
13	[BUG] [BUGGY] this.hasHitEOF = false; [FE] IllegalArgumentException [CONTEXT] public TarArchiveInputStream(InputStream is, int blockSize, int recordSize) { this.buffer = new TarBuffer(is, blockSize, recordSize); this.readBuf = null; [BUGGY] this.hasHitEOF = false; [BUGGY] } [CLASS] TarArchiveInputStream 1 [METHOD] <init> [RETURN_TYPE] InputStream,int,int)  InputStream is int blockSize int recordSize [VARIABLES] byte[] readBuf boolean hasHitEOF InputStream is TarBuffer buffer int BUFFER_SIZE SMALL_BUFFER_SIZE blockSize recordSize long entryOffset entrySize TarArchiveEntry currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	82	82	1	replace	
14	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public TarArchiveInputStream(InputStream is, int blockSize, int recordSize) { this.buffer = new TarBuffer(is, blockSize, recordSize); this.readBuf = null; [BUGGY] [BUGGY] this.hasHitEOF = false; } [CLASS] TarArchiveInputStream 1 [METHOD] <init> [RETURN_TYPE] InputStream,int,int)  InputStream is int blockSize int recordSize [VARIABLES] byte[] readBuf boolean hasHitEOF InputStream is TarBuffer buffer int BUFFER_SIZE SMALL_BUFFER_SIZE blockSize recordSize long entryOffset entrySize TarArchiveEntry currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	82	82	1	add	
15	[BUG] [BUGGY] } [FE] IllegalArgumentException [CONTEXT] public TarArchiveInputStream(InputStream is, int blockSize, int recordSize) { this.buffer = new TarBuffer(is, blockSize, recordSize); this.readBuf = null; this.hasHitEOF = false; [BUGGY] } [BUGGY]  [CLASS] TarArchiveInputStream 1 [METHOD] <init> [RETURN_TYPE] InputStream,int,int)  InputStream is int blockSize int recordSize [VARIABLES] byte[] readBuf boolean hasHitEOF InputStream is TarBuffer buffer int BUFFER_SIZE SMALL_BUFFER_SIZE blockSize recordSize long entryOffset entrySize TarArchiveEntry currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	83	83	1	replace	
16	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public TarArchiveInputStream(InputStream is, int blockSize, int recordSize) { this.buffer = new TarBuffer(is, blockSize, recordSize); this.readBuf = null; this.hasHitEOF = false; [BUGGY] [BUGGY] } [CLASS] TarArchiveInputStream 1 [METHOD] <init> [RETURN_TYPE] InputStream,int,int)  InputStream is int blockSize int recordSize [VARIABLES] byte[] readBuf boolean hasHitEOF InputStream is TarBuffer buffer int BUFFER_SIZE SMALL_BUFFER_SIZE blockSize recordSize long entryOffset entrySize TarArchiveEntry currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	83	83	1	add	
17	[BUG] [BUGGY] if (hasHitEOF) { [FE] IllegalArgumentException [CONTEXT] public TarArchiveEntry getNextTarEntry() throws IOException { [BUGGY] if (hasHitEOF) { [BUGGY] return null; } if (currEntry != null) { long numToSkip = entrySize - entryOffset; while (numToSkip > 0) { long skipped = skip(numToSkip); if (skipped <= 0) { throw new RuntimeException("failed to skip current tar entry"); [CLASS] TarArchiveInputStream 1 [METHOD] getNextTarEntry [RETURN_TYPE] TarArchiveEntry  [VARIABLES] byte[] buf headerBuf readBuf skipBuf StringBuffer longName boolean hasHitEOF TarBuffer buffer int BUFFER_SIZE SMALL_BUFFER_SIZE blockSize length numRead realSkip recordSize long entryOffset entrySize numToSkip skip skipped TarArchiveEntry currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	
18	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public TarArchiveEntry getNextTarEntry() throws IOException { [BUGGY] [BUGGY] if (hasHitEOF) { return null; } if (currEntry != null) { long numToSkip = entrySize - entryOffset; while (numToSkip > 0) { long skipped = skip(numToSkip); if (skipped <= 0) { throw new RuntimeException("failed to skip current tar entry"); [CLASS] TarArchiveInputStream 1 [METHOD] getNextTarEntry [RETURN_TYPE] TarArchiveEntry  [VARIABLES] byte[] buf headerBuf readBuf skipBuf StringBuffer longName boolean hasHitEOF TarBuffer buffer int BUFFER_SIZE SMALL_BUFFER_SIZE blockSize length numRead realSkip recordSize long entryOffset entrySize numToSkip skip skipped TarArchiveEntry currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	add	
19	[BUG] [BUGGY] if (currEntry != null) { [FE] IllegalArgumentException [CONTEXT] public TarArchiveEntry getNextTarEntry() throws IOException { if (hasHitEOF) { return null; } [BUGGY] if (currEntry != null) { [BUGGY] long numToSkip = entrySize - entryOffset; while (numToSkip > 0) { long skipped = skip(numToSkip); if (skipped <= 0) { throw new RuntimeException("failed to skip current tar entry"); } numToSkip -= skipped; }  [CLASS] TarArchiveInputStream 1 [METHOD] getNextTarEntry [RETURN_TYPE] TarArchiveEntry  [VARIABLES] byte[] buf headerBuf readBuf skipBuf StringBuffer longName boolean hasHitEOF TarBuffer buffer int BUFFER_SIZE SMALL_BUFFER_SIZE blockSize length numRead realSkip recordSize long entryOffset entrySize numToSkip skip skipped TarArchiveEntry currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	
20	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public TarArchiveEntry getNextTarEntry() throws IOException { if (hasHitEOF) { return null; } [BUGGY] [BUGGY] if (currEntry != null) { long numToSkip = entrySize - entryOffset; while (numToSkip > 0) { long skipped = skip(numToSkip); if (skipped <= 0) { throw new RuntimeException("failed to skip current tar entry"); } numToSkip -= skipped; }  [CLASS] TarArchiveInputStream 1 [METHOD] getNextTarEntry [RETURN_TYPE] TarArchiveEntry  [VARIABLES] byte[] buf headerBuf readBuf skipBuf StringBuffer longName boolean hasHitEOF TarBuffer buffer int BUFFER_SIZE SMALL_BUFFER_SIZE blockSize length numRead realSkip recordSize long entryOffset entrySize numToSkip skip skipped TarArchiveEntry currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	add	
21	[BUG] [BUGGY] byte[] headerBuf = getRecord(); [FE] IllegalArgumentException [CONTEXT] long skipped = skip(numToSkip); if (skipped <= 0) { throw new RuntimeException("failed to skip current tar entry"); } numToSkip -= skipped; } readBuf = null; } [BUGGY] byte[] headerBuf = getRecord(); [BUGGY]  if (hasHitEOF) { currEntry = null; return null; } currEntry = new TarArchiveEntry(headerBuf); entryOffset = 0; entrySize = currEntry.getSize();  [CLASS] TarArchiveInputStream 1 [METHOD] getNextTarEntry [RETURN_TYPE] TarArchiveEntry  [VARIABLES] byte[] buf headerBuf readBuf skipBuf StringBuffer longName boolean hasHitEOF TarBuffer buffer int BUFFER_SIZE SMALL_BUFFER_SIZE blockSize length numRead realSkip recordSize long entryOffset entrySize numToSkip skip skipped TarArchiveEntry currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	191	191	1	replace	
22	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] long skipped = skip(numToSkip); if (skipped <= 0) { throw new RuntimeException("failed to skip current tar entry"); } numToSkip -= skipped; } readBuf = null; } [BUGGY] [BUGGY] byte[] headerBuf = getRecord(); if (hasHitEOF) { currEntry = null; return null; } currEntry = new TarArchiveEntry(headerBuf); entryOffset = 0; entrySize = currEntry.getSize();  [CLASS] TarArchiveInputStream 1 [METHOD] getNextTarEntry [RETURN_TYPE] TarArchiveEntry  [VARIABLES] byte[] buf headerBuf readBuf skipBuf StringBuffer longName boolean hasHitEOF TarBuffer buffer int BUFFER_SIZE SMALL_BUFFER_SIZE blockSize length numRead realSkip recordSize long entryOffset entrySize numToSkip skip skipped TarArchiveEntry currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	191	191	1	add	
23	[BUG] [BUGGY] if (hasHitEOF) { [FE] IllegalArgumentException [CONTEXT] throw new RuntimeException("failed to skip current tar entry"); } numToSkip -= skipped; } readBuf = null; } byte[] headerBuf = getRecord(); [BUGGY] if (hasHitEOF) { [BUGGY] currEntry = null; return null; } currEntry = new TarArchiveEntry(headerBuf); entryOffset = 0; entrySize = currEntry.getSize(); if (currEntry.isGNULongNameEntry()) {  [CLASS] TarArchiveInputStream 1 [METHOD] getNextTarEntry [RETURN_TYPE] TarArchiveEntry  [VARIABLES] byte[] buf headerBuf readBuf skipBuf StringBuffer longName boolean hasHitEOF TarBuffer buffer int BUFFER_SIZE SMALL_BUFFER_SIZE blockSize length numRead realSkip recordSize long entryOffset entrySize numToSkip skip skipped TarArchiveEntry currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	replace	
24	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] throw new RuntimeException("failed to skip current tar entry"); } numToSkip -= skipped; } readBuf = null; } byte[] headerBuf = getRecord(); [BUGGY] [BUGGY] if (hasHitEOF) { currEntry = null; return null; } currEntry = new TarArchiveEntry(headerBuf); entryOffset = 0; entrySize = currEntry.getSize(); if (currEntry.isGNULongNameEntry()) {  [CLASS] TarArchiveInputStream 1 [METHOD] getNextTarEntry [RETURN_TYPE] TarArchiveEntry  [VARIABLES] byte[] buf headerBuf readBuf skipBuf StringBuffer longName boolean hasHitEOF TarBuffer buffer int BUFFER_SIZE SMALL_BUFFER_SIZE blockSize length numRead realSkip recordSize long entryOffset entrySize numToSkip skip skipped TarArchiveEntry currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	193	193	1	add	
25	[BUG] [BUGGY] currEntry = new TarArchiveEntry(headerBuf); [FE] IllegalArgumentException [CONTEXT] readBuf = null; } byte[] headerBuf = getRecord(); if (hasHitEOF) { currEntry = null; return null; } [BUGGY] currEntry = new TarArchiveEntry(headerBuf); [BUGGY] entryOffset = 0; entrySize = currEntry.getSize(); if (currEntry.isGNULongNameEntry()) {  StringBuffer longName = new StringBuffer(); byte[] buf = new byte[SMALL_BUFFER_SIZE]; int length = 0; while ((length = read(buf)) >= 0) { longName.append(new String(buf, 0, length)); [CLASS] TarArchiveInputStream 1 [METHOD] getNextTarEntry [RETURN_TYPE] TarArchiveEntry  [VARIABLES] byte[] buf headerBuf readBuf skipBuf StringBuffer longName boolean hasHitEOF TarBuffer buffer int BUFFER_SIZE SMALL_BUFFER_SIZE blockSize length numRead realSkip recordSize long entryOffset entrySize numToSkip skip skipped TarArchiveEntry currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	replace	
26	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] readBuf = null; } byte[] headerBuf = getRecord(); if (hasHitEOF) { currEntry = null; return null; } [BUGGY] [BUGGY] currEntry = new TarArchiveEntry(headerBuf); entryOffset = 0; entrySize = currEntry.getSize(); if (currEntry.isGNULongNameEntry()) {  StringBuffer longName = new StringBuffer(); byte[] buf = new byte[SMALL_BUFFER_SIZE]; int length = 0; while ((length = read(buf)) >= 0) { longName.append(new String(buf, 0, length)); [CLASS] TarArchiveInputStream 1 [METHOD] getNextTarEntry [RETURN_TYPE] TarArchiveEntry  [VARIABLES] byte[] buf headerBuf readBuf skipBuf StringBuffer longName boolean hasHitEOF TarBuffer buffer int BUFFER_SIZE SMALL_BUFFER_SIZE blockSize length numRead realSkip recordSize long entryOffset entrySize numToSkip skip skipped TarArchiveEntry currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	198	198	1	add	
27	[BUG] [BUGGY] if (hasHitEOF) { [FE] IllegalArgumentException [CONTEXT] private byte[] getRecord() throws IOException { [BUGGY] if (hasHitEOF) { [BUGGY] return null; } byte[] headerBuf = buffer.readRecord(); if (headerBuf == null) { hasHitEOF = true; } else if (buffer.isEOFRecord(headerBuf)) { hasHitEOF = true; } [CLASS] TarArchiveInputStream 1 [METHOD] getRecord [RETURN_TYPE] byte[]  [VARIABLES] byte[] buf headerBuf readBuf skipBuf boolean hasHitEOF TarBuffer buffer int BUFFER_SIZE SMALL_BUFFER_SIZE blockSize length numRead realSkip recordSize long entryOffset entrySize numToSkip skip skipped TarArchiveEntry currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	
28	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] private byte[] getRecord() throws IOException { [BUGGY] [BUGGY] if (hasHitEOF) { return null; } byte[] headerBuf = buffer.readRecord(); if (headerBuf == null) { hasHitEOF = true; } else if (buffer.isEOFRecord(headerBuf)) { hasHitEOF = true; } [CLASS] TarArchiveInputStream 1 [METHOD] getRecord [RETURN_TYPE] byte[]  [VARIABLES] byte[] buf headerBuf readBuf skipBuf boolean hasHitEOF TarBuffer buffer int BUFFER_SIZE SMALL_BUFFER_SIZE blockSize length numRead realSkip recordSize long entryOffset entrySize numToSkip skip skipped TarArchiveEntry currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	add	
29	[BUG] [BUGGY] byte[] headerBuf = buffer.readRecord(); [FE] IllegalArgumentException [CONTEXT] private byte[] getRecord() throws IOException { if (hasHitEOF) { return null; } [BUGGY] byte[] headerBuf = buffer.readRecord(); [BUGGY]  if (headerBuf == null) { hasHitEOF = true; } else if (buffer.isEOFRecord(headerBuf)) { hasHitEOF = true; } return hasHitEOF ? null : headerBuf; } [CLASS] TarArchiveInputStream 1 [METHOD] getRecord [RETURN_TYPE] byte[]  [VARIABLES] byte[] buf headerBuf readBuf skipBuf boolean hasHitEOF TarBuffer buffer int BUFFER_SIZE SMALL_BUFFER_SIZE blockSize length numRead realSkip recordSize long entryOffset entrySize numToSkip skip skipped TarArchiveEntry currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	
30	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] private byte[] getRecord() throws IOException { if (hasHitEOF) { return null; } [BUGGY] [BUGGY] byte[] headerBuf = buffer.readRecord(); if (headerBuf == null) { hasHitEOF = true; } else if (buffer.isEOFRecord(headerBuf)) { hasHitEOF = true; } return hasHitEOF ? null : headerBuf; } [CLASS] TarArchiveInputStream 1 [METHOD] getRecord [RETURN_TYPE] byte[]  [VARIABLES] byte[] buf headerBuf readBuf skipBuf boolean hasHitEOF TarBuffer buffer int BUFFER_SIZE SMALL_BUFFER_SIZE blockSize length numRead realSkip recordSize long entryOffset entrySize numToSkip skip skipped TarArchiveEntry currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	add	
31	[BUG] [BUGGY] if (headerBuf == null) { [FE] IllegalArgumentException [CONTEXT] private byte[] getRecord() throws IOException { if (hasHitEOF) { return null; } byte[] headerBuf = buffer.readRecord(); [BUGGY] if (headerBuf == null) { [BUGGY] hasHitEOF = true; } else if (buffer.isEOFRecord(headerBuf)) { hasHitEOF = true; } return hasHitEOF ? null : headerBuf; } [CLASS] TarArchiveInputStream 1 [METHOD] getRecord [RETURN_TYPE] byte[]  [VARIABLES] byte[] buf headerBuf readBuf skipBuf boolean hasHitEOF TarBuffer buffer int BUFFER_SIZE SMALL_BUFFER_SIZE blockSize length numRead realSkip recordSize long entryOffset entrySize numToSkip skip skipped TarArchiveEntry currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	
32	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] private byte[] getRecord() throws IOException { if (hasHitEOF) { return null; } byte[] headerBuf = buffer.readRecord(); [BUGGY] [BUGGY] if (headerBuf == null) { hasHitEOF = true; } else if (buffer.isEOFRecord(headerBuf)) { hasHitEOF = true; } return hasHitEOF ? null : headerBuf; } [CLASS] TarArchiveInputStream 1 [METHOD] getRecord [RETURN_TYPE] byte[]  [VARIABLES] byte[] buf headerBuf readBuf skipBuf boolean hasHitEOF TarBuffer buffer int BUFFER_SIZE SMALL_BUFFER_SIZE blockSize length numRead realSkip recordSize long entryOffset entrySize numToSkip skip skipped TarArchiveEntry currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	add	
33	[BUG] [BUGGY] } else if (buffer.isEOFRecord(headerBuf)) { [FE] IllegalArgumentException [CONTEXT] private byte[] getRecord() throws IOException { if (hasHitEOF) { return null; } byte[] headerBuf = buffer.readRecord(); if (headerBuf == null) { hasHitEOF = true; [BUGGY] } else if (buffer.isEOFRecord(headerBuf)) { [BUGGY] hasHitEOF = true; } return hasHitEOF ? null : headerBuf; } [CLASS] TarArchiveInputStream 1 [METHOD] getRecord [RETURN_TYPE] byte[]  [VARIABLES] byte[] buf headerBuf readBuf skipBuf boolean hasHitEOF TarBuffer buffer int BUFFER_SIZE SMALL_BUFFER_SIZE blockSize length numRead realSkip recordSize long entryOffset entrySize numToSkip skip skipped TarArchiveEntry currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	
34	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] private byte[] getRecord() throws IOException { if (hasHitEOF) { return null; } byte[] headerBuf = buffer.readRecord(); if (headerBuf == null) { hasHitEOF = true; [BUGGY] [BUGGY] } else if (buffer.isEOFRecord(headerBuf)) { hasHitEOF = true; } return hasHitEOF ? null : headerBuf; } [CLASS] TarArchiveInputStream 1 [METHOD] getRecord [RETURN_TYPE] byte[]  [VARIABLES] byte[] buf headerBuf readBuf skipBuf boolean hasHitEOF TarBuffer buffer int BUFFER_SIZE SMALL_BUFFER_SIZE blockSize length numRead realSkip recordSize long entryOffset entrySize numToSkip skip skipped TarArchiveEntry currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	add	
35	[BUG] [BUGGY] return hasHitEOF ? null : headerBuf; [FE] IllegalArgumentException [CONTEXT] } byte[] headerBuf = buffer.readRecord(); if (headerBuf == null) { hasHitEOF = true; } else if (buffer.isEOFRecord(headerBuf)) { hasHitEOF = true; } [BUGGY] return hasHitEOF ? null : headerBuf; [BUGGY] } [CLASS] TarArchiveInputStream 1 [METHOD] getRecord [RETURN_TYPE] byte[]  [VARIABLES] byte[] buf headerBuf readBuf skipBuf boolean hasHitEOF TarBuffer buffer int BUFFER_SIZE SMALL_BUFFER_SIZE blockSize length numRead realSkip recordSize long entryOffset entrySize numToSkip skip skipped TarArchiveEntry currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	
36	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] } byte[] headerBuf = buffer.readRecord(); if (headerBuf == null) { hasHitEOF = true; } else if (buffer.isEOFRecord(headerBuf)) { hasHitEOF = true; } [BUGGY] [BUGGY] return hasHitEOF ? null : headerBuf; } [CLASS] TarArchiveInputStream 1 [METHOD] getRecord [RETURN_TYPE] byte[]  [VARIABLES] byte[] buf headerBuf readBuf skipBuf boolean hasHitEOF TarBuffer buffer int BUFFER_SIZE SMALL_BUFFER_SIZE blockSize length numRead realSkip recordSize long entryOffset entrySize numToSkip skip skipped TarArchiveEntry currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	add	
