bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  >  0)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  >  0)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null)  {  if(headerBuf.length  >  0)  {  hasHitEOF  =  true;  }	  if(headerBuf    ==    null)    {    if(headerBuf.length    >    0)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
2	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  ==  0)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  ==  0)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null)  {  if(headerBuf.length  ==  0)  {  hasHitEOF  =  true;  }	  if(headerBuf    ==    null)    {    if(headerBuf.length    >    0)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
3	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  >=  0)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  >=  0)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null)  {  if(headerBuf.length  >=  0)  {  hasHitEOF  =  true;  }	  if(headerBuf    ==    null)    {    if(headerBuf.length    >    0)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
4	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  if(headerBuf.length  >=  0)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf  ==  null)  {  if(headerBuf.length  >=  0)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf  ==  null)  {  if(headerBuf.length  >=  0)  {  hasHitEOF  =  true;  }	  if(headerBuf    ==    null)    {    if(headerBuf.length    >    0)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
5	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  <  0)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  <  0)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null)  {  if(headerBuf.length  <  0)  {  hasHitEOF  =  true;  }	  if(headerBuf    ==    null)    {    if(headerBuf.length    >    0)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
6	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  if(headerBuf.length  <  0)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf  ==  null)  {  if(headerBuf.length  <  0)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf  ==  null)  {  if(headerBuf.length  <  0)  {  hasHitEOF  =  true;  }	  if(headerBuf    ==    null)    {    if(headerBuf.length    >    0)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
7	[BUG]  [BUGGY]  if  (headerBuf  ==  null  ||  headerBuf.length  <  1  ||  headerBuf.length  <  2)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if  (headerBuf  ==  null  ||  headerBuf.length  <  1  ||  headerBuf.length  <  2)  {  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if  (headerBuf  ==  null  ||  headerBuf.length  <  1  ||  headerBuf.length  <  2)  {	  if    (headerBuf    ==    null    ||    headerBuf.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
8	[BUG]  [BUGGY]  if  (headerBuf  ==  null  ||  headerBuf.length  <  1)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if  (headerBuf  ==  null  ||  headerBuf.length  <  1)  {  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if  (headerBuf  ==  null  ||  headerBuf.length  <  1)  {	  if    (headerBuf    ==    null    ||    headerBuf.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
9	[BUG]  [BUGGY]  while(headerBuf!=  null)  {  if(headerBuf.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  while(headerBuf!=  null)  {  if(headerBuf.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	while(headerBuf!=  null)  {  if(headerBuf.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(headerBuf!=    null)    {    if(headerBuf.length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
10	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null)  {  if(headerBuf.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(headerBuf!=    null)    {    if(headerBuf.length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
11	[BUG]  [BUGGY]  ||  headerBuf.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  ||  headerBuf.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	||  headerBuf.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(headerBuf!=    null)    {    if(headerBuf.length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
12	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null)  {  if(headerBuf.length  <  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(headerBuf!=    null)    {    if(headerBuf.length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
13	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null  ||  headerBuf.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(headerBuf!=    null)    {    if(headerBuf.length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
14	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null)  {  if(headerBuf.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(headerBuf!=    null)    {    if(headerBuf.length()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
15	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length()  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length()  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null)  {  if(headerBuf.length()  <  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(headerBuf!=    null)    {    if(headerBuf.length()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
16	[BUG]  [BUGGY]  while(headerBuf!=  null)  {  if(headerBuf.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  while(headerBuf!=  null)  {  if(headerBuf.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	while(headerBuf!=  null)  {  if(headerBuf.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(headerBuf!=    null)    {    if(headerBuf.length()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
17	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length()  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length()  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null)  {  if(headerBuf.length()  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(headerBuf!=    null)    {    if(headerBuf.length()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
18	[BUG]  [BUGGY]  ||  headerBuf.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  ||  headerBuf.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	||  headerBuf.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(headerBuf!=    null)    {    if(headerBuf.length()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
19	[BUG]  [BUGGY]  headerBuf  =  buffer.readRecord();  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  headerBuf  =  buffer.readRecord();  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	headerBuf  =  buffer.readRecord();	  if(headerBuf    ==    null)    {    if(headerBuf.length()    >    0)    {    headerBuf    =    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
20	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length()  >  0)  {  headerBuf  =  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length()  >  0)  {  headerBuf  =  buffer.readRecord();  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null)  {  if(headerBuf.length()  >  0)  {  headerBuf  =  buffer.readRecord();  }	  if(headerBuf    ==    null)    {    if(headerBuf.length()    >    0)    {    headerBuf    =    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
21	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length()  ==  0)  {  headerBuf  =  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length()  ==  0)  {  headerBuf  =  buffer.readRecord();  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null)  {  if(headerBuf.length()  ==  0)  {  headerBuf  =  buffer.readRecord();  }	  if(headerBuf    ==    null)    {    if(headerBuf.length()    >    0)    {    headerBuf    =    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
22	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length()  <  0)  {  headerBuf  =  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length()  <  0)  {  headerBuf  =  buffer.readRecord();  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null)  {  if(headerBuf.length()  <  0)  {  headerBuf  =  buffer.readRecord();  }	  if(headerBuf    ==    null)    {    if(headerBuf.length()    >    0)    {    headerBuf    =    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
23	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  if(headerBuf.length()  <  0)  {  headerBuf  =  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf  ==  null)  {  if(headerBuf.length()  <  0)  {  headerBuf  =  buffer.readRecord();  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf  ==  null)  {  if(headerBuf.length()  <  0)  {  headerBuf  =  buffer.readRecord();  }	  if(headerBuf    ==    null)    {    if(headerBuf.length()    >    0)    {    headerBuf    =    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
24	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  headerBuf  =  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf!=  null)  {  headerBuf  =  buffer.readRecord();  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null)  {  headerBuf  =  buffer.readRecord();  }	  if(headerBuf    ==    null)    {    if(headerBuf!=    null)    {    headerBuf    =    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
25	[BUG]  [BUGGY]  HeaderBuf  =  buffer.readRecord();  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  HeaderBuf  =  buffer.readRecord();  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	HeaderBuf  =  buffer.readRecord();	  if(headerBuf    ==    null)    {    if(headerBuf!=    null)    {    headerBuf    =    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
26	[BUG]  [BUGGY]  berBuf  =  buffer.readRecord();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  berBuf  =  buffer.readRecord();  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	berBuf  =  buffer.readRecord();	  if(headerBuf    ==    null)    {    if(headerBuf!=    null)    {    headerBuf    =    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
27	[BUG]  [BUGGY]  System.arraycopy(headerBuf,  0,  buf,  headerBuf,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  System.arraycopy(headerBuf,  0,  buf,  headerBuf,  0,  headerBuf.length);  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	System.arraycopy(headerBuf,  0,  buf,  headerBuf,  0,  headerBuf.length);	  System.arraycopy(buffer,    0,    buf,    headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
28	[BUG]  [BUGGY]  System.arraycopy(headerBuf,  0,  buf,  buffer,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  System.arraycopy(headerBuf,  0,  buf,  buffer,  0,  headerBuf.length);  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	System.arraycopy(headerBuf,  0,  buf,  buffer,  0,  headerBuf.length);	  System.arraycopy(buffer,    0,    buf,    headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
29	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length);  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length);	  System.arraycopy(buffer,    0,    buf,    headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
30	[BUG]  [BUGGY]  System.arraycopy(headerBuf,  0,  buf,  headerBuf,  0,  buffer.length);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  System.arraycopy(headerBuf,  0,  buf,  headerBuf,  0,  buffer.length);  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	System.arraycopy(headerBuf,  0,  buf,  headerBuf,  0,  buffer.length);	  System.arraycopy(buffer,    0,    buf,    headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
31	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  headerBuf,  0,  headerBuf.length  -  1);  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  System.arraycopy(buffer,  0,  buf,  headerBuf,  0,  headerBuf.length  -  1);  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	System.arraycopy(buffer,  0,  buf,  headerBuf,  0,  headerBuf.length  -  1);	  System.arraycopy(buffer,    0,    buf,    headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
32	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  headerBuf,  0,  headerBuf.length  -  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  System.arraycopy(buffer,  0,  buf,  headerBuf,  0,  headerBuf.length  -  headerBuf.length);  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	System.arraycopy(buffer,  0,  buf,  headerBuf,  0,  headerBuf.length  -  headerBuf.length);	  System.arraycopy(buffer,    0,    buf,    headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
33	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  if(headerBuf.length()!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf  ==  null)  {  if(headerBuf.length()!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf  ==  null)  {  if(headerBuf.length()!=  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(headerBuf    ==    null)    {    if(headerBuf.length()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
34	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  if(headerBuf.length()  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf  ==  null)  {  if(headerBuf.length()  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf  ==  null)  {  if(headerBuf.length()  <  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(headerBuf    ==    null)    {    if(headerBuf.length()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
35	[BUG]  [BUGGY]  ||  headerBuf.length()  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  ||  headerBuf.length()  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	||  headerBuf.length()  <  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(headerBuf    ==    null)    {    if(headerBuf.length()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
36	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf!=  null  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null  ||  buffer.isEOFRecord(headerBuf))  {	  if(headerBuf!=    null    &&    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
37	[BUG]  [BUGGY]  if(headerBuf  ==  null  &&  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf  ==  null  &&  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf  ==  null  &&  buffer.isEOFRecord(headerBuf))  {	  if(headerBuf!=    null    &&    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
38	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf  ==  null  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf  ==  null  ||  buffer.isEOFRecord(headerBuf))  {	  if(headerBuf!=    null    &&    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
39	[BUG]  [BUGGY]  if(buffer!=  null  &&  headerBuf.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(buffer!=  null  &&  headerBuf.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(buffer!=  null  &&  headerBuf.isEOFRecord(headerBuf))  {	  if(headerBuf!=    null    &&    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
40	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  buffer.isEOF(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf!=  null  &&  buffer.isEOF(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null  &&  buffer.isEOF(headerBuf))  {	  if(headerBuf!=    null    &&    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
41	[BUG]  [BUGGY]  if(buffer  ==  null  &&  headerBuf.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(buffer  ==  null  &&  headerBuf.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(buffer  ==  null  &&  headerBuf.isEOFRecord(headerBuf))  {	  if(headerBuf!=    null    &&    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
42	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  <  =  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null  ||  headerBuf.length  <  =  0)  {	  if(headerBuf!=    null    ||    headerBuf.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
43	[BUG]  [BUGGY]  System.arraycopy(headerBuf,  0,  buf,  0,  headerBuf.length  -  1);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  System.arraycopy(headerBuf,  0,  buf,  0,  headerBuf.length  -  1);  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	System.arraycopy(headerBuf,  0,  buf,  0,  headerBuf.length  -  1);	  System.arraycopy(headerBuf,    0,    buf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
44	[BUG]  [BUGGY]  System.arraycopy(buf,  0,  headerBuf,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  System.arraycopy(buf,  0,  headerBuf,  0,  headerBuf.length);  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	System.arraycopy(buf,  0,  headerBuf,  0,  headerBuf.length);	  System.arraycopy(headerBuf,    0,    buf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
45	[BUG]  [BUGGY]  System.arraycopy(buf,  0,  buf,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  System.arraycopy(buf,  0,  buf,  0,  headerBuf.length);  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	System.arraycopy(buf,  0,  buf,  0,  headerBuf.length);	  System.arraycopy(headerBuf,    0,    buf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
46	[BUG]  [BUGGY]  System.arraycopy(headerBuf,  0,  buf,  0,  headerBuf.length  +  1);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  System.arraycopy(headerBuf,  0,  buf,  0,  headerBuf.length  +  1);  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	System.arraycopy(headerBuf,  0,  buf,  0,  headerBuf.length  +  1);	  System.arraycopy(headerBuf,    0,    buf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
47	[BUG]  [BUGGY]  System.arraycopy(headerBuf,  0,  buf,  0,  headerBuf.length  -  2);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  System.arraycopy(headerBuf,  0,  buf,  0,  headerBuf.length  -  2);  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	System.arraycopy(headerBuf,  0,  buf,  0,  headerBuf.length  -  2);	  System.arraycopy(headerBuf,    0,    buf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
48	[BUG]  [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
49	[BUG]  [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
50	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
51	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  headerBuf[i];  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  headerBuf[i];  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  headerBuf[i];  }	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
52	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  headerBuf[i];  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  headerBuf[i];  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  headerBuf[i];  }	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
53	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  headerBuf[i];  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  headerBuf[i];  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  headerBuf[i];  }	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
54	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  ==  0)  {  headerBuf  =  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  ==  0)  {  headerBuf  =  buffer.readRecord();  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null)  {  if(headerBuf.length  ==  0)  {  headerBuf  =  buffer.readRecord();  }	  if(headerBuf!=    null)    {    if(headerBuf.length    >    0)    {    headerBuf    =    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
55	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  <  0)  {  headerBuf  =  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  <  0)  {  headerBuf  =  buffer.readRecord();  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null)  {  if(headerBuf.length  <  0)  {  headerBuf  =  buffer.readRecord();  }	  if(headerBuf!=    null)    {    if(headerBuf.length    >    0)    {    headerBuf    =    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
56	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  >=  0)  {  headerBuf  =  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  >=  0)  {  headerBuf  =  buffer.readRecord();  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null)  {  if(headerBuf.length  >=  0)  {  headerBuf  =  buffer.readRecord();  }	  if(headerBuf!=    null)    {    if(headerBuf.length    >    0)    {    headerBuf    =    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
57	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null  ||  headerBuf.length  >  0)  {	  if(headerBuf!=    null    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
58	[BUG]  [BUGGY]  if(headerBuf  ==  null  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf  ==  null  &&  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf  ==  null  &&  headerBuf.length  >  0)  {	  if(headerBuf!=    null    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
59	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf  ==  null  ||  headerBuf.length  >  0)  {	  if(headerBuf!=    null    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
60	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  >  0  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  >  0  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null  &&  headerBuf.length  >  0  ||  buffer.isEOFRecord(headerBuf))  {	  if(headerBuf!=    null    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
61	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  >  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  >  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null  &&  headerBuf.length  >  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  if(headerBuf!=    null    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
62	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  >  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  'n')  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  >  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  'n')  {  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null  &&  headerBuf.length  >  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  'n')  {	  if(headerBuf!=    null    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
63	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf);  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	byte[]  headerBuf  =  buffer.readRecord(headerBuf);	  byte[]    headerBuf    =    buffer.readRecord();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
64	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord();  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  byte[]  headerBuf  =  buffer.getRecord();  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	byte[]  headerBuf  =  buffer.getRecord();	  byte[]    headerBuf    =    buffer.readRecord();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
65	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer();  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer();  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer();	  byte[]    headerBuf    =    buffer.readRecord();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
66	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf);  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.headerBuf);	  byte[]    headerBuf    =    buffer.readRecord();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
67	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  0,  headerBuf.length);  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	byte[]  headerBuf  =  buffer.readRecord(headerBuf,  0,  headerBuf.length);	  byte[]    headerBuf    =    buffer.readRecord();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
68	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer);  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer);	  byte[]    headerBuf    =    buffer.readRecord();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
69	[BUG]  [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
70	[BUG]  [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
71	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
72	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  headerBuf[i];  }  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  headerBuf[i];  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  headerBuf[i];  }	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
73	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  headerBuf[i];  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  headerBuf[i];  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  headerBuf[i];  }	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
74	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  new  byte[buffer.length()  ];  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  new  byte[buffer.length()  ];  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  new  byte[buffer.length()  ];  }	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
75	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  <  2  ||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  <  2  ||  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null  ||  headerBuf.length  <  2  ||  headerBuf.length  >  0)  {	  if(headerBuf    ==    null    ||    headerBuf.length    <    2    ||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
76	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  <  1  ||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  <  1  ||  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf  ==  null  ||  headerBuf.length  <  1  ||  headerBuf.length  >  0)  {	  if(headerBuf    ==    null    ||    headerBuf.length    <    2    ||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
77	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  <  2  ||  headerBuf.length  >  1)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  <  2  ||  headerBuf.length  >  1)  {  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf  ==  null  ||  headerBuf.length  <  2  ||  headerBuf.length  >  1)  {	  if(headerBuf    ==    null    ||    headerBuf.length    <    2    ||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
78	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  >  2  ||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  >  2  ||  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf  ==  null  ||  headerBuf.length  >  2  ||  headerBuf.length  >  0)  {	  if(headerBuf    ==    null    ||    headerBuf.length    <    2    ||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
79	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  <  4  ||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  <  4  ||  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf  ==  null  ||  headerBuf.length  <  4  ||  headerBuf.length  >  0)  {	  if(headerBuf    ==    null    ||    headerBuf.length    <    2    ||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
80	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  <  =  2  ||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  <  =  2  ||  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf  ==  null  ||  headerBuf.length  <  =  2  ||  headerBuf.length  >  0)  {	  if(headerBuf    ==    null    ||    headerBuf.length    <    2    ||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
81	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  if(headerBuf.length  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf  ==  null)  {  if(headerBuf.length  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf  ==  null)  {  if(headerBuf.length  <  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(headerBuf    ==    null)    {    if(headerBuf.length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
82	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  0,  headerBuf.length  -  1);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  System.arraycopy(buffer,  0,  buf,  0,  headerBuf.length  -  1);  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	System.arraycopy(buffer,  0,  buf,  0,  headerBuf.length  -  1);	  System.arraycopy(buffer,    0,    buf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
83	[BUG]  [BUGGY]  System.arraycopy(headerBuf,  0,  buf,  0,  buffer.length);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  System.arraycopy(headerBuf,  0,  buf,  0,  buffer.length);  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	System.arraycopy(headerBuf,  0,  buf,  0,  buffer.length);	  System.arraycopy(buffer,    0,    buf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
84	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  0,  headerBuf.length  +  1);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  System.arraycopy(buffer,  0,  buf,  0,  headerBuf.length  +  1);  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	System.arraycopy(buffer,  0,  buf,  0,  headerBuf.length  +  1);	  System.arraycopy(buffer,    0,    buf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
85	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  <  0)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  <  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null  &&  headerBuf.length  <  0)  {	  if(headerBuf!=    null    ||    headerBuf.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
86	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  headerBuf[i];  }  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  headerBuf[i];  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  headerBuf[i];  }	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
87	[BUG]  [BUGGY]  HeaderBuf  headerBuf  =  buffer.readRecord();  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  HeaderBuf  headerBuf  =  buffer.readRecord();  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	HeaderBuf  headerBuf  =  buffer.readRecord();	  if(headerBuf    ==    null)    {    headerBuf    =    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
88	[BUG]  [BUGGY]  headBuf  =  buffer.readRecord();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  headBuf  =  buffer.readRecord();  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	headBuf  =  buffer.readRecord();	  if(headerBuf    ==    null)    {    headerBuf    =    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
89	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length  -  1);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length  -  1);  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length  -  1);	  System.arraycopy(buffer,    0,    buf,    headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
90	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length  -  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length  -  headerBuf.length);  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length  -  headerBuf.length);	  System.arraycopy(buffer,    0,    buf,    headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
91	[BUG]  [BUGGY]  System.arraycopy(bodyBuf,  0,  buf,  headerBuf,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  System.arraycopy(bodyBuf,  0,  buf,  headerBuf,  0,  headerBuf.length);  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	System.arraycopy(bodyBuf,  0,  buf,  headerBuf,  0,  headerBuf.length);	  System.arraycopy(buffer,    0,    buf,    headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
92	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length()  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length()  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null)  {  if(headerBuf.length()  >=  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(headerBuf!=    null)    {    if(headerBuf.length()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
93	[BUG]  [BUGGY]  ||  headerBuf!=  null)  {  if(headerBuf.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  ||  headerBuf!=  null)  {  if(headerBuf.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	||  headerBuf!=  null)  {  if(headerBuf.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(headerBuf!=    null)    {    if(headerBuf.length()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
94	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  >=  0)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  >=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null  &&  headerBuf.length  >=  0)  {	  if(headerBuf!=    null    ||    headerBuf.length    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
95	[BUG]  [BUGGY]  HeaderBuffer  headerBuf  =  buffer.readRecord();  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  HeaderBuffer  headerBuf  =  buffer.readRecord();  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	HeaderBuffer  headerBuf  =  buffer.readRecord();	  if(headerBuf    ==    null)    {    if(headerBuf!=    null)    {    headerBuf    =    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
96	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length()  >=  0)  {  headerBuf  =  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length()  >=  0)  {  headerBuf  =  buffer.readRecord();  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null)  {  if(headerBuf.length()  >=  0)  {  headerBuf  =  buffer.readRecord();  }	  if(headerBuf    ==    null)    {    if(headerBuf.length()    >    0)    {    headerBuf    =    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
97	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  if(headerBuf.length()  >=  0)  {  headerBuf  =  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf  ==  null)  {  if(headerBuf.length()  >=  0)  {  headerBuf  =  buffer.readRecord();  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf  ==  null)  {  if(headerBuf.length()  >=  0)  {  headerBuf  =  buffer.readRecord();  }	  if(headerBuf    ==    null)    {    if(headerBuf.length()    >    0)    {    headerBuf    =    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
98	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  >=  2  ||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  >=  2  ||  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf  ==  null  ||  headerBuf.length  >=  2  ||  headerBuf.length  >  0)  {	  if(headerBuf    ==    null    ||    headerBuf.length    <    2    ||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
99	[BUG]  [BUGGY]  if(headerBuf  ==  null  &&  buffer.isEOF(headerBuf))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf  ==  null  &&  buffer.isEOF(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf  ==  null  &&  buffer.isEOF(headerBuf))  {	  if(headerBuf!=    null    &&    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
100	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  buffer.isEOFRecord(headerBuf)||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf!=  null  &&  buffer.isEOFRecord(headerBuf)||  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null  &&  buffer.isEOFRecord(headerBuf)||  headerBuf.length  >  0)  {	  if(headerBuf!=    null    &&    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
101	[BUG]  [BUGGY]  if  (headerBuf  ==  null  ||  headerBuf.length!=  2)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if  (headerBuf  ==  null  ||  headerBuf.length!=  2)  {  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if  (headerBuf  ==  null  ||  headerBuf.length!=  2)  {	  if    (headerBuf    ==    null    ||    headerBuf.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
102	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length!=  0)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length!=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null  &&  headerBuf.length!=  0)  {	  if(headerBuf!=    null    ||    headerBuf.length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
103	[BUG]  [BUGGY]  while(headerBuf!=  null)  {  if(headerBuf.length  >  0)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  while(headerBuf!=  null)  {  if(headerBuf.length  >  0)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	while(headerBuf!=  null)  {  if(headerBuf.length  >  0)  {  hasHitEOF  =  true;  }	  if(headerBuf    ==    null)    {    if(headerBuf.length    >    0)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
104	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  <  =  0)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  <  =  0)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null)  {  if(headerBuf.length  <  =  0)  {  hasHitEOF  =  true;  }	  if(headerBuf    ==    null)    {    if(headerBuf.length    >    0)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
105	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  if(headerBuf.length  >=  0)  {  headerBuf  =  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf  ==  null)  {  if(headerBuf.length  >=  0)  {  headerBuf  =  buffer.readRecord();  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf  ==  null)  {  if(headerBuf.length  >=  0)  {  headerBuf  =  buffer.readRecord();  }	  if(headerBuf    ==    null)    {    if(headerBuf.length    >    0)    {    headerBuf    =    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
106	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  if(headerBuf.length!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf  ==  null)  {  if(headerBuf.length!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf  ==  null)  {  if(headerBuf.length!=  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(headerBuf    ==    null)    {    if(headerBuf.length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
107	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null)  {  if(headerBuf.length  >=  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(headerBuf!=    null)    {    if(headerBuf.length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
108	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null)  {  if(headerBuf.length  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(headerBuf!=    null)    {    if(headerBuf.length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
109	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null  &&  headerBuf.length  ==  0)  {	  if(headerBuf!=    null    ||    headerBuf.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
110	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  false);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  false);  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	byte[]  headerBuf  =  buffer.readRecord(headerBuf,  false);	  byte[]    headerBuf    =    buffer.readRecord();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
111	[BUG]  [BUGGY]  System.arraycopy(headerBuf,  0,  buf,  0,  headerBuf.length  -  4);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  System.arraycopy(headerBuf,  0,  buf,  0,  headerBuf.length  -  4);  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	System.arraycopy(headerBuf,  0,  buf,  0,  headerBuf.length  -  4);	  System.arraycopy(headerBuf,    0,    buf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
112	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  1,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  System.arraycopy(buffer,  0,  buf,  1,  headerBuf.length);  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	System.arraycopy(buffer,  0,  buf,  1,  headerBuf.length);	  System.arraycopy(buffer,    0,    buf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
113	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  <  =  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null  &&  headerBuf.length  <  =  0)  {	  if(headerBuf!=    null    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
114	[BUG]  [BUGGY]  if(headerBuf  >=  null  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf  >=  null  &&  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf  >=  null  &&  headerBuf.length  >  0)  {	  if(headerBuf!=    null    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
115	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  <  =  0)  {  headerBuf  =  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  <  =  0)  {  headerBuf  =  buffer.readRecord();  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null)  {  if(headerBuf.length  <  =  0)  {  headerBuf  =  buffer.readRecord();  }	  if(headerBuf!=    null)    {    if(headerBuf.length    >    0)    {    headerBuf    =    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
116	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length()  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length()  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf  ==  null  ||  headerBuf.length()  <  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(headerBuf    ==    null)    {    if(headerBuf.length()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
117	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf  ==  null  ||  headerBuf.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(headerBuf    ==    null)    {    if(headerBuf.length()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
118	[BUG]  [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  headerBuf[i];  }  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  headerBuf[i];  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  headerBuf[i];  }	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
119	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  >  0  ||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  >  0  ||  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null  &&  headerBuf.length  >  0  ||  headerBuf.length  >  0)  {	  if(headerBuf!=    null    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
120	[BUG]  [BUGGY]  if  (headerBuf  ==  null  ||  headerBuf.length  <  2  ||  headerBuf.length  >  4)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if  (headerBuf  ==  null  ||  headerBuf.length  <  2  ||  headerBuf.length  >  4)  {  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if  (headerBuf  ==  null  ||  headerBuf.length  <  2  ||  headerBuf.length  >  4)  {	  if    (headerBuf    ==    null    ||    headerBuf.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
121	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  >  0  ||  headerBuf.length  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  >  0  ||  headerBuf.length  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null)  {  if(headerBuf.length  >  0  ||  headerBuf.length  <  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(headerBuf!=    null)    {    if(headerBuf.length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
122	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readEOF();  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  byte[]  headerBuf  =  buffer.readEOF();  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	byte[]  headerBuf  =  buffer.readEOF();	  byte[]    headerBuf    =    buffer.readRecord();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
123	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  >  1)  {  headerBuf  =  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  >  1)  {  headerBuf  =  buffer.readRecord();  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null)  {  if(headerBuf.length  >  1)  {  headerBuf  =  buffer.readRecord();  }	  if(headerBuf    ==    null)    {    if(headerBuf.length    >    0)    {    headerBuf    =    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
124	[BUG]  [BUGGY]  System.arraycopy(headerBuf,  0,  buf,  1,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  System.arraycopy(headerBuf,  0,  buf,  1,  headerBuf.length);  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	System.arraycopy(headerBuf,  0,  buf,  1,  headerBuf.length);	  System.arraycopy(headerBuf,    0,    buf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
125	[BUG]  [BUGGY]  System.arraycopy(headerBuf,  0,  buf,  0,  headerBuf.length  -  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  System.arraycopy(headerBuf,  0,  buf,  0,  headerBuf.length  -  headerBuf.length);  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	System.arraycopy(headerBuf,  0,  buf,  0,  headerBuf.length  -  headerBuf.length);	  System.arraycopy(headerBuf,    0,    buf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
126	[BUG]  [BUGGY]  byte  headerBuf  =  buffer.readRecord();  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  byte  headerBuf  =  buffer.readRecord();  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	byte  headerBuf  =  buffer.readRecord();	  if(headerBuf    ==    null)    {    headerBuf    =    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
127	[BUG]  [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  headerBuf[i];  }  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  headerBuf[i];  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  headerBuf[i];  }	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
128	[BUG]  [BUGGY]  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  hasHitEOF  =  true;  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	hasHitEOF  =  true;	  if(headerBuf    ==    null)    {    if(headerBuf.length    >    0)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
129	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  if(headerBuf.length  <  =  0)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf  ==  null)  {  if(headerBuf.length  <  =  0)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf  ==  null)  {  if(headerBuf.length  <  =  0)  {  hasHitEOF  =  true;  }	  if(headerBuf    ==    null)    {    if(headerBuf.length    >    0)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
130	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  if(headerBuf.length!=  0)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf  ==  null)  {  if(headerBuf.length!=  0)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf  ==  null)  {  if(headerBuf.length!=  0)  {  hasHitEOF  =  true;  }	  if(headerBuf    ==    null)    {    if(headerBuf.length    >    0)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
131	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  0,  headerBuf.length  -  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  System.arraycopy(buffer,  0,  buf,  0,  headerBuf.length  -  headerBuf.length);  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	System.arraycopy(buffer,  0,  buf,  0,  headerBuf.length  -  headerBuf.length);	  System.arraycopy(buffer,    0,    buf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
132	[BUG]  [BUGGY]  System.arraycopy(bodyBuf,  0,  buf,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  System.arraycopy(bodyBuf,  0,  buf,  0,  headerBuf.length);  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	System.arraycopy(bodyBuf,  0,  buf,  0,  headerBuf.length);	  System.arraycopy(buffer,    0,    buf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
133	[BUG]  [BUGGY]  if(headerBuf  >=  null  ||  headerBuf.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf  >=  null  ||  headerBuf.length  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf  >=  null  ||  headerBuf.length  ==  0)  {	  if(headerBuf!=    null    ||    headerBuf.length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
134	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();      [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf  ==  null  ||  headerBuf.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(headerBuf    ==    null)    {    if(headerBuf.length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
