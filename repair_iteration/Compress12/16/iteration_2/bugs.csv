bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord();  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();    [BUGGY]  byte[]  headerBuf  =  buffer.readRecord();  [BUGGY]    hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	byte[]  headerBuf  =  buffer.readRecord();	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
2	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  if(headerBuf.length()  >  0)  {  headerBuf  =  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();    [BUGGY]  if(headerBuf  ==  null)  {  if(headerBuf.length()  >  0)  {  headerBuf  =  buffer.readRecord();  }  [BUGGY]    hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf  ==  null)  {  if(headerBuf.length()  >  0)  {  headerBuf  =  buffer.readRecord();  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
3	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  if(headerBuf.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();    [BUGGY]  if(headerBuf  ==  null)  {  if(headerBuf.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf  ==  null)  {  if(headerBuf.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
4	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();    [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null)  {  if(headerBuf.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
5	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  headerBuf,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();    [BUGGY]  System.arraycopy(buffer,  0,  buf,  headerBuf,  0,  headerBuf.length);  [BUGGY]    hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	System.arraycopy(buffer,  0,  buf,  headerBuf,  0,  headerBuf.length);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
6	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  if(headerBuf.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();    [BUGGY]  if(headerBuf  ==  null)  {  if(headerBuf.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf  ==  null)  {  if(headerBuf.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
7	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();    [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null)  {  if(headerBuf.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
8	[BUG]  [BUGGY]  if  (headerBuf  ==  null  ||  headerBuf.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();    [BUGGY]  if  (headerBuf  ==  null  ||  headerBuf.length  <  =  0)  {  [BUGGY]    hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if  (headerBuf  ==  null  ||  headerBuf.length  <  =  0)  {	  if    (headerBuf    ==    null    ||    headerBuf.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
9	[BUG]  [BUGGY]  if  (headerBuf  ==  null  ||  headerBuf.length  >=  0)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();    [BUGGY]  if  (headerBuf  ==  null  ||  headerBuf.length  >=  0)  {  [BUGGY]    hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if  (headerBuf  ==  null  ||  headerBuf.length  >=  0)  {	  if    (headerBuf    ==    null    ||    headerBuf.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
10	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();    [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  ==  0)  {  [BUGGY]    hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null  ||  headerBuf.length  ==  0)  {	  if(headerBuf    ==    null    ||    headerBuf.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
11	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  >>  0)  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();    [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  >>  0)  {  [BUGGY]    hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf  ==  null  ||  headerBuf.length  >>  0)  {	  if(headerBuf    ==    null    ||    headerBuf.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
12	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  <  0)  {  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();    [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  <  0)  {  [BUGGY]    hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null  ||  headerBuf.length  <  0)  {	  if(headerBuf!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
13	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length!=  0)  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();    [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length!=  0)  {  [BUGGY]    hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null  ||  headerBuf.length!=  0)  {	  if(headerBuf    ==    null    ||    headerBuf.length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
14	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  >=  0)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();    [BUGGY]  if(headerBuf!=  null  ||  headerBuf.length  >=  0)  {  [BUGGY]    hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null  ||  headerBuf.length  >=  0)  {	  if(headerBuf    ==    null    ||    headerBuf.length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
15	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  [Delete]  0)  {  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();    [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  [Delete]  0)  {  [BUGGY]    hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf  ==  null  ||  headerBuf.length  [Delete]  0)  {	  if(headerBuf    ==    null    ||    headerBuf.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
16	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();    [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]    hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer[i]  =  buffer[i];  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
17	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  if(headerBuf.length  >  0)  {  headerBuf  =  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();    [BUGGY]  if(headerBuf  ==  null)  {  if(headerBuf.length  >  0)  {  headerBuf  =  buffer.readRecord();  }  [BUGGY]    hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf  ==  null)  {  if(headerBuf.length  >  0)  {  headerBuf  =  buffer.readRecord();  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
18	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  if(headerBuf!=  null)  {  headerBuf  =  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();    [BUGGY]  if(headerBuf  ==  null)  {  if(headerBuf!=  null)  {  headerBuf  =  buffer.readRecord();  }  [BUGGY]    hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf  ==  null)  {  if(headerBuf!=  null)  {  headerBuf  =  buffer.readRecord();  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
19	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();    [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }  [BUGGY]    hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer[i]  =  buffer[i];  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
20	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  >  0)  {  headerBuf  =  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();    [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  >  0)  {  headerBuf  =  buffer.readRecord();  }  [BUGGY]    hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null)  {  if(headerBuf.length  >  0)  {  headerBuf  =  buffer.readRecord();  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
21	[BUG]  [BUGGY]  if  (headerBuf  ==  null  ||  headerBuf.length  <  2)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();    [BUGGY]  if  (headerBuf  ==  null  ||  headerBuf.length  <  2)  {  [BUGGY]    hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if  (headerBuf  ==  null  ||  headerBuf.length  <  2)  {	  if    (headerBuf    ==    null    ||    headerBuf.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
22	[BUG]  [BUGGY]  System.arraycopy(headerBuf,  0,  buf,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();    [BUGGY]  System.arraycopy(headerBuf,  0,  buf,  0,  headerBuf.length);  [BUGGY]    hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	System.arraycopy(headerBuf,  0,  buf,  0,  headerBuf.length);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
23	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();    [BUGGY]  System.arraycopy(buffer,  0,  buf,  0,  headerBuf.length);  [BUGGY]    hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	System.arraycopy(buffer,  0,  buf,  0,  headerBuf.length);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
24	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  if(headerBuf.length  >  0)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();    [BUGGY]  if(headerBuf  ==  null)  {  if(headerBuf.length  >  0)  {  hasHitEOF  =  true;  }  [BUGGY]    hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf  ==  null)  {  if(headerBuf.length  >  0)  {  hasHitEOF  =  true;  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
25	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  headerBuf  =  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();    [BUGGY]  if(headerBuf  ==  null)  {  headerBuf  =  buffer.readRecord();  }  [BUGGY]    hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf  ==  null)  {  headerBuf  =  buffer.readRecord();  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
26	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  <  2  ||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();    [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  <  2  ||  headerBuf.length  >  0)  {  [BUGGY]    hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf  ==  null  ||  headerBuf.length  <  2  ||  headerBuf.length  >  0)  {	  if(headerBuf    ==    null    ||    headerBuf.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
27	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();    [BUGGY]  if(headerBuf!=  null  &&  headerBuf.length  >  0)  {  [BUGGY]    hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null  &&  headerBuf.length  >  0)  {	  if(headerBuf!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
28	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();    [BUGGY]  if(headerBuf!=  null  &&  buffer.isEOFRecord(headerBuf))  {  [BUGGY]    hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	259	259	1	replace	if(headerBuf!=  null  &&  buffer.isEOFRecord(headerBuf))  {	  if(headerBuf!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
