bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  byte[]  headerBuf  =  getHeaderBuf();  [CE]  illegal  start  of  type  [FE]    IllegalArgumentException  [CONTEXT]  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException( "failed  to  skip  current  tar  entry ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  [BUGGY]  byte[]  headerBuf  =  getHeaderBuf();  [BUGGY]    if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	191	191	1	replace	byte[]  headerBuf  =  getHeaderBuf();	byte[]  headerBuf  =  getRecord();  	non-compiled	[CE]  illegal  start  of  type	21	None	replace
2	[BUG]  [BUGGY]  byte[]  headerBuf  =  getRecordBytes();  [CE]  illegal  start  of  type  [FE]      IllegalArgumentException  [CONTEXT]  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException( "failed  to  skip  current  tar  entry ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  [BUGGY]  byte[]  headerBuf  =  getRecordBytes();  [BUGGY]    if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	191	191	1	replace	byte[]  headerBuf  =  getRecordBytes();	byte[]  headerBuf  =  getRecord();  	non-compiled	[CE]  illegal  start  of  type	21	None	replace
3	[BUG]  [BUGGY]  byte[]  headerBuf  =  getHeaderBuffer();  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException  [CONTEXT]  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException( "failed  to  skip  current  tar  entry ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  [BUGGY]  byte[]  headerBuf  =  getHeaderBuffer();  [BUGGY]    if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	191	191	1	replace	byte[]  headerBuf  =  getHeaderBuffer();	byte[]  headerBuf  =  getRecord();  	non-compiled	[CE]  illegal  start  of  type	21	None	replace
4	[BUG]  [BUGGY]  byte[]  headerBuf  =  getRecord(skipped);  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException  [CONTEXT]  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException( "failed  to  skip  current  tar  entry ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  [BUGGY]  byte[]  headerBuf  =  getRecord(skipped);  [BUGGY]    if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	191	191	1	replace	byte[]  headerBuf  =  getRecord(skipped);	byte[]  headerBuf  =  getRecord();  	non-compiled	[CE]  illegal  start  of  type	21	None	replace
5	[BUG]  [BUGGY]  byte[]  headerBuf  =  getRecordInput();  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException  [CONTEXT]  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException( "failed  to  skip  current  tar  entry ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  [BUGGY]  byte[]  headerBuf  =  getRecordInput();  [BUGGY]    if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	191	191	1	replace	byte[]  headerBuf  =  getRecordInput();	byte[]  headerBuf  =  getRecord();  	non-compiled	[CE]  illegal  start  of  type	21	None	replace
6	[BUG]  [BUGGY]  byte[]  headerBuf  =  getRecordInputStream();  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException  [CONTEXT]  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException( "failed  to  skip  current  tar  entry ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  [BUGGY]  byte[]  headerBuf  =  getRecordInputStream();  [BUGGY]    if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	191	191	1	replace	byte[]  headerBuf  =  getRecordInputStream();	byte[]  headerBuf  =  getRecord();  	non-compiled	[CE]  illegal  start  of  type	21	None	replace
7	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]                IllegalArgumentException  [CONTEXT]  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException( "failed  to  skip  current  tar  entry ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  [BUGGY]    [BUGGY]    if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	191	191	1	replace	  	byte[]  headerBuf  =  getRecord();  	non-compiled	[CE]  illegal  start  of  type	21	None	replace
8	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord();  [CE]  illegal  start  of  type  [FE]    IllegalArgumentException  [CONTEXT]  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException( "failed  to  skip  current  tar  entry ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord();  [BUGGY]    if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	191	191	1	replace	byte[]  headerBuf  =  buffer.getRecord();	byte[]  headerBuf  =  getRecord();  	non-compiled	[CE]  illegal  start  of  type	21	None	replace
9	[BUG]  [BUGGY]  byte[]  headerBuf  =  getRecord(buffer);  [CE]  illegal  start  of  type  [FE]      IllegalArgumentException  [CONTEXT]  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException( "failed  to  skip  current  tar  entry ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  [BUGGY]  byte[]  headerBuf  =  getRecord(buffer);  [BUGGY]    if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	191	191	1	replace	byte[]  headerBuf  =  getRecord(buffer);	byte[]  headerBuf  =  getRecord();  	non-compiled	[CE]  illegal  start  of  type	21	None	replace
10	[BUG]  [BUGGY]  byte[]  headerBuf  =  getRecordBytes(readBuf);  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException  [CONTEXT]  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException( "failed  to  skip  current  tar  entry ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  [BUGGY]  byte[]  headerBuf  =  getRecordBytes(readBuf);  [BUGGY]    if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	191	191	1	replace	byte[]  headerBuf  =  getRecordBytes(readBuf);	byte[]  headerBuf  =  getRecord();  	non-compiled	[CE]  illegal  start  of  type	21	None	replace
11	[BUG]  [BUGGY]  byte[]  headerBuf  =  getRecordSize();  [CE]  illegal  start  of  type  [FE]    IllegalArgumentException  [CONTEXT]  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException( "failed  to  skip  current  tar  entry ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  [BUGGY]  byte[]  headerBuf  =  getRecordSize();  [BUGGY]    if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	191	191	1	replace	byte[]  headerBuf  =  getRecordSize();	byte[]  headerBuf  =  getRecord();  	non-compiled	[CE]  illegal  start  of  type	21	None	replace
12	[BUG]  [BUGGY]  byte[]  headerBuf  =  getBuffer();  [CE]  illegal  start  of  type  [FE]      IllegalArgumentException  [CONTEXT]  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException( "failed  to  skip  current  tar  entry ");  }  numToSkip  -=  skipped;  }  readBuf  =  null;  }  [BUGGY]  byte[]  headerBuf  =  getBuffer();  [BUGGY]    if  (hasHitEOF)  {  currEntry  =  null;  return  null;  }  currEntry  =  new  TarArchiveEntry(headerBuf);  entryOffset  =  0;  entrySize  =  currEntry.getSize();  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	191	191	1	replace	byte[]  headerBuf  =  getBuffer();	byte[]  headerBuf  =  getRecord();  	non-compiled	[CE]  illegal  start  of  type	21	None	replace
