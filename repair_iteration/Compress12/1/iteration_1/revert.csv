projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getNext();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry.getValue());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)this.currEntry.clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)currEntry.clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returncurrEntry.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry.getNextEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returnthis.currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)currEntry.getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(ArchiveEntry)currEntry.clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)entry.clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)currEntry.getNext();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)super.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry();getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry();if(currEntry==null){currEntry=getNextEntry();if(currEntry!=null){returncurrEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry();if(currEntry==null){currEntry=getNextEntry();if(currEntry!=null){returncurrEntry.getValue();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry();if(currEntry==null){currEntry=getNextEntry();if(currEntry!=null){returncurrEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry();if(currEntry==null){currEntry=getNextEntry();if(currEntry==null){returncurrEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry();if(currEntry==null){returncurrEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry();if(currEntry==null){currEntry=getNextEntry();returncurrEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry();if(currEntry==null){returncurrEntry.getNextEntry();}else{getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();(currEntry==null)?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();if(currEntry==null)?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();=(currEntry==null)?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();(currEntry!=null)?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();(currEntry==null)?currEntry:getNextTarEntry());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();currEntry==null)?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();if(currEntry==null)?currEntry:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextSkipEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextEntry().getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextFileEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?null:currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getNextSkip();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getParent();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getNextPosition();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();(currEntry==null)?null:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();if(currEntry==null)?null:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();=(currEntry==null)?null:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();||(currEntry==null)?null:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();(currEntry!=null)?null:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();(currEntry==null)?null:getNextTarEntry());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();this.currEntry=currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry;(currEntry==null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry;if(currEntry==null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry;(currEntry==null)?getNextTarEntry():currEntry);
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry;=(currEntry==null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry;(currEntry!=null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry;currEntry==null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getKey();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getName();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?null:currEntry.getNext();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getLastChild();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returnthis.currEntry.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)this.currEntry.getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)currEntry.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)this.currEntry.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){returncurrEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry.getKey());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry,currEntry.getValue());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry,this.currEntry.getValue());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?null:newArchiveEntry(currEntry.getValue());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry.toString());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?null:newArchiveEntry(currEntry.getKey());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry.getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry.getKey();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():currEntry.getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():currEntry.getKey();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry.getParent();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;(currEntry==null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;if(currEntry==null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;(currEntry!=null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;=(currEntry==null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;currEntry==null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;if(currEntry==null)?getNextTarEntry():null;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;this.currEntry=currEntry.getNextTar();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(ArchiveEntry)this.currEntry.clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)this.currentEntry.clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)this.entry.clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)this.urlEntry.clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?this.currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextSkipEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?null:currEntry.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getLastEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():this;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():newArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():this;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():newArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextArchiveEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry.getValue()+1);
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextPosition();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;||(currEntry==null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;this.currEntry=currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;=currEntry==null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry();if(getNextEntry()!=null){if(!hasHitEOF){returngetNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry();if(currEntry==null){getNextEntry();}else{returncurrEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry();if(getNextEntry()!=null){if(!hasHitEOF){returncurrEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry();if(getNextEntry()!=null){if(!hasHitEOF){thrownewIllegalArgumentException("");}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry();if(getNextEntry()!=null){if(!hasHitEOF){thrownewIOException("");}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry.getName();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry.next;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextArchiveEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getNextValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry().getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():newArchiveEntry<K,V>();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():newTarArchiveEntry<K,V>();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getNextSkipEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getNextFileEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getNextPathEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextFileEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();finalTarArchiveEntrycurrEntry=getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?currEntry.getNextEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();||(currEntry==null)?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();this.currEntry=currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry;||(currEntry==null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry;this.currEntry=currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.cloneTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.nextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)this.currEntry.getNext();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getNextArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getNextInternalEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():newTarArchiveEntry(currEntry.getValue());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getRawParent();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getSize();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry();if(getNextEntry()!=null){returngetNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry();if(currEntry==null){returngetNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry();if(!hasHitEOF){returngetNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry();if(getNextEntry()==null){returngetNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry();if(currEntry!=null){returngetNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry();if(getNextEntry()!=null){getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry();this.currEntry=getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry;if(currEntry==null)?getNextTarEntry():currEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry;this.currEntry=(currEntry==null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextInternalEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextTarArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextInternalEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returncurrEntry.getNextArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;if(currEntry==null)?getNextTarEntry():null;}else{return(currEntry==null)?getNextTarEntry():null;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;if(currEntry==null)?getNextTarEntry():null;elsereturn(currEntry==null)?getNextTarEntry():null;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;if(currEntry==null)?getNextTarEntry():null;else{return(currEntry==null)?getNextTarEntry():null;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;this.currEntry=(currEntry==null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?newArchiveEntry():getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry.getSize();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)super.clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();this.currEntry=(currEntry==null)?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();newTarArchiveEntry(currEntry==null)?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();if(currEntry==null)?null:getNextTarEntry();elsereturn(currEntry==null)?null:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();if(currEntry==null)?null:getNextTarEntry();else{return(currEntry==null)?null:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();if(currEntry==null)?null:getNextTarEntry();}else{return(currEntry==null)?null:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();if(currEntry==null)?null:getNextTarEntry();if(currEntry==null)?null:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();if(currEntry==null)?null:getNextTarEntry();return(currEntry==null)?null:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry.getName());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry,file.getValue());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry,currEntry.getKey());
