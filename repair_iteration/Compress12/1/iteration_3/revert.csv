projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getNext();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry.getValue());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)this.currEntry.clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)currEntry.clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returncurrEntry.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry.getNextEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returnthis.currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)currEntry.getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(ArchiveEntry)currEntry.clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)entry.clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)currEntry.getNext();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)super.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry();getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry();if(currEntry==null){currEntry=getNextEntry();if(currEntry!=null){returncurrEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry();if(currEntry==null){currEntry=getNextEntry();if(currEntry!=null){returncurrEntry.getValue();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry();if(currEntry==null){currEntry=getNextEntry();if(currEntry!=null){returncurrEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry();if(currEntry==null){currEntry=getNextEntry();if(currEntry==null){returncurrEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry();if(currEntry==null){returncurrEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry();if(currEntry==null){currEntry=getNextEntry();returncurrEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry();if(currEntry==null){returncurrEntry.getNextEntry();}else{getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();(currEntry==null)?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();if(currEntry==null)?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();=(currEntry==null)?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();(currEntry!=null)?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();(currEntry==null)?currEntry:getNextTarEntry());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();currEntry==null)?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();if(currEntry==null)?currEntry:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextSkipEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextEntry().getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextFileEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?null:currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getNextSkip();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getParent();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getNextPosition();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();(currEntry==null)?null:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();if(currEntry==null)?null:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();=(currEntry==null)?null:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();||(currEntry==null)?null:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();(currEntry!=null)?null:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();(currEntry==null)?null:getNextTarEntry());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();this.currEntry=currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry;(currEntry==null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry;if(currEntry==null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry;(currEntry==null)?getNextTarEntry():currEntry);
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry;=(currEntry==null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry;(currEntry!=null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry;currEntry==null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getKey();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getName();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?null:currEntry.getNext();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getLastChild();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returnthis.currEntry.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)this.currEntry.getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)currEntry.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)this.currEntry.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){returncurrEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry.getKey());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry,currEntry.getValue());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry,this.currEntry.getValue());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?null:newArchiveEntry(currEntry.getValue());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry.toString());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?null:newArchiveEntry(currEntry.getKey());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry.getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry.getKey();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():currEntry.getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():currEntry.getKey();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry.getParent();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;(currEntry==null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;if(currEntry==null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;(currEntry!=null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;=(currEntry==null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;currEntry==null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;if(currEntry==null)?getNextTarEntry():null;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;this.currEntry=currEntry.getNextTar();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(ArchiveEntry)this.currEntry.clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)this.currentEntry.clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)this.entry.clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)this.urlEntry.clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?this.currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextSkipEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?null:currEntry.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getLastEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():this;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():newArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():this;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():newArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextArchiveEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry.getValue()+1);
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextPosition();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;||(currEntry==null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;this.currEntry=currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;=currEntry==null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry();if(getNextEntry()!=null){if(!hasHitEOF){returngetNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry();if(currEntry==null){getNextEntry();}else{returncurrEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry();if(getNextEntry()!=null){if(!hasHitEOF){returncurrEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry();if(getNextEntry()!=null){if(!hasHitEOF){thrownewIllegalArgumentException("");}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry();if(getNextEntry()!=null){if(!hasHitEOF){thrownewIOException("");}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry.getName();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry.next;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextArchiveEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getNextValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry().getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():newArchiveEntry<K,V>();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():newTarArchiveEntry<K,V>();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getNextSkipEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getNextFileEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getNextPathEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextFileEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();finalTarArchiveEntrycurrEntry=getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?currEntry.getNextEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();||(currEntry==null)?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();this.currEntry=currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry;||(currEntry==null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry;this.currEntry=currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.cloneTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.nextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)this.currEntry.getNext();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getNextArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getNextInternalEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():newTarArchiveEntry(currEntry.getValue());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getRawParent();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getSize();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry();if(getNextEntry()!=null){returngetNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry();if(currEntry==null){returngetNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry();if(!hasHitEOF){returngetNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry();if(getNextEntry()==null){returngetNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry();if(currEntry!=null){returngetNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry();if(getNextEntry()!=null){getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry();this.currEntry=getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry;if(currEntry==null)?getNextTarEntry():currEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry;this.currEntry=(currEntry==null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextInternalEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextTarArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextInternalEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returncurrEntry.getNextArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;if(currEntry==null)?getNextTarEntry():null;}else{return(currEntry==null)?getNextTarEntry():null;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;if(currEntry==null)?getNextTarEntry():null;elsereturn(currEntry==null)?getNextTarEntry():null;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;if(currEntry==null)?getNextTarEntry():null;else{return(currEntry==null)?getNextTarEntry():null;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;this.currEntry=(currEntry==null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?newArchiveEntry():getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry.getSize();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)super.clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();this.currEntry=(currEntry==null)?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();newTarArchiveEntry(currEntry==null)?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();if(currEntry==null)?null:getNextTarEntry();elsereturn(currEntry==null)?null:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();if(currEntry==null)?null:getNextTarEntry();else{return(currEntry==null)?null:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();if(currEntry==null)?null:getNextTarEntry();}else{return(currEntry==null)?null:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();if(currEntry==null)?null:getNextTarEntry();if(currEntry==null)?null:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();if(currEntry==null)?null:getNextTarEntry();return(currEntry==null)?null:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry.getName());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry,file.getValue());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry,currEntry.getKey());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395(currEntry==null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395(currEntry==null)?getNextTarEntry():null;(currEntry==null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;(currEntry==null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395null=getNextTarEntry();(currEntry==null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)this.entryOffset.clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)this.entry.getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(ArchiveEntry)this.entry.clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?getNextTarEntry():newArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextFile():newArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextArchiveEntry():newArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():newArchiveEntry(0);
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextValue():newArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextInternalEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextInternalEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?getNextInternalEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returncurrEntry.getNextInternalEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395=(currEntry==null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395||(currEntry==null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395;=(currEntry==null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395=(currEntry!=null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395lastEntry=(currEntry==null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returncurrEntry==null?null:currEntry.getNextArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returncurrEntry!=null?null:currEntry.getNextArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returnthis.currEntry.getNextArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returnentrySize.getNextArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returncurrEntry.getNext();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextFileEntry().getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextPathEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(getNextFileEntry());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?null:currEntry.getNextFileEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getNextPath();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getNextField();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?null:currEntry.getRawParent();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getNextParent();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(getNextEntry());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?null:getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;||(currEntry!=null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395|(currEntry==null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395||(currEntry!=null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;||(currEntry==null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry!=null){returncurrEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395while(currEntry!=null){currEntry=currEntry.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){returncurrEntry.getNextEntry();}else{returncurrEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry!=null){returncurrEntry.getNextEntry();}else{returncurrEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395null=getNextEntry();if(currEntry==null){getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395while(currEntry==null){currEntry=currEntry.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?getNextEntry():currEntry.getKey();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?getNextEntry():currEntry.getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():currEntry.getName();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():currEntry.getRawKey();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():currEntry.getSize();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(this.currEntry==null)?getNextTarEntry():null;this.currEntry=currEntry.getNextTar();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?getNextTarEntry():null;this.currEntry=currEntry.getNextTar();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395this.currEntry=currEntry.getNextTar();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry.getNextTar();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():this.currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)currEntry.getKey();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)entry.getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)super.getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)currEntry.cloneTar();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();(currEntry==null)?currEntry:getNextEntry());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395(currEntry==null)?currEntry:getNextTarEntry());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();(currEntry==null)?currEntry:getNextSkipEntry());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextSkipEntry();(currEntry==null)?currEntry:getNextTarEntry());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():getNextEntry();(currEntry==null)?currEntry:getNextTarEntry());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395newTarArchiveEntry(currEntry==null)?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395null=getNextTarEntry();newTarArchiveEntry(currEntry==null)?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?newTarArchiveEntry(currEntry==null)?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395newTarArchiveEntry(currEntry==null)?currEntry.getNextTarEntry():getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():newTarArchiveEntry(currEntry.getKey());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?getNextTarEntry():newTarArchiveEntry(currEntry.getValue());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():newTarArchiveEntry(currEntry,currEntry.getValue());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?getNextTarEntry():newTarArchiveEntry(currEntry.getKey());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():newTarArchiveEntry(currEntry.toString());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():getNextTarEntry();(currEntry==null)?getNextEntry():getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():getNextTarEntry();if(currEntry==null)?getNextEntry():getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():getNextTarEntry();=(currEntry==null)?getNextEntry():getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():getNextTarEntry();||(currEntry==null)?getNextEntry():getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():getNextTarEntry();(currEntry!=null)?getNextEntry():getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():getNextTarEntry();(currEntry==null)?getNextEntry():getNextTarEntry());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():getNextTarEntry();if(currEntry==null)?getNextEntry():getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395this.currEntry=(currEntry==null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395finalTarArchiveEntrycurrEntry=(currEntry==null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry.getValue();this.currEntry=(currEntry==null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry;this.currEntry=(currEntry!=null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395finalTarArchiveEntrycurrEntry=getNextTarEntry();if(currEntry==null)?null:currEntry.getNextTarEntry();else{return(currEntry==null)?null:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395finalTarArchiveEntrycurrEntry=getNextTarEntry();if(currEntry!=null)?null:currEntry.getNextTarEntry();else{return(currEntry==null)?null:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395finalTarArchiveEntrycurrEntry=getNextTarEntry();if(currEntry==null)?null:currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();if(currEntry==null)?null:getNextTarEntry();else{return(currEntry==null)?null:getNext
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextEntry();(currEntry==null)?null:getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextEntry();if(currEntry==null)?null:getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextEntry();=(currEntry==null)?null:getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextEntry();(currEntry!=null)?null:getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextEntry();currEntry==null)?null:getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextEntry();(currEntry==null)?null:getNextEntry());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextEntry();this.currEntry=currEntry.getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395(currEntry==null)?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();(currEntry==null)?currEntry:getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();(currEntry==null)?currEntry:getNextSkipEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextSkipEntry();(currEntry==null)?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null||currEntry.getNextEntry()!=null){returncurrEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){returnthis.currEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null||currEntry.getNextEntry()==null){returncurrEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry.getLastChild();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(getNextEntry()!=null){returngetNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(getNextEntry()==null){returngetNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){returngetNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry!=null){returngetNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){returncurrEntry.getNextEntry();}else{getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395null=getNextEntry();if(currEntry==null){returncurrEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry!=null){returncurrEntry.getNextEntry();}else{getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395null=getNextEntry();if(currEntry==null){returncurrEntry.getNextEntry();}else{getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395null=getNextEntry();if(currEntry!=null){returncurrEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry!=null){returnnull;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){returnnull;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():null;(currEntry==null)?getNextEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():null;if(currEntry==null)?getNextEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():null;(currEntry!=null)?getNextEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():null;=(currEntry==null)?getNextEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():null;if(currEntry==null)?getNextEntry():null;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():null;currEntry==null)?getNextEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():null;this.currEntry=currEntry.getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getNextKey();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?null:currEntry.getNextValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getParent().getNextValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;if(currEntry==null)?getNextTarEntry():null;}elsereturn(currEntry==null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;if(currEntry!=null)?getNextTarEntry():null;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;if(currEntry==null)?getNextTarEntry():null;elsereturn(currEntry==null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(this.currEntry==null)?getNextTarEntry():null;this.currEntry=currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?getNextTarEntry():null;this.currEntry=currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395this.currEntry=currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395(currEntry==null)?getNextTarEntry():null;this.currEntry=currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():newTarArchiveEntry(currEntry.getNextTarEntry());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry.getMethod());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry.getPath());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry.getSize());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(getNextArchiveEntry());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextArchiveEntry().getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextValueEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(this.currEntry==null)?null:getNextArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;if(currEntry!=null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(!hasHitEOF){return(currEntry==null)?getNextTarEntry():null;if(currEntry==null)?getNextTarEntry():null;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(!hasHitEOF){return(currEntry==null)?getNextTarEntry():null;if(currEntry!=null)?getNextTarEntry():null;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry!=null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextArchiveEntry():this;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextArchiveEntry():entrySize;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395(currEntry==null)?null:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395finalTarArchiveEntrycurrEntry=getNextTarEntry();(currEntry==null)?null:currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();(currEntry==null)?null:getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();(currEntry==null)?null:getNextSkipEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextSkipEntry();(currEntry==null)?null:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){returncurrEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry!=null){returncurrEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?null:newArchiveEntry(currEntry,currEntry.getValue());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry,currEntry.getName());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?null:newArchiveEntry(currEntry,currEntry.getKey());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry,currEntry.toString());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395(currEntry==null)?getNextTarEntry():currEntry);
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry;(currEntry!=null)?getNextTarEntry():currEntry);
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395finalTarArchiveEntrycurrEntry=currEntry.getNextTarEntry();(currEntry==null)?getNextTarEntry():currEntry);
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry.getValue();(currEntry==null)?getNextTarEntry():currEntry);
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?getNextTarEntry():currEntry;(currEntry==null)?getNextTarEntry():currEntry);
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getFirstChild();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?null:currEntry.getLastChild();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry;if(currEntry!=null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry!=null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry.getValue();if(currEntry!=null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry.getValue();if(currEntry==null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():getNextFileEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?this.currEntry:getNextFileEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextFileEntry():getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextFileEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?nextEntry:getNextFileEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(file==null)?null:newArchiveEntry(file.getValue());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry,file.getKey());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry,file.getName());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(file==null)?null:newArchiveEntry(currEntry,file.getValue());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(file==null)?null:newArchiveEntry(file,currEntry.getValue());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(file,file.getValue());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():currEntry.getParent();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():currEntry.getMethod();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():currEntry.next;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(!hasHitEOF){returngetNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395finalTarArchiveEntrycurrEntry=getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395||currEntry!=null){returngetNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(ArchiveEntry)currEntry.getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(ArchiveEntry)entry.clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(ArchiveEntry)currEntry.getNext();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(ArchiveEntry)super.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(ArchiveEntry)getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();if(currEntry==null)?currEntry:getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();if(currEntry!=null)?currEntry:getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();if(currEntry!=null)?currEntry:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();if(currEntry==null)?currEntry:getNextSkipEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextCurrentEntry();if(currEntry==null)?currEntry:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(!hasHitEOF){returngetNextEntry();if(currEntry==null){currEntry=getNextEntry();if(currEntry!=null){returncurrEntry.getValue();}}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(!hasHitEOF){returngetNextEntry();if(currEntry==null){currEntry=getNextEntry();if(currEntry!=null){returncurrEntry.getValue();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(!hasHitEOF){returngetNextEntry();if(currEntry!=null){currEntry=getNextEntry();if(currEntry!=null){returncurrEntry.getValue();}}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(!hasHitEOF){returngetNextEntry();if(currEntry==null){currEntry=getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(!hasHitEOF){returngetNextEntry();if(currEntry!=null){currEntry=getNextEntry();if(currEntry!=null){returncurrEntry.getValue();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(!hasHitEOF){returngetNextEntry();if(currEntry==null){currEntry=getNextEntry();if(currEntry!=null){returncurrEntry.getKey();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(!hasHitEOF){returngetNextEntry();if(currEntry>=null){currEntry=getNextEntry();if(currEntry!=null){returncurrEntry.getValue();}}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();if(currEntry==null)?null:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();if(currEntry!=null)?null:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395finalTarArchiveEntrycurrEntry=getNextTarEntry();if(currEntry!=null)?null:currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();if(currEntry!=null)?null:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?null:currEntry.getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?null:currEntry.getKey();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getValue()+1;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395||currEntry==null){returngetNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)this.currEntry.getKey();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(ArchiveEntry)this.currEntry.getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry.getNextEntry():this;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry.getNextEntry():entrySize;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?this.currEntry.getNextEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry.getNextEntry():entryOffset;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry.getNextEntry():newArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)this.entry.getNext();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(ArchiveEntry)this.currEntry.getNext();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)this.currEntry.next();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getRawSize();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getSize()+1;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():this.entrySize;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():this.entryOffset;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():entrySize;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextValue():getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextArchiveEntry():getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?getNextTarEntry():getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextFile():getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextPosition():getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395finalTarArchiveEntrycurrEntry=getNextTarEntry();(currEntry!=null)?null:currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();(currEntry!=null)?null:getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();(currEntry!=null)?null:getNextSkipEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():currEntry;(currEntry==null)?getNextEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():currEntry;if(currEntry==null)?getNextEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():currEntry;(currEntry==null)?getNextEntry():currEntry);
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():currEntry;=(currEntry==null)?getNextEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():currEntry;||(currEntry==null)?getNextEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():currEntry;currEntry==null)?getNextEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?getNextTarEntry():newTarArchiveEntry<K,V>();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?this.getNextTarEntry():newTarArchiveEntry<K,V>();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():newTarArchiveEntry<K,V>(1);
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTar():newTarArchiveEntry<K,V>();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():newTarArchiveEntry<K,V>(2);
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getRawKey();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getPassword();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(getNextEntry()!=null){if(!hasHitEOF){thrownewIOException("");}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(getNextEntry()==null){if(!hasHitEOF){thrownewIOException("");}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395finalTarArchiveEntrycurrEntry=getNextEntry();if(currEntry!=null){if(!hasHitEOF){thrownewIOException("");}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395this.currEntry=getNextEntry();if(currEntry!=null){if(!hasHitEOF){thrownewIOException("");}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395this.currEntry=getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395this.currEntry=getNextEntry();if(currEntry==null){if(!hasHitEOF){thrownewIOException("");}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry.getRawClass();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry.getHeaderSize();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?getNextTarEntry():currEntry;this.currEntry=currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry,this.currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395(currEntry==null)?getNextTarEntry():currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(!hasHitEOF){returngetNextEntry();this.currEntry=getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395null=getNextEntry();this.currEntry=getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){returngetNextEntry();this.currEntry=getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry!=null){returngetNextEntry();this.currEntry=getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(!hasHitEOF){returngetNextEntry();this.currEntry=getNextEntry();}else{thrownewIllegalStateException("");}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():getNextSkipEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?this.currEntry:getNextSkipEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?nextEntry:getNextSkipEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?lastEntry:getNextSkipEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)this.super.clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)recordSize.clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():null;if(currEntry==null)?getNextTarEntry():null;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextPosition():null;if(currEntry==null)?getNextPosition():null;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?getNextTarEntry():currEntry.getKey();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?getNextTarEntry():currEntry.getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry.getRawKey();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?null:currEntry.getNextSkipEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getNextSkipPosition();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395(currEntry==null)?null:getNextTarEntry());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();(currEntry==null)?null:getNextEntry());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextEntry();(currEntry==null)?null:getNextTarEntry());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395finalTarArchiveEntrycurrEntry=getNextTarEntry();(currEntry==null)?null:currEntry.getNextTarEntry());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextSkipEntry();(currEntry==null)?null:getNextTarEntry());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getPath();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?null:currEntry.getNextPathEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395=(currEntry==null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395||(currEntry==null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395lastEntry=(currEntry==null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395;=(currEntry==null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395(currEntry==null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395=(currEntry!=null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();if(currEntry==null)?currEntry:getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();if(currEntry!=null)?currEntry:getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();if(currEntry!=null)?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)returnnull;if(currEntry!=getNextTarEntry()){returnnull;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();if(currEntry!=null)?currEntry:getNextSkipEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(getNextEntry()!=null){if(!hasHitEOF){returngetNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(getNextEntry()==null){if(!hasHitEOF){returngetNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395(currEntry!=null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?getNextTarEntry():currEntry;(currEntry!=null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395finalTarArchiveEntrycurrEntry=currEntry.getNextTarEntry();(currEntry!=null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry.getValue();(currEntry!=null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395=(currEntry==null)?null:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395=(currEntry!=null)?null:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395||(currEntry==null)?null:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395;=(currEntry==null)?null:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395=(currEntry==null)?null:getNextTarEntry().getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395=(this.currEntry==null)?null:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?null:currEntry.getNextSkip();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getNextSize();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getLastSkip();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextEntry();(currEntry==null)?currEntry:getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextEntry();if(currEntry==null)?currEntry:getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextEntry();(currEntry==null)?currEntry:getNextEntry());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextEntry();=(currEntry==null)?currEntry:getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextEntry();(currEntry!=null)?currEntry:getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextEntry();||(currEntry==null)?currEntry:getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(!hasHitEOF){returngetNextEntry();if(currEntry==null){currEntry=getNextEntry();if(currEntry!=null){returncurrEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(!hasHitEOF){returngetNextEntry();if(currEntry==null){currEntry=getNextEntry();if(currEntry!=null){returncurrEntry.getNextEntry();}}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395getNextEntry();if(currEntry==null){currEntry=getNextEntry();if(currEntry!=null){returncurrEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(!hasHitEOF){returngetNextEntry();if(currEntry!=null){currEntry=getNextEntry();if(currEntry!=null){returncurrEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(!hasHitEOF){returngetNextEntry();if(currEntry!=null){currEntry=getNextEntry();if(currEntry!=null){returncurrEntry.getNextEntry();}}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){returngetNextEntry();currEntry=getNextEntry();if(currEntry!=null){returncurrEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():entrySize;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():newArchiveEntry(this,entrySize);
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(getNextSkipEntry());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextSkipEntry().getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?null:currEntry.getName();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getRawClass();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(this.currEntry==null)?null:getNextTarEntry();this.currEntry=currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getNextTarEntry();this.currEntry=currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry().getNextEntry();this.currEntry=currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:this.currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(getNextEntry()!=null){if(!hasHitEOF){thrownewIllegalArgumentException("");}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(getNextEntry()==null){if(!hasHitEOF){thrownewIllegalArgumentException("");}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)getNextEntry();(TarArchiveEntry)getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)getNextEntry();TarArchiveEntrycurrEntry=(TarArchiveEntry)getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)getNextEntry();this.currEntry=(TarArchiveEntry)getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)getNextEntry();=(TarArchiveEntry)getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)getNextEntry();TarArchiveEntrycurrEntry=getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)getNextEntry();if(getNextEntry()==null){thrownewIllegalArgumentException("TarArchiveEntryisnotanarchiveentry.");}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)getNextEntry();if(getNextEntry()!=null){thrownewIllegalArgumentException("TarArchiveEntryisnotanarchiveentry.");}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry().getKey();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returncurrEntry.getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returnthis.currEntry.getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry().getValue(),TarBuffer.DEFAULT_BUFFER_SIZE);
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry().getValue()+1;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry().getValue(),TarBuffer.DEFAULT_TAR_BUFFER_SIZE);
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(hasHitEOF){returngetNextEntry();if(currEntry==null){currEntry=getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395getNextEntry();if(currEntry==null){currEntry=getNextEntry();if(currEntry==null){returncurrEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(!hasHitEOF){returngetNextEntry();if(currEntry==null){currEntry=getNextEntry();if(currEntry==null){returncurrEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395getNextEntry();if(currEntry==null){currEntry=getNextEntry();if(currEntry!=null){returncurrEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(!hasHitEOF){returngetNextEntry();if(currEntry==null){currEntry=getNextEntry();if(currEntry!=null){returncurrEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(!hasHitEOF){returngetNextEntry();if(currEntry!=null){currEntry=getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextArchiveEntry():currEntry.getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextArchiveEntry():currEntry.getKey();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextArchiveEntry():currEntry.getName();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextArchiveEntry():currEntry.getParent();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextArchiveEntry():currEntry.getSize();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextArchiveEntry():currEntry.next;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395=(currEntry==null)?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395||(currEntry==null)?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395=(currEntry!=null)?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395=(currEntry==null)?getNextTarEntry():getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395=(currEntry==null)?currEntry.getNextTarEntry():getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395;=(currEntry==null)?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395=(currEntry==null)?this.currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)this.super.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)super.getNextEntry(),currEntry);
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)super.getNextEntry()+1;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextEntry().getKey();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:this.getNextEntry().getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(getNextEntry().getValue());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?null:getNextEntry().getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?this.currEntry:getNextTarEntry();(currEntry==null)?this.currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?this.currEntry:getNextTarEntry();if(currEntry==null)?this.currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?this.currEntry:getNextTarEntry();=(currEntry==null)?this.currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?this.currEntry:getNextTarEntry();this.currEntry=(currEntry==null)?this.currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?this.currEntry:getNextTarEntry();(currEntry!=null)?this.currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?this.currEntry:getNextTarEntry();||(currEntry==null)?this.currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?this.currEntry:getNextTarEntry();(currEntry==null)?this.currEntry:getNextTarEntry());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(getNextPosition());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextEntrySize();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:this.getNextPosition();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?getNextTarEntry():newArchiveEntry<K,V>();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?this.getNextTarEntry():newArchiveEntry<K,V>();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():newarchiveEntry<K,V>();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():newArchiveEntry<K,V>(1);
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextArchiveEntry():newArchiveEntry<K,V>();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry,this.currEntry.getKey());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(this.currEntry==null)?null:newArchiveEntry(currEntry,this.currEntry.getValue());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(this.currEntry==null)?null:newArchiveEntry(currEntry,this.currEntry.getKey());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(this.currEntry,this.currEntry.getValue());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?null:newArchiveEntry(currEntry,this.currEntry.getValue());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?null:newArchiveEntry(currEntry,this.currEntry.getKey());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarArchiveEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returncurrEntry.getNextTarArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():getNextCurrentEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():getNextValueEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():getNextPathEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)this.currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)getNextEntry().clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)getNextEntry().getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)getCurrentEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(ArchiveEntry)this.urlEntry.clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(ArchiveEntry)this.runnerEntry.clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(ArchiveEntry)this.currentEntry.clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;if(currEntry!=null)?getNextTarEntry():null;}else{return(currEntry==null)?getNextTarEntry():null;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returnthis.currEntry;this.currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returnthis.currEntry;if(this.currEntry!=null){if(!hasHitEOF){returnthis.currEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returnthis.currEntry;if(this.currEntry!=null){if(!hasHitEOF){returncurrEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returnthis.currEntry;this.currEntry=getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returnthis.currEntry;if(this.currEntry!=null){for(inti=0;i<this.currEntry.length;i++){TarBufferbuffer=(TarBuffer)this.currEntry.getValue();if(buffer.length>entrySize){
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returnthis.currEntry;if(this.currEntry!=null){if(!hasHitEOF){returncurrEntry.getValue();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returnthis.currEntry;if(this.currEntry!=null){if(!hasHitEOF){thrownewIllegalArgumentException("");}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returnthis.currEntry;if(this.currEntry!=null){if(!hasHitEOF){thrownewIllegalStateException("");}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)this.currEntry.cloneTar();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)this.entry.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(ArchiveEntry)this.currEntry.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)this.currEntry.nextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395this.currEntry=(currEntry==null)?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395null=getNextTarEntry();this.currEntry=(currEntry==null)?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395finalTarArchiveEntrycurrEntry=(currEntry==null)?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();this.currEntry=(currEntry==null)?currEntry:getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();this.currEntry=(currEntry==null)?currEntry:getNextSkipEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():this.currEntry.getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)this.rawEntry.clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)this.length.clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)this.sourceEntry.clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395(currEntry==null)?getNextTarEntry():null;currEntry==null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;currEntry!=null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;this.currEntry==null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?getNextTarEntry():null;currEntry==null)?getNextTarEntry():null;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)this.nextEntry.clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)currentEntry.clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry;||(currEntry!=null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395|(currEntry==null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry.getValue();||(currEntry==null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry.getKey();||(currEntry==null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?this.currEntry:getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?newArchiveEntry():getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?currEntry:getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextEntry().getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){returngetNextEntry();getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry!=null){returngetNextEntry();getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){returngetNextEntry();getNextEntry();}else{thrownewIllegalStateException("");}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry!=null){returngetNextEntry();getNextEntry();}else{thrownewIllegalStateException("");}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){returngetNextEntry();getNextEntry();}else{thrownewIllegalArgumentException("");}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395finalTarArchiveEntrycurrEntry=getNextEntry();if(currEntry!=null){returncurrEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry!=null){returngetNextEntry();if(currEntry!=null){getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){returngetNextEntry();if(currEntry!=null){getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returnthis.currEntry!=null?null:currEntry.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?this.currEntry:currEntry.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returnthis.currEntry!=null?currEntry.getNextEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?null:currEntry.getNextArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.nextArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.newArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395finalTarArchiveEntrycurrEntry=getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)returnnull;finalTarArchiveEntrycurrEntry=getNextTarEntry();if(currEntry!=null){returncurrEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)returnnull;finalTarArchiveEntrycurrEntry=getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry.getRawSize();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry.getLength();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry.getRawOffset();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395while(currEntry!=null){currEntry=getNextEntry();returncurrEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395null=getNextEntry();if(currEntry==null){currEntry=getNextEntry();returncurrEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395while(currEntry==null){currEntry=getNextEntry();returncurrEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395while(currEntry!=null){currEntry=getNextEntry();returncurrEntry.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395while(currEntry!=null){currEntry=getNextEntry();if(currEntry==null){returncurrEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395null=getNextEntry();if(currEntry==null||currEntry.getNextEntry()!=null){returncurrEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextInternalEntry().getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(getNextInternalEntry());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getAncestor();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry.getRawParent();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextCurrentEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395(currEntry==null)?getNextTarEntry():null;(currEntry!=null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395(currEntry!=null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?getNextTarEntry():null;(currEntry!=null)?getNextTarEntry():null;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;(currEntry!=null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?getNextTarEntry():null;(currEntry!=null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395=currEntry==null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395this.currEntry=currEntry==null?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395;=currEntry==null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395lastEntry=currEntry==null?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry.getRawClass());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?null:newArchiveEntry(currEntry.getName());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(this.currEntry==null)?this.currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(this.currEntry==null)?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?this.currEntry:getNextArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(this.currEntry==null)?this.currEntry:getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395finalTarArchiveEntrycurrEntry=getNextTarEntry();if(currEntry==null)?null:currEntry.getNextTarEntry();elsereturn(currEntry==null)?null:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();if(currEntry==null)?null:getNextTarEntry();elsereturn(currEntry==null)?null:getNext
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();if(currEntry!=null)?null:getNextTarEntry();elsereturn(currEntry==null)?null:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395finalTarArchiveEntrycurrEntry=currEntry.getNextTarEntry();(currEntry==null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry.getValue();(currEntry==null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():getNextEntry();(currEntry==null)?getNextTarEntry():getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():getNextEntry();if(currEntry==null)?getNextTarEntry():getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():getNextEntry();=(currEntry==null)?getNextTarEntry():getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():getNextEntry();||(currEntry==null)?getNextTarEntry():getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():getNextEntry();(currEntry==null)?getNextTarEntry():getNextEntry());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():getNextEntry();(currEntry!=null)?getNextTarEntry():getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():getNextEntry();if(currEntry==null)?getNextTarEntry():getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?null:currEntry.getNextInternalEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getPreviousInternalEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.nextInternalEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395Return(currEntry==null)?null:currEntry.getNextInternalEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?newArchiveEntry():getNextSkipEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?newArchiveEntry():getNextInternalEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?newArchiveEntry():getNextFileEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?newArchiveEntry():getNextPathEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();(currEntry!=null)?currEntry:getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395(currEntry!=null)?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();(currEntry!=null)?currEntry:getNextSkipEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry,currEntry.getSize());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry,currEntry.getKey(),this);
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry,currEntry.getKey()+1);
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(hasHitEOF){returncurrEntry==null?null:getNextTarEntry();if(currEntry==null)?null:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)returnnull;if(currEntry==null)returnnull;if(currEntry!=getNextTarEntry()){returnnull;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();if(currEntry==null)?null:getNextSkipEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)entryOffset.clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)crEntry.clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)currEntry.next();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)entry.getNext();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?getNextEntry():newArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?this.getNextEntry():newArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():newArchiveEntry().getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(this.currEntry==null)?getNextEntry():newArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():newArchiveEntry(0);
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():newarchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395this.currEntry=(currEntry==null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395finalTarArchiveEntrycurrEntry=(currEntry==null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(this.currEntry==null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395null=getNextTarEntry();this.currEntry=(currEntry==null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;this.currEntry=(currEntry!=null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395null=getNextTarEntry();if(currEntry==null)?null:currEntry.getValue();return(currEntry==null)?null:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395null=getNextTarEntry();if(currEntry==null)?null:getNextTarEntry();return(currEntry==null)?null:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(hasHitEOF){returncurrEntry==null?null:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)returnnull;if(currEntry==null)returnnull;if(currEntry.getValue()==getNextTarEntry()){returnnull;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)returnnull;if(currEntry==null)returnnull;if(currEntry.getValue()!=getNextTarEntry()){returnnull;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returncurrEntry!=null?null:currEntry.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returncurrEntry==null?null:currEntry.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returncurrEntry>=null?null:currEntry.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returncurrEntry!=null?null.getNextEntry():currEntry.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returnentrySize.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getFirstEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?null:currEntry.getLastEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getPosition();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395||(currEntry!=null)?null:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395|(currEntry==null)?null:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395||(currEntry==null)?null:getNextSkipEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395||(currentEntry==null)?null:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395||(currEntry==null)?null:getNextTarEntry().getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?currEntry.getNextEntry():this;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?currEntry.getNextEntry():entrySize;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():getNextArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?nextEntry:getNextArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?entry:getNextArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():this.entrySize;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():this.entryOffset;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry;if(currEntry!=null)?getNextTarEntry():currEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?getNextTarEntry():currEntry;if(currEntry==null)?getNextTarEntry():currEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry.getValue();if(currEntry!=null)?getNextTarEntry():currEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry.getValue();if(currEntry==null)?getNextTarEntry():currEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)entry.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)currEntry.nextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(ArchiveEntry)currEntry.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry.getKey()+1);
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry,currEntry.getValue()+1);
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(this.currEntry==null)?null:this.currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(this.currEntry!=null)?null:this.currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returnthis.currEntry.getNext();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(this.currEntry==null?null:this.currEntry.getValue());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():this.currEntry.getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?this.currEntry:getNextTarEntry();this.currEntry=currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():getNextEntry();this.currEntry=currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():getNextTarEntry();this.currEntry=currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?nextEntry:getNextTarEntry();this.currEntry=currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(!hasHitEOF){return(currEntry==null)?null:getNextTarEntry();if(currEntry==null)?null:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();if(currEntry==null)?null:getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();if(currEntry!=null)?null:getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)returnnull;if(currEntry==null)returnnull;if(currEntry.getNextTarEntry()!=null){returnnull;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(!hasHitEOF){return(currEntry==null)?null:getNextTarEntry();if(currEntry==null)?null:getNextSkipEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?null:currEntry.cloneTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.clonePath();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395||(currEntry!=null)?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395||(currEntry==null)?getNextTarEntry():getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395|(currEntry==null)?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395||(currEntry==null)?getNextTarEntry():getNextSkipEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395||(currEntry==null)?nextEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395||(currEntry==null)?0:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?null:currEntry.getNextPosition();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getLastPosition();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getParent().getNextPosition();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(hasHitEOF){returngetNextEntry();if(currEntry==null){currEntry=getNextEntry();if(currEntry!=null){returncurrEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(!hasHitEOF){returngetNextEntry();if(currEntry==null){currEntry=getNextEntry();if(currEntry!=null){returncurrEntry;}}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395last=(currEntry==null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(!hasHitEOF){returncurrEntry==null?null:getNextTarEntry();if(currEntry==null)?null:getNextTarEntry();returncurrEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(hasHitEOF){returncurrEntry==null?null:getNextTarEntry();if(currEntry==null)?null:getNextTarEntry();return(currEntry==null)?null:getNext
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(hasHitEOF){returncurrEntry==null?null:getNextTarEntry();if(currEntry==null)?null:getNextTarEntry();returncurrEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(hasHitEOF){returncurrEntry==null?null:getNextTarEntry();if(currEntry==null)?null:getNextTarEntry();return(currEntry==null)?null:
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395Return(currEntry==null)?null:currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry>=null)?null:currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?getNextTarEntry():null;if(currEntry==null)?getNextTarEntry():null;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)currentEntry.getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getNextPosition()+1;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395=(currEntry==null)?null:getNextTarEntry().clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?currEntry:getNextTarEntry();(currEntry!=null)?currEntry:getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395(currEntry==null)?currEntry:getNextTarEntry();(currEntry!=null)?currEntry:getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(this.currEntry==null)?null:newArchiveEntry(this.currEntry,this.currEntry.getValue());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getRawValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry.this;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():cache.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returncurrEntry!=null?newTarArchiveEntry(currEntry):currEntry.getNextArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returncurrEntry!=null?newTarArchiveEntry(currEntry.getNextEntry()):null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getNextEntry().getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)crerEntry.clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returnthis.currEntry;if(getNextEntry()!=null){getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry();if(currEntry!=null){getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextValue():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextPosition():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextFile():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){returncurrEntry.getNext();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextUpperTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returncurrEntry==null?getNextTarEntry():currEntry;||(currEntry==null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?getNextTarEntry():currEntry;||(currEntry==null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();||(currEntry==null)?null:getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextEntry();||(currEntry==null)?null:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();||(currEntry!=null)?null:getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();||(currEntry==null)?null:currEntry.getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():currEntry.getPassword();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395=(currEntry==null)?currEntry:getNextTarEntry().clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395=(currEntry==null)?currEntry.getNextTarEntry():getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?null:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getNextTarEntry();if(currEntry==null)?null:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395null=getNextTarEntry();if(currEntry==null)?null:currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():getNextTarEntry();this.currEntry=currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?getNextTarEntry():currEntry;if(currEntry==null)?getNextTarEntry():currEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?getNextTarEntry():currEntry;if(currEntry==null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getMethod();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():newTarArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():newarchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getNextRecordSkipEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(!hasHitEOF){returncurrEntry==null?null:getNextTarEntry();if(currEntry==null)?null:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?null:getNextTarEntry();if(currEntry==null)?null:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?null:getNextTarEntry();if(currEntry==null)?null:getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)returnnull;if(currEntry==null)?null:getNextTarEntry();if(currEntry==null)?null:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();if(currEntry==null)?null:getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();this.currEntry==null)?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():getNextEntry();currEntry==null)?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){returncurrEntry?getNextTarEntry():getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():null;||(currEntry==null)?getNextEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():null;this.currEntry=currEntry.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){returncurrEntry.getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returncurrEntry==null?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry.getValue()*1);
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextSkipEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?realSkip:getNextSkipEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getNextTar();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)returnnull;if(currEntry!=null){returncurrEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(!hasHitEOF){returncurrEntry==null?null:getNextTarEntry();if(currEntry!=null)?null:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(!hasHitEOF){returncurrEntry==null?null:getNextTarEntry();if(currEntry==null)?null:getNextTarEntry();}else{returncurrEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextFiles();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?entry:getNextTarEntry();this.currEntry=currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?this.nextTarEntry:getNextTarEntry();this.currEntry=currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395Return(currEntry==null)?null:currEntry.getNextArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returns(currEntry==null)?null:currEntry.getNextArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextEntry();||(currEntry==null)?null:getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextEntry();this.currEntry=currEntry.getNext();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextEntry();finalTarArchiveEntrycurrEntry=getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395read=getNextEntry();if(currEntry==null){returncurrEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():currEntry.cloneTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():currEntry.toArchive();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry.getPosition());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextArchiveEntry():newTarArchiveEntry<K,V>();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry,currEntry.getSourceName());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry,currEntry.getPosition());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?getNextTarEntry():null;currEntry==null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;currEntry==null)?getNextTarEntry():newArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?null:currEntry.getParent();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395this.headerEntry=getNextEntry();if(currEntry==null){returncurrEntry.getNextEntry();}else{getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395read=getNextEntry();if(currEntry==null){returncurrEntry.getNextEntry();}else{getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395this.headerEntry=getNextEntry();if(currEntry==null){returncurrEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(this.currEntry==null)?null:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?null:getNextTarEntry();this.currEntry=currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(this.currEntry==null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry!=null){returngetNextTarEntry();}else{this.currEntry=(currEntry==null)?getNextTarEntry():currEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){returngetNextTarEntry();}else{this.currEntry=(currEntry==null)?getNextTarEntry():currEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getNextFiles();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){finalTarBufferbuffer=currEntry.getNextEntry();if(buffer!=null){returnbuffer.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){returnnewTarArchiveEntry(currEntry.getNextEntry());}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?getNextTarEntry():currEntry;if(currEntry==null)?getNextTarEntry():currEntry);}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?getNextTarEntry():currEntry;if(currEntry==null)?getNextTarEntry():currEntry);
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395null=getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395(currEntry==null)?null:getNextTarEntry();(currEntry!=null)?null:getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395(currEntry!=null)?null:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextPathEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry!=null){returngetNextEntry();if(getNextEntry()!=null){if(!hasHitEOF){thrownewIOException("");}}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){returngetNextEntry();if(getNextEntry()!=null){if(!hasHitEOF){thrownewIOException("");}}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry!=null){returngetNextEntry();if(getNextEntry()!=null){if(!hasHitEOF){thrownewIOException("");}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){returngetNextEntry();if(getNextEntry()!=null){if(!hasHitEOF){thrownewIOException("");}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry!=null){returngetNextEntry();if(getNextEntry()!=null){thrownewIOException("");}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){returngetNextEntry();if(getNextEntry()!=null){thrownewIOException("");}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextInternalEntry():currEntry.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():newArchiveEntry();||(currEntry==null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?getNextTarEntry():null;||(currEntry==null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?getNextTarEntry():null;||(currEntry==null)?getNextTarEntry():null;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){returncurrEntry;}else{this.currEntry=(currEntry==null)?currEntry:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;=(currEntry!=null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;=(currEntry==null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?curr.getNextEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?getNextTarEntry():currEntry.getName();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry.getAbsolutePath();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getRecordSize();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395null=getNextEntry();if(!hasHitEOF){returngetNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;if(currEntry==null)?getNextTarEntry():null;elsereturn(currEntry==null)?getNextTarEntry():nu
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextValue():null;if(currEntry==null)?getNextTarEntry():null;elsereturn(currEntry==null)?getNextTarEntry():null;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextFile():null;if(currEntry==null)?getNextTarEntry():null;elsereturn(currEntry==null)?getNextTarEntry():null;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?getNextEntry():getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextFile():getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(hasHitEOF){returngetNextEntry();if(currEntry==null){currEntry=getNextEntry();if(currEntry!=null){returncurrEntry.getNextEntry();}}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(hasHitEOF){returngetNextEntry();if(currEntry==null){currEntry=getNextEntry();if(currEntry!=null){returncurrEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry.getCompressedSize();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry.getPosition();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry().getValue(),null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextEntry().getValueSize();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)super.getNextEntry(0);
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:buffer.getNextPosition();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():currEntry;newTarArchiveEntry(currEntry==null)?getNextEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():currEntry;newTarArchiveEntry(currEntry==null)?getNextEntry():currEntry);
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395Return(currEntry==null)?getNextTarEntry():currEntry;this.currEntry=currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?getNextTarEntry():null;if(currEntry!=null)?getNextTarEntry():null;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?getNextTarEntry():null;if(currEntry==null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;=currEntry!=null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?getNextTarEntry():null;if(currEntry!=null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null?null:currEntry.getNextEntry());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returncurrEntry,this.currEntry.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:this.currEntry.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextTarArchiveEntry(currEntry.getValue());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextTarArchiveEntry(currEntry);
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){returngetNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?getNextTarEntry():null;(currEntry!=null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395(currEntry==null)?null:getNextTarEntry();(currEntry==null)?null:getNextEntry());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry,file.getParent());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?nextEntry:getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?this:getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){returncurrEntry?getNextTarEntry():getNextEntry();}else{(currEntry==null)?currEntry:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){returncurrEntry?getNextTarEntry():getNextEntry();(currEntry==null)?currEntry:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();||(currEntry==null)?currEntry:getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();||(currEntry!=null)?currEntry:getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextEntry();||(currEntry==null)?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();|(currEntry==null)?currEntry:getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(ArchiveEntry)this.entrySize.clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returns(currEntry==null)?null:currEntry.getNextInternalEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:curr.getNextInternalEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395(currEntry==null)?null:getNextTarEntry();(currEntry==null)?null:getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();(currEntry==null)?null:currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)this.firstEntry.clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)this.sourcePosition.clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(hasHitEOF){returngetNextEntry();if(currEntry==null){currEntry=getNextEntry();if(currEntry!=null){returncurrEntry;}}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(!hasHitEOF){returngetNextEntry();if(currEntry!=null){currEntry=getNextEntry();if(currEntry!=null){returncurrEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)currEntry.cloneTarObject();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)currEntry.removeNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():newTarArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():newArchiveInputStream();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry,currEntry==null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():newTarArchiveEntry<K,V>();currEntry==null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?getNextTarEntry():currEntry;if(currEntry!=null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?getNextTarEntry():currEntry;if(currEntry!=null)?getNextTarEntry():currEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getNextName();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(hasHitEOF){returngetNextEntry();if(currEntry==null){currEntry=getNextEntry();if(currEntry!=null){returncurrEntry.getValue();}}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(hasHitEOF){returngetNextEntry();if(currEntry==null){currEntry=getNextEntry();if(currEntry!=null){returncurrEntry.getValue();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(getNextEntry()!=null){returngetNextEntry();if(currEntry==null){currEntry=getNextEntry();if(currEntry!=null){returncurrEntry.getValue();}}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(!hasHitEOF){returngetNextEntry();if(currEntry==null){currEntry=getNextEntry();if(currEntry!=null){returncurrEntry.getValu
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)this.entrySize.clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)this.in.clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returnthis.currEntry;if(this.currEntry!=null){if(this.currEntry==null){returnthis.currEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returnthis.currEntry;if(this.currEntry!=null){if(this.currEntry!=null){returnthis.currEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returnthis.currEntry;if(this.currEntry!=null){if(this.currEntry==null){this.currEntry=newArchiveEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returnthis.currEntry;if(this.currEntry!=null){if(this.currEntry==null){this.currEntry=newTarArchiveEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returnthis.currEntry;if(this.currEntry!=null){for(inti=0;i<this.currEntry.length;i++){TarBufferbuffer=newTarBuffer();System.arraycopy(buffer,0,this.currEntry,0,this.currEntry.length);}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returnthis.currEntry;if(this.currEntry!=null){for(inti=0;i<this.currEntry.length;i++){TarBufferbuffer=newTarBuffer();System.arraycopy(buffer,0,this.currEntry,0,this.currEntry.length);
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returnthis.currEntry;this.currEntry=newTarArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():newArchiveEntry<K,V>();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():newTarArchiveEntry<K,V>();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)getNextEntry();if(getNextEntry()!=null){TarArchiveEntrycurrEntry=(TarArchiveEntry)getNextEntry();if(currEntry!=null){returncurrEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)getNextEntry();if(getNextEntry()==null){TarArchiveEntrycurrEntry=(TarArchiveEntry)getNextEntry();if(currEntry!=null){returncurrEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)getNextEntry();if(getNextEntry()!=null){TarArchiveEntrycurrEntry=(TarArchiveEntry)getNextEntry();if(currEntry!=null){returncurrEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)getNextEntry();if(getNextEntry()==null){TarArchiveEntrycurrEntry=(TarArchiveEntry)getNextEntry();if(currEntry!=null){returncurrEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)getNextEntry();if(getNextEntry()!=null){TarArchiveEntrycurrEntry=getNextEntry();if(currEntry!=null){returncurrEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returncurrEntry==null?getNextTarEntry():currEntry;if(currEntry==null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry.getParent());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry.getName()+1);
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():getNextEntry();=currEntry==null)?getNextTarEntry():getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){currEntry=getNextEntry();returncurrEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry!=null){currEntry=getNextEntry();returncurrEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){returngetNextEntry();currEntry=getNextEntry();returncurrEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextEntry();if(currEntry==null)?currEntry:getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry!=null)?getNextTarEntry():currEntry;if(currEntry!=null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry!=null){returngetNextEntry();if(getNextEntry()!=null){if(!hasHitEOF){thrownewIllegalArgumentException("");}}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){returngetNextEntry();if(getNextEntry()!=null){if(!hasHitEOF){thrownewIllegalArgumentException("");}}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry!=null){returngetNextEntry();if(getNextEntry()!=null){if(!hasHitEOF){thrownewIllegalArgumentException("");}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){returngetNextEntry();if(getNextEntry()!=null){if(!hasHitEOF){thrownewIllegalArgumentException("");}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry.toArray();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getMethod().cloneTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.clonePathEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextValueEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getNextFile();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(!hasHitEOF){returngetNextEntry();if(currEntry==null){currEntry=getNextEntry();if(currEntry==null){returncurrEntry;}}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(hasHitEOF){returngetNextEntry();if(currEntry==null){currEntry=getNextEntry();if(currEntry==null){returncurrEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(hasHitEOF){returngetNextEntry();if(currEntry==null){currEntry=getNextEntry();if(currEntry==null){returncurrEntry;}}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(!hasHitEOF){returncurrEntry==null?null:getNextTarEntry();if(currEntry==null)?null:getNextTarEntry();else{return(currEntry==null)?null:getNext
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(!hasHitEOF){returncurrEntry==null?null:getNextTarEntry();if(currEntry==null)?null:getNextTarEntry();else{return(currEntry==null)?null:
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(!hasHitEOF){returncurrEntry==null?null:getNextTarEntry();if(currEntry==null)?null:getNextTarEntry();else{return(currEntry==null)?null:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(!hasHitEOF){returncurrEntry==null?null:getNextTarEntry();if(currEntry==null)?null:getNextTarEntry();else{return(currEntry==null)?null:get
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(!hasHitEOF){returncurrEntry==null?null:getNextTarEntry();if(currEntry==null)?null:getNextTarEntry();else{return(currEntry==null)?null:getNextTarEnt
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){getNextEntry();}else{returncurrEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?this.currEntry:getNextTarEntry();this.currEntry=getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry!=null){returncurrEntry.getNext();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){returncurrEntry;}else{newTarArchiveEntry(currEntry==null)?currEntry:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395null=getNextTarEntry();if(currEntry==null)?currEntry:getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextFileEntry();if(currEntry==null)?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry.getNameNode();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getPreviousPathEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(!hasHitEOF){returncurrEntry==null?null:getNextTarEntry();if(currEntry==null)?null:getNextTarEntry();elsereturncurrEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(!hasHitEOF){returncurrEntry==null?null:getNextTarEntry();if(currEntry==null)?null:getNextTarEntry();elsereturn(currEntry==null)?null:getNext
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)returnnull;if(currEntry==null)?null:getNextTarEntry();elsereturn(currEntry==null)?null:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(!hasHitEOF){returncurrEntry==null?null:getNextTarEntry();if(currEntry==null)?null:getNextTarEntry();elsereturncurrEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextCurrentEntry();(currEntry==null)?currEntry:getNextTarEntry());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();(currEntry!=null)?currEntry:getNextEntry());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null||currEntry!=null){returngetNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry;if(currEntry==null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextFile():null;if(currEntry==null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;if(currEntry==null)?getNextTarEntry():newArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?null:getNextInternalEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?this.currEntry.getNextEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?currEntry.getNextEntry():newArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returncurrEntry[Delete]null?null:currEntry.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returncurrEntry>>null?null:currEntry.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returncurrEntry!=null?getNextEntry():currEntry.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():newTarArchiveEntry(currEntry.getName());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395Return(currEntry==null)?null:currEntry.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry>=null)?null:currEntry.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returns(currEntry==null)?null:currEntry.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():currEntry.this;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():cache.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():currEntry.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){returngetNextEntry();this.currEntry=getNextEntry();}else{ZipEncodingisnotpublicinorg.apache.commons.compress.archivers.zip;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){returngetNextEntry();this.currEntry=getNextEntry();}else{System.arraycopy(buffer,0,currEntry,0,currEntry.length);}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){returngetNextEntry();getNextEntry();}else{System.arraycopy(currEntry,0,currEntry,0,currEntry.length);}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){returngetNextEntry();getNextEntry();}else{System.arraycopy(currEntry,0,buf,0,currEntry.length);}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():currEntry.getNext();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?null:getNextTarEntry();if(currEntry==null)?null:currEntry.getParent();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?null:getNextTarEntry();if(currEntry==null)?null:currEntry.getValue();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?null:getNextTarEntry();if(currEntry==null)?null:currEntry.getName();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();||(currEntry==null)?currEntry:getNextArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextTarEntry();||(currEntry==null)?currEntry:getNextPathEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395while(currEntry!=null){currEntry=currEntry.getNextEntry();returncurrEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395this.currEntry=currEntry;=currEntry==null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry.getName(),currEntry.getSize());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry.getName(),currEntry.getValue());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(entry==null)?null:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(getNextTarEntry()==null)returnnull;if(currEntry==null)returnnull;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currentTarEntry==null)?null:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry;|(currEntry==null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395Return(currEntry==null)?getNextTarEntry():currEntry;||(currEntry==null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry;||(currEntry==null)?getNextPathEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?getNextTarEntry():currEntry;elseif(currEntry==null)?getNextTarEntry():currEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395Return(currEntry==null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry.getMethod();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(this.currEntry==null)?this.currEntry:getNextArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(this.currEntry==null)?getNextTarEntry():getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?newArchiveEntry():newArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?currEntry:getNextTarEntry();if(currEntry==null){returncurrEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?currEntry:getNextTarEntry();if(currEntry!=null){returncurrEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?currEntry:getNextTarEntry();if(currEntry==null)?currEntry:getNextEntry());}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null||currEntry.getName()!=null){returngetNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null||currEntry.isArchive()){returngetNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(hasHitEOF){returngetNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextArchiveEntry():newTarArchiveEntry(currEntry.getName());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextArchiveEntry():newTarArchiveEntry(currEntry.getValue());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry,file.getValue(),hasHitEOF);
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry,file.toString());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry,file.getPath());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?null:newArchiveEntry(currEntry,file.getValue());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returns(currEntry==null)?null:currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?getNextTarEntry():null;if(currEntry==null){returncurrEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?getNextTarEntry():null;if(currEntry==null){returncurrEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?getNextTarEntry():null;if(currEntry!=null){returncurrEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?getNextTarEntry():null;if(currEntry!=null){returncurrEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)currEntry.data.getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returngetNextTarArchiveEntry(currEntry.getName());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(this.currEntry==null)?null:newArchiveEntry(this.currEntry,currEntry.getValue());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();||(currEntry==null)?null:currEntry.getParent();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextTarEntry();||(currEntry==null)?null:currEntry.getKey();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(getNextEntry()!=null){if(!hasHitEOF){thrownewIllegalArgumentException("".);}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?newArchiveEntry():getNextArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?getNextTarEntry():null;if(currEntry!=null){this.currEntry=currEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?getNextTarEntry():null;if(currEntry==null){this.currEntry=currEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextEntry();(currEntry==null)?null:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returncurrEntry!=null?currEntry.getNextEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returncurrEntry==null?newTarArchiveEntry(currEntry):currEntry.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returncurrEntry==null?getNextEntry():currEntry.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returncurrEntry!=null?currEntry.getNextEntry():newTarArchiveEntry(currEntry.getValue());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returncurrEntry!=null?currEntry.getNextEntry():newTarArchiveEntry(currEntry.getKey());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():newTarArchiveEntry(currEntry.getValue()+1);
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(hasHitEOF){returncurrEntry==null?getNextTarEntry():null;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?getNextTarEntry():null;if(currEntry==null)?getNextNextEntry():null;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?getNextTarEntry():null;if(currEntry==null)?getNextNextEntry():null;}else{return(currEntry==null)?getNextNextEntry():null;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?getNextTarEntry():null;else{return(currEntry==null)?getNextTarEntry():null;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():currEntry.getRawValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():currEntry.clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)resource.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?this.currEntry:getNextTarEntry();if(currEntry==null)?this.currEntry:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?this.currEntry:getNextTarEntry();newTarArchiveEntry(currEntry==null)?this.currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){currEntry=getNextEntry();if(currEntry!=null){returncurrEntry.getValue();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(!hasHitEOF){returngetNextEntry();if(currEntry==null){currEntry=getNextEntry();if(currEntry!=null){returncurrEntry.get
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){currEntry=getNextEntry();if(currEntry!=null){returncurrEntry.getValue();}}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){currEntry=getNextEntry();if(currEntry!=null){returncurrEntry.getKey();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry.getNextTarEntry():newArchiveEntry<K,V>();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?newArchiveEntry<K,V>():newArchiveEntry<K,V>();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextRecordEntry():newArchiveEntry<K,V>();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry.getNextInternalEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getValuePosition();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?currEntry:getNextTarEntry();if(currEntry!=null)?currEntry:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?currEntry:getNextTarEntry();if(currEntry!=null)?currEntry:getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():getNextEntry();(currEntry!=null)?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?currEntry:getNextTarEntry();if(currEntry==null)?currEntry:getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395this.currEntry=currEntry;(currEntry==null)?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?getNextTarEntry():currEntry;if(currEntry==null){returncurrEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?getNextTarEntry():currEntry;if(currEntry!=null){returncurrEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?getNextTarEntry():currEntry;if(currEntry==null)returnnull;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){currEntry=getNextEntry();if(currEntry!=null){returncurrEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(!hasHitEOF){returngetNextEntry();if(currEntry!=null){returncurrEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getNextTarEntry();(currEntry==null)?null:getNextTarEntry());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)getNextEntry();if(getNextEntry()!=null){return(TarArchiveEntry)getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)getNextEntry();if(getNextEntry()!=null){return(TarArchiveEntry)getNextEntry();}else{return(TarArchiveEntry)getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)getNextEntry();if(getNextEntry()==null){return(TarArchiveEntry)getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)getNextEntry();if(getNextEntry()==null){return(TarArchiveEntry)getNextEntry();}else{return(TarArchiveEntry)getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)getNextEntry();return(TarArchiveEntry)getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){currEntry=getNextEntry();if(currEntry!=null){returncurrEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(!hasHitEOF){returngetNextEntry();currEntry=getNextEntry();if(currEntry!=null){returncurrEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry!=null){returncurrEntry?getNextTarEntry():currEntry;this.currEntry=(currEntry==null)?getNextTarEntry():currEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry!=null){returncurrEntry?getNextTarEntry():currEntry;}else{this.currEntry=(currEntry==null)?getNextTarEntry():currEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry!=null){returncurrEntry.getNextTarEntry();}else{this.currEntry=(currEntry==null)?getNextTarEntry():currEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;|(currEntry==null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry;||(currEntry==null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?null:getNextTarEntry();else{return(currEntry==null)?null:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)returnnull;if(currEntry==null)?null:getNextTarEntry();else{return(currEntry==null)?null:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?null:getNextTarEntry();if(currEntry==null)?null:getNextTarEntry();else{return(currEntry==null)?null:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?null:getNextTarEntry();if(currEntry==null)?null:getNextEntry();else{return(currEntry==null)?null:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry!=null)?getNextTarEntry():currEntry;if(currEntry!=null)?getNextTarEntry():currEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?null:newArchiveEntry(currEntry.getValue()+1);
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?this.getNextTarEntry():null;this.currEntry=currEntry.getNextTar();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395Return(currEntry==null)?getNextTarEntry():null;this.currEntry=currEntry.getNextTar();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextEntry();if(currEntry==null)?currEntry:getNextEntry();elsereturn(currEntry==null)?currEntry:getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextEntry();if(currEntry==null)?currEntry:getNextEntry();if(currEntry!=null){return(currEntry==null)?currEntry:getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextEntry();if(currEntry==null)?currEntry:getNextEntry();}else{return(currEntry==null)?currEntry:getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextEntry();if(currEntry==null)?currEntry:getNextEntry();else{return(currEntry==null)?currEntry:getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null||hasHitEOF){returngetNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395this.currEntry=currEntry;(currEntry==null)?getNextTarEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?newTarArchiveEntry(currEntry.getName()):getNextSkipEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getHeaderSize();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395while(currEntry!=null){currEntry=currEntry.getNext();if(currEntry==null)?getNextTarEntry():null;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getNextRecordSkip();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry.getRawValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry.clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?getNextTarEntry():getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextArchiveEntry();if(currEntry==null)?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry!=null){returncurrEntry?getNextTarEntry():getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)returnnull;if(currEntry!=getNextTarEntry()){returncurrEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)this.currEntry.data.getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():null;currEntry==null)?getNextArchiveEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():newArchiveEntry(currEntry.getValue());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():newTarArchiveEntry(currEntry.getValue());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returnthis.currEntry;if(this.currEntry!=null){for(inti=0;i<this.currEntry.size();++i){TarBufferbuffer=(TarBuffer)this.currEntry.getValue();if(buffer.length>entry
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returnthis.currEntry;if(this.currEntry!=null){for(inti=0;i<this.currEntry.size();++i){TarBufferbuffer=(TarBuffer)this.currEntry.getValue();if(
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returnthis.currEntry;if(this.currEntry!=null){for(TarArchiveEntrycurrEntry:this.currEntry.getKey()){returncurrEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returnthis.currEntry;if(this.currEntry!=null){for(inti=0;i<this.currEntry.size();++i){TarBufferbuffer=(TarBuffer)this.currEntry.getValue();if(buffer.
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returnthis.currEntry;if(this.currEntry!=null){for(inti=0;i<this.currEntry.size();++i){TarBufferbuffer=(TarBuffer)this.currEntry.getValue();if(buffer.length>entrySize
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(!hasHitEOF){returngetNextEntry();getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null||hasHitEOF){returngetNextEntry();getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:builder.getNextEntry().getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:str.getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextEntry();if(currEntry==null)?null:getNextEntry();elsereturn(currEntry==null)?null:getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextEntry();if(currEntry==null)?null:getNextEntry();}else{return(currEntry==null)?null:getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextEntry();if(currEntry==null)?null:getNextEntry();else{return(currEntry==null)?null:getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextEntry();if(currEntry==null)?null:getNextEntry();return(currEntry==null)?null:getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextEntry();this.currEntry=(currEntry==null)?null:getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?this.getNextTarEntry():newArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextRecordEntry():newArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(!hasHitEOF){returncurrEntry.getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395this.currEntry=(currEntry==null)?null:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?null:getNextTarEntry();elsereturn(currEntry==null)?null:getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?null:getNextTarEntry();elsereturn(currEntry==null)?null:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?null:getNextTarEntry();if(currEntry==null)?null:getNextEntry();elsereturn(currEntry==null)?null:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry,currEntry.next());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newArchiveEntry(currEntry,currEntry.getRawValue());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():null;if(currEntry==null)?getNextEntry():null;}else{return(currEntry==null)?getNextEntry():null;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():null;if(currEntry==null)?getNextEntry():null;elsereturn(currEntry==null)?getNextEntry():null;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():null;if(currEntry==null)?getNextEntry():null;else{return(currEntry==null)?getNextEntry():null;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?getNextTarEntry():null;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(ArchiveEntry)super.clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():currEntry.getRawParent();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?null:getNextTarEntry();if(currEntry==null)?null:getNextTarEntry();returncurrEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?null:getNextTarEntry();if(currEntry==null)?null:getNextTarEntry();return(currEntry==null)?null:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?null:getNextTarEntry();if(currEntry==null)?null:currEntry.getValue();return(currEntry==null)?null:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?this.getNextTarEntry():null;this.currEntry=currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395Return(currEntry==null)?getNextTarEntry():null;this.currEntry=currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?newTarArchiveEntry(currEntry.getNextEntry()):null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry!=null)?currEntry.getNextEntry():newTarArchiveEntry(currEntry.getValue());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:getNextInternalEntry().getParent();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():currEntry;if(currEntry==null)?getNextEntry():currEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():currEntry;this.currEntry=(currEntry==null)?getNextEntry():currEntry;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextTarEntry():currEntry.getPassword();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?getNextTarEntry():null;elsereturn(currEntry==null)?getNextTarEntry():null;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(getNextTarEntry()==null)returnnull;if(currEntry==null)?getNextTarEntry():null;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry.getNextEntry():newTarArchiveEntry(currEntry.getValue());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry.getNextEntry():newArchiveEntry(currEntry.getValue());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry!=null)?getNextTarEntry():null;if(currEntry!=null)?getNextTarEntry():null;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry!=null)?getNextTarEntry():null;if(currEntry!=null)?getNextTarEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?null:getNextTarEntry();if(currEntry!=null)?null:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getNextTarEntry();(currEntry!=null)?null:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextRealEntry():getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395while(currEntry!=null){currEntry=currEntry.getNextTarEntry();if(currEntry==null)?getNextTarEntry():currEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(hasHitEOF){returngetNextEntry();this.currEntry=getNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(hasHitEOF){returngetNextEntry();this.currEntry=getNextEntry();}else{ZipEncodingisnotpublicinorg.apache.commons.compress.archivers.zip;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){returngetNextEntry();this.currEntry=getNextEntry();}else{thrownewIllegalStateException("");}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry:getNextArchiveEntry();currEntry==null)?currEntry:getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?currEntry:getNextTarEntry();if(currEntry==null)?currEntry:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){returnnewArchiveEntry(currEntry.getNextEntry());}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){returncurrEntry.nextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():getNextInternalEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?null:getNextTarEntry();if(currEntry==null)?null:getNextArchiveEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?currEntry:getNextTarEntry();if(currEntry==null)?currEntry:getNextArchiveEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?currEntry.getNextTarEntry():newTarArchiveEntry<K,V>();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?newTarArchiveEntry<K,V>():newTarArchiveEntry<K,V>();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextRealEntry():newTarArchiveEntry<K,V>();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returncurrEntry!=null?currEntry.getNextArchiveEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returncurrEntry==null?newTarArchiveEntry(currEntry):currEntry.getNextArchiveEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returncurrEntry!=null?currEntry.getNextArchiveEntry():newTarArchiveEntry(currEntry.getValue());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)currEntry.data.getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?lastEntry:getNextTarEntry();this.currEntry=currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?newTarArchiveEntry():getNextTarEntry();this.currEntry=currEntry.getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newTarArchiveEntry(getNextArchiveEntry());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395newTarArchiveEntry(currEntry==null)?getNextTarEntry():getNextEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?newTarArchiveEntry(currEntry):getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:newTarArchiveEntry(getNextPosition());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:builder.getNextPosition();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returnthis.currEntry!=null?this.currEntry.getNextEntry():null;
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(TarArchiveEntry)this.creatorEntry.clone();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395Return(currEntry==null)?null:newArchiveEntry(currEntry.getKey());
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry!=null){if(!hasHitEOF){returngetNextEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395returncurrEntry.getNextEntry().getValue();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?null:currEntry.getNextRealSkipEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():getNextTarEntry();if(currEntry==null)?getNextEntry():getNextTarEntry();}else{return(currEntry==null)?getNextEntry():getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():getNextTarEntry();if(currEntry==null)?getNextEntry():getNextTarEntry();elsereturn(currEntry==null)?getNextEntry():getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395return(currEntry==null)?getNextEntry():getNextTarEntry();if(currEntry==null)?getNextEntry():getNextTarEntry();else{return(currEntry==null)?getNextEntry():getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry!=null){returncurrEntry?getNextTarEntry():getNextEntry();this.currEntry=(currEntry==null)?currEntry:getNextTarEntry();}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null)?null:getNextTarEntry();finalTarArchiveEntrycurrEntry=getNextTarEntry();
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){currEntry=getNextEntry();if(currEntry==null){returncurrEntry;}
projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java395if(currEntry==null){currEntry=getNextEntry();if(currEntry==null||currEntry!=null){returncurrEntry;}
